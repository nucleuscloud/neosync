// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/connection_data.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb.js";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file mgmt/v1alpha1/connection_data.proto.
 */
export const file_mgmt_v1alpha1_connection_data: GenFile = /*@__PURE__*/
  fileDesc("", [file_buf_validate_validate, file_google_protobuf_struct]);

/**
 * @generated from message mgmt.v1alpha1.PostgresStreamConfig
 */
export type PostgresStreamConfig = Message<"mgmt.v1alpha1.PostgresStreamConfig"> & {
};

/**
 * Describes the message mgmt.v1alpha1.PostgresStreamConfig.
 * Use `create(PostgresStreamConfigSchema)` to create a new message.
 */
export const PostgresStreamConfigSchema: GenMessage<PostgresStreamConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 0);

/**
 * @generated from message mgmt.v1alpha1.MysqlStreamConfig
 */
export type MysqlStreamConfig = Message<"mgmt.v1alpha1.MysqlStreamConfig"> & {
};

/**
 * Describes the message mgmt.v1alpha1.MysqlStreamConfig.
 * Use `create(MysqlStreamConfigSchema)` to create a new message.
 */
export const MysqlStreamConfigSchema: GenMessage<MysqlStreamConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 1);

/**
 * @generated from message mgmt.v1alpha1.AwsDynamoDBStreamConfig
 */
export type AwsDynamoDBStreamConfig = Message<"mgmt.v1alpha1.AwsDynamoDBStreamConfig"> & {
};

/**
 * Describes the message mgmt.v1alpha1.AwsDynamoDBStreamConfig.
 * Use `create(AwsDynamoDBStreamConfigSchema)` to create a new message.
 */
export const AwsDynamoDBStreamConfigSchema: GenMessage<AwsDynamoDBStreamConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 2);

/**
 * @generated from message mgmt.v1alpha1.AwsS3StreamConfig
 */
export type AwsS3StreamConfig = Message<"mgmt.v1alpha1.AwsS3StreamConfig"> & {
  /**
   * @generated from oneof mgmt.v1alpha1.AwsS3StreamConfig.id
   */
  id: {
    /**
     * The unique identifier of the job to get the data stream for.
     *
     * @generated from field: string job_id = 1;
     */
    value: string;
    case: "jobId";
  } | {
    /**
     * The unique identifier of the job run to get the data stream for.
     *
     * @generated from field: string job_run_id = 2;
     */
    value: string;
    case: "jobRunId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message mgmt.v1alpha1.AwsS3StreamConfig.
 * Use `create(AwsS3StreamConfigSchema)` to create a new message.
 */
export const AwsS3StreamConfigSchema: GenMessage<AwsS3StreamConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 3);

/**
 * @generated from message mgmt.v1alpha1.GcpCloudStorageStreamConfig
 */
export type GcpCloudStorageStreamConfig = Message<"mgmt.v1alpha1.GcpCloudStorageStreamConfig"> & {
  /**
   * @generated from oneof mgmt.v1alpha1.GcpCloudStorageStreamConfig.id
   */
  id: {
    /**
     * The unique identifier of the job to get the data stream for.
     *
     * @generated from field: string job_id = 1;
     */
    value: string;
    case: "jobId";
  } | {
    /**
     * The unique identifier of the job run to get the data stream for.
     *
     * @generated from field: string job_run_id = 2;
     */
    value: string;
    case: "jobRunId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message mgmt.v1alpha1.GcpCloudStorageStreamConfig.
 * Use `create(GcpCloudStorageStreamConfigSchema)` to create a new message.
 */
export const GcpCloudStorageStreamConfigSchema: GenMessage<GcpCloudStorageStreamConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 4);

/**
 * @generated from message mgmt.v1alpha1.ConnectionStreamConfig
 */
export type ConnectionStreamConfig = Message<"mgmt.v1alpha1.ConnectionStreamConfig"> & {
  /**
   * @generated from oneof mgmt.v1alpha1.ConnectionStreamConfig.config
   */
  config: {
    /**
     * @generated from field: mgmt.v1alpha1.PostgresStreamConfig pg_config = 1;
     */
    value: PostgresStreamConfig;
    case: "pgConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.AwsS3StreamConfig aws_s3_config = 2;
     */
    value: AwsS3StreamConfig;
    case: "awsS3Config";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.MysqlStreamConfig mysql_config = 3;
     */
    value: MysqlStreamConfig;
    case: "mysqlConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.GcpCloudStorageStreamConfig gcp_cloudstorage_config = 4;
     */
    value: GcpCloudStorageStreamConfig;
    case: "gcpCloudstorageConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.AwsDynamoDBStreamConfig dynamodb_config = 5;
     */
    value: AwsDynamoDBStreamConfig;
    case: "dynamodbConfig";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message mgmt.v1alpha1.ConnectionStreamConfig.
 * Use `create(ConnectionStreamConfigSchema)` to create a new message.
 */
export const ConnectionStreamConfigSchema: GenMessage<ConnectionStreamConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 5);

/**
 * @generated from message mgmt.v1alpha1.GetConnectionDataStreamRequest
 */
export type GetConnectionDataStreamRequest = Message<"mgmt.v1alpha1.GetConnectionDataStreamRequest"> & {
  /**
   * The unique identifier of the connection to get the data stream for.
   *
   * @generated from field: string connection_id = 1;
   */
  connectionId: string;

  /**
   * The stream configuration to use for the data stream.
   *
   * @generated from field: mgmt.v1alpha1.ConnectionStreamConfig stream_config = 2;
   */
  streamConfig?: ConnectionStreamConfig;

  /**
   * The schema of the table to get the data stream for.
   *
   * @generated from field: string schema = 3;
   */
  schema: string;

  /**
   * The table to get the data stream for.
   *
   * @generated from field: string table = 4;
   */
  table: string;
};

/**
 * Describes the message mgmt.v1alpha1.GetConnectionDataStreamRequest.
 * Use `create(GetConnectionDataStreamRequestSchema)` to create a new message.
 */
export const GetConnectionDataStreamRequestSchema: GenMessage<GetConnectionDataStreamRequest> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 6);

/**
 * Each stream response is a single row in the requested schema and table
 *
 * @generated from message mgmt.v1alpha1.GetConnectionDataStreamResponse
 */
export type GetConnectionDataStreamResponse = Message<"mgmt.v1alpha1.GetConnectionDataStreamResponse"> & {
  /**
   * A map of column name to column value, where the value is serialized as bytes. The value represents a map[string]any structure.
   *
   * @generated from field: bytes row_bytes = 2;
   */
  rowBytes: Uint8Array;
};

/**
 * Describes the message mgmt.v1alpha1.GetConnectionDataStreamResponse.
 * Use `create(GetConnectionDataStreamResponseSchema)` to create a new message.
 */
export const GetConnectionDataStreamResponseSchema: GenMessage<GetConnectionDataStreamResponse> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 7);

/**
 * @generated from message mgmt.v1alpha1.PostgresSchemaConfig
 */
export type PostgresSchemaConfig = Message<"mgmt.v1alpha1.PostgresSchemaConfig"> & {
};

/**
 * Describes the message mgmt.v1alpha1.PostgresSchemaConfig.
 * Use `create(PostgresSchemaConfigSchema)` to create a new message.
 */
export const PostgresSchemaConfigSchema: GenMessage<PostgresSchemaConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 8);

/**
 * @generated from message mgmt.v1alpha1.MysqlSchemaConfig
 */
export type MysqlSchemaConfig = Message<"mgmt.v1alpha1.MysqlSchemaConfig"> & {
};

/**
 * Describes the message mgmt.v1alpha1.MysqlSchemaConfig.
 * Use `create(MysqlSchemaConfigSchema)` to create a new message.
 */
export const MysqlSchemaConfigSchema: GenMessage<MysqlSchemaConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 9);

/**
 * @generated from message mgmt.v1alpha1.MssqlSchemaConfig
 */
export type MssqlSchemaConfig = Message<"mgmt.v1alpha1.MssqlSchemaConfig"> & {
};

/**
 * Describes the message mgmt.v1alpha1.MssqlSchemaConfig.
 * Use `create(MssqlSchemaConfigSchema)` to create a new message.
 */
export const MssqlSchemaConfigSchema: GenMessage<MssqlSchemaConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 10);

/**
 * @generated from message mgmt.v1alpha1.AwsS3SchemaConfig
 */
export type AwsS3SchemaConfig = Message<"mgmt.v1alpha1.AwsS3SchemaConfig"> & {
  /**
   * @generated from oneof mgmt.v1alpha1.AwsS3SchemaConfig.id
   */
  id: {
    /**
     * The unique identifier of the job to get the schema for.
     *
     * @generated from field: string job_id = 1;
     */
    value: string;
    case: "jobId";
  } | {
    /**
     * The unique identifier of the job run to get the schema for.
     *
     * @generated from field: string job_run_id = 2;
     */
    value: string;
    case: "jobRunId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message mgmt.v1alpha1.AwsS3SchemaConfig.
 * Use `create(AwsS3SchemaConfigSchema)` to create a new message.
 */
export const AwsS3SchemaConfigSchema: GenMessage<AwsS3SchemaConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 11);

/**
 * @generated from message mgmt.v1alpha1.MongoSchemaConfig
 */
export type MongoSchemaConfig = Message<"mgmt.v1alpha1.MongoSchemaConfig"> & {
};

/**
 * Describes the message mgmt.v1alpha1.MongoSchemaConfig.
 * Use `create(MongoSchemaConfigSchema)` to create a new message.
 */
export const MongoSchemaConfigSchema: GenMessage<MongoSchemaConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 12);

/**
 * @generated from message mgmt.v1alpha1.DynamoDBSchemaConfig
 */
export type DynamoDBSchemaConfig = Message<"mgmt.v1alpha1.DynamoDBSchemaConfig"> & {
};

/**
 * Describes the message mgmt.v1alpha1.DynamoDBSchemaConfig.
 * Use `create(DynamoDBSchemaConfigSchema)` to create a new message.
 */
export const DynamoDBSchemaConfigSchema: GenMessage<DynamoDBSchemaConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 13);

/**
 * @generated from message mgmt.v1alpha1.GcpCloudStorageSchemaConfig
 */
export type GcpCloudStorageSchemaConfig = Message<"mgmt.v1alpha1.GcpCloudStorageSchemaConfig"> & {
  /**
   * @generated from oneof mgmt.v1alpha1.GcpCloudStorageSchemaConfig.id
   */
  id: {
    /**
     * The unique identifier of the job to get the schema for.
     *
     * @generated from field: string job_id = 1;
     */
    value: string;
    case: "jobId";
  } | {
    /**
     * The unique identifier of the job run to get the schema for.
     *
     * @generated from field: string job_run_id = 2;
     */
    value: string;
    case: "jobRunId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message mgmt.v1alpha1.GcpCloudStorageSchemaConfig.
 * Use `create(GcpCloudStorageSchemaConfigSchema)` to create a new message.
 */
export const GcpCloudStorageSchemaConfigSchema: GenMessage<GcpCloudStorageSchemaConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 14);

/**
 * @generated from message mgmt.v1alpha1.ConnectionSchemaConfig
 */
export type ConnectionSchemaConfig = Message<"mgmt.v1alpha1.ConnectionSchemaConfig"> & {
  /**
   * @generated from oneof mgmt.v1alpha1.ConnectionSchemaConfig.config
   */
  config: {
    /**
     * @generated from field: mgmt.v1alpha1.PostgresSchemaConfig pg_config = 1;
     */
    value: PostgresSchemaConfig;
    case: "pgConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.AwsS3SchemaConfig aws_s3_config = 2;
     */
    value: AwsS3SchemaConfig;
    case: "awsS3Config";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.MysqlSchemaConfig mysql_config = 3;
     */
    value: MysqlSchemaConfig;
    case: "mysqlConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.MongoSchemaConfig mongo_config = 4;
     */
    value: MongoSchemaConfig;
    case: "mongoConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.GcpCloudStorageSchemaConfig gcp_cloudstorage_config = 5;
     */
    value: GcpCloudStorageSchemaConfig;
    case: "gcpCloudstorageConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.DynamoDBSchemaConfig dynamodb_config = 6;
     */
    value: DynamoDBSchemaConfig;
    case: "dynamodbConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.MssqlSchemaConfig mssql_config = 7;
     */
    value: MssqlSchemaConfig;
    case: "mssqlConfig";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message mgmt.v1alpha1.ConnectionSchemaConfig.
 * Use `create(ConnectionSchemaConfigSchema)` to create a new message.
 */
export const ConnectionSchemaConfigSchema: GenMessage<ConnectionSchemaConfig> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 15);

/**
 * @generated from message mgmt.v1alpha1.DatabaseColumn
 */
export type DatabaseColumn = Message<"mgmt.v1alpha1.DatabaseColumn"> & {
  /**
   * The database schema. Ex: public
   *
   * @generated from field: string schema = 1;
   */
  schema: string;

  /**
   * The name of the table in the schema
   *
   * @generated from field: string table = 2;
   */
  table: string;

  /**
   * The name of the column
   *
   * @generated from field: string column = 3;
   */
  column: string;

  /**
   * The datatype of the column
   *
   * @generated from field: string data_type = 4;
   */
  dataType: string;

  /**
   * The isNullable Flag of the column
   *
   * @generated from field: string is_nullable = 5;
   */
  isNullable: string;

  /**
   * The default value of the column if available
   *
   * @generated from field: optional string column_default = 6;
   */
  columnDefault?: string;

  /**
   * Populated if the column is generated. The value is the type of generated column it is. For example, postgres is 's' for stored
   * May be other values in the future, or other DB providers may use a different value types.
   *
   * @generated from field: optional string generated_type = 7;
   */
  generatedType?: string;

  /**
   * Populated if the column is an identity. The value is the type of the identity column it is. For example, postgres is 'd' for generated by default, or 'a' for generated always.
   *
   * @generated from field: optional string identity_generation = 8;
   */
  identityGeneration?: string;
};

/**
 * Describes the message mgmt.v1alpha1.DatabaseColumn.
 * Use `create(DatabaseColumnSchema)` to create a new message.
 */
export const DatabaseColumnSchema: GenMessage<DatabaseColumn> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 16);

/**
 * @generated from message mgmt.v1alpha1.GetConnectionSchemaRequest
 */
export type GetConnectionSchemaRequest = Message<"mgmt.v1alpha1.GetConnectionSchemaRequest"> & {
  /**
   * The unique identifier of the connection to get the schema for.
   *
   * @generated from field: string connection_id = 1;
   */
  connectionId: string;

  /**
   * The schema configuration to use for the schema map.
   *
   * @generated from field: mgmt.v1alpha1.ConnectionSchemaConfig schema_config = 2;
   */
  schemaConfig?: ConnectionSchemaConfig;
};

/**
 * Describes the message mgmt.v1alpha1.GetConnectionSchemaRequest.
 * Use `create(GetConnectionSchemaRequestSchema)` to create a new message.
 */
export const GetConnectionSchemaRequestSchema: GenMessage<GetConnectionSchemaRequest> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 17);

/**
 * @generated from message mgmt.v1alpha1.GetConnectionSchemaResponse
 */
export type GetConnectionSchemaResponse = Message<"mgmt.v1alpha1.GetConnectionSchemaResponse"> & {
  /**
   * The list of database columns
   *
   * @generated from field: repeated mgmt.v1alpha1.DatabaseColumn schemas = 1;
   */
  schemas: DatabaseColumn[];
};

/**
 * Describes the message mgmt.v1alpha1.GetConnectionSchemaResponse.
 * Use `create(GetConnectionSchemaResponseSchema)` to create a new message.
 */
export const GetConnectionSchemaResponseSchema: GenMessage<GetConnectionSchemaResponse> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 18);

/**
 * @generated from message mgmt.v1alpha1.GetConnectionSchemaMapRequest
 */
export type GetConnectionSchemaMapRequest = Message<"mgmt.v1alpha1.GetConnectionSchemaMapRequest"> & {
  /**
   * The unique identifier of the connection to get the schema map for.
   *
   * @generated from field: string connection_id = 1;
   */
  connectionId: string;

  /**
   * The schema configuration to use for the schema map.
   *
   * @generated from field: mgmt.v1alpha1.ConnectionSchemaConfig schema_config = 2;
   */
  schemaConfig?: ConnectionSchemaConfig;
};

/**
 * Describes the message mgmt.v1alpha1.GetConnectionSchemaMapRequest.
 * Use `create(GetConnectionSchemaMapRequestSchema)` to create a new message.
 */
export const GetConnectionSchemaMapRequestSchema: GenMessage<GetConnectionSchemaMapRequest> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 19);

/**
 * @generated from message mgmt.v1alpha1.GetConnectionSchemaMapResponse
 */
export type GetConnectionSchemaMapResponse = Message<"mgmt.v1alpha1.GetConnectionSchemaMapResponse"> & {
  /**
   * Returns the database columns separated by the fully qualified <schema>.<table>
   *
   * @generated from field: map<string, mgmt.v1alpha1.GetConnectionSchemaResponse> schema_map = 1;
   */
  schemaMap: { [key: string]: GetConnectionSchemaResponse };
};

/**
 * Describes the message mgmt.v1alpha1.GetConnectionSchemaMapResponse.
 * Use `create(GetConnectionSchemaMapResponseSchema)` to create a new message.
 */
export const GetConnectionSchemaMapResponseSchema: GenMessage<GetConnectionSchemaMapResponse> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 20);

/**
 * @generated from message mgmt.v1alpha1.GetConnectionSchemaMapsRequest
 */
export type GetConnectionSchemaMapsRequest = Message<"mgmt.v1alpha1.GetConnectionSchemaMapsRequest"> & {
  /**
   * List of connection schema maps to request
   *
   * @generated from field: repeated mgmt.v1alpha1.GetConnectionSchemaMapRequest requests = 1;
   */
  requests: GetConnectionSchemaMapRequest[];
};

/**
 * Describes the message mgmt.v1alpha1.GetConnectionSchemaMapsRequest.
 * Use `create(GetConnectionSchemaMapsRequestSchema)` to create a new message.
 */
export const GetConnectionSchemaMapsRequestSchema: GenMessage<GetConnectionSchemaMapsRequest> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 21);

/**
 * @generated from message mgmt.v1alpha1.GetConnectionSchemaMapsResponse
 */
export type GetConnectionSchemaMapsResponse = Message<"mgmt.v1alpha1.GetConnectionSchemaMapsResponse"> & {
  /**
   * List of responses in the same order as the input
   *
   * @generated from field: repeated mgmt.v1alpha1.GetConnectionSchemaMapResponse responses = 1;
   */
  responses: GetConnectionSchemaMapResponse[];

  /**
   * Parallel array of each connection id that matches with the response
   *
   * @generated from field: repeated string connection_ids = 2;
   */
  connectionIds: string[];
};

/**
 * Describes the message mgmt.v1alpha1.GetConnectionSchemaMapsResponse.
 * Use `create(GetConnectionSchemaMapsResponseSchema)` to create a new message.
 */
export const GetConnectionSchemaMapsResponseSchema: GenMessage<GetConnectionSchemaMapsResponse> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 22);

/**
 * @generated from message mgmt.v1alpha1.ForeignKey
 */
export type ForeignKey = Message<"mgmt.v1alpha1.ForeignKey"> & {
  /**
   * The table that the foreign key is associated with
   *
   * @generated from field: string table = 1;
   */
  table: string;

  /**
   * The columns that are part of the foreign key
   *
   * @generated from field: repeated string columns = 3;
   */
  columns: string[];
};

/**
 * Describes the message mgmt.v1alpha1.ForeignKey.
 * Use `create(ForeignKeySchema)` to create a new message.
 */
export const ForeignKeySchema: GenMessage<ForeignKey> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 23);

/**
 * @generated from message mgmt.v1alpha1.ForeignConstraint
 */
export type ForeignConstraint = Message<"mgmt.v1alpha1.ForeignConstraint"> & {
  /**
   * The foreign key that is associated with the constraint
   *
   * @generated from field: mgmt.v1alpha1.ForeignKey foreign_key = 3;
   */
  foreignKey?: ForeignKey;

  /**
   * The columns that are part of the constraint
   *
   * @generated from field: repeated string columns = 4;
   */
  columns: string[];

  /**
   * The not nullable flag for each column
   *
   * @generated from field: repeated bool not_nullable = 5;
   */
  notNullable: boolean[];
};

/**
 * Describes the message mgmt.v1alpha1.ForeignConstraint.
 * Use `create(ForeignConstraintSchema)` to create a new message.
 */
export const ForeignConstraintSchema: GenMessage<ForeignConstraint> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 24);

/**
 * @generated from message mgmt.v1alpha1.ForeignConstraintTables
 */
export type ForeignConstraintTables = Message<"mgmt.v1alpha1.ForeignConstraintTables"> & {
  /**
   * A list of foreign key constraints
   *
   * @generated from field: repeated mgmt.v1alpha1.ForeignConstraint constraints = 1;
   */
  constraints: ForeignConstraint[];
};

/**
 * Describes the message mgmt.v1alpha1.ForeignConstraintTables.
 * Use `create(ForeignConstraintTablesSchema)` to create a new message.
 */
export const ForeignConstraintTablesSchema: GenMessage<ForeignConstraintTables> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 25);

/**
 * @generated from message mgmt.v1alpha1.InitStatementOptions
 */
export type InitStatementOptions = Message<"mgmt.v1alpha1.InitStatementOptions"> & {
  /**
   * Whether or not to generate schema init statements.
   *
   * @generated from field: bool init_schema = 1;
   */
  initSchema: boolean;

  /**
   * Whether or not to generate truncation statements
   *
   * @generated from field: bool truncate_before_insert = 2;
   */
  truncateBeforeInsert: boolean;

  /**
   * Whether or not to generate truncate cascade statements.
   *
   * @generated from field: bool truncate_cascade = 3;
   */
  truncateCascade: boolean;
};

/**
 * Describes the message mgmt.v1alpha1.InitStatementOptions.
 * Use `create(InitStatementOptionsSchema)` to create a new message.
 */
export const InitStatementOptionsSchema: GenMessage<InitStatementOptions> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 26);

/**
 * @generated from message mgmt.v1alpha1.GetConnectionInitStatementsRequest
 */
export type GetConnectionInitStatementsRequest = Message<"mgmt.v1alpha1.GetConnectionInitStatementsRequest"> & {
  /**
   * The unique identifier of the connection to get the init statements for.
   *
   * @generated from field: string connection_id = 1;
   */
  connectionId: string;

  /**
   * The options to use for the init statements.
   *
   * @generated from field: mgmt.v1alpha1.InitStatementOptions options = 2;
   */
  options?: InitStatementOptions;
};

/**
 * Describes the message mgmt.v1alpha1.GetConnectionInitStatementsRequest.
 * Use `create(GetConnectionInitStatementsRequestSchema)` to create a new message.
 */
export const GetConnectionInitStatementsRequestSchema: GenMessage<GetConnectionInitStatementsRequest> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 27);

/**
 * @generated from message mgmt.v1alpha1.SchemaInitStatements
 */
export type SchemaInitStatements = Message<"mgmt.v1alpha1.SchemaInitStatements"> & {
  /**
   * A friendly label associated with the generated schema init statement(s)
   *
   * @generated from field: string label = 1;
   */
  label: string;

  /**
   * A list of SQL statements that may be used to initialize a database from scratch.
   *
   * @generated from field: repeated string statements = 2;
   */
  statements: string[];
};

/**
 * Describes the message mgmt.v1alpha1.SchemaInitStatements.
 * Use `create(SchemaInitStatementsSchema)` to create a new message.
 */
export const SchemaInitStatementsSchema: GenMessage<SchemaInitStatements> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 28);

/**
 * Init statement for a specific table
 *
 * @generated from message mgmt.v1alpha1.GetConnectionInitStatementsResponse
 */
export type GetConnectionInitStatementsResponse = Message<"mgmt.v1alpha1.GetConnectionInitStatementsResponse"> & {
  /**
   * @deprecated - Use schema_init_statements instead
   *
   * @generated from field: map<string, string> table_init_statements = 1 [deprecated = true];
   * @deprecated
   */
  tableInitStatements: { [key: string]: string };

  /**
   * The key here is <schema>.<table> and value is the table truncate statement.
   *
   * @generated from field: map<string, string> table_truncate_statements = 2;
   */
  tableTruncateStatements: { [key: string]: string };

  /**
   * A list of schema initialization statements
   *
   * @generated from field: repeated mgmt.v1alpha1.SchemaInitStatements schema_init_statements = 3;
   */
  schemaInitStatements: SchemaInitStatements[];
};

/**
 * Describes the message mgmt.v1alpha1.GetConnectionInitStatementsResponse.
 * Use `create(GetConnectionInitStatementsResponseSchema)` to create a new message.
 */
export const GetConnectionInitStatementsResponseSchema: GenMessage<GetConnectionInitStatementsResponse> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 29);

/**
 * @generated from message mgmt.v1alpha1.PrimaryConstraint
 */
export type PrimaryConstraint = Message<"mgmt.v1alpha1.PrimaryConstraint"> & {
  /**
   * The columns that are part of the primary constraint
   *
   * @generated from field: repeated string columns = 1;
   */
  columns: string[];
};

/**
 * Describes the message mgmt.v1alpha1.PrimaryConstraint.
 * Use `create(PrimaryConstraintSchema)` to create a new message.
 */
export const PrimaryConstraintSchema: GenMessage<PrimaryConstraint> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 30);

/**
 * @generated from message mgmt.v1alpha1.UniqueConstraint
 */
export type UniqueConstraint = Message<"mgmt.v1alpha1.UniqueConstraint"> & {
  /**
   * The columns that are part of the unique constraint
   *
   * @generated from field: repeated string columns = 1;
   */
  columns: string[];
};

/**
 * Describes the message mgmt.v1alpha1.UniqueConstraint.
 * Use `create(UniqueConstraintSchema)` to create a new message.
 */
export const UniqueConstraintSchema: GenMessage<UniqueConstraint> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 31);

/**
 * @generated from message mgmt.v1alpha1.GetAiGeneratedDataRequest
 */
export type GetAiGeneratedDataRequest = Message<"mgmt.v1alpha1.GetAiGeneratedDataRequest"> & {
  /**
   * The unique identifier of a connection, specifically one that is configured for LLM use.
   *
   * @generated from field: string ai_connection_id = 1;
   */
  aiConnectionId: string;

  /**
   * The number of records to generate
   *
   * @generated from field: int64 count = 2;
   */
  count: bigint;

  /**
   * The LLM model name to use that works with the configured connection id.
   *
   * @generated from field: string model_name = 3;
   */
  modelName: string;

  /**
   * The prompt that will be used to further refine the data generation. This is appended to the prompt that Neosync generates that includes schema information.
   *
   * @generated from field: optional string user_prompt = 4;
   */
  userPrompt?: string;

  /**
   * The unique identifier of a connection that the AI generated data would be inserted into. This is used to generate and send schema information to the LLM to help shape the generated data.
   *
   * @generated from field: string data_connection_id = 5;
   */
  dataConnectionId: string;

  /**
   * The table to generate data for.
   *
   * @generated from field: mgmt.v1alpha1.DatabaseTable table = 6;
   */
  table?: DatabaseTable;
};

/**
 * Describes the message mgmt.v1alpha1.GetAiGeneratedDataRequest.
 * Use `create(GetAiGeneratedDataRequestSchema)` to create a new message.
 */
export const GetAiGeneratedDataRequestSchema: GenMessage<GetAiGeneratedDataRequest> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 32);

/**
 * @generated from message mgmt.v1alpha1.DatabaseTable
 */
export type DatabaseTable = Message<"mgmt.v1alpha1.DatabaseTable"> & {
  /**
   * The schema of the table
   *
   * @generated from field: string schema = 1;
   */
  schema: string;

  /**
   * The table name
   *
   * @generated from field: string table = 2;
   */
  table: string;
};

/**
 * Describes the message mgmt.v1alpha1.DatabaseTable.
 * Use `create(DatabaseTableSchema)` to create a new message.
 */
export const DatabaseTableSchema: GenMessage<DatabaseTable> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 33);

/**
 * @generated from message mgmt.v1alpha1.GetAiGeneratedDataResponse
 */
export type GetAiGeneratedDataResponse = Message<"mgmt.v1alpha1.GetAiGeneratedDataResponse"> & {
  /**
   * A list of generated records
   *
   * @generated from field: repeated google.protobuf.Struct records = 1;
   */
  records: JsonObject[];
};

/**
 * Describes the message mgmt.v1alpha1.GetAiGeneratedDataResponse.
 * Use `create(GetAiGeneratedDataResponseSchema)` to create a new message.
 */
export const GetAiGeneratedDataResponseSchema: GenMessage<GetAiGeneratedDataResponse> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 34);

/**
 * @generated from message mgmt.v1alpha1.GetConnectionTableConstraintsRequest
 */
export type GetConnectionTableConstraintsRequest = Message<"mgmt.v1alpha1.GetConnectionTableConstraintsRequest"> & {
  /**
   * The unique identifier of the connection to get the constraints for.
   *
   * @generated from field: string connection_id = 1;
   */
  connectionId: string;
};

/**
 * Describes the message mgmt.v1alpha1.GetConnectionTableConstraintsRequest.
 * Use `create(GetConnectionTableConstraintsRequestSchema)` to create a new message.
 */
export const GetConnectionTableConstraintsRequestSchema: GenMessage<GetConnectionTableConstraintsRequest> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 35);

/**
 * @generated from message mgmt.v1alpha1.UniqueConstraints
 */
export type UniqueConstraints = Message<"mgmt.v1alpha1.UniqueConstraints"> & {
  /**
   * The unique constraints found for the table
   *
   * @generated from field: repeated mgmt.v1alpha1.UniqueConstraint constraints = 1;
   */
  constraints: UniqueConstraint[];
};

/**
 * Describes the message mgmt.v1alpha1.UniqueConstraints.
 * Use `create(UniqueConstraintsSchema)` to create a new message.
 */
export const UniqueConstraintsSchema: GenMessage<UniqueConstraints> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 36);

/**
 * @generated from message mgmt.v1alpha1.GetConnectionTableConstraintsResponse
 */
export type GetConnectionTableConstraintsResponse = Message<"mgmt.v1alpha1.GetConnectionTableConstraintsResponse"> & {
  /**
   * the key here is <schema>.<table> and the list of tables that it depends on, also `<schema>.<table>` format.
   *
   * @generated from field: map<string, mgmt.v1alpha1.ForeignConstraintTables> foreign_key_constraints = 1;
   */
  foreignKeyConstraints: { [key: string]: ForeignConstraintTables };

  /**
   * the key here is <schema>.<table> and value is the primary constraint
   *
   * @generated from field: map<string, mgmt.v1alpha1.PrimaryConstraint> primary_key_constraints = 2;
   */
  primaryKeyConstraints: { [key: string]: PrimaryConstraint };

  /**
   * the key here is <schema>.<table> and value is the unique constraint
   *
   * @generated from field: map<string, mgmt.v1alpha1.UniqueConstraints> unique_constraints = 3;
   */
  uniqueConstraints: { [key: string]: UniqueConstraints };
};

/**
 * Describes the message mgmt.v1alpha1.GetConnectionTableConstraintsResponse.
 * Use `create(GetConnectionTableConstraintsResponseSchema)` to create a new message.
 */
export const GetConnectionTableConstraintsResponseSchema: GenMessage<GetConnectionTableConstraintsResponse> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 37);

/**
 * @generated from message mgmt.v1alpha1.GetTableRowCountRequest
 */
export type GetTableRowCountRequest = Message<"mgmt.v1alpha1.GetTableRowCountRequest"> & {
  /**
   * The unique identifier of the connection to get the row count for.
   *
   * @generated from field: string connection_id = 1;
   */
  connectionId: string;

  /**
   * The schema of the table to get the row count for.
   *
   * @generated from field: string schema = 2;
   */
  schema: string;

  /**
   * The table to get the row count for.
   *
   * @generated from field: string table = 3;
   */
  table: string;

  /**
   * The optional where clause to filter the rows by.
   *
   * @generated from field: optional string where_clause = 4;
   */
  whereClause?: string;
};

/**
 * Describes the message mgmt.v1alpha1.GetTableRowCountRequest.
 * Use `create(GetTableRowCountRequestSchema)` to create a new message.
 */
export const GetTableRowCountRequestSchema: GenMessage<GetTableRowCountRequest> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 38);

/**
 * @generated from message mgmt.v1alpha1.GetTableRowCountResponse
 */
export type GetTableRowCountResponse = Message<"mgmt.v1alpha1.GetTableRowCountResponse"> & {
  /**
   * The count of the rows in the table
   *
   * @generated from field: int64 count = 1;
   */
  count: bigint;
};

/**
 * Describes the message mgmt.v1alpha1.GetTableRowCountResponse.
 * Use `create(GetTableRowCountResponseSchema)` to create a new message.
 */
export const GetTableRowCountResponseSchema: GenMessage<GetTableRowCountResponse> = /*@__PURE__*/
  messageDesc(file_mgmt_v1alpha1_connection_data, 39);

/**
 * Service for managing connection data.
 * This is used in handle data from a connection
 *
 * @generated from service mgmt.v1alpha1.ConnectionDataService
 */
export const ConnectionDataService: GenService<{
  /**
   * Streaming endpoint that will stream the data available from the Connection to the client.
   * Used primarily by the CLI sync command.
   *
   * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionDataStream
   */
  getConnectionDataStream: {
    methodKind: "server_streaming";
    input: typeof GetConnectionDataStreamRequestSchema;
    output: typeof GetConnectionDataStreamResponseSchema;
  },
  /**
   * Returns the schema for a specific connection. Used mostly for SQL-based connections
   *
   * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionSchema
   */
  getConnectionSchema: {
    methodKind: "unary";
    input: typeof GetConnectionSchemaRequestSchema;
    output: typeof GetConnectionSchemaResponseSchema;
  },
  /**
   * Returns the schema in map format. The keys are the fully qualified table in the format <schema>.<table>
   *
   * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionSchemaMap
   */
  getConnectionSchemaMap: {
    methodKind: "unary";
    input: typeof GetConnectionSchemaMapRequestSchema;
    output: typeof GetConnectionSchemaMapResponseSchema;
  },
  /**
   * Returns the schema in map format for every request provided
   *
   * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionSchemaMaps
   */
  getConnectionSchemaMaps: {
    methodKind: "unary";
    input: typeof GetConnectionSchemaMapsRequestSchema;
    output: typeof GetConnectionSchemaMapsResponseSchema;
  },
  /**
   * For a specific connection, returns the table constraints. Mostly useful for SQL-based Connections.
   *
   * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionTableConstraints
   */
  getConnectionTableConstraints: {
    methodKind: "unary";
    input: typeof GetConnectionTableConstraintsRequestSchema;
    output: typeof GetConnectionTableConstraintsResponseSchema;
  },
  /**
   * For a specific connection, returns the init table statements. Mostly useful for SQL-based Connections.
   * Used primarily by the CLI sync command to create table schema init statement.
   *
   * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionInitStatements
   */
  getConnectionInitStatements: {
    methodKind: "unary";
    input: typeof GetConnectionInitStatementsRequestSchema;
    output: typeof GetConnectionInitStatementsResponseSchema;
  },
  /**
   * Query an AI connection by providing the necessary values. Typically used for generating preview data
   *
   * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetAiGeneratedData
   */
  getAiGeneratedData: {
    methodKind: "unary";
    input: typeof GetAiGeneratedDataRequestSchema;
    output: typeof GetAiGeneratedDataResponseSchema;
  },
  /**
   * Query table with subset to get row count
   *
   * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetTableRowCount
   */
  getTableRowCount: {
    methodKind: "unary";
    input: typeof GetTableRowCountRequestSchema;
    output: typeof GetTableRowCountResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_mgmt_v1alpha1_connection_data, 0);

