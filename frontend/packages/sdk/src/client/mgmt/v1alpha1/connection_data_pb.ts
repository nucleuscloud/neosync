// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/connection_data.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message mgmt.v1alpha1.PostgresStreamConfig
 */
export class PostgresStreamConfig extends Message<PostgresStreamConfig> {
  constructor(data?: PartialMessage<PostgresStreamConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.PostgresStreamConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostgresStreamConfig {
    return new PostgresStreamConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostgresStreamConfig {
    return new PostgresStreamConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostgresStreamConfig {
    return new PostgresStreamConfig().fromJsonString(jsonString, options);
  }

  static equals(a: PostgresStreamConfig | PlainMessage<PostgresStreamConfig> | undefined, b: PostgresStreamConfig | PlainMessage<PostgresStreamConfig> | undefined): boolean {
    return proto3.util.equals(PostgresStreamConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.MysqlStreamConfig
 */
export class MysqlStreamConfig extends Message<MysqlStreamConfig> {
  constructor(data?: PartialMessage<MysqlStreamConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.MysqlStreamConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MysqlStreamConfig {
    return new MysqlStreamConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MysqlStreamConfig {
    return new MysqlStreamConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MysqlStreamConfig {
    return new MysqlStreamConfig().fromJsonString(jsonString, options);
  }

  static equals(a: MysqlStreamConfig | PlainMessage<MysqlStreamConfig> | undefined, b: MysqlStreamConfig | PlainMessage<MysqlStreamConfig> | undefined): boolean {
    return proto3.util.equals(MysqlStreamConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.AwsS3StreamConfig
 */
export class AwsS3StreamConfig extends Message<AwsS3StreamConfig> {
  /**
   * @generated from oneof mgmt.v1alpha1.AwsS3StreamConfig.id
   */
  id: {
    /**
     * @generated from field: string job_id = 1;
     */
    value: string;
    case: "jobId";
  } | {
    /**
     * @generated from field: string job_run_id = 2;
     */
    value: string;
    case: "jobRunId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AwsS3StreamConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AwsS3StreamConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
    { no: 2, name: "job_run_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AwsS3StreamConfig {
    return new AwsS3StreamConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AwsS3StreamConfig {
    return new AwsS3StreamConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AwsS3StreamConfig {
    return new AwsS3StreamConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AwsS3StreamConfig | PlainMessage<AwsS3StreamConfig> | undefined, b: AwsS3StreamConfig | PlainMessage<AwsS3StreamConfig> | undefined): boolean {
    return proto3.util.equals(AwsS3StreamConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.ConnectionStreamConfig
 */
export class ConnectionStreamConfig extends Message<ConnectionStreamConfig> {
  /**
   * @generated from oneof mgmt.v1alpha1.ConnectionStreamConfig.config
   */
  config: {
    /**
     * @generated from field: mgmt.v1alpha1.PostgresStreamConfig pg_config = 1;
     */
    value: PostgresStreamConfig;
    case: "pgConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.AwsS3StreamConfig aws_s3_config = 2;
     */
    value: AwsS3StreamConfig;
    case: "awsS3Config";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.MysqlStreamConfig mysql_config = 3;
     */
    value: MysqlStreamConfig;
    case: "mysqlConfig";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ConnectionStreamConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.ConnectionStreamConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pg_config", kind: "message", T: PostgresStreamConfig, oneof: "config" },
    { no: 2, name: "aws_s3_config", kind: "message", T: AwsS3StreamConfig, oneof: "config" },
    { no: 3, name: "mysql_config", kind: "message", T: MysqlStreamConfig, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionStreamConfig {
    return new ConnectionStreamConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionStreamConfig {
    return new ConnectionStreamConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionStreamConfig {
    return new ConnectionStreamConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionStreamConfig | PlainMessage<ConnectionStreamConfig> | undefined, b: ConnectionStreamConfig | PlainMessage<ConnectionStreamConfig> | undefined): boolean {
    return proto3.util.equals(ConnectionStreamConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetConnectionDataStreamRequest
 */
export class GetConnectionDataStreamRequest extends Message<GetConnectionDataStreamRequest> {
  /**
   * @generated from field: string connection_id = 1;
   */
  connectionId = "";

  /**
   * @generated from field: mgmt.v1alpha1.ConnectionStreamConfig stream_config = 2;
   */
  streamConfig?: ConnectionStreamConfig;

  /**
   * @generated from field: string schema = 3;
   */
  schema = "";

  /**
   * @generated from field: string table = 4;
   */
  table = "";

  constructor(data?: PartialMessage<GetConnectionDataStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetConnectionDataStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stream_config", kind: "message", T: ConnectionStreamConfig },
    { no: 3, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectionDataStreamRequest {
    return new GetConnectionDataStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectionDataStreamRequest {
    return new GetConnectionDataStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectionDataStreamRequest {
    return new GetConnectionDataStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConnectionDataStreamRequest | PlainMessage<GetConnectionDataStreamRequest> | undefined, b: GetConnectionDataStreamRequest | PlainMessage<GetConnectionDataStreamRequest> | undefined): boolean {
    return proto3.util.equals(GetConnectionDataStreamRequest, a, b);
  }
}

/**
 * Each stream response is a single row in the requested schema and table
 *
 * @generated from message mgmt.v1alpha1.GetConnectionDataStreamResponse
 */
export class GetConnectionDataStreamResponse extends Message<GetConnectionDataStreamResponse> {
  /**
   * A map of column name to the bytes value of the data that was found for that column and row
   *
   * @generated from field: map<string, bytes> row = 1;
   */
  row: { [key: string]: Uint8Array } = {};

  constructor(data?: PartialMessage<GetConnectionDataStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetConnectionDataStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "row", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectionDataStreamResponse {
    return new GetConnectionDataStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectionDataStreamResponse {
    return new GetConnectionDataStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectionDataStreamResponse {
    return new GetConnectionDataStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetConnectionDataStreamResponse | PlainMessage<GetConnectionDataStreamResponse> | undefined, b: GetConnectionDataStreamResponse | PlainMessage<GetConnectionDataStreamResponse> | undefined): boolean {
    return proto3.util.equals(GetConnectionDataStreamResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.PostgresSchemaConfig
 */
export class PostgresSchemaConfig extends Message<PostgresSchemaConfig> {
  constructor(data?: PartialMessage<PostgresSchemaConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.PostgresSchemaConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostgresSchemaConfig {
    return new PostgresSchemaConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostgresSchemaConfig {
    return new PostgresSchemaConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostgresSchemaConfig {
    return new PostgresSchemaConfig().fromJsonString(jsonString, options);
  }

  static equals(a: PostgresSchemaConfig | PlainMessage<PostgresSchemaConfig> | undefined, b: PostgresSchemaConfig | PlainMessage<PostgresSchemaConfig> | undefined): boolean {
    return proto3.util.equals(PostgresSchemaConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.MysqlSchemaConfig
 */
export class MysqlSchemaConfig extends Message<MysqlSchemaConfig> {
  constructor(data?: PartialMessage<MysqlSchemaConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.MysqlSchemaConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MysqlSchemaConfig {
    return new MysqlSchemaConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MysqlSchemaConfig {
    return new MysqlSchemaConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MysqlSchemaConfig {
    return new MysqlSchemaConfig().fromJsonString(jsonString, options);
  }

  static equals(a: MysqlSchemaConfig | PlainMessage<MysqlSchemaConfig> | undefined, b: MysqlSchemaConfig | PlainMessage<MysqlSchemaConfig> | undefined): boolean {
    return proto3.util.equals(MysqlSchemaConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.AwsS3SchemaConfig
 */
export class AwsS3SchemaConfig extends Message<AwsS3SchemaConfig> {
  /**
   * @generated from oneof mgmt.v1alpha1.AwsS3SchemaConfig.id
   */
  id: {
    /**
     * @generated from field: string job_id = 1;
     */
    value: string;
    case: "jobId";
  } | {
    /**
     * @generated from field: string job_run_id = 2;
     */
    value: string;
    case: "jobRunId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AwsS3SchemaConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AwsS3SchemaConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
    { no: 2, name: "job_run_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AwsS3SchemaConfig {
    return new AwsS3SchemaConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AwsS3SchemaConfig {
    return new AwsS3SchemaConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AwsS3SchemaConfig {
    return new AwsS3SchemaConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AwsS3SchemaConfig | PlainMessage<AwsS3SchemaConfig> | undefined, b: AwsS3SchemaConfig | PlainMessage<AwsS3SchemaConfig> | undefined): boolean {
    return proto3.util.equals(AwsS3SchemaConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.ConnectionSchemaConfig
 */
export class ConnectionSchemaConfig extends Message<ConnectionSchemaConfig> {
  /**
   * @generated from oneof mgmt.v1alpha1.ConnectionSchemaConfig.config
   */
  config: {
    /**
     * @generated from field: mgmt.v1alpha1.PostgresStreamConfig pg_config = 1;
     */
    value: PostgresStreamConfig;
    case: "pgConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.AwsS3StreamConfig aws_s3_config = 2;
     */
    value: AwsS3StreamConfig;
    case: "awsS3Config";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.MysqlStreamConfig mysql_config = 3;
     */
    value: MysqlStreamConfig;
    case: "mysqlConfig";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ConnectionSchemaConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.ConnectionSchemaConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pg_config", kind: "message", T: PostgresStreamConfig, oneof: "config" },
    { no: 2, name: "aws_s3_config", kind: "message", T: AwsS3StreamConfig, oneof: "config" },
    { no: 3, name: "mysql_config", kind: "message", T: MysqlStreamConfig, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionSchemaConfig {
    return new ConnectionSchemaConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionSchemaConfig {
    return new ConnectionSchemaConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionSchemaConfig {
    return new ConnectionSchemaConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionSchemaConfig | PlainMessage<ConnectionSchemaConfig> | undefined, b: ConnectionSchemaConfig | PlainMessage<ConnectionSchemaConfig> | undefined): boolean {
    return proto3.util.equals(ConnectionSchemaConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.Column
 */
export class Column extends Message<Column> {
  /**
   * The database schema. Ex: public
   *
   * @generated from field: string schema = 1;
   */
  schema = "";

  /**
   * The name of the table in the schema
   *
   * @generated from field: string table = 2;
   */
  table = "";

  /**
   * The name of the column
   *
   * @generated from field: string column = 3;
   */
  column = "";

  /**
   * The datatype of the column
   *
   * @generated from field: string data_type = 4;
   */
  dataType = "";

  constructor(data?: PartialMessage<Column>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.Column";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "data_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Column {
    return new Column().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Column {
    return new Column().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Column {
    return new Column().fromJsonString(jsonString, options);
  }

  static equals(a: Column | PlainMessage<Column> | undefined, b: Column | PlainMessage<Column> | undefined): boolean {
    return proto3.util.equals(Column, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetConnectionDataSchemaRequest
 */
export class GetConnectionDataSchemaRequest extends Message<GetConnectionDataSchemaRequest> {
  /**
   * @generated from field: string connection_id = 1;
   */
  connectionId = "";

  /**
   * @generated from field: mgmt.v1alpha1.ConnectionSchemaConfig schema_config = 2;
   */
  schemaConfig?: ConnectionSchemaConfig;

  constructor(data?: PartialMessage<GetConnectionDataSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetConnectionDataSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema_config", kind: "message", T: ConnectionSchemaConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectionDataSchemaRequest {
    return new GetConnectionDataSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectionDataSchemaRequest {
    return new GetConnectionDataSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectionDataSchemaRequest {
    return new GetConnectionDataSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConnectionDataSchemaRequest | PlainMessage<GetConnectionDataSchemaRequest> | undefined, b: GetConnectionDataSchemaRequest | PlainMessage<GetConnectionDataSchemaRequest> | undefined): boolean {
    return proto3.util.equals(GetConnectionDataSchemaRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetConnectionDataSchemaResponse
 */
export class GetConnectionDataSchemaResponse extends Message<GetConnectionDataSchemaResponse> {
  /**
   * @generated from field: repeated mgmt.v1alpha1.Column schemas = 1;
   */
  schemas: Column[] = [];

  constructor(data?: PartialMessage<GetConnectionDataSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetConnectionDataSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schemas", kind: "message", T: Column, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectionDataSchemaResponse {
    return new GetConnectionDataSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectionDataSchemaResponse {
    return new GetConnectionDataSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectionDataSchemaResponse {
    return new GetConnectionDataSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetConnectionDataSchemaResponse | PlainMessage<GetConnectionDataSchemaResponse> | undefined, b: GetConnectionDataSchemaResponse | PlainMessage<GetConnectionDataSchemaResponse> | undefined): boolean {
    return proto3.util.equals(GetConnectionDataSchemaResponse, a, b);
  }
}

