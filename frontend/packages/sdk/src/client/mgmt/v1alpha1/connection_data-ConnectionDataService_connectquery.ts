// @generated by protoc-gen-connect-query v2.0.1 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/connection_data.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */

import { ConnectionDataService } from "./connection_data_pb.js";

/**
 * Returns the schema for a specific connection. Used mostly for SQL-based connections
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionSchema
 */
export const getConnectionSchema = ConnectionDataService.method.getConnectionSchema;

/**
 * Returns the schema in map format. The keys are the fully qualified table in the format <schema>.<table>
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionSchemaMap
 */
export const getConnectionSchemaMap = ConnectionDataService.method.getConnectionSchemaMap;

/**
 * Returns the schema in map format for every request provided
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionSchemaMaps
 */
export const getConnectionSchemaMaps = ConnectionDataService.method.getConnectionSchemaMaps;

/**
 * For a specific connection, returns the table constraints. Mostly useful for SQL-based Connections.
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionTableConstraints
 */
export const getConnectionTableConstraints = ConnectionDataService.method.getConnectionTableConstraints;

/**
 * For a specific connection, returns the foreign key constraints. Mostly useful for SQL-based Connections.
 * Used primarily by the CLI sync command to determine stream order.
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionForeignConstraints
 */
export const getConnectionForeignConstraints = ConnectionDataService.method.getConnectionForeignConstraints;

/**
 * For a specific connection, returns the primary key constraints. Mostly useful for SQL-based Connections.
 * Used primarily by the CLI sync command to determine stream order.
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionPrimaryConstraints
 */
export const getConnectionPrimaryConstraints = ConnectionDataService.method.getConnectionPrimaryConstraints;

/**
 * For a specific connection, returns the init table statements. Mostly useful for SQL-based Connections.
 * Used primarily by the CLI sync command to create table schema init statement.
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionInitStatements
 */
export const getConnectionInitStatements = ConnectionDataService.method.getConnectionInitStatements;

/**
 * For a specific connection, returns the unique constraints. Mostly useful for SQL-based connections.
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionUniqueConstraints
 */
export const getConnectionUniqueConstraints = ConnectionDataService.method.getConnectionUniqueConstraints;

/**
 * Query an AI connection by providing the necessary values. Typically used for generating preview data
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetAiGeneratedData
 */
export const getAiGeneratedData = ConnectionDataService.method.getAiGeneratedData;

/**
 * Query table with subset to get row count
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetTableRowCount
 */
export const getTableRowCount = ConnectionDataService.method.getTableRowCount;
