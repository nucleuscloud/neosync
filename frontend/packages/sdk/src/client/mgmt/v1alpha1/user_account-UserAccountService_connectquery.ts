// @generated by protoc-gen-connect-query v2.0.1 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/user_account.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */

import { UserAccountService } from "./user_account_pb.js";

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.GetUser
 */
export const getUser = UserAccountService.method.getUser;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.SetUser
 */
export const setUser = UserAccountService.method.setUser;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.GetUserAccounts
 */
export const getUserAccounts = UserAccountService.method.getUserAccounts;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.SetPersonalAccount
 */
export const setPersonalAccount = UserAccountService.method.setPersonalAccount;

/**
 * Convert a personal account to a team account retaining all of the jobs and connections. This will also create a new empty personal account.
 *
 * @generated from rpc mgmt.v1alpha1.UserAccountService.ConvertPersonalToTeamAccount
 */
export const convertPersonalToTeamAccount = UserAccountService.method.convertPersonalToTeamAccount;

/**
 * Creates a new team account
 *
 * @generated from rpc mgmt.v1alpha1.UserAccountService.CreateTeamAccount
 */
export const createTeamAccount = UserAccountService.method.createTeamAccount;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.IsUserInAccount
 */
export const isUserInAccount = UserAccountService.method.isUserInAccount;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.GetAccountTemporalConfig
 */
export const getAccountTemporalConfig = UserAccountService.method.getAccountTemporalConfig;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.SetAccountTemporalConfig
 */
export const setAccountTemporalConfig = UserAccountService.method.setAccountTemporalConfig;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.GetTeamAccountMembers
 */
export const getTeamAccountMembers = UserAccountService.method.getTeamAccountMembers;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.RemoveTeamAccountMember
 */
export const removeTeamAccountMember = UserAccountService.method.removeTeamAccountMember;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.InviteUserToTeamAccount
 */
export const inviteUserToTeamAccount = UserAccountService.method.inviteUserToTeamAccount;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.GetTeamAccountInvites
 */
export const getTeamAccountInvites = UserAccountService.method.getTeamAccountInvites;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.RemoveTeamAccountInvite
 */
export const removeTeamAccountInvite = UserAccountService.method.removeTeamAccountInvite;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.AcceptTeamAccountInvite
 */
export const acceptTeamAccountInvite = UserAccountService.method.acceptTeamAccountInvite;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.GetSystemInformation
 */
export const getSystemInformation = UserAccountService.method.getSystemInformation;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.GetAccountOnboardingConfig
 */
export const getAccountOnboardingConfig = UserAccountService.method.getAccountOnboardingConfig;

/**
 * @generated from rpc mgmt.v1alpha1.UserAccountService.SetAccountOnboardingConfig
 */
export const setAccountOnboardingConfig = UserAccountService.method.setAccountOnboardingConfig;

/**
 * Returns different metrics on the account status for the active billing period
 *
 * @generated from rpc mgmt.v1alpha1.UserAccountService.GetAccountStatus
 */
export const getAccountStatus = UserAccountService.method.getAccountStatus;

/**
 * Distils the account status down to whether not it is in a valid state.
 *
 * @generated from rpc mgmt.v1alpha1.UserAccountService.IsAccountStatusValid
 */
export const isAccountStatusValid = UserAccountService.method.isAccountStatusValid;

/**
 * Returns a new checkout session for the account to subscribe
 *
 * @generated from rpc mgmt.v1alpha1.UserAccountService.GetAccountBillingCheckoutSession
 */
export const getAccountBillingCheckoutSession = UserAccountService.method.getAccountBillingCheckoutSession;

/**
 * Returns a new billing portal session if the account has a billing customer id
 *
 * @generated from rpc mgmt.v1alpha1.UserAccountService.GetAccountBillingPortalSession
 */
export const getAccountBillingPortalSession = UserAccountService.method.getAccountBillingPortalSession;

/**
 * Returns user accounts that have a billing id.
 *
 * @generated from rpc mgmt.v1alpha1.UserAccountService.GetBillingAccounts
 */
export const getBillingAccounts = UserAccountService.method.getBillingAccounts;

/**
 * Sends a new metered event to the billing system
 *
 * @generated from rpc mgmt.v1alpha1.UserAccountService.SetBillingMeterEvent
 */
export const setBillingMeterEvent = UserAccountService.method.setBillingMeterEvent;

/**
 * Sets the users role
 *
 * @generated from rpc mgmt.v1alpha1.UserAccountService.SetUserRole
 */
export const setUserRole = UserAccountService.method.setUserRole;
