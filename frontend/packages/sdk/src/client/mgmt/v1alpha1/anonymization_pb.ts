// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/anonymization.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { TransformerConfig } from "./transformer_pb.js";

/**
 * @generated from message mgmt.v1alpha1.AnonymizeManyRequest
 */
export class AnonymizeManyRequest extends Message<AnonymizeManyRequest> {
  /**
   * Array of stringified JSON data to be anonymized (up to 25 items)
   *
   * @generated from field: repeated string input_data = 1;
   */
  inputData: string[] = [];

  /**
   * Array of Transformer mappings
   *
   * @generated from field: repeated mgmt.v1alpha1.TransformerMapping transformer_mappings = 2;
   */
  transformerMappings: TransformerMapping[] = [];

  /**
   * Optional default transformations for any unmapped keys
   *
   * @generated from field: optional mgmt.v1alpha1.DefaultTransformersConfig default_transformers = 3;
   */
  defaultTransformers?: DefaultTransformersConfig;

  /**
   * Flag to indicate whether to stop processing when an error occurs
   * true: stops on first error encounter
   *
   * @generated from field: bool halt_on_failure = 4;
   */
  haltOnFailure = false;

  /**
   * The unique account identifier
   *
   * @generated from field: string account_id = 5;
   */
  accountId = "";

  constructor(data?: PartialMessage<AnonymizeManyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AnonymizeManyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "input_data", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "transformer_mappings", kind: "message", T: TransformerMapping, repeated: true },
    { no: 3, name: "default_transformers", kind: "message", T: DefaultTransformersConfig, opt: true },
    { no: 4, name: "halt_on_failure", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnonymizeManyRequest {
    return new AnonymizeManyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnonymizeManyRequest {
    return new AnonymizeManyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnonymizeManyRequest {
    return new AnonymizeManyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AnonymizeManyRequest | PlainMessage<AnonymizeManyRequest> | undefined, b: AnonymizeManyRequest | PlainMessage<AnonymizeManyRequest> | undefined): boolean {
    return proto3.util.equals(AnonymizeManyRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.AnonymizeManyResponse
 */
export class AnonymizeManyResponse extends Message<AnonymizeManyResponse> {
  /**
   * Array of anonymized JSON data
   *
   * @generated from field: repeated string output_data = 1;
   */
  outputData: string[] = [];

  /**
   * Array of errors that occured during anonymization
   *
   * @generated from field: repeated mgmt.v1alpha1.AnonymizeManyErrors errors = 2;
   */
  errors: AnonymizeManyErrors[] = [];

  constructor(data?: PartialMessage<AnonymizeManyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AnonymizeManyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output_data", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "errors", kind: "message", T: AnonymizeManyErrors, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnonymizeManyResponse {
    return new AnonymizeManyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnonymizeManyResponse {
    return new AnonymizeManyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnonymizeManyResponse {
    return new AnonymizeManyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AnonymizeManyResponse | PlainMessage<AnonymizeManyResponse> | undefined, b: AnonymizeManyResponse | PlainMessage<AnonymizeManyResponse> | undefined): boolean {
    return proto3.util.equals(AnonymizeManyResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.TransformerMapping
 */
export class TransformerMapping extends Message<TransformerMapping> {
  /**
   * JQ Expression or Field Path to apply the transformation to
   *
   * @generated from field: string expression = 1;
   */
  expression = "";

  /**
   * Configuration of Transformer to apply
   *
   * @generated from field: mgmt.v1alpha1.TransformerConfig transformer = 2;
   */
  transformer?: TransformerConfig;

  constructor(data?: PartialMessage<TransformerMapping>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.TransformerMapping";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transformer", kind: "message", T: TransformerConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransformerMapping {
    return new TransformerMapping().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransformerMapping {
    return new TransformerMapping().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransformerMapping {
    return new TransformerMapping().fromJsonString(jsonString, options);
  }

  static equals(a: TransformerMapping | PlainMessage<TransformerMapping> | undefined, b: TransformerMapping | PlainMessage<TransformerMapping> | undefined): boolean {
    return proto3.util.equals(TransformerMapping, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.DefaultTransformersConfig
 */
export class DefaultTransformersConfig extends Message<DefaultTransformersConfig> {
  /**
   * Boolean
   *
   * @generated from field: mgmt.v1alpha1.TransformerConfig boolean = 2;
   */
  boolean?: TransformerConfig;

  /**
   * Number
   *
   * @generated from field: mgmt.v1alpha1.TransformerConfig n = 3;
   */
  n?: TransformerConfig;

  /**
   * String
   *
   * @generated from field: mgmt.v1alpha1.TransformerConfig s = 4;
   */
  s?: TransformerConfig;

  constructor(data?: PartialMessage<DefaultTransformersConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.DefaultTransformersConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "boolean", kind: "message", T: TransformerConfig },
    { no: 3, name: "n", kind: "message", T: TransformerConfig },
    { no: 4, name: "s", kind: "message", T: TransformerConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DefaultTransformersConfig {
    return new DefaultTransformersConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DefaultTransformersConfig {
    return new DefaultTransformersConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DefaultTransformersConfig {
    return new DefaultTransformersConfig().fromJsonString(jsonString, options);
  }

  static equals(a: DefaultTransformersConfig | PlainMessage<DefaultTransformersConfig> | undefined, b: DefaultTransformersConfig | PlainMessage<DefaultTransformersConfig> | undefined): boolean {
    return proto3.util.equals(DefaultTransformersConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.AnonymizeManyErrors
 */
export class AnonymizeManyErrors extends Message<AnonymizeManyErrors> {
  /**
   * Index of input data that caused error
   *
   * @generated from field: int64 input_index = 1;
   */
  inputIndex = protoInt64.zero;

  /**
   * Error message
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage = "";

  constructor(data?: PartialMessage<AnonymizeManyErrors>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AnonymizeManyErrors";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "input_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnonymizeManyErrors {
    return new AnonymizeManyErrors().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnonymizeManyErrors {
    return new AnonymizeManyErrors().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnonymizeManyErrors {
    return new AnonymizeManyErrors().fromJsonString(jsonString, options);
  }

  static equals(a: AnonymizeManyErrors | PlainMessage<AnonymizeManyErrors> | undefined, b: AnonymizeManyErrors | PlainMessage<AnonymizeManyErrors> | undefined): boolean {
    return proto3.util.equals(AnonymizeManyErrors, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.AnonymizeSingleRequest
 */
export class AnonymizeSingleRequest extends Message<AnonymizeSingleRequest> {
  /**
   * Stringified JSON data to be anonymized
   *
   * @generated from field: string input_data = 1;
   */
  inputData = "";

  /**
   * Array of Transformer mappings
   *
   * @generated from field: repeated mgmt.v1alpha1.TransformerMapping transformer_mappings = 2;
   */
  transformerMappings: TransformerMapping[] = [];

  /**
   * Optional default transformations for any unmapped keys
   *
   * @generated from field: optional mgmt.v1alpha1.DefaultTransformersConfig default_transformers = 3;
   */
  defaultTransformers?: DefaultTransformersConfig;

  /**
   * The unique account identifier
   *
   * @generated from field: string account_id = 4;
   */
  accountId = "";

  constructor(data?: PartialMessage<AnonymizeSingleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AnonymizeSingleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "input_data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transformer_mappings", kind: "message", T: TransformerMapping, repeated: true },
    { no: 3, name: "default_transformers", kind: "message", T: DefaultTransformersConfig, opt: true },
    { no: 4, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnonymizeSingleRequest {
    return new AnonymizeSingleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnonymizeSingleRequest {
    return new AnonymizeSingleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnonymizeSingleRequest {
    return new AnonymizeSingleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AnonymizeSingleRequest | PlainMessage<AnonymizeSingleRequest> | undefined, b: AnonymizeSingleRequest | PlainMessage<AnonymizeSingleRequest> | undefined): boolean {
    return proto3.util.equals(AnonymizeSingleRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.AnonymizeSingleResponse
 */
export class AnonymizeSingleResponse extends Message<AnonymizeSingleResponse> {
  /**
   * Anonymized JSON data
   *
   * @generated from field: string output_data = 1;
   */
  outputData = "";

  constructor(data?: PartialMessage<AnonymizeSingleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AnonymizeSingleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output_data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnonymizeSingleResponse {
    return new AnonymizeSingleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnonymizeSingleResponse {
    return new AnonymizeSingleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnonymizeSingleResponse {
    return new AnonymizeSingleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AnonymizeSingleResponse | PlainMessage<AnonymizeSingleResponse> | undefined, b: AnonymizeSingleResponse | PlainMessage<AnonymizeSingleResponse> | undefined): boolean {
    return proto3.util.equals(AnonymizeSingleResponse, a, b);
  }
}

