// @generated by protoc-gen-es v1.7.1 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/metrics.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * An enumeration of the supported indexed time ranges for the records received metric
 *
 * @generated from enum mgmt.v1alpha1.RecordsReceivedTimeRange
 */
export enum RecordsReceivedTimeRange {
  /**
   * When unspecified, defaults change based on the given identifier
   *
   * @generated from enum value: RECORDS_RECEIVED_TIME_RANGE_UNSPECIFIED = 0;
   */
  RECORDS_RECEIVED_TIME_RANGE_UNSPECIFIED = 0,

  /**
   * 7 day window of metrics
   *
   * @generated from enum value: RECORDS_RECEIVED_TIME_RANGE_7_DAY = 1;
   */
  RECORDS_RECEIVED_TIME_RANGE_7_DAY = 1,

  /**
   * 14 day window of metrics
   *
   * @generated from enum value: RECORDS_RECEIVED_TIME_RANGE_14_DAY = 2;
   */
  RECORDS_RECEIVED_TIME_RANGE_14_DAY = 2,

  /**
   * 30 day window of metrics
   *
   * @generated from enum value: RECORDS_RECEIVED_TIME_RANGE_30_DAY = 3;
   */
  RECORDS_RECEIVED_TIME_RANGE_30_DAY = 3,

  /**
   * 60 day window of metrics
   *
   * @generated from enum value: RECORDS_RECEIVED_TIME_RANGE_60_DAY = 4;
   */
  RECORDS_RECEIVED_TIME_RANGE_60_DAY = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(RecordsReceivedTimeRange)
proto3.util.setEnumType(RecordsReceivedTimeRange, "mgmt.v1alpha1.RecordsReceivedTimeRange", [
  { no: 0, name: "RECORDS_RECEIVED_TIME_RANGE_UNSPECIFIED" },
  { no: 1, name: "RECORDS_RECEIVED_TIME_RANGE_7_DAY" },
  { no: 2, name: "RECORDS_RECEIVED_TIME_RANGE_14_DAY" },
  { no: 3, name: "RECORDS_RECEIVED_TIME_RANGE_30_DAY" },
  { no: 4, name: "RECORDS_RECEIVED_TIME_RANGE_60_DAY" },
]);

/**
 * @generated from message mgmt.v1alpha1.GetRecordsReceivedCountRequest
 */
export class GetRecordsReceivedCountRequest extends Message<GetRecordsReceivedCountRequest> {
  /**
   * @generated from oneof mgmt.v1alpha1.GetRecordsReceivedCountRequest.identifier
   */
  identifier: {
    /**
     * The account identifier that will be used to filter by
     *
     * @generated from field: string account_id = 1;
     */
    value: string;
    case: "accountId";
  } | {
    /**
     * The job identifier that will be used to filter by
     *
     * @generated from field: string job_id = 2;
     */
    value: string;
    case: "jobId";
  } | {
    /**
     * The run identifier that will be used to filter by
     *
     * @generated from field: string run_id = 3;
     */
    value: string;
    case: "runId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Provide a time range to retrieve a range of metrics by
   *
   * @generated from field: mgmt.v1alpha1.RecordsReceivedTimeRange indexed_time_range = 4;
   */
  indexedTimeRange = RecordsReceivedTimeRange.RECORDS_RECEIVED_TIME_RANGE_UNSPECIFIED;

  constructor(data?: PartialMessage<GetRecordsReceivedCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetRecordsReceivedCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "identifier" },
    { no: 2, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "identifier" },
    { no: 3, name: "run_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "identifier" },
    { no: 4, name: "indexed_time_range", kind: "enum", T: proto3.getEnumType(RecordsReceivedTimeRange) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecordsReceivedCountRequest {
    return new GetRecordsReceivedCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecordsReceivedCountRequest {
    return new GetRecordsReceivedCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecordsReceivedCountRequest {
    return new GetRecordsReceivedCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecordsReceivedCountRequest | PlainMessage<GetRecordsReceivedCountRequest> | undefined, b: GetRecordsReceivedCountRequest | PlainMessage<GetRecordsReceivedCountRequest> | undefined): boolean {
    return proto3.util.equals(GetRecordsReceivedCountRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetRecordsReceivedCountResponse
 */
export class GetRecordsReceivedCountResponse extends Message<GetRecordsReceivedCountResponse> {
  /**
   * @generated from field: repeated mgmt.v1alpha1.MetricResult results = 1;
   */
  results: MetricResult[] = [];

  constructor(data?: PartialMessage<GetRecordsReceivedCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetRecordsReceivedCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: MetricResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecordsReceivedCountResponse {
    return new GetRecordsReceivedCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecordsReceivedCountResponse {
    return new GetRecordsReceivedCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecordsReceivedCountResponse {
    return new GetRecordsReceivedCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecordsReceivedCountResponse | PlainMessage<GetRecordsReceivedCountResponse> | undefined, b: GetRecordsReceivedCountResponse | PlainMessage<GetRecordsReceivedCountResponse> | undefined): boolean {
    return proto3.util.equals(GetRecordsReceivedCountResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.MetricResult
 */
export class MetricResult extends Message<MetricResult> {
  /**
   * figure out what this is
   *
   * @generated from field: map<string, string> metric = 1;
   */
  metric: { [key: string]: string } = {};

  /**
   * A repeated list of metric values for the given range
   *
   * @generated from field: repeated mgmt.v1alpha1.MetricValue values = 2;
   */
  values: MetricValue[] = [];

  constructor(data?: PartialMessage<MetricResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.MetricResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metric", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 2, name: "values", kind: "message", T: MetricValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricResult {
    return new MetricResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricResult {
    return new MetricResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricResult {
    return new MetricResult().fromJsonString(jsonString, options);
  }

  static equals(a: MetricResult | PlainMessage<MetricResult> | undefined, b: MetricResult | PlainMessage<MetricResult> | undefined): boolean {
    return proto3.util.equals(MetricResult, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.MetricValue
 */
export class MetricValue extends Message<MetricValue> {
  /**
   * The actual value of the metric
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * The timestamp of when this value was recorded
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<MetricValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.MetricValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricValue {
    return new MetricValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricValue {
    return new MetricValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricValue {
    return new MetricValue().fromJsonString(jsonString, options);
  }

  static equals(a: MetricValue | PlainMessage<MetricValue> | undefined, b: MetricValue | PlainMessage<MetricValue> | undefined): boolean {
    return proto3.util.equals(MetricValue, a, b);
  }
}

