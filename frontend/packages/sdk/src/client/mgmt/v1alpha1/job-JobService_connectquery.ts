// @generated by protoc-gen-connect-query v2.0.1 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/job.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */

import { JobService } from "./job_pb.js";

/**
 * @generated from rpc mgmt.v1alpha1.JobService.GetJobs
 */
export const getJobs = JobService.method.getJobs;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.GetJob
 */
export const getJob = JobService.method.getJob;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.CreateJob
 */
export const createJob = JobService.method.createJob;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.DeleteJob
 */
export const deleteJob = JobService.method.deleteJob;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.IsJobNameAvailable
 */
export const isJobNameAvailable = JobService.method.isJobNameAvailable;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.UpdateJobSchedule
 */
export const updateJobSchedule = JobService.method.updateJobSchedule;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.UpdateJobSourceConnection
 */
export const updateJobSourceConnection = JobService.method.updateJobSourceConnection;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.SetJobSourceSqlConnectionSubsets
 */
export const setJobSourceSqlConnectionSubsets = JobService.method.setJobSourceSqlConnectionSubsets;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.UpdateJobDestinationConnection
 */
export const updateJobDestinationConnection = JobService.method.updateJobDestinationConnection;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.DeleteJobDestinationConnection
 */
export const deleteJobDestinationConnection = JobService.method.deleteJobDestinationConnection;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.CreateJobDestinationConnections
 */
export const createJobDestinationConnections = JobService.method.createJobDestinationConnections;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.PauseJob
 */
export const pauseJob = JobService.method.pauseJob;

/**
 * Returns a list of recently invoked job runs baseds on the Temporal cron scheduler. This will return a list of job runs that include archived runs
 *
 * @generated from rpc mgmt.v1alpha1.JobService.GetJobRecentRuns
 */
export const getJobRecentRuns = JobService.method.getJobRecentRuns;

/**
 * Returns a list of runs that are scheduled for execution based on the Temporal cron scheduler.
 *
 * @generated from rpc mgmt.v1alpha1.JobService.GetJobNextRuns
 */
export const getJobNextRuns = JobService.method.getJobNextRuns;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.GetJobStatus
 */
export const getJobStatus = JobService.method.getJobStatus;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.GetJobStatuses
 */
export const getJobStatuses = JobService.method.getJobStatuses;

/**
 * Returns a list of job runs by either account or job
 *
 * @generated from rpc mgmt.v1alpha1.JobService.GetJobRuns
 */
export const getJobRuns = JobService.method.getJobRuns;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.GetJobRunEvents
 */
export const getJobRunEvents = JobService.method.getJobRunEvents;

/**
 * Returns a specific job run, along with any of its pending activities
 *
 * @generated from rpc mgmt.v1alpha1.JobService.GetJobRun
 */
export const getJobRun = JobService.method.getJobRun;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.DeleteJobRun
 */
export const deleteJobRun = JobService.method.deleteJobRun;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.CreateJobRun
 */
export const createJobRun = JobService.method.createJobRun;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.CancelJobRun
 */
export const cancelJobRun = JobService.method.cancelJobRun;

/**
 * @generated from rpc mgmt.v1alpha1.JobService.TerminateJobRun
 */
export const terminateJobRun = JobService.method.terminateJobRun;

/**
 * Set any job workflow options. Must provide entire object as is it will fully override the previous configuration
 *
 * @generated from rpc mgmt.v1alpha1.JobService.SetJobWorkflowOptions
 */
export const setJobWorkflowOptions = JobService.method.setJobWorkflowOptions;

/**
 * Set the job sync options. Must provide entire object as it will fully override the previous configuration
 *
 * @generated from rpc mgmt.v1alpha1.JobService.SetJobSyncOptions
 */
export const setJobSyncOptions = JobService.method.setJobSyncOptions;

/**
 * validates that the jobmapping configured can run with table constraints
 *
 * @generated from rpc mgmt.v1alpha1.JobService.ValidateJobMappings
 */
export const validateJobMappings = JobService.method.validateJobMappings;

/**
 * Gets a run context to be used by a workflow run
 *
 * @generated from rpc mgmt.v1alpha1.JobService.GetRunContext
 */
export const getRunContext = JobService.method.getRunContext;

/**
 * Sets a run context to be used by a workflow run
 *
 * @generated from rpc mgmt.v1alpha1.JobService.SetRunContext
 */
export const setRunContext = JobService.method.setRunContext;

/**
 * Retrieves all job hooks
 *
 * @generated from rpc mgmt.v1alpha1.JobService.GetJobHooks
 */
export const getJobHooks = JobService.method.getJobHooks;

/**
 * Retrieves a specific job hook
 *
 * @generated from rpc mgmt.v1alpha1.JobService.GetJobHook
 */
export const getJobHook = JobService.method.getJobHook;

/**
 * Creates a new job hook
 *
 * @generated from rpc mgmt.v1alpha1.JobService.CreateJobHook
 */
export const createJobHook = JobService.method.createJobHook;

/**
 * Removes a job hook
 *
 * @generated from rpc mgmt.v1alpha1.JobService.DeleteJobHook
 */
export const deleteJobHook = JobService.method.deleteJobHook;

/**
 * Check if a specific job hook name is available
 *
 * @generated from rpc mgmt.v1alpha1.JobService.IsJobHookNameAvailable
 */
export const isJobHookNameAvailable = JobService.method.isJobHookNameAvailable;

/**
 * Updates a job hook
 *
 * @generated from rpc mgmt.v1alpha1.JobService.UpdateJobHook
 */
export const updateJobHook = JobService.method.updateJobHook;

/**
 * Enables or disables a job hook
 *
 * @generated from rpc mgmt.v1alpha1.JobService.SetJobHookEnabled
 */
export const setJobHookEnabled = JobService.method.setJobHookEnabled;

/**
 * Returns job hooks that are enabled by a specific timing. They will be sorted by priority, created_at, and id ascending.
 *
 * @generated from rpc mgmt.v1alpha1.JobService.GetActiveJobHooksByTiming
 */
export const getActiveJobHooksByTiming = JobService.method.getActiveJobHooksByTiming;
