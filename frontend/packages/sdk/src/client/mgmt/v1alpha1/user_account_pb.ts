// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/user_account.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum mgmt.v1alpha1.UserAccountType
 */
export enum UserAccountType {
  /**
   * @generated from enum value: USER_ACCOUNT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_ACCOUNT_TYPE_PERSONAL = 1;
   */
  PERSONAL = 1,

  /**
   * @generated from enum value: USER_ACCOUNT_TYPE_TEAM = 2;
   */
  TEAM = 2,

  /**
   * @generated from enum value: USER_ACCOUNT_TYPE_ENTERPRISE = 3;
   */
  ENTERPRISE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(UserAccountType)
proto3.util.setEnumType(UserAccountType, "mgmt.v1alpha1.UserAccountType", [
  { no: 0, name: "USER_ACCOUNT_TYPE_UNSPECIFIED" },
  { no: 1, name: "USER_ACCOUNT_TYPE_PERSONAL" },
  { no: 2, name: "USER_ACCOUNT_TYPE_TEAM" },
  { no: 3, name: "USER_ACCOUNT_TYPE_ENTERPRISE" },
]);

/**
 * @generated from enum mgmt.v1alpha1.BillingStatus
 */
export enum BillingStatus {
  /**
   * @generated from enum value: BILLING_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Corresponds to a billing subscription and rolls up various states into active
   * This may be split into the future to be more granular and mirror the underlying billing system
   *
   * @generated from enum value: BILLING_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * If the system could not find any active subscriptions
   *
   * @generated from enum value: BILLING_STATUS_EXPIRED = 2;
   */
  EXPIRED = 2,

  /**
   * The account does not have an active subscription and is in a valid trial period
   *
   * @generated from enum value: BILLING_STATUS_TRIAL_ACTIVE = 3;
   */
  TRIAL_ACTIVE = 3,

  /**
   * The account does not have an active subscription and the trial period has ended
   *
   * @generated from enum value: BILLING_STATUS_TRIAL_EXPIRED = 4;
   */
  TRIAL_EXPIRED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(BillingStatus)
proto3.util.setEnumType(BillingStatus, "mgmt.v1alpha1.BillingStatus", [
  { no: 0, name: "BILLING_STATUS_UNSPECIFIED" },
  { no: 1, name: "BILLING_STATUS_ACTIVE" },
  { no: 2, name: "BILLING_STATUS_EXPIRED" },
  { no: 3, name: "BILLING_STATUS_TRIAL_ACTIVE" },
  { no: 4, name: "BILLING_STATUS_TRIAL_EXPIRED" },
]);

/**
 * @generated from enum mgmt.v1alpha1.AccountStatus
 */
export enum AccountStatus {
  /**
   * Default value, should be used when no reason is specified
   *
   * @generated from enum value: ACCOUNT_STATUS_REASON_UNSPECIFIED = 0;
   */
  REASON_UNSPECIFIED = 0,

  /**
   * @deprecated - Current usage exceeds allowed limit
   *
   * @generated from enum value: ACCOUNT_STATUS_EXCEEDS_ALLOWED_LIMIT = 1;
   */
  EXCEEDS_ALLOWED_LIMIT = 1,

  /**
   * @deprecated - Adding requested records exceeds the allowed limit
   *
   * @generated from enum value: ACCOUNT_STATUS_REQUESTED_EXCEEDS_LIMIT = 2;
   */
  REQUESTED_EXCEEDS_LIMIT = 2,

  /**
   * Account is currently in an expired state
   *
   * @generated from enum value: ACCOUNT_STATUS_ACCOUNT_IN_EXPIRED_STATE = 3;
   */
  ACCOUNT_IN_EXPIRED_STATE = 3,

  /**
   * The account is currently in an active trial period
   *
   * @generated from enum value: ACCOUNT_STATUS_ACCOUNT_TRIAL_ACTIVE = 4;
   */
  ACCOUNT_TRIAL_ACTIVE = 4,

  /**
   * The account is past the active trial period
   *
   * @generated from enum value: ACCOUNT_STATUS_ACCOUNT_TRIAL_EXPIRED = 5;
   */
  ACCOUNT_TRIAL_EXPIRED = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(AccountStatus)
proto3.util.setEnumType(AccountStatus, "mgmt.v1alpha1.AccountStatus", [
  { no: 0, name: "ACCOUNT_STATUS_REASON_UNSPECIFIED" },
  { no: 1, name: "ACCOUNT_STATUS_EXCEEDS_ALLOWED_LIMIT" },
  { no: 2, name: "ACCOUNT_STATUS_REQUESTED_EXCEEDS_LIMIT" },
  { no: 3, name: "ACCOUNT_STATUS_ACCOUNT_IN_EXPIRED_STATE" },
  { no: 4, name: "ACCOUNT_STATUS_ACCOUNT_TRIAL_ACTIVE" },
  { no: 5, name: "ACCOUNT_STATUS_ACCOUNT_TRIAL_EXPIRED" },
]);

/**
 * @generated from message mgmt.v1alpha1.GetUserRequest
 */
export class GetUserRequest extends Message<GetUserRequest> {
  constructor(data?: PartialMessage<GetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest {
    return new GetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean {
    return proto3.util.equals(GetUserRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetUserResponse
 */
export class GetUserResponse extends Message<GetUserResponse> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserResponse {
    return new GetUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserResponse | PlainMessage<GetUserResponse> | undefined, b: GetUserResponse | PlainMessage<GetUserResponse> | undefined): boolean {
    return proto3.util.equals(GetUserResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetUserRequest
 */
export class SetUserRequest extends Message<SetUserRequest> {
  constructor(data?: PartialMessage<SetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetUserRequest {
    return new SetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetUserRequest {
    return new SetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetUserRequest {
    return new SetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetUserRequest | PlainMessage<SetUserRequest> | undefined, b: SetUserRequest | PlainMessage<SetUserRequest> | undefined): boolean {
    return proto3.util.equals(SetUserRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetUserResponse
 */
export class SetUserResponse extends Message<SetUserResponse> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<SetUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetUserResponse {
    return new SetUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetUserResponse {
    return new SetUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetUserResponse {
    return new SetUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetUserResponse | PlainMessage<SetUserResponse> | undefined, b: SetUserResponse | PlainMessage<SetUserResponse> | undefined): boolean {
    return proto3.util.equals(SetUserResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetUserAccountsRequest
 */
export class GetUserAccountsRequest extends Message<GetUserAccountsRequest> {
  constructor(data?: PartialMessage<GetUserAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetUserAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserAccountsRequest {
    return new GetUserAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserAccountsRequest {
    return new GetUserAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserAccountsRequest {
    return new GetUserAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserAccountsRequest | PlainMessage<GetUserAccountsRequest> | undefined, b: GetUserAccountsRequest | PlainMessage<GetUserAccountsRequest> | undefined): boolean {
    return proto3.util.equals(GetUserAccountsRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetUserAccountsResponse
 */
export class GetUserAccountsResponse extends Message<GetUserAccountsResponse> {
  /**
   * @generated from field: repeated mgmt.v1alpha1.UserAccount accounts = 1;
   */
  accounts: UserAccount[] = [];

  constructor(data?: PartialMessage<GetUserAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetUserAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: UserAccount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserAccountsResponse {
    return new GetUserAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserAccountsResponse {
    return new GetUserAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserAccountsResponse {
    return new GetUserAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserAccountsResponse | PlainMessage<GetUserAccountsResponse> | undefined, b: GetUserAccountsResponse | PlainMessage<GetUserAccountsResponse> | undefined): boolean {
    return proto3.util.equals(GetUserAccountsResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.UserAccount
 */
export class UserAccount extends Message<UserAccount> {
  /**
   * The unique identifier of the account
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The account slug
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The type of account
   *
   * @generated from field: mgmt.v1alpha1.UserAccountType type = 3;
   */
  type = UserAccountType.UNSPECIFIED;

  /**
   * Whether or not the account has an associated stripe customer id
   *
   * @generated from field: bool has_stripe_customer_id = 4;
   */
  hasStripeCustomerId = false;

  constructor(data?: PartialMessage<UserAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.UserAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(UserAccountType) },
    { no: 4, name: "has_stripe_customer_id", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserAccount {
    return new UserAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserAccount {
    return new UserAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserAccount {
    return new UserAccount().fromJsonString(jsonString, options);
  }

  static equals(a: UserAccount | PlainMessage<UserAccount> | undefined, b: UserAccount | PlainMessage<UserAccount> | undefined): boolean {
    return proto3.util.equals(UserAccount, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.ConvertPersonalToTeamAccountRequest
 */
export class ConvertPersonalToTeamAccountRequest extends Message<ConvertPersonalToTeamAccountRequest> {
  /**
   * The name of the team account
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Optionally provide the personal account to convert. This may be used in break-glass scenarios where there are multiple personal accounts
   * And we want to convert one of them. If not provided, it will find the first one and convert it, leaving the other.
   *
   * @generated from field: optional string account_id = 2;
   */
  accountId?: string;

  constructor(data?: PartialMessage<ConvertPersonalToTeamAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.ConvertPersonalToTeamAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConvertPersonalToTeamAccountRequest {
    return new ConvertPersonalToTeamAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConvertPersonalToTeamAccountRequest {
    return new ConvertPersonalToTeamAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConvertPersonalToTeamAccountRequest {
    return new ConvertPersonalToTeamAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConvertPersonalToTeamAccountRequest | PlainMessage<ConvertPersonalToTeamAccountRequest> | undefined, b: ConvertPersonalToTeamAccountRequest | PlainMessage<ConvertPersonalToTeamAccountRequest> | undefined): boolean {
    return proto3.util.equals(ConvertPersonalToTeamAccountRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.ConvertPersonalToTeamAccountResponse
 */
export class ConvertPersonalToTeamAccountResponse extends Message<ConvertPersonalToTeamAccountResponse> {
  /**
   * The id of the team account (will be the same identifier as the personal account)
   *
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * If NeosyncCloud, will respond with a checkout session url so they can setup billing
   *
   * @generated from field: optional string checkout_session_url = 2;
   */
  checkoutSessionUrl?: string;

  /**
   * The identifier of the newly created personal account
   *
   * @generated from field: string new_personal_account_id = 3;
   */
  newPersonalAccountId = "";

  constructor(data?: PartialMessage<ConvertPersonalToTeamAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.ConvertPersonalToTeamAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "checkout_session_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "new_personal_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConvertPersonalToTeamAccountResponse {
    return new ConvertPersonalToTeamAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConvertPersonalToTeamAccountResponse {
    return new ConvertPersonalToTeamAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConvertPersonalToTeamAccountResponse {
    return new ConvertPersonalToTeamAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConvertPersonalToTeamAccountResponse | PlainMessage<ConvertPersonalToTeamAccountResponse> | undefined, b: ConvertPersonalToTeamAccountResponse | PlainMessage<ConvertPersonalToTeamAccountResponse> | undefined): boolean {
    return proto3.util.equals(ConvertPersonalToTeamAccountResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetPersonalAccountRequest
 */
export class SetPersonalAccountRequest extends Message<SetPersonalAccountRequest> {
  constructor(data?: PartialMessage<SetPersonalAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetPersonalAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPersonalAccountRequest {
    return new SetPersonalAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPersonalAccountRequest {
    return new SetPersonalAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPersonalAccountRequest {
    return new SetPersonalAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetPersonalAccountRequest | PlainMessage<SetPersonalAccountRequest> | undefined, b: SetPersonalAccountRequest | PlainMessage<SetPersonalAccountRequest> | undefined): boolean {
    return proto3.util.equals(SetPersonalAccountRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetPersonalAccountResponse
 */
export class SetPersonalAccountResponse extends Message<SetPersonalAccountResponse> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<SetPersonalAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetPersonalAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPersonalAccountResponse {
    return new SetPersonalAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPersonalAccountResponse {
    return new SetPersonalAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPersonalAccountResponse {
    return new SetPersonalAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetPersonalAccountResponse | PlainMessage<SetPersonalAccountResponse> | undefined, b: SetPersonalAccountResponse | PlainMessage<SetPersonalAccountResponse> | undefined): boolean {
    return proto3.util.equals(SetPersonalAccountResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.IsUserInAccountRequest
 */
export class IsUserInAccountRequest extends Message<IsUserInAccountRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<IsUserInAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.IsUserInAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsUserInAccountRequest {
    return new IsUserInAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsUserInAccountRequest {
    return new IsUserInAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsUserInAccountRequest {
    return new IsUserInAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IsUserInAccountRequest | PlainMessage<IsUserInAccountRequest> | undefined, b: IsUserInAccountRequest | PlainMessage<IsUserInAccountRequest> | undefined): boolean {
    return proto3.util.equals(IsUserInAccountRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.IsUserInAccountResponse
 */
export class IsUserInAccountResponse extends Message<IsUserInAccountResponse> {
  /**
   * @generated from field: bool ok = 1;
   */
  ok = false;

  constructor(data?: PartialMessage<IsUserInAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.IsUserInAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsUserInAccountResponse {
    return new IsUserInAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsUserInAccountResponse {
    return new IsUserInAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsUserInAccountResponse {
    return new IsUserInAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IsUserInAccountResponse | PlainMessage<IsUserInAccountResponse> | undefined, b: IsUserInAccountResponse | PlainMessage<IsUserInAccountResponse> | undefined): boolean {
    return proto3.util.equals(IsUserInAccountResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetAccountTemporalConfigRequest
 */
export class GetAccountTemporalConfigRequest extends Message<GetAccountTemporalConfigRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetAccountTemporalConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetAccountTemporalConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountTemporalConfigRequest {
    return new GetAccountTemporalConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountTemporalConfigRequest {
    return new GetAccountTemporalConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountTemporalConfigRequest {
    return new GetAccountTemporalConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountTemporalConfigRequest | PlainMessage<GetAccountTemporalConfigRequest> | undefined, b: GetAccountTemporalConfigRequest | PlainMessage<GetAccountTemporalConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetAccountTemporalConfigRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetAccountTemporalConfigResponse
 */
export class GetAccountTemporalConfigResponse extends Message<GetAccountTemporalConfigResponse> {
  /**
   * @generated from field: mgmt.v1alpha1.AccountTemporalConfig config = 1;
   */
  config?: AccountTemporalConfig;

  constructor(data?: PartialMessage<GetAccountTemporalConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetAccountTemporalConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: AccountTemporalConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountTemporalConfigResponse {
    return new GetAccountTemporalConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountTemporalConfigResponse {
    return new GetAccountTemporalConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountTemporalConfigResponse {
    return new GetAccountTemporalConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountTemporalConfigResponse | PlainMessage<GetAccountTemporalConfigResponse> | undefined, b: GetAccountTemporalConfigResponse | PlainMessage<GetAccountTemporalConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetAccountTemporalConfigResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetAccountTemporalConfigRequest
 */
export class SetAccountTemporalConfigRequest extends Message<SetAccountTemporalConfigRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: mgmt.v1alpha1.AccountTemporalConfig config = 2;
   */
  config?: AccountTemporalConfig;

  constructor(data?: PartialMessage<SetAccountTemporalConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetAccountTemporalConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: AccountTemporalConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetAccountTemporalConfigRequest {
    return new SetAccountTemporalConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetAccountTemporalConfigRequest {
    return new SetAccountTemporalConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetAccountTemporalConfigRequest {
    return new SetAccountTemporalConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetAccountTemporalConfigRequest | PlainMessage<SetAccountTemporalConfigRequest> | undefined, b: SetAccountTemporalConfigRequest | PlainMessage<SetAccountTemporalConfigRequest> | undefined): boolean {
    return proto3.util.equals(SetAccountTemporalConfigRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetAccountTemporalConfigResponse
 */
export class SetAccountTemporalConfigResponse extends Message<SetAccountTemporalConfigResponse> {
  /**
   * @generated from field: mgmt.v1alpha1.AccountTemporalConfig config = 1;
   */
  config?: AccountTemporalConfig;

  constructor(data?: PartialMessage<SetAccountTemporalConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetAccountTemporalConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: AccountTemporalConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetAccountTemporalConfigResponse {
    return new SetAccountTemporalConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetAccountTemporalConfigResponse {
    return new SetAccountTemporalConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetAccountTemporalConfigResponse {
    return new SetAccountTemporalConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetAccountTemporalConfigResponse | PlainMessage<SetAccountTemporalConfigResponse> | undefined, b: SetAccountTemporalConfigResponse | PlainMessage<SetAccountTemporalConfigResponse> | undefined): boolean {
    return proto3.util.equals(SetAccountTemporalConfigResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.AccountTemporalConfig
 */
export class AccountTemporalConfig extends Message<AccountTemporalConfig> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string sync_job_queue_name = 3;
   */
  syncJobQueueName = "";

  constructor(data?: PartialMessage<AccountTemporalConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AccountTemporalConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sync_job_queue_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountTemporalConfig {
    return new AccountTemporalConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountTemporalConfig {
    return new AccountTemporalConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountTemporalConfig {
    return new AccountTemporalConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AccountTemporalConfig | PlainMessage<AccountTemporalConfig> | undefined, b: AccountTemporalConfig | PlainMessage<AccountTemporalConfig> | undefined): boolean {
    return proto3.util.equals(AccountTemporalConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.CreateTeamAccountRequest
 */
export class CreateTeamAccountRequest extends Message<CreateTeamAccountRequest> {
  /**
   * The name of the team account
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateTeamAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.CreateTeamAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTeamAccountRequest {
    return new CreateTeamAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTeamAccountRequest {
    return new CreateTeamAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTeamAccountRequest {
    return new CreateTeamAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTeamAccountRequest | PlainMessage<CreateTeamAccountRequest> | undefined, b: CreateTeamAccountRequest | PlainMessage<CreateTeamAccountRequest> | undefined): boolean {
    return proto3.util.equals(CreateTeamAccountRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.CreateTeamAccountResponse
 */
export class CreateTeamAccountResponse extends Message<CreateTeamAccountResponse> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * If NeosyncCloud, will respond with a checkout session url so they can setup billing
   *
   * @generated from field: optional string checkout_session_url = 2;
   */
  checkoutSessionUrl?: string;

  constructor(data?: PartialMessage<CreateTeamAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.CreateTeamAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "checkout_session_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTeamAccountResponse {
    return new CreateTeamAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTeamAccountResponse {
    return new CreateTeamAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTeamAccountResponse {
    return new CreateTeamAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTeamAccountResponse | PlainMessage<CreateTeamAccountResponse> | undefined, b: CreateTeamAccountResponse | PlainMessage<CreateTeamAccountResponse> | undefined): boolean {
    return proto3.util.equals(CreateTeamAccountResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.AccountUser
 */
export class AccountUser extends Message<AccountUser> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string image = 3;
   */
  image = "";

  /**
   * @generated from field: string email = 4;
   */
  email = "";

  constructor(data?: PartialMessage<AccountUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AccountUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountUser {
    return new AccountUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountUser {
    return new AccountUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountUser {
    return new AccountUser().fromJsonString(jsonString, options);
  }

  static equals(a: AccountUser | PlainMessage<AccountUser> | undefined, b: AccountUser | PlainMessage<AccountUser> | undefined): boolean {
    return proto3.util.equals(AccountUser, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetTeamAccountMembersRequest
 */
export class GetTeamAccountMembersRequest extends Message<GetTeamAccountMembersRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetTeamAccountMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetTeamAccountMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamAccountMembersRequest {
    return new GetTeamAccountMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamAccountMembersRequest {
    return new GetTeamAccountMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamAccountMembersRequest {
    return new GetTeamAccountMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamAccountMembersRequest | PlainMessage<GetTeamAccountMembersRequest> | undefined, b: GetTeamAccountMembersRequest | PlainMessage<GetTeamAccountMembersRequest> | undefined): boolean {
    return proto3.util.equals(GetTeamAccountMembersRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetTeamAccountMembersResponse
 */
export class GetTeamAccountMembersResponse extends Message<GetTeamAccountMembersResponse> {
  /**
   * @generated from field: repeated mgmt.v1alpha1.AccountUser users = 1;
   */
  users: AccountUser[] = [];

  constructor(data?: PartialMessage<GetTeamAccountMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetTeamAccountMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: AccountUser, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamAccountMembersResponse {
    return new GetTeamAccountMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamAccountMembersResponse {
    return new GetTeamAccountMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamAccountMembersResponse {
    return new GetTeamAccountMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamAccountMembersResponse | PlainMessage<GetTeamAccountMembersResponse> | undefined, b: GetTeamAccountMembersResponse | PlainMessage<GetTeamAccountMembersResponse> | undefined): boolean {
    return proto3.util.equals(GetTeamAccountMembersResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.RemoveTeamAccountMemberRequest
 */
export class RemoveTeamAccountMemberRequest extends Message<RemoveTeamAccountMemberRequest> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  constructor(data?: PartialMessage<RemoveTeamAccountMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.RemoveTeamAccountMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTeamAccountMemberRequest {
    return new RemoveTeamAccountMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTeamAccountMemberRequest {
    return new RemoveTeamAccountMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTeamAccountMemberRequest {
    return new RemoveTeamAccountMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveTeamAccountMemberRequest | PlainMessage<RemoveTeamAccountMemberRequest> | undefined, b: RemoveTeamAccountMemberRequest | PlainMessage<RemoveTeamAccountMemberRequest> | undefined): boolean {
    return proto3.util.equals(RemoveTeamAccountMemberRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.RemoveTeamAccountMemberResponse
 */
export class RemoveTeamAccountMemberResponse extends Message<RemoveTeamAccountMemberResponse> {
  constructor(data?: PartialMessage<RemoveTeamAccountMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.RemoveTeamAccountMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTeamAccountMemberResponse {
    return new RemoveTeamAccountMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTeamAccountMemberResponse {
    return new RemoveTeamAccountMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTeamAccountMemberResponse {
    return new RemoveTeamAccountMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveTeamAccountMemberResponse | PlainMessage<RemoveTeamAccountMemberResponse> | undefined, b: RemoveTeamAccountMemberResponse | PlainMessage<RemoveTeamAccountMemberResponse> | undefined): boolean {
    return proto3.util.equals(RemoveTeamAccountMemberResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.InviteUserToTeamAccountRequest
 */
export class InviteUserToTeamAccountRequest extends Message<InviteUserToTeamAccountRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  constructor(data?: PartialMessage<InviteUserToTeamAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.InviteUserToTeamAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserToTeamAccountRequest {
    return new InviteUserToTeamAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserToTeamAccountRequest {
    return new InviteUserToTeamAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserToTeamAccountRequest {
    return new InviteUserToTeamAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserToTeamAccountRequest | PlainMessage<InviteUserToTeamAccountRequest> | undefined, b: InviteUserToTeamAccountRequest | PlainMessage<InviteUserToTeamAccountRequest> | undefined): boolean {
    return proto3.util.equals(InviteUserToTeamAccountRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.AccountInvite
 */
export class AccountInvite extends Message<AccountInvite> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string account_id = 2;
   */
  accountId = "";

  /**
   * @generated from field: string sender_user_id = 3;
   */
  senderUserId = "";

  /**
   * @generated from field: string email = 4;
   */
  email = "";

  /**
   * @generated from field: string token = 5;
   */
  token = "";

  /**
   * @generated from field: bool accepted = 6;
   */
  accepted = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 8;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp expires_at = 9;
   */
  expiresAt?: Timestamp;

  constructor(data?: PartialMessage<AccountInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AccountInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sender_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "accepted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "created_at", kind: "message", T: Timestamp },
    { no: 8, name: "updated_at", kind: "message", T: Timestamp },
    { no: 9, name: "expires_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountInvite {
    return new AccountInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountInvite {
    return new AccountInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountInvite {
    return new AccountInvite().fromJsonString(jsonString, options);
  }

  static equals(a: AccountInvite | PlainMessage<AccountInvite> | undefined, b: AccountInvite | PlainMessage<AccountInvite> | undefined): boolean {
    return proto3.util.equals(AccountInvite, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.InviteUserToTeamAccountResponse
 */
export class InviteUserToTeamAccountResponse extends Message<InviteUserToTeamAccountResponse> {
  /**
   * @generated from field: mgmt.v1alpha1.AccountInvite invite = 1;
   */
  invite?: AccountInvite;

  constructor(data?: PartialMessage<InviteUserToTeamAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.InviteUserToTeamAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invite", kind: "message", T: AccountInvite },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteUserToTeamAccountResponse {
    return new InviteUserToTeamAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteUserToTeamAccountResponse {
    return new InviteUserToTeamAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteUserToTeamAccountResponse {
    return new InviteUserToTeamAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InviteUserToTeamAccountResponse | PlainMessage<InviteUserToTeamAccountResponse> | undefined, b: InviteUserToTeamAccountResponse | PlainMessage<InviteUserToTeamAccountResponse> | undefined): boolean {
    return proto3.util.equals(InviteUserToTeamAccountResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetTeamAccountInvitesRequest
 */
export class GetTeamAccountInvitesRequest extends Message<GetTeamAccountInvitesRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetTeamAccountInvitesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetTeamAccountInvitesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamAccountInvitesRequest {
    return new GetTeamAccountInvitesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamAccountInvitesRequest {
    return new GetTeamAccountInvitesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamAccountInvitesRequest {
    return new GetTeamAccountInvitesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamAccountInvitesRequest | PlainMessage<GetTeamAccountInvitesRequest> | undefined, b: GetTeamAccountInvitesRequest | PlainMessage<GetTeamAccountInvitesRequest> | undefined): boolean {
    return proto3.util.equals(GetTeamAccountInvitesRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetTeamAccountInvitesResponse
 */
export class GetTeamAccountInvitesResponse extends Message<GetTeamAccountInvitesResponse> {
  /**
   * @generated from field: repeated mgmt.v1alpha1.AccountInvite invites = 1;
   */
  invites: AccountInvite[] = [];

  constructor(data?: PartialMessage<GetTeamAccountInvitesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetTeamAccountInvitesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invites", kind: "message", T: AccountInvite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamAccountInvitesResponse {
    return new GetTeamAccountInvitesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamAccountInvitesResponse {
    return new GetTeamAccountInvitesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamAccountInvitesResponse {
    return new GetTeamAccountInvitesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamAccountInvitesResponse | PlainMessage<GetTeamAccountInvitesResponse> | undefined, b: GetTeamAccountInvitesResponse | PlainMessage<GetTeamAccountInvitesResponse> | undefined): boolean {
    return proto3.util.equals(GetTeamAccountInvitesResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.RemoveTeamAccountInviteRequest
 */
export class RemoveTeamAccountInviteRequest extends Message<RemoveTeamAccountInviteRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<RemoveTeamAccountInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.RemoveTeamAccountInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTeamAccountInviteRequest {
    return new RemoveTeamAccountInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTeamAccountInviteRequest {
    return new RemoveTeamAccountInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTeamAccountInviteRequest {
    return new RemoveTeamAccountInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveTeamAccountInviteRequest | PlainMessage<RemoveTeamAccountInviteRequest> | undefined, b: RemoveTeamAccountInviteRequest | PlainMessage<RemoveTeamAccountInviteRequest> | undefined): boolean {
    return proto3.util.equals(RemoveTeamAccountInviteRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.RemoveTeamAccountInviteResponse
 */
export class RemoveTeamAccountInviteResponse extends Message<RemoveTeamAccountInviteResponse> {
  constructor(data?: PartialMessage<RemoveTeamAccountInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.RemoveTeamAccountInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveTeamAccountInviteResponse {
    return new RemoveTeamAccountInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveTeamAccountInviteResponse {
    return new RemoveTeamAccountInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveTeamAccountInviteResponse {
    return new RemoveTeamAccountInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveTeamAccountInviteResponse | PlainMessage<RemoveTeamAccountInviteResponse> | undefined, b: RemoveTeamAccountInviteResponse | PlainMessage<RemoveTeamAccountInviteResponse> | undefined): boolean {
    return proto3.util.equals(RemoveTeamAccountInviteResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.AcceptTeamAccountInviteRequest
 */
export class AcceptTeamAccountInviteRequest extends Message<AcceptTeamAccountInviteRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<AcceptTeamAccountInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AcceptTeamAccountInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptTeamAccountInviteRequest {
    return new AcceptTeamAccountInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptTeamAccountInviteRequest {
    return new AcceptTeamAccountInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptTeamAccountInviteRequest {
    return new AcceptTeamAccountInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AcceptTeamAccountInviteRequest | PlainMessage<AcceptTeamAccountInviteRequest> | undefined, b: AcceptTeamAccountInviteRequest | PlainMessage<AcceptTeamAccountInviteRequest> | undefined): boolean {
    return proto3.util.equals(AcceptTeamAccountInviteRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.AcceptTeamAccountInviteResponse
 */
export class AcceptTeamAccountInviteResponse extends Message<AcceptTeamAccountInviteResponse> {
  /**
   * @generated from field: mgmt.v1alpha1.UserAccount account = 1;
   */
  account?: UserAccount;

  constructor(data?: PartialMessage<AcceptTeamAccountInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AcceptTeamAccountInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account", kind: "message", T: UserAccount },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptTeamAccountInviteResponse {
    return new AcceptTeamAccountInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptTeamAccountInviteResponse {
    return new AcceptTeamAccountInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptTeamAccountInviteResponse {
    return new AcceptTeamAccountInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AcceptTeamAccountInviteResponse | PlainMessage<AcceptTeamAccountInviteResponse> | undefined, b: AcceptTeamAccountInviteResponse | PlainMessage<AcceptTeamAccountInviteResponse> | undefined): boolean {
    return proto3.util.equals(AcceptTeamAccountInviteResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetSystemInformationRequest
 */
export class GetSystemInformationRequest extends Message<GetSystemInformationRequest> {
  constructor(data?: PartialMessage<GetSystemInformationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetSystemInformationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemInformationRequest {
    return new GetSystemInformationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemInformationRequest {
    return new GetSystemInformationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemInformationRequest {
    return new GetSystemInformationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemInformationRequest | PlainMessage<GetSystemInformationRequest> | undefined, b: GetSystemInformationRequest | PlainMessage<GetSystemInformationRequest> | undefined): boolean {
    return proto3.util.equals(GetSystemInformationRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetSystemInformationResponse
 */
export class GetSystemInformationResponse extends Message<GetSystemInformationResponse> {
  /**
   * The Git tagged version
   *
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * The Git commit
   *
   * @generated from field: string commit = 2;
   */
  commit = "";

  /**
   * The Go compiler flag that was used to build this version of Neosync
   *
   * @generated from field: string compiler = 3;
   */
  compiler = "";

  /**
   * The Go platform flag that was used to build this version of Neosync
   *
   * @generated from field: string platform = 4;
   */
  platform = "";

  /**
   * @generated from field: google.protobuf.Timestamp build_date = 5;
   */
  buildDate?: Timestamp;

  constructor(data?: PartialMessage<GetSystemInformationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetSystemInformationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "compiler", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "platform", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "build_date", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemInformationResponse {
    return new GetSystemInformationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemInformationResponse {
    return new GetSystemInformationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemInformationResponse {
    return new GetSystemInformationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemInformationResponse | PlainMessage<GetSystemInformationResponse> | undefined, b: GetSystemInformationResponse | PlainMessage<GetSystemInformationResponse> | undefined): boolean {
    return proto3.util.equals(GetSystemInformationResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetAccountOnboardingConfigRequest
 */
export class GetAccountOnboardingConfigRequest extends Message<GetAccountOnboardingConfigRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetAccountOnboardingConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetAccountOnboardingConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountOnboardingConfigRequest {
    return new GetAccountOnboardingConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountOnboardingConfigRequest {
    return new GetAccountOnboardingConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountOnboardingConfigRequest {
    return new GetAccountOnboardingConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountOnboardingConfigRequest | PlainMessage<GetAccountOnboardingConfigRequest> | undefined, b: GetAccountOnboardingConfigRequest | PlainMessage<GetAccountOnboardingConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetAccountOnboardingConfigRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetAccountOnboardingConfigResponse
 */
export class GetAccountOnboardingConfigResponse extends Message<GetAccountOnboardingConfigResponse> {
  /**
   * @generated from field: mgmt.v1alpha1.AccountOnboardingConfig config = 1;
   */
  config?: AccountOnboardingConfig;

  constructor(data?: PartialMessage<GetAccountOnboardingConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetAccountOnboardingConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: AccountOnboardingConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountOnboardingConfigResponse {
    return new GetAccountOnboardingConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountOnboardingConfigResponse {
    return new GetAccountOnboardingConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountOnboardingConfigResponse {
    return new GetAccountOnboardingConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountOnboardingConfigResponse | PlainMessage<GetAccountOnboardingConfigResponse> | undefined, b: GetAccountOnboardingConfigResponse | PlainMessage<GetAccountOnboardingConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetAccountOnboardingConfigResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetAccountOnboardingConfigRequest
 */
export class SetAccountOnboardingConfigRequest extends Message<SetAccountOnboardingConfigRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: mgmt.v1alpha1.AccountOnboardingConfig config = 2;
   */
  config?: AccountOnboardingConfig;

  constructor(data?: PartialMessage<SetAccountOnboardingConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetAccountOnboardingConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: AccountOnboardingConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetAccountOnboardingConfigRequest {
    return new SetAccountOnboardingConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetAccountOnboardingConfigRequest {
    return new SetAccountOnboardingConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetAccountOnboardingConfigRequest {
    return new SetAccountOnboardingConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetAccountOnboardingConfigRequest | PlainMessage<SetAccountOnboardingConfigRequest> | undefined, b: SetAccountOnboardingConfigRequest | PlainMessage<SetAccountOnboardingConfigRequest> | undefined): boolean {
    return proto3.util.equals(SetAccountOnboardingConfigRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetAccountOnboardingConfigResponse
 */
export class SetAccountOnboardingConfigResponse extends Message<SetAccountOnboardingConfigResponse> {
  /**
   * @generated from field: mgmt.v1alpha1.AccountOnboardingConfig config = 1;
   */
  config?: AccountOnboardingConfig;

  constructor(data?: PartialMessage<SetAccountOnboardingConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetAccountOnboardingConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: AccountOnboardingConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetAccountOnboardingConfigResponse {
    return new SetAccountOnboardingConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetAccountOnboardingConfigResponse {
    return new SetAccountOnboardingConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetAccountOnboardingConfigResponse {
    return new SetAccountOnboardingConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetAccountOnboardingConfigResponse | PlainMessage<SetAccountOnboardingConfigResponse> | undefined, b: SetAccountOnboardingConfigResponse | PlainMessage<SetAccountOnboardingConfigResponse> | undefined): boolean {
    return proto3.util.equals(SetAccountOnboardingConfigResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.AccountOnboardingConfig
 */
export class AccountOnboardingConfig extends Message<AccountOnboardingConfig> {
  /**
   * @deprecated - use has_completed_onboarding
   *
   * @generated from field: bool has_created_source_connection = 1;
   */
  hasCreatedSourceConnection = false;

  /**
   * @deprecated - use has_completed_onboarding
   *
   * @generated from field: bool has_created_destination_connection = 2;
   */
  hasCreatedDestinationConnection = false;

  /**
   * @deprecated - use has_completed_onboarding
   *
   * @generated from field: bool has_created_job = 3;
   */
  hasCreatedJob = false;

  /**
   * @deprecated - use has_completed_onboarding
   *
   * @generated from field: bool has_invited_members = 4;
   */
  hasInvitedMembers = false;

  /**
   * @generated from field: bool has_completed_onboarding = 5;
   */
  hasCompletedOnboarding = false;

  constructor(data?: PartialMessage<AccountOnboardingConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.AccountOnboardingConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has_created_source_connection", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "has_created_destination_connection", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "has_created_job", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "has_invited_members", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "has_completed_onboarding", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccountOnboardingConfig {
    return new AccountOnboardingConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccountOnboardingConfig {
    return new AccountOnboardingConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccountOnboardingConfig {
    return new AccountOnboardingConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AccountOnboardingConfig | PlainMessage<AccountOnboardingConfig> | undefined, b: AccountOnboardingConfig | PlainMessage<AccountOnboardingConfig> | undefined): boolean {
    return proto3.util.equals(AccountOnboardingConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetAccountStatusRequest
 */
export class GetAccountStatusRequest extends Message<GetAccountStatusRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetAccountStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetAccountStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountStatusRequest {
    return new GetAccountStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountStatusRequest {
    return new GetAccountStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountStatusRequest {
    return new GetAccountStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountStatusRequest | PlainMessage<GetAccountStatusRequest> | undefined, b: GetAccountStatusRequest | PlainMessage<GetAccountStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetAccountStatusRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetAccountStatusResponse
 */
export class GetAccountStatusResponse extends Message<GetAccountStatusResponse> {
  /**
   * A count of the currently used records for the current billing period.
   * This may go over the allowed record count depending on when the record count is polled by the metric system.
   *
   * @generated from field: uint64 used_record_count = 1;
   */
  usedRecordCount = protoInt64.zero;

  /**
   * The allowed record count. It will be null if there is no limit.
   *
   * @generated from field: optional uint64 allowed_record_count = 2;
   */
  allowedRecordCount?: bigint;

  /**
   * The current subscription status determined by the billing system.
   *
   * @generated from field: mgmt.v1alpha1.BillingStatus subscription_status = 3;
   */
  subscriptionStatus = BillingStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<GetAccountStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetAccountStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "used_record_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "allowed_record_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "subscription_status", kind: "enum", T: proto3.getEnumType(BillingStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountStatusResponse {
    return new GetAccountStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountStatusResponse {
    return new GetAccountStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountStatusResponse {
    return new GetAccountStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountStatusResponse | PlainMessage<GetAccountStatusResponse> | undefined, b: GetAccountStatusResponse | PlainMessage<GetAccountStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetAccountStatusResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.IsAccountStatusValidRequest
 */
export class IsAccountStatusValidRequest extends Message<IsAccountStatusValidRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * An optional count of records to be added to the current usage for validation.
   *
   * @generated from field: optional uint64 requested_record_count = 2;
   */
  requestedRecordCount?: bigint;

  constructor(data?: PartialMessage<IsAccountStatusValidRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.IsAccountStatusValidRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "requested_record_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsAccountStatusValidRequest {
    return new IsAccountStatusValidRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsAccountStatusValidRequest {
    return new IsAccountStatusValidRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsAccountStatusValidRequest {
    return new IsAccountStatusValidRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IsAccountStatusValidRequest | PlainMessage<IsAccountStatusValidRequest> | undefined, b: IsAccountStatusValidRequest | PlainMessage<IsAccountStatusValidRequest> | undefined): boolean {
    return proto3.util.equals(IsAccountStatusValidRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.IsAccountStatusValidResponse
 */
export class IsAccountStatusValidResponse extends Message<IsAccountStatusValidResponse> {
  /**
   * @generated from field: bool is_valid = 1;
   */
  isValid = false;

  /**
   * If the account is not valid, a reason for why may be provided.
   *
   * @generated from field: optional string reason = 2;
   */
  reason?: string;

  /**
   * Whether or not the process should decide to continue polling for validitiy updates
   *
   * @generated from field: bool should_poll = 3;
   */
  shouldPoll = false;

  /**
   * A count of the currently used records for the current billing period.
   * This may go over the allowed record count depending on when the record count is polled by the metric system.
   * @deprecated
   *
   * @generated from field: uint64 used_record_count = 4;
   */
  usedRecordCount = protoInt64.zero;

  /**
   * The allowed record count. It will be null if there is no limit.
   * @deprecated
   *
   * @generated from field: optional uint64 allowed_record_count = 5;
   */
  allowedRecordCount?: bigint;

  /**
   * The current status of the account. Default is valid.
   *
   * @generated from field: mgmt.v1alpha1.AccountStatus account_status = 6;
   */
  accountStatus = AccountStatus.REASON_UNSPECIFIED;

  /**
   * The time when the trial expires
   *
   * @generated from field: optional google.protobuf.Timestamp trial_expires_at = 7;
   */
  trialExpiresAt?: Timestamp;

  constructor(data?: PartialMessage<IsAccountStatusValidResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.IsAccountStatusValidResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_valid", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "should_poll", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "used_record_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "allowed_record_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 6, name: "account_status", kind: "enum", T: proto3.getEnumType(AccountStatus) },
    { no: 7, name: "trial_expires_at", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsAccountStatusValidResponse {
    return new IsAccountStatusValidResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsAccountStatusValidResponse {
    return new IsAccountStatusValidResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsAccountStatusValidResponse {
    return new IsAccountStatusValidResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IsAccountStatusValidResponse | PlainMessage<IsAccountStatusValidResponse> | undefined, b: IsAccountStatusValidResponse | PlainMessage<IsAccountStatusValidResponse> | undefined): boolean {
    return proto3.util.equals(IsAccountStatusValidResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetAccountBillingCheckoutSessionRequest
 */
export class GetAccountBillingCheckoutSessionRequest extends Message<GetAccountBillingCheckoutSessionRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetAccountBillingCheckoutSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetAccountBillingCheckoutSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountBillingCheckoutSessionRequest {
    return new GetAccountBillingCheckoutSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountBillingCheckoutSessionRequest {
    return new GetAccountBillingCheckoutSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountBillingCheckoutSessionRequest {
    return new GetAccountBillingCheckoutSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountBillingCheckoutSessionRequest | PlainMessage<GetAccountBillingCheckoutSessionRequest> | undefined, b: GetAccountBillingCheckoutSessionRequest | PlainMessage<GetAccountBillingCheckoutSessionRequest> | undefined): boolean {
    return proto3.util.equals(GetAccountBillingCheckoutSessionRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetAccountBillingCheckoutSessionResponse
 */
export class GetAccountBillingCheckoutSessionResponse extends Message<GetAccountBillingCheckoutSessionResponse> {
  /**
   * The url that will be redirected to
   *
   * @generated from field: string checkout_session_url = 1;
   */
  checkoutSessionUrl = "";

  constructor(data?: PartialMessage<GetAccountBillingCheckoutSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetAccountBillingCheckoutSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "checkout_session_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountBillingCheckoutSessionResponse {
    return new GetAccountBillingCheckoutSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountBillingCheckoutSessionResponse {
    return new GetAccountBillingCheckoutSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountBillingCheckoutSessionResponse {
    return new GetAccountBillingCheckoutSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountBillingCheckoutSessionResponse | PlainMessage<GetAccountBillingCheckoutSessionResponse> | undefined, b: GetAccountBillingCheckoutSessionResponse | PlainMessage<GetAccountBillingCheckoutSessionResponse> | undefined): boolean {
    return proto3.util.equals(GetAccountBillingCheckoutSessionResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetAccountBillingPortalSessionRequest
 */
export class GetAccountBillingPortalSessionRequest extends Message<GetAccountBillingPortalSessionRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetAccountBillingPortalSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetAccountBillingPortalSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountBillingPortalSessionRequest {
    return new GetAccountBillingPortalSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountBillingPortalSessionRequest {
    return new GetAccountBillingPortalSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountBillingPortalSessionRequest {
    return new GetAccountBillingPortalSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountBillingPortalSessionRequest | PlainMessage<GetAccountBillingPortalSessionRequest> | undefined, b: GetAccountBillingPortalSessionRequest | PlainMessage<GetAccountBillingPortalSessionRequest> | undefined): boolean {
    return proto3.util.equals(GetAccountBillingPortalSessionRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetAccountBillingPortalSessionResponse
 */
export class GetAccountBillingPortalSessionResponse extends Message<GetAccountBillingPortalSessionResponse> {
  /**
   * The url that will be redirected to
   *
   * @generated from field: string portal_session_url = 1;
   */
  portalSessionUrl = "";

  constructor(data?: PartialMessage<GetAccountBillingPortalSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetAccountBillingPortalSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "portal_session_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountBillingPortalSessionResponse {
    return new GetAccountBillingPortalSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountBillingPortalSessionResponse {
    return new GetAccountBillingPortalSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountBillingPortalSessionResponse {
    return new GetAccountBillingPortalSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountBillingPortalSessionResponse | PlainMessage<GetAccountBillingPortalSessionResponse> | undefined, b: GetAccountBillingPortalSessionResponse | PlainMessage<GetAccountBillingPortalSessionResponse> | undefined): boolean {
    return proto3.util.equals(GetAccountBillingPortalSessionResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetBillingAccountsRequest
 */
export class GetBillingAccountsRequest extends Message<GetBillingAccountsRequest> {
  /**
   * Optional list of account identifiers to filter the response by
   *
   * @generated from field: repeated string account_ids = 1;
   */
  accountIds: string[] = [];

  constructor(data?: PartialMessage<GetBillingAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetBillingAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBillingAccountsRequest {
    return new GetBillingAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBillingAccountsRequest {
    return new GetBillingAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBillingAccountsRequest {
    return new GetBillingAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBillingAccountsRequest | PlainMessage<GetBillingAccountsRequest> | undefined, b: GetBillingAccountsRequest | PlainMessage<GetBillingAccountsRequest> | undefined): boolean {
    return proto3.util.equals(GetBillingAccountsRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetBillingAccountsResponse
 */
export class GetBillingAccountsResponse extends Message<GetBillingAccountsResponse> {
  /**
   * @generated from field: repeated mgmt.v1alpha1.UserAccount accounts = 1;
   */
  accounts: UserAccount[] = [];

  constructor(data?: PartialMessage<GetBillingAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetBillingAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: UserAccount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBillingAccountsResponse {
    return new GetBillingAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBillingAccountsResponse {
    return new GetBillingAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBillingAccountsResponse {
    return new GetBillingAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBillingAccountsResponse | PlainMessage<GetBillingAccountsResponse> | undefined, b: GetBillingAccountsResponse | PlainMessage<GetBillingAccountsResponse> | undefined): boolean {
    return proto3.util.equals(GetBillingAccountsResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetBillingMeterEventRequest
 */
export class SetBillingMeterEventRequest extends Message<SetBillingMeterEventRequest> {
  /**
   * The account id to apply this metered event to
   *
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * The metered event name
   *
   * @generated from field: string event_name = 2;
   */
  eventName = "";

  /**
   * The value of the meter for the given time
   *
   * @generated from field: string value = 3;
   */
  value = "";

  /**
   * The unique identifier of this metered event
   *
   * @generated from field: string event_id = 4;
   */
  eventId = "";

  /**
   * The time of the event in Unix Epoch format. Defaults to the current timestamp if not specified.
   *
   * @generated from field: optional uint64 timestamp = 5;
   */
  timestamp?: bigint;

  constructor(data?: PartialMessage<SetBillingMeterEventRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetBillingMeterEventRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "event_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "timestamp", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetBillingMeterEventRequest {
    return new SetBillingMeterEventRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetBillingMeterEventRequest {
    return new SetBillingMeterEventRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetBillingMeterEventRequest {
    return new SetBillingMeterEventRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetBillingMeterEventRequest | PlainMessage<SetBillingMeterEventRequest> | undefined, b: SetBillingMeterEventRequest | PlainMessage<SetBillingMeterEventRequest> | undefined): boolean {
    return proto3.util.equals(SetBillingMeterEventRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetBillingMeterEventResponse
 */
export class SetBillingMeterEventResponse extends Message<SetBillingMeterEventResponse> {
  constructor(data?: PartialMessage<SetBillingMeterEventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetBillingMeterEventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetBillingMeterEventResponse {
    return new SetBillingMeterEventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetBillingMeterEventResponse {
    return new SetBillingMeterEventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetBillingMeterEventResponse {
    return new SetBillingMeterEventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetBillingMeterEventResponse | PlainMessage<SetBillingMeterEventResponse> | undefined, b: SetBillingMeterEventResponse | PlainMessage<SetBillingMeterEventResponse> | undefined): boolean {
    return proto3.util.equals(SetBillingMeterEventResponse, a, b);
  }
}

