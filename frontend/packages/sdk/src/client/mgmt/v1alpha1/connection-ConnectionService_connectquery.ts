// @generated by protoc-gen-connect-query v1.4.1 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/connection.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import { CheckConnectionConfigRequest, CheckConnectionConfigResponse, CheckSqlQueryRequest, CheckSqlQueryResponse, CreateConnectionRequest, CreateConnectionResponse, DeleteConnectionRequest, DeleteConnectionResponse, GetConnectionRequest, GetConnectionResponse, GetConnectionsRequest, GetConnectionsResponse, IsConnectionNameAvailableRequest, IsConnectionNameAvailableResponse, UpdateConnectionRequest, UpdateConnectionResponse } from "./connection_pb.js";

/**
 * Returns a list of connections associated with the account
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionService.GetConnections
 */
export const getConnections = {
  localName: "getConnections",
  name: "GetConnections",
  kind: MethodKind.Unary,
  I: GetConnectionsRequest,
  O: GetConnectionsResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionService"
  }
} as const;

/**
 * Returns a single connection
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionService.GetConnection
 */
export const getConnection = {
  localName: "getConnection",
  name: "GetConnection",
  kind: MethodKind.Unary,
  I: GetConnectionRequest,
  O: GetConnectionResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionService"
  }
} as const;

/**
 * Creates a new connection
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionService.CreateConnection
 */
export const createConnection = {
  localName: "createConnection",
  name: "CreateConnection",
  kind: MethodKind.Unary,
  I: CreateConnectionRequest,
  O: CreateConnectionResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionService"
  }
} as const;

/**
 * Updates an existing connection
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionService.UpdateConnection
 */
export const updateConnection = {
  localName: "updateConnection",
  name: "UpdateConnection",
  kind: MethodKind.Unary,
  I: UpdateConnectionRequest,
  O: UpdateConnectionResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionService"
  }
} as const;

/**
 * Removes a connection from the system.
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionService.DeleteConnection
 */
export const deleteConnection = {
  localName: "deleteConnection",
  name: "DeleteConnection",
  kind: MethodKind.Unary,
  I: DeleteConnectionRequest,
  O: DeleteConnectionResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionService"
  }
} as const;

/**
 * Connections have friendly names, this method checks if the requested name is available in the system based on the account
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionService.IsConnectionNameAvailable
 */
export const isConnectionNameAvailable = {
  localName: "isConnectionNameAvailable",
  name: "IsConnectionNameAvailable",
  kind: MethodKind.Unary,
  I: IsConnectionNameAvailableRequest,
  O: IsConnectionNameAvailableResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionService"
  }
} as const;

/**
 * Checks if the connection config is connectable by the backend.
 * Used mostly to verify that a connection is valid prior to creating a Connection object.
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionService.CheckConnectionConfig
 */
export const checkConnectionConfig = {
  localName: "checkConnectionConfig",
  name: "CheckConnectionConfig",
  kind: MethodKind.Unary,
  I: CheckConnectionConfigRequest,
  O: CheckConnectionConfigResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionService"
  }
} as const;

/**
 * Checks a constructed SQL query against a sql-based connection to see if it's valid based on that connection's data schema
 * This is useful when constructing subsets to see if the WHERE clause is correct
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionService.CheckSqlQuery
 */
export const checkSqlQuery = {
  localName: "checkSqlQuery",
  name: "CheckSqlQuery",
  kind: MethodKind.Unary,
  I: CheckSqlQueryRequest,
  O: CheckSqlQueryResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionService"
  }
} as const;
