// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/connection.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CheckConnectionConfigByIdRequest, CheckConnectionConfigByIdResponse, CheckConnectionConfigRequest, CheckConnectionConfigResponse, CheckSqlQueryRequest, CheckSqlQueryResponse, CreateConnectionRequest, CreateConnectionResponse, DeleteConnectionRequest, DeleteConnectionResponse, GetConnectionRequest, GetConnectionResponse, GetConnectionsRequest, GetConnectionsResponse, IsConnectionNameAvailableRequest, IsConnectionNameAvailableResponse, UpdateConnectionRequest, UpdateConnectionResponse } from "./connection_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Service for managing datasource connections.
 * This is a primary data model in Neosync and is used in reference when hooking up Jobs to synchronize and generate data.
 *
 * @generated from service mgmt.v1alpha1.ConnectionService
 */
export const ConnectionService = {
  typeName: "mgmt.v1alpha1.ConnectionService",
  methods: {
    /**
     * Returns a list of connections associated with the account
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionService.GetConnections
     */
    getConnections: {
      name: "GetConnections",
      I: GetConnectionsRequest,
      O: GetConnectionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns a single connection
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionService.GetConnection
     */
    getConnection: {
      name: "GetConnection",
      I: GetConnectionRequest,
      O: GetConnectionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Creates a new connection
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionService.CreateConnection
     */
    createConnection: {
      name: "CreateConnection",
      I: CreateConnectionRequest,
      O: CreateConnectionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Updates an existing connection
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionService.UpdateConnection
     */
    updateConnection: {
      name: "UpdateConnection",
      I: UpdateConnectionRequest,
      O: UpdateConnectionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removes a connection from the system.
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionService.DeleteConnection
     */
    deleteConnection: {
      name: "DeleteConnection",
      I: DeleteConnectionRequest,
      O: DeleteConnectionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Connections have friendly names, this method checks if the requested name is available in the system based on the account
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionService.IsConnectionNameAvailable
     */
    isConnectionNameAvailable: {
      name: "IsConnectionNameAvailable",
      I: IsConnectionNameAvailableRequest,
      O: IsConnectionNameAvailableResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Checks if the connection config is connectable by the backend.
     * Used mostly to verify that a connection is valid prior to creating a Connection object.
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionService.CheckConnectionConfig
     */
    checkConnectionConfig: {
      name: "CheckConnectionConfig",
      I: CheckConnectionConfigRequest,
      O: CheckConnectionConfigResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Checks if the connection id is connectable by the backend.
     * Used to verify that a connection is still connectable.
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionService.CheckConnectionConfigById
     */
    checkConnectionConfigById: {
      name: "CheckConnectionConfigById",
      I: CheckConnectionConfigByIdRequest,
      O: CheckConnectionConfigByIdResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Checks a constructed SQL query against a sql-based connection to see if it's valid based on that connection's data schema
     * This is useful when constructing subsets to see if the WHERE clause is correct
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionService.CheckSqlQuery
     */
    checkSqlQuery: {
      name: "CheckSqlQuery",
      I: CheckSqlQueryRequest,
      O: CheckSqlQueryResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

