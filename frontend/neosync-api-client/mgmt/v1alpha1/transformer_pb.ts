// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file mgmt/v1alpha1/transformer.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message mgmt.v1alpha1.GetSystemTransformersRequest
 */
export class GetSystemTransformersRequest extends Message<GetSystemTransformersRequest> {
  constructor(data?: PartialMessage<GetSystemTransformersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetSystemTransformersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemTransformersRequest {
    return new GetSystemTransformersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemTransformersRequest {
    return new GetSystemTransformersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemTransformersRequest {
    return new GetSystemTransformersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemTransformersRequest | PlainMessage<GetSystemTransformersRequest> | undefined, b: GetSystemTransformersRequest | PlainMessage<GetSystemTransformersRequest> | undefined): boolean {
    return proto3.util.equals(GetSystemTransformersRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetSystemTransformersResponse
 */
export class GetSystemTransformersResponse extends Message<GetSystemTransformersResponse> {
  /**
   * @generated from field: repeated mgmt.v1alpha1.Transformer transformers = 1;
   */
  transformers: Transformer[] = [];

  constructor(data?: PartialMessage<GetSystemTransformersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetSystemTransformersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transformers", kind: "message", T: Transformer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemTransformersResponse {
    return new GetSystemTransformersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemTransformersResponse {
    return new GetSystemTransformersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemTransformersResponse {
    return new GetSystemTransformersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemTransformersResponse | PlainMessage<GetSystemTransformersResponse> | undefined, b: GetSystemTransformersResponse | PlainMessage<GetSystemTransformersResponse> | undefined): boolean {
    return proto3.util.equals(GetSystemTransformersResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetCustomTransformersRequest
 */
export class GetCustomTransformersRequest extends Message<GetCustomTransformersRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<GetCustomTransformersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetCustomTransformersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCustomTransformersRequest {
    return new GetCustomTransformersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCustomTransformersRequest {
    return new GetCustomTransformersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCustomTransformersRequest {
    return new GetCustomTransformersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCustomTransformersRequest | PlainMessage<GetCustomTransformersRequest> | undefined, b: GetCustomTransformersRequest | PlainMessage<GetCustomTransformersRequest> | undefined): boolean {
    return proto3.util.equals(GetCustomTransformersRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetCustomTransformersResponse
 */
export class GetCustomTransformersResponse extends Message<GetCustomTransformersResponse> {
  /**
   * @generated from field: repeated mgmt.v1alpha1.CustomTransformer transformers = 1;
   */
  transformers: CustomTransformer[] = [];

  constructor(data?: PartialMessage<GetCustomTransformersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetCustomTransformersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transformers", kind: "message", T: CustomTransformer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCustomTransformersResponse {
    return new GetCustomTransformersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCustomTransformersResponse {
    return new GetCustomTransformersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCustomTransformersResponse {
    return new GetCustomTransformersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCustomTransformersResponse | PlainMessage<GetCustomTransformersResponse> | undefined, b: GetCustomTransformersResponse | PlainMessage<GetCustomTransformersResponse> | undefined): boolean {
    return proto3.util.equals(GetCustomTransformersResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.CreateCustomTransformerRequest
 */
export class CreateCustomTransformerRequest extends Message<CreateCustomTransformerRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string type = 4;
   */
  type = "";

  /**
   * @generated from field: mgmt.v1alpha1.TransformerConfig transformer_config = 5;
   */
  transformerConfig?: TransformerConfig;

  constructor(data?: PartialMessage<CreateCustomTransformerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.CreateCustomTransformerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "transformer_config", kind: "message", T: TransformerConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCustomTransformerRequest {
    return new CreateCustomTransformerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCustomTransformerRequest {
    return new CreateCustomTransformerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCustomTransformerRequest {
    return new CreateCustomTransformerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCustomTransformerRequest | PlainMessage<CreateCustomTransformerRequest> | undefined, b: CreateCustomTransformerRequest | PlainMessage<CreateCustomTransformerRequest> | undefined): boolean {
    return proto3.util.equals(CreateCustomTransformerRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.CreateCustomTransformerResponse
 */
export class CreateCustomTransformerResponse extends Message<CreateCustomTransformerResponse> {
  /**
   * @generated from field: mgmt.v1alpha1.CustomTransformer transformer = 1;
   */
  transformer?: CustomTransformer;

  constructor(data?: PartialMessage<CreateCustomTransformerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.CreateCustomTransformerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transformer", kind: "message", T: CustomTransformer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCustomTransformerResponse {
    return new CreateCustomTransformerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCustomTransformerResponse {
    return new CreateCustomTransformerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCustomTransformerResponse {
    return new CreateCustomTransformerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCustomTransformerResponse | PlainMessage<CreateCustomTransformerResponse> | undefined, b: CreateCustomTransformerResponse | PlainMessage<CreateCustomTransformerResponse> | undefined): boolean {
    return proto3.util.equals(CreateCustomTransformerResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.DeleteCustomTransformerRequest
 */
export class DeleteCustomTransformerRequest extends Message<DeleteCustomTransformerRequest> {
  /**
   * @generated from field: string transformer_id = 1;
   */
  transformerId = "";

  constructor(data?: PartialMessage<DeleteCustomTransformerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.DeleteCustomTransformerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transformer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCustomTransformerRequest {
    return new DeleteCustomTransformerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCustomTransformerRequest {
    return new DeleteCustomTransformerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCustomTransformerRequest {
    return new DeleteCustomTransformerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCustomTransformerRequest | PlainMessage<DeleteCustomTransformerRequest> | undefined, b: DeleteCustomTransformerRequest | PlainMessage<DeleteCustomTransformerRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCustomTransformerRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.DeleteCustomTransformerResponse
 */
export class DeleteCustomTransformerResponse extends Message<DeleteCustomTransformerResponse> {
  constructor(data?: PartialMessage<DeleteCustomTransformerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.DeleteCustomTransformerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCustomTransformerResponse {
    return new DeleteCustomTransformerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCustomTransformerResponse {
    return new DeleteCustomTransformerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCustomTransformerResponse {
    return new DeleteCustomTransformerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCustomTransformerResponse | PlainMessage<DeleteCustomTransformerResponse> | undefined, b: DeleteCustomTransformerResponse | PlainMessage<DeleteCustomTransformerResponse> | undefined): boolean {
    return proto3.util.equals(DeleteCustomTransformerResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.UpdateCustomTransformerRequest
 */
export class UpdateCustomTransformerRequest extends Message<UpdateCustomTransformerRequest> {
  /**
   * @generated from field: string transformer_id = 1;
   */
  transformerId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: mgmt.v1alpha1.TransformerConfig transformer_config = 4;
   */
  transformerConfig?: TransformerConfig;

  constructor(data?: PartialMessage<UpdateCustomTransformerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.UpdateCustomTransformerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transformer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "transformer_config", kind: "message", T: TransformerConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCustomTransformerRequest {
    return new UpdateCustomTransformerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCustomTransformerRequest {
    return new UpdateCustomTransformerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCustomTransformerRequest {
    return new UpdateCustomTransformerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCustomTransformerRequest | PlainMessage<UpdateCustomTransformerRequest> | undefined, b: UpdateCustomTransformerRequest | PlainMessage<UpdateCustomTransformerRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCustomTransformerRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.UpdateCustomTransformerResponse
 */
export class UpdateCustomTransformerResponse extends Message<UpdateCustomTransformerResponse> {
  /**
   * @generated from field: mgmt.v1alpha1.CustomTransformer transformer = 1;
   */
  transformer?: CustomTransformer;

  constructor(data?: PartialMessage<UpdateCustomTransformerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.UpdateCustomTransformerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transformer", kind: "message", T: CustomTransformer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCustomTransformerResponse {
    return new UpdateCustomTransformerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCustomTransformerResponse {
    return new UpdateCustomTransformerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCustomTransformerResponse {
    return new UpdateCustomTransformerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCustomTransformerResponse | PlainMessage<UpdateCustomTransformerResponse> | undefined, b: UpdateCustomTransformerResponse | PlainMessage<UpdateCustomTransformerResponse> | undefined): boolean {
    return proto3.util.equals(UpdateCustomTransformerResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.IsTransformerNameAvailableRequest
 */
export class IsTransformerNameAvailableRequest extends Message<IsTransformerNameAvailableRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: string transformer_name = 2;
   */
  transformerName = "";

  constructor(data?: PartialMessage<IsTransformerNameAvailableRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.IsTransformerNameAvailableRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transformer_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsTransformerNameAvailableRequest {
    return new IsTransformerNameAvailableRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsTransformerNameAvailableRequest {
    return new IsTransformerNameAvailableRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsTransformerNameAvailableRequest {
    return new IsTransformerNameAvailableRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IsTransformerNameAvailableRequest | PlainMessage<IsTransformerNameAvailableRequest> | undefined, b: IsTransformerNameAvailableRequest | PlainMessage<IsTransformerNameAvailableRequest> | undefined): boolean {
    return proto3.util.equals(IsTransformerNameAvailableRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.IsTransformerNameAvailableResponse
 */
export class IsTransformerNameAvailableResponse extends Message<IsTransformerNameAvailableResponse> {
  /**
   * @generated from field: bool is_available = 1;
   */
  isAvailable = false;

  constructor(data?: PartialMessage<IsTransformerNameAvailableResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.IsTransformerNameAvailableResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsTransformerNameAvailableResponse {
    return new IsTransformerNameAvailableResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsTransformerNameAvailableResponse {
    return new IsTransformerNameAvailableResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsTransformerNameAvailableResponse {
    return new IsTransformerNameAvailableResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IsTransformerNameAvailableResponse | PlainMessage<IsTransformerNameAvailableResponse> | undefined, b: IsTransformerNameAvailableResponse | PlainMessage<IsTransformerNameAvailableResponse> | undefined): boolean {
    return proto3.util.equals(IsTransformerNameAvailableResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.CustomTransformer
 */
export class CustomTransformer extends Message<CustomTransformer> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string type = 4;
   */
  type = "";

  /**
   * @generated from field: mgmt.v1alpha1.TransformerConfig config = 5;
   */
  config?: TransformerConfig;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: string account_id = 8;
   */
  accountId = "";

  constructor(data?: PartialMessage<CustomTransformer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.CustomTransformer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "config", kind: "message", T: TransformerConfig },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "updated_at", kind: "message", T: Timestamp },
    { no: 8, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomTransformer {
    return new CustomTransformer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomTransformer {
    return new CustomTransformer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomTransformer {
    return new CustomTransformer().fromJsonString(jsonString, options);
  }

  static equals(a: CustomTransformer | PlainMessage<CustomTransformer> | undefined, b: CustomTransformer | PlainMessage<CustomTransformer> | undefined): boolean {
    return proto3.util.equals(CustomTransformer, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.Transformer
 */
export class Transformer extends Message<Transformer> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * @generated from field: mgmt.v1alpha1.TransformerConfig config = 2;
   */
  config?: TransformerConfig;

  constructor(data?: PartialMessage<Transformer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.Transformer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: TransformerConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transformer {
    return new Transformer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transformer {
    return new Transformer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transformer {
    return new Transformer().fromJsonString(jsonString, options);
  }

  static equals(a: Transformer | PlainMessage<Transformer> | undefined, b: Transformer | PlainMessage<Transformer> | undefined): boolean {
    return proto3.util.equals(Transformer, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.TransformerConfig
 */
export class TransformerConfig extends Message<TransformerConfig> {
  /**
   * @generated from oneof mgmt.v1alpha1.TransformerConfig.config
   */
  config: {
    /**
     * @generated from field: mgmt.v1alpha1.EmailConfig email_config = 1;
     */
    value: EmailConfig;
    case: "emailConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.Passthrough passthrough_config = 2;
     */
    value: Passthrough;
    case: "passthroughConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.Uuid uuid_config = 3;
     */
    value: Uuid;
    case: "uuidConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.FirstName first_name_config = 4;
     */
    value: FirstName;
    case: "firstNameConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.LastName last_name_config = 5;
     */
    value: LastName;
    case: "lastNameConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.FullName full_name_config = 6;
     */
    value: FullName;
    case: "fullNameConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.PhoneNumber phone_number_config = 7;
     */
    value: PhoneNumber;
    case: "phoneNumberConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.IntPhoneNumber int_phone_number_config = 8;
     */
    value: IntPhoneNumber;
    case: "intPhoneNumberConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.RandomString random_string_config = 9;
     */
    value: RandomString;
    case: "randomStringConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.RandomBool random_bool_config = 10;
     */
    value: RandomBool;
    case: "randomBoolConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.RandomInt random_int_config = 11;
     */
    value: RandomInt;
    case: "randomIntConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.RandomFloat random_float_config = 12;
     */
    value: RandomFloat;
    case: "randomFloatConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.Gender gender_config = 13;
     */
    value: Gender;
    case: "genderConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.Null null_config = 14;
     */
    value: Null;
    case: "nullConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.UTCTimestamp utc_timestamp_config = 15;
     */
    value: UTCTimestamp;
    case: "utcTimestampConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.UnixTimestamp unix_timestamp_config = 16;
     */
    value: UnixTimestamp;
    case: "unixTimestampConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.StreetAddress street_address_config = 17;
     */
    value: StreetAddress;
    case: "streetAddressConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.City city_config = 18;
     */
    value: City;
    case: "cityConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.Zipcode zipcode_config = 19;
     */
    value: Zipcode;
    case: "zipcodeConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.State state_config = 20;
     */
    value: State;
    case: "stateConfig";
  } | {
    /**
     * @generated from field: mgmt.v1alpha1.FullAddress full_address_config = 21;
     */
    value: FullAddress;
    case: "fullAddressConfig";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TransformerConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.TransformerConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email_config", kind: "message", T: EmailConfig, oneof: "config" },
    { no: 2, name: "passthrough_config", kind: "message", T: Passthrough, oneof: "config" },
    { no: 3, name: "uuid_config", kind: "message", T: Uuid, oneof: "config" },
    { no: 4, name: "first_name_config", kind: "message", T: FirstName, oneof: "config" },
    { no: 5, name: "last_name_config", kind: "message", T: LastName, oneof: "config" },
    { no: 6, name: "full_name_config", kind: "message", T: FullName, oneof: "config" },
    { no: 7, name: "phone_number_config", kind: "message", T: PhoneNumber, oneof: "config" },
    { no: 8, name: "int_phone_number_config", kind: "message", T: IntPhoneNumber, oneof: "config" },
    { no: 9, name: "random_string_config", kind: "message", T: RandomString, oneof: "config" },
    { no: 10, name: "random_bool_config", kind: "message", T: RandomBool, oneof: "config" },
    { no: 11, name: "random_int_config", kind: "message", T: RandomInt, oneof: "config" },
    { no: 12, name: "random_float_config", kind: "message", T: RandomFloat, oneof: "config" },
    { no: 13, name: "gender_config", kind: "message", T: Gender, oneof: "config" },
    { no: 14, name: "null_config", kind: "message", T: Null, oneof: "config" },
    { no: 15, name: "utc_timestamp_config", kind: "message", T: UTCTimestamp, oneof: "config" },
    { no: 16, name: "unix_timestamp_config", kind: "message", T: UnixTimestamp, oneof: "config" },
    { no: 17, name: "street_address_config", kind: "message", T: StreetAddress, oneof: "config" },
    { no: 18, name: "city_config", kind: "message", T: City, oneof: "config" },
    { no: 19, name: "zipcode_config", kind: "message", T: Zipcode, oneof: "config" },
    { no: 20, name: "state_config", kind: "message", T: State, oneof: "config" },
    { no: 21, name: "full_address_config", kind: "message", T: FullAddress, oneof: "config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransformerConfig {
    return new TransformerConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransformerConfig {
    return new TransformerConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransformerConfig {
    return new TransformerConfig().fromJsonString(jsonString, options);
  }

  static equals(a: TransformerConfig | PlainMessage<TransformerConfig> | undefined, b: TransformerConfig | PlainMessage<TransformerConfig> | undefined): boolean {
    return proto3.util.equals(TransformerConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.EmailConfig
 */
export class EmailConfig extends Message<EmailConfig> {
  /**
   * @generated from field: bool preserve_domain = 1;
   */
  preserveDomain = false;

  /**
   * @generated from field: bool preserve_length = 2;
   */
  preserveLength = false;

  constructor(data?: PartialMessage<EmailConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.EmailConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preserve_domain", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "preserve_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailConfig {
    return new EmailConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailConfig {
    return new EmailConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailConfig {
    return new EmailConfig().fromJsonString(jsonString, options);
  }

  static equals(a: EmailConfig | PlainMessage<EmailConfig> | undefined, b: EmailConfig | PlainMessage<EmailConfig> | undefined): boolean {
    return proto3.util.equals(EmailConfig, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.Passthrough
 */
export class Passthrough extends Message<Passthrough> {
  constructor(data?: PartialMessage<Passthrough>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.Passthrough";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Passthrough {
    return new Passthrough().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Passthrough {
    return new Passthrough().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Passthrough {
    return new Passthrough().fromJsonString(jsonString, options);
  }

  static equals(a: Passthrough | PlainMessage<Passthrough> | undefined, b: Passthrough | PlainMessage<Passthrough> | undefined): boolean {
    return proto3.util.equals(Passthrough, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.Uuid
 */
export class Uuid extends Message<Uuid> {
  /**
   * @generated from field: bool include_hyphen = 1;
   */
  includeHyphen = false;

  constructor(data?: PartialMessage<Uuid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.Uuid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "include_hyphen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Uuid {
    return new Uuid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Uuid {
    return new Uuid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Uuid {
    return new Uuid().fromJsonString(jsonString, options);
  }

  static equals(a: Uuid | PlainMessage<Uuid> | undefined, b: Uuid | PlainMessage<Uuid> | undefined): boolean {
    return proto3.util.equals(Uuid, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.FirstName
 */
export class FirstName extends Message<FirstName> {
  /**
   * @generated from field: bool preserve_length = 1;
   */
  preserveLength = false;

  constructor(data?: PartialMessage<FirstName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.FirstName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preserve_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FirstName {
    return new FirstName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FirstName {
    return new FirstName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FirstName {
    return new FirstName().fromJsonString(jsonString, options);
  }

  static equals(a: FirstName | PlainMessage<FirstName> | undefined, b: FirstName | PlainMessage<FirstName> | undefined): boolean {
    return proto3.util.equals(FirstName, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.LastName
 */
export class LastName extends Message<LastName> {
  /**
   * @generated from field: bool preserve_length = 1;
   */
  preserveLength = false;

  constructor(data?: PartialMessage<LastName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.LastName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preserve_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LastName {
    return new LastName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LastName {
    return new LastName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LastName {
    return new LastName().fromJsonString(jsonString, options);
  }

  static equals(a: LastName | PlainMessage<LastName> | undefined, b: LastName | PlainMessage<LastName> | undefined): boolean {
    return proto3.util.equals(LastName, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.FullName
 */
export class FullName extends Message<FullName> {
  /**
   * @generated from field: bool preserve_length = 1;
   */
  preserveLength = false;

  constructor(data?: PartialMessage<FullName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.FullName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preserve_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullName {
    return new FullName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullName {
    return new FullName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullName {
    return new FullName().fromJsonString(jsonString, options);
  }

  static equals(a: FullName | PlainMessage<FullName> | undefined, b: FullName | PlainMessage<FullName> | undefined): boolean {
    return proto3.util.equals(FullName, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.PhoneNumber
 */
export class PhoneNumber extends Message<PhoneNumber> {
  /**
   * @generated from field: bool preserve_length = 1;
   */
  preserveLength = false;

  /**
   * @generated from field: bool e164_format = 2;
   */
  e164Format = false;

  /**
   * @generated from field: bool include_hyphens = 3;
   */
  includeHyphens = false;

  constructor(data?: PartialMessage<PhoneNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.PhoneNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preserve_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "e164_format", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "include_hyphens", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneNumber {
    return new PhoneNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneNumber {
    return new PhoneNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneNumber {
    return new PhoneNumber().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneNumber | PlainMessage<PhoneNumber> | undefined, b: PhoneNumber | PlainMessage<PhoneNumber> | undefined): boolean {
    return proto3.util.equals(PhoneNumber, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.IntPhoneNumber
 */
export class IntPhoneNumber extends Message<IntPhoneNumber> {
  /**
   * @generated from field: bool preserve_length = 1;
   */
  preserveLength = false;

  constructor(data?: PartialMessage<IntPhoneNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.IntPhoneNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preserve_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntPhoneNumber {
    return new IntPhoneNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntPhoneNumber {
    return new IntPhoneNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntPhoneNumber {
    return new IntPhoneNumber().fromJsonString(jsonString, options);
  }

  static equals(a: IntPhoneNumber | PlainMessage<IntPhoneNumber> | undefined, b: IntPhoneNumber | PlainMessage<IntPhoneNumber> | undefined): boolean {
    return proto3.util.equals(IntPhoneNumber, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.RandomString
 */
export class RandomString extends Message<RandomString> {
  /**
   * @generated from field: bool preserve_length = 1;
   */
  preserveLength = false;

  /**
   * @generated from field: int64 str_length = 2;
   */
  strLength = protoInt64.zero;

  /**
   * @generated from field: mgmt.v1alpha1.RandomString.StringCase str_case = 3;
   */
  strCase = RandomString_StringCase.UNSPECIFIED;

  constructor(data?: PartialMessage<RandomString>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.RandomString";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preserve_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "str_length", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "str_case", kind: "enum", T: proto3.getEnumType(RandomString_StringCase) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RandomString {
    return new RandomString().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RandomString {
    return new RandomString().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RandomString {
    return new RandomString().fromJsonString(jsonString, options);
  }

  static equals(a: RandomString | PlainMessage<RandomString> | undefined, b: RandomString | PlainMessage<RandomString> | undefined): boolean {
    return proto3.util.equals(RandomString, a, b);
  }
}

/**
 * @generated from enum mgmt.v1alpha1.RandomString.StringCase
 */
export enum RandomString_StringCase {
  /**
   * @generated from enum value: STRING_CASE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STRING_CASE_UPPER = 1;
   */
  UPPER = 1,

  /**
   * @generated from enum value: STRING_CASE_LOWER = 2;
   */
  LOWER = 2,

  /**
   * @generated from enum value: STRING_CASE_TITLE = 3;
   */
  TITLE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(RandomString_StringCase)
proto3.util.setEnumType(RandomString_StringCase, "mgmt.v1alpha1.RandomString.StringCase", [
  { no: 0, name: "STRING_CASE_UNSPECIFIED" },
  { no: 1, name: "STRING_CASE_UPPER" },
  { no: 2, name: "STRING_CASE_LOWER" },
  { no: 3, name: "STRING_CASE_TITLE" },
]);

/**
 * @generated from message mgmt.v1alpha1.Null
 */
export class Null extends Message<Null> {
  constructor(data?: PartialMessage<Null>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.Null";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Null {
    return new Null().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Null {
    return new Null().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Null {
    return new Null().fromJsonString(jsonString, options);
  }

  static equals(a: Null | PlainMessage<Null> | undefined, b: Null | PlainMessage<Null> | undefined): boolean {
    return proto3.util.equals(Null, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.RandomBool
 */
export class RandomBool extends Message<RandomBool> {
  constructor(data?: PartialMessage<RandomBool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.RandomBool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RandomBool {
    return new RandomBool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RandomBool {
    return new RandomBool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RandomBool {
    return new RandomBool().fromJsonString(jsonString, options);
  }

  static equals(a: RandomBool | PlainMessage<RandomBool> | undefined, b: RandomBool | PlainMessage<RandomBool> | undefined): boolean {
    return proto3.util.equals(RandomBool, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.RandomInt
 */
export class RandomInt extends Message<RandomInt> {
  /**
   * @generated from field: bool preserve_length = 1;
   */
  preserveLength = false;

  /**
   * @generated from field: int64 int_length = 2;
   */
  intLength = protoInt64.zero;

  constructor(data?: PartialMessage<RandomInt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.RandomInt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preserve_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "int_length", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RandomInt {
    return new RandomInt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RandomInt {
    return new RandomInt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RandomInt {
    return new RandomInt().fromJsonString(jsonString, options);
  }

  static equals(a: RandomInt | PlainMessage<RandomInt> | undefined, b: RandomInt | PlainMessage<RandomInt> | undefined): boolean {
    return proto3.util.equals(RandomInt, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.RandomFloat
 */
export class RandomFloat extends Message<RandomFloat> {
  /**
   * @generated from field: bool preserve_length = 1;
   */
  preserveLength = false;

  /**
   * @generated from field: int64 digits_before_decimal = 2;
   */
  digitsBeforeDecimal = protoInt64.zero;

  /**
   * @generated from field: int64 digits_after_decimal = 3;
   */
  digitsAfterDecimal = protoInt64.zero;

  constructor(data?: PartialMessage<RandomFloat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.RandomFloat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preserve_length", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "digits_before_decimal", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "digits_after_decimal", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RandomFloat {
    return new RandomFloat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RandomFloat {
    return new RandomFloat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RandomFloat {
    return new RandomFloat().fromJsonString(jsonString, options);
  }

  static equals(a: RandomFloat | PlainMessage<RandomFloat> | undefined, b: RandomFloat | PlainMessage<RandomFloat> | undefined): boolean {
    return proto3.util.equals(RandomFloat, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.Gender
 */
export class Gender extends Message<Gender> {
  /**
   * @generated from field: bool abbreviate = 1;
   */
  abbreviate = false;

  constructor(data?: PartialMessage<Gender>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.Gender";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "abbreviate", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Gender {
    return new Gender().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Gender {
    return new Gender().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Gender {
    return new Gender().fromJsonString(jsonString, options);
  }

  static equals(a: Gender | PlainMessage<Gender> | undefined, b: Gender | PlainMessage<Gender> | undefined): boolean {
    return proto3.util.equals(Gender, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.UTCTimestamp
 */
export class UTCTimestamp extends Message<UTCTimestamp> {
  constructor(data?: PartialMessage<UTCTimestamp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.UTCTimestamp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UTCTimestamp {
    return new UTCTimestamp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UTCTimestamp {
    return new UTCTimestamp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UTCTimestamp {
    return new UTCTimestamp().fromJsonString(jsonString, options);
  }

  static equals(a: UTCTimestamp | PlainMessage<UTCTimestamp> | undefined, b: UTCTimestamp | PlainMessage<UTCTimestamp> | undefined): boolean {
    return proto3.util.equals(UTCTimestamp, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.UnixTimestamp
 */
export class UnixTimestamp extends Message<UnixTimestamp> {
  constructor(data?: PartialMessage<UnixTimestamp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.UnixTimestamp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnixTimestamp {
    return new UnixTimestamp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnixTimestamp {
    return new UnixTimestamp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnixTimestamp {
    return new UnixTimestamp().fromJsonString(jsonString, options);
  }

  static equals(a: UnixTimestamp | PlainMessage<UnixTimestamp> | undefined, b: UnixTimestamp | PlainMessage<UnixTimestamp> | undefined): boolean {
    return proto3.util.equals(UnixTimestamp, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.StreetAddress
 */
export class StreetAddress extends Message<StreetAddress> {
  constructor(data?: PartialMessage<StreetAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.StreetAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreetAddress {
    return new StreetAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreetAddress {
    return new StreetAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreetAddress {
    return new StreetAddress().fromJsonString(jsonString, options);
  }

  static equals(a: StreetAddress | PlainMessage<StreetAddress> | undefined, b: StreetAddress | PlainMessage<StreetAddress> | undefined): boolean {
    return proto3.util.equals(StreetAddress, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.Zipcode
 */
export class Zipcode extends Message<Zipcode> {
  constructor(data?: PartialMessage<Zipcode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.Zipcode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Zipcode {
    return new Zipcode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Zipcode {
    return new Zipcode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Zipcode {
    return new Zipcode().fromJsonString(jsonString, options);
  }

  static equals(a: Zipcode | PlainMessage<Zipcode> | undefined, b: Zipcode | PlainMessage<Zipcode> | undefined): boolean {
    return proto3.util.equals(Zipcode, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.City
 */
export class City extends Message<City> {
  constructor(data?: PartialMessage<City>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.City";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): City {
    return new City().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): City {
    return new City().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): City {
    return new City().fromJsonString(jsonString, options);
  }

  static equals(a: City | PlainMessage<City> | undefined, b: City | PlainMessage<City> | undefined): boolean {
    return proto3.util.equals(City, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.State
 */
export class State extends Message<State> {
  constructor(data?: PartialMessage<State>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.State";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): State {
    return new State().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): State {
    return new State().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): State {
    return new State().fromJsonString(jsonString, options);
  }

  static equals(a: State | PlainMessage<State> | undefined, b: State | PlainMessage<State> | undefined): boolean {
    return proto3.util.equals(State, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.FullAddress
 */
export class FullAddress extends Message<FullAddress> {
  constructor(data?: PartialMessage<FullAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.FullAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullAddress {
    return new FullAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullAddress {
    return new FullAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullAddress {
    return new FullAddress().fromJsonString(jsonString, options);
  }

  static equals(a: FullAddress | PlainMessage<FullAddress> | undefined, b: FullAddress | PlainMessage<FullAddress> | undefined): boolean {
    return proto3.util.equals(FullAddress, a, b);
  }
}

