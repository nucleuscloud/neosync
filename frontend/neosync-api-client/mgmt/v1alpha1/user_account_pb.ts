// @generated by protoc-gen-es v1.3.1 with parameter "target=ts,import_extension=none"
// @generated from file mgmt/v1alpha1/user_account.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum mgmt.v1alpha1.UserAccountType
 */
export enum UserAccountType {
  /**
   * @generated from enum value: USER_ACCOUNT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_ACCOUNT_TYPE_PERSONAL = 1;
   */
  PERSONAL = 1,

  /**
   * @generated from enum value: USER_ACCOUNT_TYPE_TEAM = 2;
   */
  TEAM = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UserAccountType)
proto3.util.setEnumType(UserAccountType, "mgmt.v1alpha1.UserAccountType", [
  { no: 0, name: "USER_ACCOUNT_TYPE_UNSPECIFIED" },
  { no: 1, name: "USER_ACCOUNT_TYPE_PERSONAL" },
  { no: 2, name: "USER_ACCOUNT_TYPE_TEAM" },
]);

/**
 * @generated from message mgmt.v1alpha1.GetUserRequest
 */
export class GetUserRequest extends Message<GetUserRequest> {
  constructor(data?: PartialMessage<GetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest {
    return new GetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean {
    return proto3.util.equals(GetUserRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetUserResponse
 */
export class GetUserResponse extends Message<GetUserResponse> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserResponse {
    return new GetUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserResponse | PlainMessage<GetUserResponse> | undefined, b: GetUserResponse | PlainMessage<GetUserResponse> | undefined): boolean {
    return proto3.util.equals(GetUserResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetUserRequest
 */
export class SetUserRequest extends Message<SetUserRequest> {
  constructor(data?: PartialMessage<SetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetUserRequest {
    return new SetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetUserRequest {
    return new SetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetUserRequest {
    return new SetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetUserRequest | PlainMessage<SetUserRequest> | undefined, b: SetUserRequest | PlainMessage<SetUserRequest> | undefined): boolean {
    return proto3.util.equals(SetUserRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetUserResponse
 */
export class SetUserResponse extends Message<SetUserResponse> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<SetUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetUserResponse {
    return new SetUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetUserResponse {
    return new SetUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetUserResponse {
    return new SetUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetUserResponse | PlainMessage<SetUserResponse> | undefined, b: SetUserResponse | PlainMessage<SetUserResponse> | undefined): boolean {
    return proto3.util.equals(SetUserResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetUserAccountsRequest
 */
export class GetUserAccountsRequest extends Message<GetUserAccountsRequest> {
  constructor(data?: PartialMessage<GetUserAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetUserAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserAccountsRequest {
    return new GetUserAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserAccountsRequest {
    return new GetUserAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserAccountsRequest {
    return new GetUserAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserAccountsRequest | PlainMessage<GetUserAccountsRequest> | undefined, b: GetUserAccountsRequest | PlainMessage<GetUserAccountsRequest> | undefined): boolean {
    return proto3.util.equals(GetUserAccountsRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.GetUserAccountsResponse
 */
export class GetUserAccountsResponse extends Message<GetUserAccountsResponse> {
  /**
   * @generated from field: repeated mgmt.v1alpha1.UserAccount accounts = 1;
   */
  accounts: UserAccount[] = [];

  constructor(data?: PartialMessage<GetUserAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.GetUserAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: UserAccount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserAccountsResponse {
    return new GetUserAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserAccountsResponse {
    return new GetUserAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserAccountsResponse {
    return new GetUserAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserAccountsResponse | PlainMessage<GetUserAccountsResponse> | undefined, b: GetUserAccountsResponse | PlainMessage<GetUserAccountsResponse> | undefined): boolean {
    return proto3.util.equals(GetUserAccountsResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.UserAccount
 */
export class UserAccount extends Message<UserAccount> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: mgmt.v1alpha1.UserAccountType type = 3;
   */
  type = UserAccountType.UNSPECIFIED;

  constructor(data?: PartialMessage<UserAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.UserAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(UserAccountType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserAccount {
    return new UserAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserAccount {
    return new UserAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserAccount {
    return new UserAccount().fromJsonString(jsonString, options);
  }

  static equals(a: UserAccount | PlainMessage<UserAccount> | undefined, b: UserAccount | PlainMessage<UserAccount> | undefined): boolean {
    return proto3.util.equals(UserAccount, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.ConvertPersonalToTeamAccountRequest
 */
export class ConvertPersonalToTeamAccountRequest extends Message<ConvertPersonalToTeamAccountRequest> {
  constructor(data?: PartialMessage<ConvertPersonalToTeamAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.ConvertPersonalToTeamAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConvertPersonalToTeamAccountRequest {
    return new ConvertPersonalToTeamAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConvertPersonalToTeamAccountRequest {
    return new ConvertPersonalToTeamAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConvertPersonalToTeamAccountRequest {
    return new ConvertPersonalToTeamAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConvertPersonalToTeamAccountRequest | PlainMessage<ConvertPersonalToTeamAccountRequest> | undefined, b: ConvertPersonalToTeamAccountRequest | PlainMessage<ConvertPersonalToTeamAccountRequest> | undefined): boolean {
    return proto3.util.equals(ConvertPersonalToTeamAccountRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.ConvertPersonalToTeamAccountResponse
 */
export class ConvertPersonalToTeamAccountResponse extends Message<ConvertPersonalToTeamAccountResponse> {
  constructor(data?: PartialMessage<ConvertPersonalToTeamAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.ConvertPersonalToTeamAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConvertPersonalToTeamAccountResponse {
    return new ConvertPersonalToTeamAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConvertPersonalToTeamAccountResponse {
    return new ConvertPersonalToTeamAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConvertPersonalToTeamAccountResponse {
    return new ConvertPersonalToTeamAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConvertPersonalToTeamAccountResponse | PlainMessage<ConvertPersonalToTeamAccountResponse> | undefined, b: ConvertPersonalToTeamAccountResponse | PlainMessage<ConvertPersonalToTeamAccountResponse> | undefined): boolean {
    return proto3.util.equals(ConvertPersonalToTeamAccountResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetPersonalAccountRequest
 */
export class SetPersonalAccountRequest extends Message<SetPersonalAccountRequest> {
  constructor(data?: PartialMessage<SetPersonalAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetPersonalAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPersonalAccountRequest {
    return new SetPersonalAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPersonalAccountRequest {
    return new SetPersonalAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPersonalAccountRequest {
    return new SetPersonalAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetPersonalAccountRequest | PlainMessage<SetPersonalAccountRequest> | undefined, b: SetPersonalAccountRequest | PlainMessage<SetPersonalAccountRequest> | undefined): boolean {
    return proto3.util.equals(SetPersonalAccountRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.SetPersonalAccountResponse
 */
export class SetPersonalAccountResponse extends Message<SetPersonalAccountResponse> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<SetPersonalAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.SetPersonalAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPersonalAccountResponse {
    return new SetPersonalAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPersonalAccountResponse {
    return new SetPersonalAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPersonalAccountResponse {
    return new SetPersonalAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetPersonalAccountResponse | PlainMessage<SetPersonalAccountResponse> | undefined, b: SetPersonalAccountResponse | PlainMessage<SetPersonalAccountResponse> | undefined): boolean {
    return proto3.util.equals(SetPersonalAccountResponse, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.IsUserInAccountRequest
 */
export class IsUserInAccountRequest extends Message<IsUserInAccountRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<IsUserInAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.IsUserInAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsUserInAccountRequest {
    return new IsUserInAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsUserInAccountRequest {
    return new IsUserInAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsUserInAccountRequest {
    return new IsUserInAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IsUserInAccountRequest | PlainMessage<IsUserInAccountRequest> | undefined, b: IsUserInAccountRequest | PlainMessage<IsUserInAccountRequest> | undefined): boolean {
    return proto3.util.equals(IsUserInAccountRequest, a, b);
  }
}

/**
 * @generated from message mgmt.v1alpha1.IsUserInAccountResponse
 */
export class IsUserInAccountResponse extends Message<IsUserInAccountResponse> {
  /**
   * @generated from field: bool ok = 1;
   */
  ok = false;

  constructor(data?: PartialMessage<IsUserInAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mgmt.v1alpha1.IsUserInAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsUserInAccountResponse {
    return new IsUserInAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsUserInAccountResponse {
    return new IsUserInAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsUserInAccountResponse {
    return new IsUserInAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IsUserInAccountResponse | PlainMessage<IsUserInAccountResponse> | undefined, b: IsUserInAccountResponse | PlainMessage<IsUserInAccountResponse> | undefined): boolean {
    return proto3.util.equals(IsUserInAccountResponse, a, b);
  }
}

