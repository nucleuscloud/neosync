# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from mgmt.v1alpha1 import metrics_pb2 as mgmt_dot_v1alpha1_dot_metrics__pb2


class MetricsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDailyMetricCount = channel.unary_unary(
                '/mgmt.v1alpha1.MetricsService/GetDailyMetricCount',
                request_serializer=mgmt_dot_v1alpha1_dot_metrics__pb2.GetDailyMetricCountRequest.SerializeToString,
                response_deserializer=mgmt_dot_v1alpha1_dot_metrics__pb2.GetDailyMetricCountResponse.FromString,
                _registered_method=True)
        self.GetMetricCount = channel.unary_unary(
                '/mgmt.v1alpha1.MetricsService/GetMetricCount',
                request_serializer=mgmt_dot_v1alpha1_dot_metrics__pb2.GetMetricCountRequest.SerializeToString,
                response_deserializer=mgmt_dot_v1alpha1_dot_metrics__pb2.GetMetricCountResponse.FromString,
                _registered_method=True)


class MetricsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDailyMetricCount(self, request, context):
        """Retrieve a timed range of records
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetricCount(self, request, context):
        """For the given metric and time range, returns the total count found
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetricsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDailyMetricCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDailyMetricCount,
                    request_deserializer=mgmt_dot_v1alpha1_dot_metrics__pb2.GetDailyMetricCountRequest.FromString,
                    response_serializer=mgmt_dot_v1alpha1_dot_metrics__pb2.GetDailyMetricCountResponse.SerializeToString,
            ),
            'GetMetricCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetricCount,
                    request_deserializer=mgmt_dot_v1alpha1_dot_metrics__pb2.GetMetricCountRequest.FromString,
                    response_serializer=mgmt_dot_v1alpha1_dot_metrics__pb2.GetMetricCountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mgmt.v1alpha1.MetricsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mgmt.v1alpha1.MetricsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MetricsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDailyMetricCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mgmt.v1alpha1.MetricsService/GetDailyMetricCount',
            mgmt_dot_v1alpha1_dot_metrics__pb2.GetDailyMetricCountRequest.SerializeToString,
            mgmt_dot_v1alpha1_dot_metrics__pb2.GetDailyMetricCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMetricCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mgmt.v1alpha1.MetricsService/GetMetricCount',
            mgmt_dot_v1alpha1_dot_metrics__pb2.GetMetricCountRequest.SerializeToString,
            mgmt_dot_v1alpha1_dot_metrics__pb2.GetMetricCountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
