// Code generated by mockery. DO NOT EDIT.

package mongoconnect

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockDbContainer is an autogenerated mock type for the DbContainer type
type MockDbContainer struct {
	mock.Mock
}

type MockDbContainer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDbContainer) EXPECT() *MockDbContainer_Expecter {
	return &MockDbContainer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: _a0
func (_m *MockDbContainer) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDbContainer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDbContainer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockDbContainer_Expecter) Close(_a0 interface{}) *MockDbContainer_Close_Call {
	return &MockDbContainer_Close_Call{Call: _e.mock.On("Close", _a0)}
}

func (_c *MockDbContainer_Close_Call) Run(run func(_a0 context.Context)) *MockDbContainer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDbContainer_Close_Call) Return(_a0 error) *MockDbContainer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDbContainer_Close_Call) RunAndReturn(run func(context.Context) error) *MockDbContainer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: ctx
func (_m *MockDbContainer) Open(ctx context.Context) (*mongo.Client, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *mongo.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*mongo.Client, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *mongo.Client); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbContainer_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockDbContainer_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDbContainer_Expecter) Open(ctx interface{}) *MockDbContainer_Open_Call {
	return &MockDbContainer_Open_Call{Call: _e.mock.On("Open", ctx)}
}

func (_c *MockDbContainer_Open_Call) Run(run func(ctx context.Context)) *MockDbContainer_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDbContainer_Open_Call) Return(_a0 *mongo.Client, _a1 error) *MockDbContainer_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbContainer_Open_Call) RunAndReturn(run func(context.Context) (*mongo.Client, error)) *MockDbContainer_Open_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDbContainer creates a new instance of MockDbContainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDbContainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDbContainer {
	mock := &MockDbContainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
