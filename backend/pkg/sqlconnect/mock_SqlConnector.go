// Code generated by mockery. DO NOT EDIT.

package sqlconnect

import (
	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// MockSqlConnector is an autogenerated mock type for the SqlConnector type
type MockSqlConnector struct {
	mock.Mock
}

type MockSqlConnector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSqlConnector) EXPECT() *MockSqlConnector_Expecter {
	return &MockSqlConnector_Expecter{mock: &_m.Mock}
}

// NewDbFromConnectionConfig provides a mock function with given fields: connectionConfig, logger, opts
func (_m *MockSqlConnector) NewDbFromConnectionConfig(connectionConfig *mgmtv1alpha1.ConnectionConfig, logger *slog.Logger, opts ...SqlConnectorOption) (SqlDbContainer, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, connectionConfig, logger)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewDbFromConnectionConfig")
	}

	var r0 SqlDbContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(*mgmtv1alpha1.ConnectionConfig, *slog.Logger, ...SqlConnectorOption) (SqlDbContainer, error)); ok {
		return rf(connectionConfig, logger, opts...)
	}
	if rf, ok := ret.Get(0).(func(*mgmtv1alpha1.ConnectionConfig, *slog.Logger, ...SqlConnectorOption) SqlDbContainer); ok {
		r0 = rf(connectionConfig, logger, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SqlDbContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(*mgmtv1alpha1.ConnectionConfig, *slog.Logger, ...SqlConnectorOption) error); ok {
		r1 = rf(connectionConfig, logger, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSqlConnector_NewDbFromConnectionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDbFromConnectionConfig'
type MockSqlConnector_NewDbFromConnectionConfig_Call struct {
	*mock.Call
}

// NewDbFromConnectionConfig is a helper method to define mock.On call
//   - connectionConfig *mgmtv1alpha1.ConnectionConfig
//   - logger *slog.Logger
//   - opts ...SqlConnectorOption
func (_e *MockSqlConnector_Expecter) NewDbFromConnectionConfig(connectionConfig interface{}, logger interface{}, opts ...interface{}) *MockSqlConnector_NewDbFromConnectionConfig_Call {
	return &MockSqlConnector_NewDbFromConnectionConfig_Call{Call: _e.mock.On("NewDbFromConnectionConfig",
		append([]interface{}{connectionConfig, logger}, opts...)...)}
}

func (_c *MockSqlConnector_NewDbFromConnectionConfig_Call) Run(run func(connectionConfig *mgmtv1alpha1.ConnectionConfig, logger *slog.Logger, opts ...SqlConnectorOption)) *MockSqlConnector_NewDbFromConnectionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]SqlConnectorOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(SqlConnectorOption)
			}
		}
		run(args[0].(*mgmtv1alpha1.ConnectionConfig), args[1].(*slog.Logger), variadicArgs...)
	})
	return _c
}

func (_c *MockSqlConnector_NewDbFromConnectionConfig_Call) Return(_a0 SqlDbContainer, _a1 error) *MockSqlConnector_NewDbFromConnectionConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSqlConnector_NewDbFromConnectionConfig_Call) RunAndReturn(run func(*mgmtv1alpha1.ConnectionConfig, *slog.Logger, ...SqlConnectorOption) (SqlDbContainer, error)) *MockSqlConnector_NewDbFromConnectionConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSqlConnector creates a new instance of MockSqlConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSqlConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSqlConnector {
	mock := &MockSqlConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
