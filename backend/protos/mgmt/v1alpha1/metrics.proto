syntax = "proto3";

package mgmt.v1alpha1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

message MetricResult {
  // figure out what this is
  map<string, string> metric = 1;
  // A repeated list of metric values for the given range
  repeated MetricValue values = 2;
}

message MetricValue {
  // The actual value of the metric
  string value = 1;
  // The timestamp of when this value was recorded
  google.protobuf.Timestamp timestamp = 2;
}

message GetRangedMetricsRequest {
  // The start time
  google.protobuf.Timestamp start = 1;
  // The end time
  google.protobuf.Timestamp end = 2;
  // The metric to return
  RangedMetricName metric = 3;

  oneof identifier {
    // The account identifier that will be used to filter by
    string account_id = 4 [(buf.validate.field).string.uuid = true];
    // The job identifier that will be used to filter by
    string job_id = 5 [(buf.validate.field).string.uuid = true];
    // The run identifier that will be used to filter by
    string run_id = 6 [(buf.validate.field).string.uuid = true];
  }
}

enum RangedMetricName {
  // If unspecified, an error will be thrown
  RANGED_METRIC_NAME_UNSPECIFIED = 0;
  // The input_received metric
  RANGED_METRIC_NAME_INPUT_RECEIVED = 1;
}

message GetRangedMetricsResponse {
  repeated MetricResult results = 1;
}

message GetMetricCountRequest {
  // The start time
  google.protobuf.Timestamp start = 1;
  // The end time
  google.protobuf.Timestamp end = 2;
  // The metric to return
  RangedMetricName metric = 3;

  oneof identifier {
    // The account identifier that will be used to filter by
    string account_id = 4 [(buf.validate.field).string.uuid = true];
    // The job identifier that will be used to filter by
    string job_id = 5 [(buf.validate.field).string.uuid = true];
    // The run identifier that will be used to filter by
    string run_id = 6 [(buf.validate.field).string.uuid = true];
  }
}
message GetMetricCountResponse {
  // The summed up count of the metric based on the input query and timerange specified
  uint64 count = 1;
}

service MetricsService {
  // Retrieve a timed range of records
  rpc GetRangedMetrics(GetRangedMetricsRequest) returns (GetRangedMetricsResponse) {}

  // For the given metric and time range, returns the total count found
  rpc GetMetricCount(GetMetricCountRequest) returns (GetMetricCountResponse) {}
}
