syntax = "proto3";

package mgmt.v1alpha1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

message GetConnectionsRequest {
  // The unique identifier of the account to get connections for
  string account_id = 1 [(buf.validate.field).string.uuid = true];
}
message GetConnectionsResponse {
  // The connections
  repeated Connection connections = 1;
}

message GetConnectionRequest {
  // The unique identifier of the connection to get
  string id = 1 [(buf.validate.field).string.uuid = true];
}
message GetConnectionResponse {
  // The connection
  Connection connection = 1;
}

message CreateConnectionRequest {
  // The unique identifier of the account to create the connection for
  string account_id = 1 [(buf.validate.field).string.uuid = true];
  // The friendly name of the connection
  string name = 2 [(buf.validate.field).string.pattern = "^[a-z0-9-]{3,100}$"];
  // The connection configuration to use for the connection
  ConnectionConfig connection_config = 3;
}
message CreateConnectionResponse {
  // The created connection
  Connection connection = 1;
}

message UpdateConnectionRequest {
  // The unique identifier of the connection to update
  string id = 1 [(buf.validate.field).string.uuid = true];
  // The friendly name of the connection
  string name = 2 [(buf.validate.field).string.pattern = "^[a-z0-9-]{3,100}$"];
  // The connection configuration to use for the connection
  ConnectionConfig connection_config = 3;
}
message UpdateConnectionResponse {
  // The updated connection
  Connection connection = 1;
}

message DeleteConnectionRequest {
  // The unique identifier of the connection to delete
  string id = 1 [(buf.validate.field).string.uuid = true];
}
message DeleteConnectionResponse {}

message CheckConnectionConfigRequest {
  // The connection configuration to validate
  ConnectionConfig connection_config = 1;
}

message CheckConnectionConfigByIdRequest {
  // The connection id to validate
  string id = 1 [(buf.validate.field).string.uuid = true];
}

message CheckConnectionConfigByIdResponse {
  // Whether or not the API was able to ping the connection
  bool is_connected = 1;
  // This is the error that was received if the API was unable to connect
  optional string connection_error = 2;
  // The privileges the role has to the connection
  repeated ConnectionRolePrivilege privileges = 3;
}

message CheckConnectionConfigResponse {
  // Whether or not the API was able to ping the connection
  bool is_connected = 1;
  // This is the error that was received if the API was unable to connect
  optional string connection_error = 2;
  repeated ConnectionRolePrivilege privileges = 3;
}

message ConnectionRolePrivilege {
  // The role that was given the permissions
  string grantee = 1;
  // The database schema. Ex: public
  string schema = 2;
  // The name of the table in the schema
  string table = 3;
  // The privileges given to that role
  repeated string privilege_type = 4;
}

message Connection {
  // The unique identifier of the connection
  string id = 1;
  // The unique, friendly name of the connection
  string name = 2;
  // Contains the connection configuration and connection type
  ConnectionConfig connection_config = 3;
  // The user id of the user that created the connection
  string created_by_user_id = 4;
  // When the connection was created
  google.protobuf.Timestamp created_at = 5;
  // Who last updated the connection
  string updated_by_user_id = 6;
  // When the connection was last updated
  google.protobuf.Timestamp updated_at = 7;
  // The unique account that owns this connection
  string account_id = 8;
}

// Configuration for all of the supported Neosync connection types
message ConnectionConfig {
  oneof config {
    option (buf.validate.oneof).required = true;

    // Configures a PostgreSQL connection
    PostgresConnectionConfig pg_config = 1;
    // Configures an AWS S3 Connection
    AwsS3ConnectionConfig aws_s3_config = 2;
    // Configures a MySQL connection
    MysqlConnectionConfig mysql_config = 3;
    // Configures a connection to a directory available on the local file system
    LocalDirectoryConnectionConfig local_dir_config = 4;
    // Connection config for an OpenAI (or compatible) Connection
    OpenAiConnectionConfig openai_config = 5;
    // Configures a MongoDB Connection
    MongoConnectionConfig mongo_config = 6;
    // Configures a GCP Cloud Storage Connection
    GcpCloudStorageConnectionConfig gcp_cloudstorage_config = 7;
    // Configures a DynamoDB Connection
    DynamoDBConnectionConfig dynamodb_config = 8;
    // Configures a Microsoft SQL Server (mssql) Connection
    MssqlConnectionConfig mssql_config = 9;
  }
}

// Configuration for a Mssql Connection
message MssqlConnectionConfig {
  // May provide a raw string url or in the future other methods of connection
  oneof connection_config {
    option (buf.validate.oneof).required = true;
    // The URL with sqlserver scheme.
    string url = 1;
    // Source a url from an environment variable.
    // The value is expected to be in the same format as the "url" field above.
    // The key is the name of the environment variable to source. It must contain a prefix of "USER_DEFINED_"
    string url_from_env = 5;
  }

  // Provide connection options that can be used to further fine-tune the connection
  SqlConnectionOptions connection_options = 2;

  // Provide tunnel configuration that can be used to access a postgres connection that is not publicly accessible to the internet
  SSHTunnel tunnel = 3;
  // Provide client-side TLS Certificates
  ClientTlsConfig client_tls = 4;
}

// Configuration for a DynaomDB Connection
message DynamoDBConnectionConfig {
  // Optional credentials that may be provided and will be used to connect to the DynamoDB Instance.
  // If self-hosting, this may be provided by the environment in lieu of specifying these here
  optional AwsS3Credentials credentials = 1;
  // Optionally specify the region that the dynamodb instance lives in if not provided by the environment.
  optional string region = 2;
  // Optionally specify the endpoint that will be used by the AWS SDK.
  optional string endpoint = 3;
}

message MongoConnectionConfig {
  // May provide either a raw string url, or a structured version
  oneof connection_config {
    option (buf.validate.oneof).required = true;
    // The full mongo connection url
    string url = 1;
  }

  // Provide tunnel configuration that can be used to access a connection that is not publicly accessible to the internet
  SSHTunnel tunnel = 2;
  // Provide client-side TLS Certificates
  ClientTlsConfig client_tls = 3;
}

// Configures a connection to OpenAI or OpenAI compatible API.
message OpenAiConnectionConfig {
  // OpenAI Api Key
  string api_key = 1;
  // OpenAI URL (if using a custom endpoint)
  string api_url = 2;
}

// Configures a connection to a directory available on the local file system
message LocalDirectoryConnectionConfig {
  // The absolute path to a directory that is available on the local file system to the API and Worker nodes
  string path = 1 [(buf.validate.field).string.min_len = 1];
}

message PostgresConnectionConfig {
  // May provide either a raw string url, or a structured version
  oneof connection_config {
    option (buf.validate.oneof).required = true;

    // A raw string url that will be used to construct the connection. Must be URI format.
    string url = 1;
    // A structured representation of the connection that will be used to construct the url
    PostgresConnection connection = 2;
    // Source a url from an environment variable.
    // The value is expected to be in the same format as the "url" field above.
    // The key is the name of the environment variable to source. It must contain a prefix of "USER_DEFINED_"
    string url_from_env = 6;
  }

  // Provide tunnel configuration that can be used to access a postgres connection that is not publicly accessible to the internet
  SSHTunnel tunnel = 3;
  // Provide connection options that can be used to further fine-tune the connection
  SqlConnectionOptions connection_options = 4;
  // Provide client-side TLS Certificates
  ClientTlsConfig client_tls = 5;
}

// Config for providing client-side TLS certificates
message ClientTlsConfig {
  // Root Certificate in PEM Format
  optional string root_cert = 1;

  // Client Certificate in PEM format. Must also provide key.
  optional string client_cert = 2;
  // Client Key in PEM format. Must also provide cert.
  optional string client_key = 3;

  // Provide the expected server name. Depending on the driver or encryption mode, this may be required
  // In order to fully validate the server certificate.
  optional string server_name = 4;
}

message SqlConnectionOptions {
  // Sets the maximum number of open connections
  // If this value is greater than 0, but less than the max_idle_connections, then max_idle_connections will be reduced to match the max_connection_limit
  // If this value is less than or equal to 0, then there is no limit on the number of open connections. If not provided, the default is 0 (unlimited).
  optional int32 max_connection_limit = 1;
  // Sets the maximum number of connections in the idle connection pool.
  // This value will be reduced at runtime to match the max_connection_limit if max_connection_limit is greater than 0 but less than this value.
  // If this value is less than or equal to 0, then no idle connections are maintained. If not provided, the default is 2, which may change in a future release.
  optional int32 max_idle_connections = 2;
  // Sets the maximum amount of time a connection may be idle.
  // Expired connections may be closed lazily before reuse.
  // if this value is less than or equal to 0, connections are not closed due to a connection's idle time.
  // This value is parsed as a Go duration string (ex: 1s, 1m, 500ms)
  optional string max_idle_duration = 3;
  // Sets the maximum amount of time a connection may be reused.
  // Expired connections may be closed lazily before reuse.
  // If this value is less than or equal to 0, connections may not be closed due to a connection's age.
  // This value is parsed as a Go duration string (ex: 1s, 1m, 500ms)
  optional string max_open_duration = 4;
}

message SSHTunnel {
  // The host of the SSH server
  string host = 1 [(buf.validate.field).string.min_len = 1];
  // The port of the SSH server, typically 22
  int32 port = 2 [(buf.validate.field).int32.gte = 0];
  // The user that will be used to authenticate
  string user = 3 [(buf.validate.field).string.min_len = 1];

  // Optionally provide the public key of the known host of the SSH tunnel that we are connecting to.
  // If this is not provided, the server will blindly connect to the host with the given credentials.
  // This is not recommended for production use!
  optional string known_host_public_key = 4 [(buf.validate.field).string.min_len = 1];
  // Provide the authentication required to successfully connect to the SSH server for tunneling
  SSHAuthentication authentication = 5;
}

// SSH Authentication
message SSHAuthentication {
  oneof auth_config {
    option (buf.validate.oneof).required = true;

    // Password authentication
    SSHPassphrase passphrase = 1;
    // Private key authentication
    SSHPrivateKey private_key = 2;
  }
}

// Contains the configuration needed to retrieve the SSH passphrase for the tunnel
message SSHPassphrase {
  // The password to be used to connect to the SSH server
  string value = 1 [(buf.validate.field).string.min_len = 1];
  // eventually we can expand this to allow pulling from other sources.
}

// Contains the configuration needed to retrieve the SSH private key for the tunnel
message SSHPrivateKey {
  // The private key in PEM format.
  string value = 1 [(buf.validate.field).string.min_len = 1];
  // If the private key is encrypted, this value should decrypt it.
  optional string passphrase = 2;
}

message PostgresConnection {
  // The host to use for the connection
  string host = 1;
  // The port to use for the connection
  int32 port = 2;
  // The name of the database to use for the connection
  string name = 3;
  // The user to use for the connection
  string user = 4;
  // The password to use for the connection
  string pass = 5;
  // The SSL mode to use for the connection
  optional string ssl_mode = 6;
}

message MysqlConnection {
  // The user to use for the connection
  string user = 1;
  // The password to use for the connection
  string pass = 2;
  // The protocol to use for the connection
  string protocol = 3;
  // The host to use for the connection
  string host = 4;
  // The port to use for the connection
  int32 port = 5;
  // The name of the database to use for the connection
  string name = 6;
}

message MysqlConnectionConfig {
  // May provide either a raw string url, or a structured version
  oneof connection_config {
    option (buf.validate.oneof).required = true;

    // A raw string url that will be used to construct the connection. DSN format. URI format also supported but more limited.
    string url = 1;
    // A structured representation of the connection that will be used to construct the url
    MysqlConnection connection = 2;
    // Source a url from an environment variable.
    // The value is expected to be in the same format as the "url" field above.
    // The key is the name of the environment variable to source. It must contain a prefix of "USER_DEFINED_"
    string url_from_env = 6;
  }

  // Provide tunnel configuration that can be used to access a postgres connection that is not publicly accessible to the internet
  SSHTunnel tunnel = 3;
  // Provide connection options that can be used to further fine-tune the connection
  SqlConnectionOptions connection_options = 4;
  // Provide client-side TLS Certificates
  ClientTlsConfig client_tls = 5;
}

message AwsS3ConnectionConfig {
  reserved 1; // Was: string bucket_arn = 1 [deprecated = true];
  // The bucket path prefix that will be appended to each file
  optional string path_prefix = 2;
  // The credentials to use for the S3 bucket
  optional AwsS3Credentials credentials = 3;
  // The region of the S3 bucket
  optional string region = 4;
  // The endpoint of the S3 bucket (if using a custom endpoint like region specific endpoints or S3-compatible APIs)
  optional string endpoint = 5;
  // The name of the S3 bucket
  string bucket = 6 [(buf.validate.field).string.min_len = 1];
}

// S3 Credentials that are used by the worker process.
// Note: this may be optionally provided if the worker that is being hosted has environment credentials to the S3 bucket instead.
message AwsS3Credentials {
  // The profile to use for the S3 credentials
  optional string profile = 1;
  // The access key id to use for the S3 credentials
  optional string access_key_id = 2;
  // The secret access key to use for the S3 credentials
  optional string secret_access_key = 3;
  // The session token to use for the S3 credentials
  optional string session_token = 4;
  // Whether or not the credentials are from an EC2 role
  optional bool from_ec2_role = 5;
  // The ARN of the role to use for the S3 credentials
  optional string role_arn = 6;
  // The role's external ID to use for the S3 credentials
  optional string role_external_id = 7;
}

// Configuration for GCP Cloud Storage Buckets
message GcpCloudStorageConnectionConfig {
  // The GCP Cloud Storage bucket that will be accessed.
  string bucket = 1 [(buf.validate.field).string.min_len = 1];
  // The path prefix that will be appended to each file
  optional string path_prefix = 2;

  // stringified json of the service account credentials file
  optional string service_account_credentials = 3;
}

message IsConnectionNameAvailableRequest {
  // The unique identifier of the account to check the connection name for
  string account_id = 1 [(buf.validate.field).string.uuid = true];
  // The connection name to check for availability
  string connection_name = 2 [(buf.validate.field).string.pattern = "^[a-z0-9-]{3,100}$"];
}

message IsConnectionNameAvailableResponse {
  // Whether or not the connection name is available
  bool is_available = 1;
}

message CheckSqlQueryRequest {
  // The connection id that the query will be checked against
  string id = 1 [(buf.validate.field).string.uuid = true];
  // The full query that will be run through a PREPARE statement
  string query = 2 [(buf.validate.field).string.min_len = 1];
}
message CheckSqlQueryResponse {
  // The query is run through PREPARE. Returns valid if it correctly compiled
  bool is_valid = 1;
  // The error message returned by the sql client if the prepare did not return successfully
  optional string erorr_message = 2;
}

// Service for managing datasource connections.
// This is a primary data model in Neosync and is used in reference when hooking up Jobs to synchronize and generate data.
service ConnectionService {
  // Returns a list of connections associated with the account
  rpc GetConnections(GetConnectionsRequest) returns (GetConnectionsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // Returns a single connection
  rpc GetConnection(GetConnectionRequest) returns (GetConnectionResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // Creates a new connection
  rpc CreateConnection(CreateConnectionRequest) returns (CreateConnectionResponse) {}
  // Updates an existing connection
  rpc UpdateConnection(UpdateConnectionRequest) returns (UpdateConnectionResponse) {}
  // Removes a connection from the system.
  rpc DeleteConnection(DeleteConnectionRequest) returns (DeleteConnectionResponse) {}
  // Connections have friendly names, this method checks if the requested name is available in the system based on the account
  rpc IsConnectionNameAvailable(IsConnectionNameAvailableRequest) returns (IsConnectionNameAvailableResponse) {}

  // Checks if the connection config is connectable by the backend.
  // Used mostly to verify that a connection is valid prior to creating a Connection object.
  rpc CheckConnectionConfig(CheckConnectionConfigRequest) returns (CheckConnectionConfigResponse) {}
  // Checks if the connection id is connectable by the backend.
  // Used to verify that a connection is still connectable.
  rpc CheckConnectionConfigById(CheckConnectionConfigByIdRequest) returns (CheckConnectionConfigByIdResponse) {}
  // Checks a constructed SQL query against a sql-based connection to see if it's valid based on that connection's data schema
  // This is useful when constructing subsets to see if the WHERE clause is correct
  rpc CheckSqlQuery(CheckSqlQueryRequest) returns (CheckSqlQueryResponse) {}
}
