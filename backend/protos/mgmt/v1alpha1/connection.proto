syntax = "proto3";

package mgmt.v1alpha1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

message GetConnectionsRequest {
  string account_id = 1 [(buf.validate.field).string.uuid = true];
}
message GetConnectionsResponse {
  repeated Connection connections = 1;
}

message GetConnectionRequest {
  string id = 1 [(buf.validate.field).string.uuid = true];
}
message GetConnectionResponse {
  Connection connection = 1;
}

message CreateConnectionRequest {
  string account_id = 1 [(buf.validate.field).string.uuid = true];
  string name = 2 [(buf.validate.field).string.pattern = "^[a-z0-9-]{3,30}$"];

  ConnectionConfig connection_config = 3;
}
message CreateConnectionResponse {
  Connection connection = 1;
}

message UpdateConnectionRequest {
  string id = 1 [(buf.validate.field).string.uuid = true];

  ConnectionConfig connection_config = 2;
}
message UpdateConnectionResponse {
  Connection connection = 1;
}

message DeleteConnectionRequest {
  string id = 1 [(buf.validate.field).string.uuid = true];
}
message DeleteConnectionResponse {}

message CheckConnectionConfigRequest {
  ConnectionConfig connection_config = 1;
}

message CheckConnectionConfigResponse {
  bool is_connected = 1;
  optional string connection_error = 2;
}

message Connection {
  string id = 1;
  string name = 2;

  ConnectionConfig connection_config = 3;

  string created_by_user_id = 4;
  google.protobuf.Timestamp created_at = 5;

  string updated_by_user_id = 6;
  google.protobuf.Timestamp updated_at = 7;

  string account_id = 8;
}

message ConnectionConfig {
  oneof config {
    option (buf.validate.oneof).required = true;

    PostgresConnectionConfig pg_config = 1;
    AwsS3ConnectionConfig aws_s3_config = 2;
  }
}

message PostgresConnectionConfig {
  oneof connection_config {
    option (buf.validate.oneof).required = true;

    string url = 1;
    PostgresConnection connection = 2;
  }
}

message PostgresConnection {
  string host = 1;
  int32 port = 2;
  string name = 3;
  string user = 4;
  string pass = 5;
  optional string ssl_mode = 6;
}

message AwsS3ConnectionConfig {
  string bucket_arn = 1;
  optional string path_prefix = 2;
  optional AwsS3Credentials credentials = 3;
  optional string region = 4;
  optional string endpoint = 5;
}

message AwsS3Credentials {
  optional string profile = 1;
  optional string access_key_id = 2;
  optional string secret_access_key = 3;
  optional string session_token = 4;
  optional bool from_ec2_role = 5;
  optional string role_arn = 6;
  optional string role_external_id = 7;
}

message IsConnectionNameAvailableRequest {
  string account_id = 1 [(buf.validate.field).string.uuid = true];
  string connection_name = 2 [(buf.validate.field).string.pattern = "^[a-z0-9-]{3,30}$"];
}

message IsConnectionNameAvailableResponse {
  bool is_available = 1;
}

message DatabaseColumn {
  string schema = 1;
  string table = 2;
  string column = 3;
  string data_type = 4;
}

message GetConnectionSchemaRequest {
  string id = 1;
}

message GetConnectionSchemaResponse {
  repeated DatabaseColumn schemas = 1;
}

service ConnectionService {
  rpc GetConnections(GetConnectionsRequest) returns (GetConnectionsResponse) {}
  rpc GetConnection(GetConnectionRequest) returns (GetConnectionResponse) {}
  rpc CreateConnection(CreateConnectionRequest) returns (CreateConnectionResponse) {}
  rpc UpdateConnection(UpdateConnectionRequest) returns (UpdateConnectionResponse) {}
  rpc DeleteConnection(DeleteConnectionRequest) returns (DeleteConnectionResponse) {}
  rpc IsConnectionNameAvailable(IsConnectionNameAvailableRequest) returns (IsConnectionNameAvailableResponse) {}

  rpc CheckConnectionConfig(CheckConnectionConfigRequest) returns (CheckConnectionConfigResponse) {}
  rpc GetConnectionSchema(GetConnectionSchemaRequest) returns (GetConnectionSchemaResponse) {}
}
