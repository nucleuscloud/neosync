syntax = "proto3";

package mgmt.v1alpha1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

message GetConnectionsRequest {
  string account_id = 1 [(buf.validate.field).string.uuid = true];
}
message GetConnectionsResponse {
  repeated Connection connections = 1;
}

message GetConnectionRequest {
  string id = 1 [(buf.validate.field).string.uuid = true];
}
message GetConnectionResponse {
  Connection connection = 1;
}

message CreateConnectionRequest {
  string account_id = 1 [(buf.validate.field).string.uuid = true];
  // The friendly name of the connection
  string name = 2 [(buf.validate.field).string.pattern = "^[a-z0-9-]{3,30}$"];

  ConnectionConfig connection_config = 3;
}
message CreateConnectionResponse {
  Connection connection = 1;
}

message UpdateConnectionRequest {
  string id = 1 [(buf.validate.field).string.uuid = true];
  string name = 2;
  ConnectionConfig connection_config = 3;
}
message UpdateConnectionResponse {
  Connection connection = 1;
}

message DeleteConnectionRequest {
  string id = 1 [(buf.validate.field).string.uuid = true];
}
message DeleteConnectionResponse {}

message CheckConnectionConfigRequest {
  ConnectionConfig connection_config = 1;
}

message CheckConnectionConfigResponse {
  // Whether or not the API was able to ping the connection
  bool is_connected = 1;
  // This is the error that was received if the API was unable to connect
  optional string connection_error = 2;
}

message Connection {
  string id = 1;
  string name = 2;

  ConnectionConfig connection_config = 3;

  string created_by_user_id = 4;
  google.protobuf.Timestamp created_at = 5;

  string updated_by_user_id = 6;
  google.protobuf.Timestamp updated_at = 7;

  string account_id = 8;
}

message ConnectionConfig {
  oneof config {
    option (buf.validate.oneof).required = true;

    PostgresConnectionConfig pg_config = 1;
    AwsS3ConnectionConfig aws_s3_config = 2;
    MysqlConnectionConfig mysql_config = 3;
  }
}

message PostgresConnectionConfig {
  // May provide either a raw string url, or a structured version
  oneof connection_config {
    option (buf.validate.oneof).required = true;

    string url = 1;
    PostgresConnection connection = 2;
  }
}

message PostgresConnection {
  string host = 1;
  int32 port = 2;
  string name = 3;
  string user = 4;
  string pass = 5;
  optional string ssl_mode = 6;
}

message MysqlConnection {
  string user = 1;
  string pass = 2;
  string protocol = 3;
  string host = 4;
  int32 port = 5;
  string name = 6;
}

message MysqlConnectionConfig {
  // May provide either a raw string url, or a structured version
  oneof connection_config {
    option (buf.validate.oneof).required = true;

    string url = 1;
    MysqlConnection connection = 2;
  }
}

message AwsS3ConnectionConfig {
  string bucket_arn = 1 [deprecated = true];
  optional string path_prefix = 2;
  optional AwsS3Credentials credentials = 3;
  optional string region = 4;
  optional string endpoint = 5;
  string bucket = 6 [(buf.validate.field).string.min_len = 1];
}

// S3 Credentials that are used by the worker process.
// Note: this may be optionally provided if the worker that is being hosted has environment credentials to the S3 bucket instead.
message AwsS3Credentials {
  optional string profile = 1;
  optional string access_key_id = 2;
  optional string secret_access_key = 3;
  optional string session_token = 4;
  optional bool from_ec2_role = 5;
  optional string role_arn = 6;
  optional string role_external_id = 7;
}

message IsConnectionNameAvailableRequest {
  string account_id = 1 [(buf.validate.field).string.uuid = true];
  string connection_name = 2 [(buf.validate.field).string.pattern = "^[a-z0-9-]{3,30}$"];
}

message IsConnectionNameAvailableResponse {
  bool is_available = 1;
}

message DatabaseColumn {
  // The database schema. Ex: public
  string schema = 1;
  // The name of the table in the schema
  string table = 2;
  // The name of the column
  string column = 3;
  // The datatype of the column
  string data_type = 4;
}

message GetConnectionSchemaRequest {
  string id = 1;
}

message GetConnectionSchemaResponse {
  repeated DatabaseColumn schemas = 1;
}

message CheckSqlQueryRequest {
  // The connection id that the query will be checked against
  string id = 1 [(buf.validate.field).string.uuid = true];
  // The full query that will be run through a PREPARE statement
  string query = 2 [(buf.validate.field).string.min_len = 1];
}
message CheckSqlQueryResponse {
  // The query is run through PREPARE. Returns valid if it correctly compiled
  bool is_valid = 1;
  // The error message returned by the sql client if the prepare did not return successfully
  optional string erorr_message = 2;
}

message GetConnectionDataStreamRequest {
  string connection_id = 1 [(buf.validate.field).string.uuid = true];
  string schema = 2;
  string table = 3;
}

// Each stream response is a single row in the requested schema and table
message GetConnectionDataStreamResponse {
  // A map of column name to the bytes value of the data that was found for that column and row
  map<string, bytes> row = 1;
}

message GetConnectionForeignConstraintsRequest {
  string connection_id = 1 [(buf.validate.field).string.uuid = true];
}
message ForeignConstraintTables {
  repeated string tables = 1;
}

// Dependency constraints for a specific table
message GetConnectionForeignConstraintsResponse {
  // the key here is <schema>.<table> and the list of tables that it depends on, also `<schema>.<table>` format.
  map<string, ForeignConstraintTables> table_constraints = 1;
}

message InitStatementOptions {
  bool init_schema = 1;
  bool truncate_before_insert = 2;
  bool truncate_cascade = 3;
}
message GetConnectionInitStatementsRequest {
  string connection_id = 1 [(buf.validate.field).string.uuid = true];
  InitStatementOptions options = 2;
}

// Init statement for a specific table
message GetConnectionInitStatementsResponse {
  // the key here is <schema>.<table> and value is the table init statement.
  map<string, string> table_init_statements = 1;
}

// Service for managing datasource connections.
// This is a primary data model in Neosync and is used in reference when hooking up Jobs to synchronize and generate data.
service ConnectionService {
  // Returns a list of connections associated with the account
  rpc GetConnections(GetConnectionsRequest) returns (GetConnectionsResponse) {}
  // Returns a single connection
  rpc GetConnection(GetConnectionRequest) returns (GetConnectionResponse) {}
  // Creates a new connection
  rpc CreateConnection(CreateConnectionRequest) returns (CreateConnectionResponse) {}
  // Updates an existing connection
  rpc UpdateConnection(UpdateConnectionRequest) returns (UpdateConnectionResponse) {}
  // Removes a connection from the system.
  rpc DeleteConnection(DeleteConnectionRequest) returns (DeleteConnectionResponse) {}
  // Connections have friendly names, this method checks if the requested name is available in the system based on the account
  rpc IsConnectionNameAvailable(IsConnectionNameAvailableRequest) returns (IsConnectionNameAvailableResponse) {}

  // Checks if the connection config is connectable by the backend.
  // Used mostly to verify that a connection is valid prior to creating a Connection object.
  rpc CheckConnectionConfig(CheckConnectionConfigRequest) returns (CheckConnectionConfigResponse) {}
  // Returns the schema for a specific connection. Used mostly for SQL-based connections
  rpc GetConnectionSchema(GetConnectionSchemaRequest) returns (GetConnectionSchemaResponse) {}
  // Checks a constructed SQL query against a sql-based connection to see if it's valid based on that connection's data schema
  // This is useful when constructing subsets to see if the WHERE clause is correct
  rpc CheckSqlQuery(CheckSqlQueryRequest) returns (CheckSqlQueryResponse) {}

  // Streaming endpoint that will stream the data available from the Connection to the client.
  // Used primarily by the CLI sync command.
  rpc GetConnectionDataStream(GetConnectionDataStreamRequest) returns (stream GetConnectionDataStreamResponse) {}
  // For a specific connection, returns the foreign key constraints. Mostly useful for SQL-based Connections.
  // Used primarily by the CLI sync command to determine stream order.
  rpc GetConnectionForeignConstraints(GetConnectionForeignConstraintsRequest) returns (GetConnectionForeignConstraintsResponse) {}
  // For a specific connection, returns the init table statements. Mostly useful for SQL-based Connections.
  // Used primarily by the CLI sync command to create table schema init statement.
  rpc GetConnectionInitStatements(GetConnectionInitStatementsRequest) returns (GetConnectionInitStatementsResponse) {}
}
