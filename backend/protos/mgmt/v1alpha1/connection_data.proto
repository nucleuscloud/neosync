syntax = "proto3";

package mgmt.v1alpha1;

import "buf/validate/validate.proto";
import "google/protobuf/struct.proto";

message PostgresStreamConfig {}
message MysqlStreamConfig {}
message AwsS3StreamConfig {
  oneof id {
    string job_id = 1 [(buf.validate.field).string.uuid = true];
    string job_run_id = 2 [(buf.validate.field).string.min_len = 1];
  }
}
message GcpCloudStorageStreamConfig {
  oneof id {
    string job_id = 1 [(buf.validate.field).string.uuid = true];
    string job_run_id = 2 [(buf.validate.field).string.min_len = 1];
  }
}

message ConnectionStreamConfig {
  oneof config {
    option (buf.validate.oneof).required = true;

    PostgresStreamConfig pg_config = 1;
    AwsS3StreamConfig aws_s3_config = 2;
    MysqlStreamConfig mysql_config = 3;
    GcpCloudStorageStreamConfig gcp_cloudstorage_config = 4;
  }
}

message GetConnectionDataStreamRequest {
  string connection_id = 1 [(buf.validate.field).string.uuid = true];
  ConnectionStreamConfig stream_config = 2;
  string schema = 3;
  string table = 4;
}

// Each stream response is a single row in the requested schema and table
message GetConnectionDataStreamResponse {
  // A map of column name to the bytes value of the data that was found for that column and row
  map<string, bytes> row = 1;
}

message PostgresSchemaConfig {}
message MysqlSchemaConfig {}
message AwsS3SchemaConfig {
  oneof id {
    string job_id = 1 [(buf.validate.field).string.uuid = true];
    string job_run_id = 2 [(buf.validate.field).string.min_len = 1];
  }
}
message MongoSchemaConfig {}
message GcpCloudStorageSchemaConfig {
  oneof id {
    string job_id = 1 [(buf.validate.field).string.uuid = true];
    string job_run_id = 2 [(buf.validate.field).string.min_len = 1];
  }
}

message ConnectionSchemaConfig {
  oneof config {
    option (buf.validate.oneof).required = true;

    PostgresSchemaConfig pg_config = 1;
    AwsS3SchemaConfig aws_s3_config = 2;
    MysqlSchemaConfig mysql_config = 3;
    MongoSchemaConfig mongo_config = 4;
    GcpCloudStorageSchemaConfig gcp_cloudstorage_config = 5;
  }
}

message DatabaseColumn {
  // The database schema. Ex: public
  string schema = 1;
  // The name of the table in the schema
  string table = 2;
  // The name of the column
  string column = 3;
  // The datatype of the column
  string data_type = 4;
  // The isNullable Flag of the column
  string is_nullable = 5;
  // The default value of the column if available
  optional string column_default = 6;
  // Populated if the column is generated. The value is the type of generated column it is. For example, postgres is 's' for stored
  // May be other values in the future, or other DB providers may use a different value types.
  optional string generated_type = 7;
  // Populated if the column is an identity. The value is the type of the identity column it is. For example, postgres is 'd' for generated by default, or 'a' for generated always.
  optional string identity_generation = 8;
}

message GetConnectionSchemaRequest {
  string connection_id = 1 [(buf.validate.field).string.uuid = true];
  ConnectionSchemaConfig schema_config = 2;
}

message GetConnectionSchemaResponse {
  repeated DatabaseColumn schemas = 1;
}

message GetConnectionForeignConstraintsRequest {
  string connection_id = 1 [(buf.validate.field).string.uuid = true];
}

message ForeignKey {
  string table = 1;
  // @deprecated - use columns
  string column = 2;
  repeated string columns = 3;
}

message ForeignConstraint {
  // @deprecated - use columns
  string column = 1;
  // @deprecated - use not_nullable
  bool is_nullable = 2;
  ForeignKey foreign_key = 3;
  repeated string columns = 4;
  repeated bool not_nullable = 5;
}

message ForeignConstraintTables {
  repeated ForeignConstraint constraints = 1;
}

// Dependency constraints for a specific table
message GetConnectionForeignConstraintsResponse {
  // the key here is <schema>.<table> and the list of tables that it depends on, also `<schema>.<table>` format.
  map<string, ForeignConstraintTables> table_constraints = 1;
}

message InitStatementOptions {
  bool init_schema = 1;
  bool truncate_before_insert = 2;
  bool truncate_cascade = 3;
}
message GetConnectionInitStatementsRequest {
  string connection_id = 1 [(buf.validate.field).string.uuid = true];
  InitStatementOptions options = 2;
}

message SchemaInitStatements {
  string label = 1;
  repeated string statements = 2;
}

// Init statement for a specific table
message GetConnectionInitStatementsResponse {
  // the key here is <schema>.<table> and value is the table init statement.
  map<string, string> table_init_statements = 1;
  // the key here is <schema>.<table> and value is the table truncate statement.
  map<string, string> table_truncate_statements = 2;
  repeated SchemaInitStatements schema_init_statements = 3;
}

message PrimaryConstraint {
  repeated string columns = 1;
}

// Primary constraints for a specific table
message GetConnectionPrimaryConstraintsRequest {
  string connection_id = 1 [(buf.validate.field).string.uuid = true];
}

message GetConnectionPrimaryConstraintsResponse {
  // the key here is <schema>.<table> and value is the primary constraint
  map<string, PrimaryConstraint> table_constraints = 1;
}

// Unique constraints for a specific table
message GetConnectionUniqueConstraintsRequest {
  string connection_id = 1 [(buf.validate.field).string.uuid = true];
}

message GetConnectionUniqueConstraintsResponse {
  // the key here is <schema>.<table> and value is the unique constraint
  map<string, UniqueConstraint> table_constraints = 1;
}

message UniqueConstraint {
  repeated string columns = 1;
}

message GetAiGeneratedDataRequest {
  string ai_connection_id = 1 [(buf.validate.field).string.uuid = true];
  int64 count = 2 [
    (buf.validate.field).int64.gte = 1,
    (buf.validate.field).int64.lte = 10
  ];
  string model_name = 3 [(buf.validate.field).string.min_len = 1];
  optional string user_prompt = 4;
  string data_connection_id = 5 [(buf.validate.field).string.uuid = true];
  DatabaseTable table = 6;
}

message DatabaseTable {
  string schema = 1 [(buf.validate.field).string.min_len = 1];
  string table = 2 [(buf.validate.field).string.min_len = 1];
}

message GetAiGeneratedDataResponse {
  // A list of generated records
  repeated google.protobuf.Struct records = 1;
}

message GetConnectionTableConstraintsRequest {
  string connection_id = 1 [(buf.validate.field).string.uuid = true];
}

message UniqueConstraints {
  repeated UniqueConstraint constraints = 1;
}

message GetConnectionTableConstraintsResponse {
  // the key here is <schema>.<table> and the list of tables that it depends on, also `<schema>.<table>` format.
  map<string, ForeignConstraintTables> foreign_key_constraints = 1;
  // the key here is <schema>.<table> and value is the primary constraint
  map<string, PrimaryConstraint> primary_key_constraints = 2;
  // the key here is <schema>.<table> and value is the unique constraint
  map<string, UniqueConstraints> unique_constraints = 3;
}

message GetTableRowCountRequest {
  string connection_id = 1;
  string schema = 2;
  string table = 3;
  optional string where_clause = 4;
}

message GetTableRowCountResponse {
  int64 count = 1;
}

// Service for managing connection data.
// This is used in handle data from a connection
service ConnectionDataService {
  // Streaming endpoint that will stream the data available from the Connection to the client.
  // Used primarily by the CLI sync command.
  rpc GetConnectionDataStream(GetConnectionDataStreamRequest) returns (stream GetConnectionDataStreamResponse) {}
  // Returns the schema for a specific connection. Used mostly for SQL-based connections
  rpc GetConnectionSchema(GetConnectionSchemaRequest) returns (GetConnectionSchemaResponse) {}
  // For a specific connection, returns the table constraints. Mostly useful for SQL-based Connections.
  rpc GetConnectionTableConstraints(GetConnectionTableConstraintsRequest) returns (GetConnectionTableConstraintsResponse) {}
  // For a specific connection, returns the foreign key constraints. Mostly useful for SQL-based Connections.
  // Used primarily by the CLI sync command to determine stream order.
  rpc GetConnectionForeignConstraints(GetConnectionForeignConstraintsRequest) returns (GetConnectionForeignConstraintsResponse) {}
  // For a specific connection, returns the primary key constraints. Mostly useful for SQL-based Connections.
  // Used primarily by the CLI sync command to determine stream order.
  rpc GetConnectionPrimaryConstraints(GetConnectionPrimaryConstraintsRequest) returns (GetConnectionPrimaryConstraintsResponse) {}
  // For a specific connection, returns the init table statements. Mostly useful for SQL-based Connections.
  // Used primarily by the CLI sync command to create table schema init statement.
  rpc GetConnectionInitStatements(GetConnectionInitStatementsRequest) returns (GetConnectionInitStatementsResponse) {}
  // For a specific connection, returns the unique constraints. Mostly useful for SQL-based connections.
  rpc GetConnectionUniqueConstraints(GetConnectionUniqueConstraintsRequest) returns (GetConnectionUniqueConstraintsResponse) {}
  // Query an AI connection by providing the necessary values. Typically used for generating preview data
  rpc GetAiGeneratedData(GetAiGeneratedDataRequest) returns (GetAiGeneratedDataResponse) {}
  // Query table with subset to get row count
  rpc GetTableRowCount(GetTableRowCountRequest) returns (GetTableRowCountResponse) {}
}
