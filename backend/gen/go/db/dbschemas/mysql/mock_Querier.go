// Code generated by mockery. DO NOT EDIT.

package mysql_queries

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// GetCustomFunctionsBySchemaAndTables provides a mock function with given fields: ctx, db, schema
func (_m *MockQuerier) GetCustomFunctionsBySchemaAndTables(ctx context.Context, db DBTX, schema string) ([]*GetCustomFunctionsBySchemaAndTablesRow, error) {
	ret := _m.Called(ctx, db, schema)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomFunctionsBySchemaAndTables")
	}

	var r0 []*GetCustomFunctionsBySchemaAndTablesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, string) ([]*GetCustomFunctionsBySchemaAndTablesRow, error)); ok {
		return rf(ctx, db, schema)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, string) []*GetCustomFunctionsBySchemaAndTablesRow); ok {
		r0 = rf(ctx, db, schema)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetCustomFunctionsBySchemaAndTablesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, string) error); ok {
		r1 = rf(ctx, db, schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetCustomFunctionsBySchemaAndTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomFunctionsBySchemaAndTables'
type MockQuerier_GetCustomFunctionsBySchemaAndTables_Call struct {
	*mock.Call
}

// GetCustomFunctionsBySchemaAndTables is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - schema string
func (_e *MockQuerier_Expecter) GetCustomFunctionsBySchemaAndTables(ctx interface{}, db interface{}, schema interface{}) *MockQuerier_GetCustomFunctionsBySchemaAndTables_Call {
	return &MockQuerier_GetCustomFunctionsBySchemaAndTables_Call{Call: _e.mock.On("GetCustomFunctionsBySchemaAndTables", ctx, db, schema)}
}

func (_c *MockQuerier_GetCustomFunctionsBySchemaAndTables_Call) Run(run func(ctx context.Context, db DBTX, schema string)) *MockQuerier_GetCustomFunctionsBySchemaAndTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(string))
	})
	return _c
}

func (_c *MockQuerier_GetCustomFunctionsBySchemaAndTables_Call) Return(_a0 []*GetCustomFunctionsBySchemaAndTablesRow, _a1 error) *MockQuerier_GetCustomFunctionsBySchemaAndTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetCustomFunctionsBySchemaAndTables_Call) RunAndReturn(run func(context.Context, DBTX, string) ([]*GetCustomFunctionsBySchemaAndTablesRow, error)) *MockQuerier_GetCustomFunctionsBySchemaAndTables_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomTriggersBySchemaAndTables provides a mock function with given fields: ctx, db
func (_m *MockQuerier) GetCustomTriggersBySchemaAndTables(ctx context.Context, db DBTX) ([]*GetCustomTriggersBySchemaAndTablesRow, error) {
	ret := _m.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomTriggersBySchemaAndTables")
	}

	var r0 []*GetCustomTriggersBySchemaAndTablesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) ([]*GetCustomTriggersBySchemaAndTablesRow, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) []*GetCustomTriggersBySchemaAndTablesRow); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetCustomTriggersBySchemaAndTablesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetCustomTriggersBySchemaAndTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomTriggersBySchemaAndTables'
type MockQuerier_GetCustomTriggersBySchemaAndTables_Call struct {
	*mock.Call
}

// GetCustomTriggersBySchemaAndTables is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
func (_e *MockQuerier_Expecter) GetCustomTriggersBySchemaAndTables(ctx interface{}, db interface{}) *MockQuerier_GetCustomTriggersBySchemaAndTables_Call {
	return &MockQuerier_GetCustomTriggersBySchemaAndTables_Call{Call: _e.mock.On("GetCustomTriggersBySchemaAndTables", ctx, db)}
}

func (_c *MockQuerier_GetCustomTriggersBySchemaAndTables_Call) Run(run func(ctx context.Context, db DBTX)) *MockQuerier_GetCustomTriggersBySchemaAndTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX))
	})
	return _c
}

func (_c *MockQuerier_GetCustomTriggersBySchemaAndTables_Call) Return(_a0 []*GetCustomTriggersBySchemaAndTablesRow, _a1 error) *MockQuerier_GetCustomTriggersBySchemaAndTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetCustomTriggersBySchemaAndTables_Call) RunAndReturn(run func(context.Context, DBTX) ([]*GetCustomTriggersBySchemaAndTablesRow, error)) *MockQuerier_GetCustomTriggersBySchemaAndTables_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseSchema provides a mock function with given fields: ctx, db
func (_m *MockQuerier) GetDatabaseSchema(ctx context.Context, db DBTX) ([]*GetDatabaseSchemaRow, error) {
	ret := _m.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseSchema")
	}

	var r0 []*GetDatabaseSchemaRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) ([]*GetDatabaseSchemaRow, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) []*GetDatabaseSchemaRow); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetDatabaseSchemaRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetDatabaseSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseSchema'
type MockQuerier_GetDatabaseSchema_Call struct {
	*mock.Call
}

// GetDatabaseSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
func (_e *MockQuerier_Expecter) GetDatabaseSchema(ctx interface{}, db interface{}) *MockQuerier_GetDatabaseSchema_Call {
	return &MockQuerier_GetDatabaseSchema_Call{Call: _e.mock.On("GetDatabaseSchema", ctx, db)}
}

func (_c *MockQuerier_GetDatabaseSchema_Call) Run(run func(ctx context.Context, db DBTX)) *MockQuerier_GetDatabaseSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX))
	})
	return _c
}

func (_c *MockQuerier_GetDatabaseSchema_Call) Return(_a0 []*GetDatabaseSchemaRow, _a1 error) *MockQuerier_GetDatabaseSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetDatabaseSchema_Call) RunAndReturn(run func(context.Context, DBTX) ([]*GetDatabaseSchemaRow, error)) *MockQuerier_GetDatabaseSchema_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseTableSchemasBySchemasAndTables provides a mock function with given fields: ctx, db
func (_m *MockQuerier) GetDatabaseTableSchemasBySchemasAndTables(ctx context.Context, db DBTX) ([]*GetDatabaseTableSchemasBySchemasAndTablesRow, error) {
	ret := _m.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseTableSchemasBySchemasAndTables")
	}

	var r0 []*GetDatabaseTableSchemasBySchemasAndTablesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) ([]*GetDatabaseTableSchemasBySchemasAndTablesRow, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) []*GetDatabaseTableSchemasBySchemasAndTablesRow); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetDatabaseTableSchemasBySchemasAndTablesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetDatabaseTableSchemasBySchemasAndTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseTableSchemasBySchemasAndTables'
type MockQuerier_GetDatabaseTableSchemasBySchemasAndTables_Call struct {
	*mock.Call
}

// GetDatabaseTableSchemasBySchemasAndTables is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
func (_e *MockQuerier_Expecter) GetDatabaseTableSchemasBySchemasAndTables(ctx interface{}, db interface{}) *MockQuerier_GetDatabaseTableSchemasBySchemasAndTables_Call {
	return &MockQuerier_GetDatabaseTableSchemasBySchemasAndTables_Call{Call: _e.mock.On("GetDatabaseTableSchemasBySchemasAndTables", ctx, db)}
}

func (_c *MockQuerier_GetDatabaseTableSchemasBySchemasAndTables_Call) Run(run func(ctx context.Context, db DBTX)) *MockQuerier_GetDatabaseTableSchemasBySchemasAndTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX))
	})
	return _c
}

func (_c *MockQuerier_GetDatabaseTableSchemasBySchemasAndTables_Call) Return(_a0 []*GetDatabaseTableSchemasBySchemasAndTablesRow, _a1 error) *MockQuerier_GetDatabaseTableSchemasBySchemasAndTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetDatabaseTableSchemasBySchemasAndTables_Call) RunAndReturn(run func(context.Context, DBTX) ([]*GetDatabaseTableSchemasBySchemasAndTablesRow, error)) *MockQuerier_GetDatabaseTableSchemasBySchemasAndTables_Call {
	_c.Call.Return(run)
	return _c
}

// GetIndicesBySchemasAndTables provides a mock function with given fields: ctx, db
func (_m *MockQuerier) GetIndicesBySchemasAndTables(ctx context.Context, db DBTX) ([]*GetIndicesBySchemasAndTablesRow, error) {
	ret := _m.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for GetIndicesBySchemasAndTables")
	}

	var r0 []*GetIndicesBySchemasAndTablesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) ([]*GetIndicesBySchemasAndTablesRow, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) []*GetIndicesBySchemasAndTablesRow); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetIndicesBySchemasAndTablesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetIndicesBySchemasAndTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIndicesBySchemasAndTables'
type MockQuerier_GetIndicesBySchemasAndTables_Call struct {
	*mock.Call
}

// GetIndicesBySchemasAndTables is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
func (_e *MockQuerier_Expecter) GetIndicesBySchemasAndTables(ctx interface{}, db interface{}) *MockQuerier_GetIndicesBySchemasAndTables_Call {
	return &MockQuerier_GetIndicesBySchemasAndTables_Call{Call: _e.mock.On("GetIndicesBySchemasAndTables", ctx, db)}
}

func (_c *MockQuerier_GetIndicesBySchemasAndTables_Call) Run(run func(ctx context.Context, db DBTX)) *MockQuerier_GetIndicesBySchemasAndTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX))
	})
	return _c
}

func (_c *MockQuerier_GetIndicesBySchemasAndTables_Call) Return(_a0 []*GetIndicesBySchemasAndTablesRow, _a1 error) *MockQuerier_GetIndicesBySchemasAndTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetIndicesBySchemasAndTables_Call) RunAndReturn(run func(context.Context, DBTX) ([]*GetIndicesBySchemasAndTablesRow, error)) *MockQuerier_GetIndicesBySchemasAndTables_Call {
	_c.Call.Return(run)
	return _c
}

// GetMysqlRolePermissions provides a mock function with given fields: ctx, db
func (_m *MockQuerier) GetMysqlRolePermissions(ctx context.Context, db DBTX) ([]*GetMysqlRolePermissionsRow, error) {
	ret := _m.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for GetMysqlRolePermissions")
	}

	var r0 []*GetMysqlRolePermissionsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) ([]*GetMysqlRolePermissionsRow, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) []*GetMysqlRolePermissionsRow); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetMysqlRolePermissionsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetMysqlRolePermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMysqlRolePermissions'
type MockQuerier_GetMysqlRolePermissions_Call struct {
	*mock.Call
}

// GetMysqlRolePermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
func (_e *MockQuerier_Expecter) GetMysqlRolePermissions(ctx interface{}, db interface{}) *MockQuerier_GetMysqlRolePermissions_Call {
	return &MockQuerier_GetMysqlRolePermissions_Call{Call: _e.mock.On("GetMysqlRolePermissions", ctx, db)}
}

func (_c *MockQuerier_GetMysqlRolePermissions_Call) Run(run func(ctx context.Context, db DBTX)) *MockQuerier_GetMysqlRolePermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX))
	})
	return _c
}

func (_c *MockQuerier_GetMysqlRolePermissions_Call) Return(_a0 []*GetMysqlRolePermissionsRow, _a1 error) *MockQuerier_GetMysqlRolePermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetMysqlRolePermissions_Call) RunAndReturn(run func(context.Context, DBTX) ([]*GetMysqlRolePermissionsRow, error)) *MockQuerier_GetMysqlRolePermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetTableConstraints provides a mock function with given fields: ctx, db
func (_m *MockQuerier) GetTableConstraints(ctx context.Context, db DBTX) ([]*GetTableConstraintsRow, error) {
	ret := _m.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for GetTableConstraints")
	}

	var r0 []*GetTableConstraintsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) ([]*GetTableConstraintsRow, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) []*GetTableConstraintsRow); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetTableConstraintsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTableConstraints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTableConstraints'
type MockQuerier_GetTableConstraints_Call struct {
	*mock.Call
}

// GetTableConstraints is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
func (_e *MockQuerier_Expecter) GetTableConstraints(ctx interface{}, db interface{}) *MockQuerier_GetTableConstraints_Call {
	return &MockQuerier_GetTableConstraints_Call{Call: _e.mock.On("GetTableConstraints", ctx, db)}
}

func (_c *MockQuerier_GetTableConstraints_Call) Run(run func(ctx context.Context, db DBTX)) *MockQuerier_GetTableConstraints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX))
	})
	return _c
}

func (_c *MockQuerier_GetTableConstraints_Call) Return(_a0 []*GetTableConstraintsRow, _a1 error) *MockQuerier_GetTableConstraints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTableConstraints_Call) RunAndReturn(run func(context.Context, DBTX) ([]*GetTableConstraintsRow, error)) *MockQuerier_GetTableConstraints_Call {
	_c.Call.Return(run)
	return _c
}

// GetTableConstraintsBySchemas provides a mock function with given fields: ctx, db, schemas
func (_m *MockQuerier) GetTableConstraintsBySchemas(ctx context.Context, db DBTX, schemas []string) ([]*GetTableConstraintsBySchemasRow, error) {
	ret := _m.Called(ctx, db, schemas)

	if len(ret) == 0 {
		panic("no return value specified for GetTableConstraintsBySchemas")
	}

	var r0 []*GetTableConstraintsBySchemasRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, []string) ([]*GetTableConstraintsBySchemasRow, error)); ok {
		return rf(ctx, db, schemas)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, []string) []*GetTableConstraintsBySchemasRow); ok {
		r0 = rf(ctx, db, schemas)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*GetTableConstraintsBySchemasRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, []string) error); ok {
		r1 = rf(ctx, db, schemas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetTableConstraintsBySchemas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTableConstraintsBySchemas'
type MockQuerier_GetTableConstraintsBySchemas_Call struct {
	*mock.Call
}

// GetTableConstraintsBySchemas is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - schemas []string
func (_e *MockQuerier_Expecter) GetTableConstraintsBySchemas(ctx interface{}, db interface{}, schemas interface{}) *MockQuerier_GetTableConstraintsBySchemas_Call {
	return &MockQuerier_GetTableConstraintsBySchemas_Call{Call: _e.mock.On("GetTableConstraintsBySchemas", ctx, db, schemas)}
}

func (_c *MockQuerier_GetTableConstraintsBySchemas_Call) Run(run func(ctx context.Context, db DBTX, schemas []string)) *MockQuerier_GetTableConstraintsBySchemas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].([]string))
	})
	return _c
}

func (_c *MockQuerier_GetTableConstraintsBySchemas_Call) Return(_a0 []*GetTableConstraintsBySchemasRow, _a1 error) *MockQuerier_GetTableConstraintsBySchemas_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetTableConstraintsBySchemas_Call) RunAndReturn(run func(context.Context, DBTX, []string) ([]*GetTableConstraintsBySchemasRow, error)) *MockQuerier_GetTableConstraintsBySchemas_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
