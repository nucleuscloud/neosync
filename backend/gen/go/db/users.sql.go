// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package db_queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountUserAssociation = `-- name: CreateAccountUserAssociation :one
INSERT INTO neosync_api.account_user_associations (
  account_id, user_id
) VALUES (
  $1, $2
)
RETURNING id, account_id, user_id, created_at, updated_at
`

type CreateAccountUserAssociationParams struct {
	AccountID pgtype.UUID
	UserID    pgtype.UUID
}

func (q *Queries) CreateAccountUserAssociation(ctx context.Context, arg CreateAccountUserAssociationParams) (NeosyncApiAccountUserAssociation, error) {
	row := q.db.QueryRow(ctx, createAccountUserAssociation, arg.AccountID, arg.UserID)
	var i NeosyncApiAccountUserAssociation
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAuth0IdentityProviderAssociation = `-- name: CreateAuth0IdentityProviderAssociation :one
INSERT INTO neosync_api.user_identity_provider_associations (
  user_id, auth0_provider_id
) VALUES (
  $1, $2
)
RETURNING id, user_id, auth0_provider_id, created_at, updated_at
`

type CreateAuth0IdentityProviderAssociationParams struct {
	UserID          pgtype.UUID
	Auth0ProviderID string
}

func (q *Queries) CreateAuth0IdentityProviderAssociation(ctx context.Context, arg CreateAuth0IdentityProviderAssociationParams) (NeosyncApiUserIdentityProviderAssociation, error) {
	row := q.db.QueryRow(ctx, createAuth0IdentityProviderAssociation, arg.UserID, arg.Auth0ProviderID)
	var i NeosyncApiUserIdentityProviderAssociation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Auth0ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPersonalAccount = `-- name: CreatePersonalAccount :one
INSERT INTO neosync_api.accounts (
  account_type, account_slug
) VALUES (
  0, $1
)
RETURNING id, created_at, updated_at, account_type, account_slug
`

func (q *Queries) CreatePersonalAccount(ctx context.Context, accountSlug string) (NeosyncApiAccount, error) {
	row := q.db.QueryRow(ctx, createPersonalAccount, accountSlug)
	var i NeosyncApiAccount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountType,
		&i.AccountSlug,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO neosync_api.users (
  id, created_at, updated_at
) VALUES (
  DEFAULT, DEFAULT, DEFAULT
)
RETURNING id, created_at, updated_at
`

func (q *Queries) CreateUser(ctx context.Context) (NeosyncApiUser, error) {
	row := q.db.QueryRow(ctx, createUser)
	var i NeosyncApiUser
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, created_at, updated_at, account_type, account_slug from neosync_api.accounts
WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id pgtype.UUID) (NeosyncApiAccount, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i NeosyncApiAccount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountType,
		&i.AccountSlug,
	)
	return i, err
}

const getAccountUserAssociation = `-- name: GetAccountUserAssociation :one
SELECT aua.id, aua.account_id, aua.user_id, aua.created_at, aua.updated_at from neosync_api.account_user_associations aua
INNER JOIN neosync_api.accounts a ON a.id = aua.account_id
INNER JOIN neosync_api.users u ON u.id = aua.user_id
WHERE a.id = $1 AND u.id = $2
`

type GetAccountUserAssociationParams struct {
	AccountId pgtype.UUID
	UserId    pgtype.UUID
}

func (q *Queries) GetAccountUserAssociation(ctx context.Context, arg GetAccountUserAssociationParams) (NeosyncApiAccountUserAssociation, error) {
	row := q.db.QueryRow(ctx, getAccountUserAssociation, arg.AccountId, arg.UserId)
	var i NeosyncApiAccountUserAssociation
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountsByUser = `-- name: GetAccountsByUser :many
SELECT a.id, a.created_at, a.updated_at, a.account_type, a.account_slug from neosync_api.accounts a
INNER JOIN neosync_api.account_user_associations aua ON aua.account_id = a.id
INNER JOIN neosync_api.users u ON u.id = aua.user_id
WHERE u.id = $1
`

func (q *Queries) GetAccountsByUser(ctx context.Context, id pgtype.UUID) ([]NeosyncApiAccount, error) {
	rows, err := q.db.Query(ctx, getAccountsByUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NeosyncApiAccount
	for rows.Next() {
		var i NeosyncApiAccount
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AccountType,
			&i.AccountSlug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonalAccountByUserId = `-- name: GetPersonalAccountByUserId :one
SELECT a.id, a.created_at, a.updated_at, a.account_type, a.account_slug from neosync_api.accounts a
INNER JOIN neosync_api.account_user_associations aua ON aua.account_id = a.id
INNER JOIN neosync_api.users u ON u.id = aua.user_id
WHERE u.id = $1 AND a.account_type = 0
`

func (q *Queries) GetPersonalAccountByUserId(ctx context.Context, userid pgtype.UUID) (NeosyncApiAccount, error) {
	row := q.db.QueryRow(ctx, getPersonalAccountByUserId, userid)
	var i NeosyncApiAccount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountType,
		&i.AccountSlug,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at FROM neosync_api.users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (NeosyncApiUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i NeosyncApiUser
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getUserAssociationByAuth0Id = `-- name: GetUserAssociationByAuth0Id :one
SELECT id, user_id, auth0_provider_id, created_at, updated_at from neosync_api.user_identity_provider_associations
WHERE auth0_provider_id = $1
`

func (q *Queries) GetUserAssociationByAuth0Id(ctx context.Context, auth0ProviderID string) (NeosyncApiUserIdentityProviderAssociation, error) {
	row := q.db.QueryRow(ctx, getUserAssociationByAuth0Id, auth0ProviderID)
	var i NeosyncApiUserIdentityProviderAssociation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Auth0ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByAuth0Id = `-- name: GetUserByAuth0Id :one
SELECT u.id, u.created_at, u.updated_at from neosync_api.users u
INNER JOIN neosync_api.user_identity_provider_associations uipa ON uipa.user_id = u.id
WHERE uipa.auth0_provider_id = $1
`

func (q *Queries) GetUserByAuth0Id(ctx context.Context, auth0ProviderID string) (NeosyncApiUser, error) {
	row := q.db.QueryRow(ctx, getUserByAuth0Id, auth0ProviderID)
	var i NeosyncApiUser
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const isUserInAccount = `-- name: IsUserInAccount :one
SELECT count(aua.id) from neosync_api.account_user_associations aua
INNER JOIN neosync_api.accounts a ON a.id = aua.account_id
INNER JOIN neosync_api.users u ON u.id = aua.user_id
WHERE a.id = $1 AND u.id = $2
`

type IsUserInAccountParams struct {
	AccountId pgtype.UUID
	UserId    pgtype.UUID
}

func (q *Queries) IsUserInAccount(ctx context.Context, arg IsUserInAccountParams) (int64, error) {
	row := q.db.QueryRow(ctx, isUserInAccount, arg.AccountId, arg.UserId)
	var count int64
	err := row.Scan(&count)
	return count, err
}
