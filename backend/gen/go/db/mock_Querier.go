// Code generated by mockery. DO NOT EDIT.

package db_queries

import (
	context "context"

	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CreateAccountUserAssociation provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) CreateAccountUserAssociation(ctx context.Context, db DBTX, arg CreateAccountUserAssociationParams) (NeosyncApiAccountUserAssociation, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiAccountUserAssociation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, CreateAccountUserAssociationParams) (NeosyncApiAccountUserAssociation, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, CreateAccountUserAssociationParams) NeosyncApiAccountUserAssociation); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiAccountUserAssociation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, CreateAccountUserAssociationParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateAccountUserAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccountUserAssociation'
type MockQuerier_CreateAccountUserAssociation_Call struct {
	*mock.Call
}

// CreateAccountUserAssociation is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg CreateAccountUserAssociationParams
func (_e *MockQuerier_Expecter) CreateAccountUserAssociation(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_CreateAccountUserAssociation_Call {
	return &MockQuerier_CreateAccountUserAssociation_Call{Call: _e.mock.On("CreateAccountUserAssociation", ctx, db, arg)}
}

func (_c *MockQuerier_CreateAccountUserAssociation_Call) Run(run func(ctx context.Context, db DBTX, arg CreateAccountUserAssociationParams)) *MockQuerier_CreateAccountUserAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(CreateAccountUserAssociationParams))
	})
	return _c
}

func (_c *MockQuerier_CreateAccountUserAssociation_Call) Return(_a0 NeosyncApiAccountUserAssociation, _a1 error) *MockQuerier_CreateAccountUserAssociation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateAccountUserAssociation_Call) RunAndReturn(run func(context.Context, DBTX, CreateAccountUserAssociationParams) (NeosyncApiAccountUserAssociation, error)) *MockQuerier_CreateAccountUserAssociation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAuth0IdentityProviderAssociation provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) CreateAuth0IdentityProviderAssociation(ctx context.Context, db DBTX, arg CreateAuth0IdentityProviderAssociationParams) (NeosyncApiUserIdentityProviderAssociation, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiUserIdentityProviderAssociation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, CreateAuth0IdentityProviderAssociationParams) (NeosyncApiUserIdentityProviderAssociation, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, CreateAuth0IdentityProviderAssociationParams) NeosyncApiUserIdentityProviderAssociation); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiUserIdentityProviderAssociation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, CreateAuth0IdentityProviderAssociationParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateAuth0IdentityProviderAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuth0IdentityProviderAssociation'
type MockQuerier_CreateAuth0IdentityProviderAssociation_Call struct {
	*mock.Call
}

// CreateAuth0IdentityProviderAssociation is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg CreateAuth0IdentityProviderAssociationParams
func (_e *MockQuerier_Expecter) CreateAuth0IdentityProviderAssociation(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_CreateAuth0IdentityProviderAssociation_Call {
	return &MockQuerier_CreateAuth0IdentityProviderAssociation_Call{Call: _e.mock.On("CreateAuth0IdentityProviderAssociation", ctx, db, arg)}
}

func (_c *MockQuerier_CreateAuth0IdentityProviderAssociation_Call) Run(run func(ctx context.Context, db DBTX, arg CreateAuth0IdentityProviderAssociationParams)) *MockQuerier_CreateAuth0IdentityProviderAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(CreateAuth0IdentityProviderAssociationParams))
	})
	return _c
}

func (_c *MockQuerier_CreateAuth0IdentityProviderAssociation_Call) Return(_a0 NeosyncApiUserIdentityProviderAssociation, _a1 error) *MockQuerier_CreateAuth0IdentityProviderAssociation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateAuth0IdentityProviderAssociation_Call) RunAndReturn(run func(context.Context, DBTX, CreateAuth0IdentityProviderAssociationParams) (NeosyncApiUserIdentityProviderAssociation, error)) *MockQuerier_CreateAuth0IdentityProviderAssociation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateConnection provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) CreateConnection(ctx context.Context, db DBTX, arg CreateConnectionParams) (NeosyncApiConnection, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, CreateConnectionParams) (NeosyncApiConnection, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, CreateConnectionParams) NeosyncApiConnection); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiConnection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, CreateConnectionParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConnection'
type MockQuerier_CreateConnection_Call struct {
	*mock.Call
}

// CreateConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg CreateConnectionParams
func (_e *MockQuerier_Expecter) CreateConnection(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_CreateConnection_Call {
	return &MockQuerier_CreateConnection_Call{Call: _e.mock.On("CreateConnection", ctx, db, arg)}
}

func (_c *MockQuerier_CreateConnection_Call) Run(run func(ctx context.Context, db DBTX, arg CreateConnectionParams)) *MockQuerier_CreateConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(CreateConnectionParams))
	})
	return _c
}

func (_c *MockQuerier_CreateConnection_Call) Return(_a0 NeosyncApiConnection, _a1 error) *MockQuerier_CreateConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateConnection_Call) RunAndReturn(run func(context.Context, DBTX, CreateConnectionParams) (NeosyncApiConnection, error)) *MockQuerier_CreateConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCustomTransformer provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) CreateCustomTransformer(ctx context.Context, db DBTX, arg CreateCustomTransformerParams) (NeosyncApiTransformer, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiTransformer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, CreateCustomTransformerParams) (NeosyncApiTransformer, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, CreateCustomTransformerParams) NeosyncApiTransformer); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiTransformer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, CreateCustomTransformerParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateCustomTransformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomTransformer'
type MockQuerier_CreateCustomTransformer_Call struct {
	*mock.Call
}

// CreateCustomTransformer is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg CreateCustomTransformerParams
func (_e *MockQuerier_Expecter) CreateCustomTransformer(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_CreateCustomTransformer_Call {
	return &MockQuerier_CreateCustomTransformer_Call{Call: _e.mock.On("CreateCustomTransformer", ctx, db, arg)}
}

func (_c *MockQuerier_CreateCustomTransformer_Call) Run(run func(ctx context.Context, db DBTX, arg CreateCustomTransformerParams)) *MockQuerier_CreateCustomTransformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(CreateCustomTransformerParams))
	})
	return _c
}

func (_c *MockQuerier_CreateCustomTransformer_Call) Return(_a0 NeosyncApiTransformer, _a1 error) *MockQuerier_CreateCustomTransformer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateCustomTransformer_Call) RunAndReturn(run func(context.Context, DBTX, CreateCustomTransformerParams) (NeosyncApiTransformer, error)) *MockQuerier_CreateCustomTransformer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJob provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) CreateJob(ctx context.Context, db DBTX, arg CreateJobParams) (NeosyncApiJob, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, CreateJobParams) (NeosyncApiJob, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, CreateJobParams) NeosyncApiJob); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiJob)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, CreateJobParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type MockQuerier_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg CreateJobParams
func (_e *MockQuerier_Expecter) CreateJob(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_CreateJob_Call {
	return &MockQuerier_CreateJob_Call{Call: _e.mock.On("CreateJob", ctx, db, arg)}
}

func (_c *MockQuerier_CreateJob_Call) Run(run func(ctx context.Context, db DBTX, arg CreateJobParams)) *MockQuerier_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(CreateJobParams))
	})
	return _c
}

func (_c *MockQuerier_CreateJob_Call) Return(_a0 NeosyncApiJob, _a1 error) *MockQuerier_CreateJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateJob_Call) RunAndReturn(run func(context.Context, DBTX, CreateJobParams) (NeosyncApiJob, error)) *MockQuerier_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJobConnectionDestination provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) CreateJobConnectionDestination(ctx context.Context, db DBTX, arg CreateJobConnectionDestinationParams) (NeosyncApiJobDestinationConnectionAssociation, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiJobDestinationConnectionAssociation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, CreateJobConnectionDestinationParams) (NeosyncApiJobDestinationConnectionAssociation, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, CreateJobConnectionDestinationParams) NeosyncApiJobDestinationConnectionAssociation); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiJobDestinationConnectionAssociation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, CreateJobConnectionDestinationParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateJobConnectionDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJobConnectionDestination'
type MockQuerier_CreateJobConnectionDestination_Call struct {
	*mock.Call
}

// CreateJobConnectionDestination is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg CreateJobConnectionDestinationParams
func (_e *MockQuerier_Expecter) CreateJobConnectionDestination(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_CreateJobConnectionDestination_Call {
	return &MockQuerier_CreateJobConnectionDestination_Call{Call: _e.mock.On("CreateJobConnectionDestination", ctx, db, arg)}
}

func (_c *MockQuerier_CreateJobConnectionDestination_Call) Run(run func(ctx context.Context, db DBTX, arg CreateJobConnectionDestinationParams)) *MockQuerier_CreateJobConnectionDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(CreateJobConnectionDestinationParams))
	})
	return _c
}

func (_c *MockQuerier_CreateJobConnectionDestination_Call) Return(_a0 NeosyncApiJobDestinationConnectionAssociation, _a1 error) *MockQuerier_CreateJobConnectionDestination_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateJobConnectionDestination_Call) RunAndReturn(run func(context.Context, DBTX, CreateJobConnectionDestinationParams) (NeosyncApiJobDestinationConnectionAssociation, error)) *MockQuerier_CreateJobConnectionDestination_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJobConnectionDestinations provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) CreateJobConnectionDestinations(ctx context.Context, db DBTX, arg []CreateJobConnectionDestinationsParams) (int64, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, []CreateJobConnectionDestinationsParams) (int64, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, []CreateJobConnectionDestinationsParams) int64); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, []CreateJobConnectionDestinationsParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateJobConnectionDestinations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJobConnectionDestinations'
type MockQuerier_CreateJobConnectionDestinations_Call struct {
	*mock.Call
}

// CreateJobConnectionDestinations is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg []CreateJobConnectionDestinationsParams
func (_e *MockQuerier_Expecter) CreateJobConnectionDestinations(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_CreateJobConnectionDestinations_Call {
	return &MockQuerier_CreateJobConnectionDestinations_Call{Call: _e.mock.On("CreateJobConnectionDestinations", ctx, db, arg)}
}

func (_c *MockQuerier_CreateJobConnectionDestinations_Call) Run(run func(ctx context.Context, db DBTX, arg []CreateJobConnectionDestinationsParams)) *MockQuerier_CreateJobConnectionDestinations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].([]CreateJobConnectionDestinationsParams))
	})
	return _c
}

func (_c *MockQuerier_CreateJobConnectionDestinations_Call) Return(_a0 int64, _a1 error) *MockQuerier_CreateJobConnectionDestinations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateJobConnectionDestinations_Call) RunAndReturn(run func(context.Context, DBTX, []CreateJobConnectionDestinationsParams) (int64, error)) *MockQuerier_CreateJobConnectionDestinations_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePersonalAccount provides a mock function with given fields: ctx, db, accountSlug
func (_m *MockQuerier) CreatePersonalAccount(ctx context.Context, db DBTX, accountSlug string) (NeosyncApiAccount, error) {
	ret := _m.Called(ctx, db, accountSlug)

	var r0 NeosyncApiAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, string) (NeosyncApiAccount, error)); ok {
		return rf(ctx, db, accountSlug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, string) NeosyncApiAccount); ok {
		r0 = rf(ctx, db, accountSlug)
	} else {
		r0 = ret.Get(0).(NeosyncApiAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, string) error); ok {
		r1 = rf(ctx, db, accountSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreatePersonalAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePersonalAccount'
type MockQuerier_CreatePersonalAccount_Call struct {
	*mock.Call
}

// CreatePersonalAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - accountSlug string
func (_e *MockQuerier_Expecter) CreatePersonalAccount(ctx interface{}, db interface{}, accountSlug interface{}) *MockQuerier_CreatePersonalAccount_Call {
	return &MockQuerier_CreatePersonalAccount_Call{Call: _e.mock.On("CreatePersonalAccount", ctx, db, accountSlug)}
}

func (_c *MockQuerier_CreatePersonalAccount_Call) Run(run func(ctx context.Context, db DBTX, accountSlug string)) *MockQuerier_CreatePersonalAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(string))
	})
	return _c
}

func (_c *MockQuerier_CreatePersonalAccount_Call) Return(_a0 NeosyncApiAccount, _a1 error) *MockQuerier_CreatePersonalAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreatePersonalAccount_Call) RunAndReturn(run func(context.Context, DBTX, string) (NeosyncApiAccount, error)) *MockQuerier_CreatePersonalAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, db
func (_m *MockQuerier) CreateUser(ctx context.Context, db DBTX) (NeosyncApiUser, error) {
	ret := _m.Called(ctx, db)

	var r0 NeosyncApiUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) (NeosyncApiUser, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) NeosyncApiUser); ok {
		r0 = rf(ctx, db)
	} else {
		r0 = ret.Get(0).(NeosyncApiUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockQuerier_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
func (_e *MockQuerier_Expecter) CreateUser(ctx interface{}, db interface{}) *MockQuerier_CreateUser_Call {
	return &MockQuerier_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, db)}
}

func (_c *MockQuerier_CreateUser_Call) Run(run func(ctx context.Context, db DBTX)) *MockQuerier_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX))
	})
	return _c
}

func (_c *MockQuerier_CreateUser_Call) Return(_a0 NeosyncApiUser, _a1 error) *MockQuerier_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateUser_Call) RunAndReturn(run func(context.Context, DBTX) (NeosyncApiUser, error)) *MockQuerier_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomTransformerById provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) DeleteCustomTransformerById(ctx context.Context, db DBTX, id pgtype.UUID) error {
	ret := _m.Called(ctx, db, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_DeleteCustomTransformerById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomTransformerById'
type MockQuerier_DeleteCustomTransformerById_Call struct {
	*mock.Call
}

// DeleteCustomTransformerById is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) DeleteCustomTransformerById(ctx interface{}, db interface{}, id interface{}) *MockQuerier_DeleteCustomTransformerById_Call {
	return &MockQuerier_DeleteCustomTransformerById_Call{Call: _e.mock.On("DeleteCustomTransformerById", ctx, db, id)}
}

func (_c *MockQuerier_DeleteCustomTransformerById_Call) Run(run func(ctx context.Context, db DBTX, id pgtype.UUID)) *MockQuerier_DeleteCustomTransformerById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_DeleteCustomTransformerById_Call) Return(_a0 error) *MockQuerier_DeleteCustomTransformerById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_DeleteCustomTransformerById_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) error) *MockQuerier_DeleteCustomTransformerById_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) GetAccount(ctx context.Context, db DBTX, id pgtype.UUID) (NeosyncApiAccount, error) {
	ret := _m.Called(ctx, db, id)

	var r0 NeosyncApiAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) (NeosyncApiAccount, error)); ok {
		return rf(ctx, db, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) NeosyncApiAccount); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Get(0).(NeosyncApiAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockQuerier_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) GetAccount(ctx interface{}, db interface{}, id interface{}) *MockQuerier_GetAccount_Call {
	return &MockQuerier_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, db, id)}
}

func (_c *MockQuerier_GetAccount_Call) Run(run func(ctx context.Context, db DBTX, id pgtype.UUID)) *MockQuerier_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetAccount_Call) Return(_a0 NeosyncApiAccount, _a1 error) *MockQuerier_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAccount_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) (NeosyncApiAccount, error)) *MockQuerier_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountUserAssociation provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) GetAccountUserAssociation(ctx context.Context, db DBTX, arg GetAccountUserAssociationParams) (NeosyncApiAccountUserAssociation, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiAccountUserAssociation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, GetAccountUserAssociationParams) (NeosyncApiAccountUserAssociation, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, GetAccountUserAssociationParams) NeosyncApiAccountUserAssociation); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiAccountUserAssociation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, GetAccountUserAssociationParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAccountUserAssociation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountUserAssociation'
type MockQuerier_GetAccountUserAssociation_Call struct {
	*mock.Call
}

// GetAccountUserAssociation is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg GetAccountUserAssociationParams
func (_e *MockQuerier_Expecter) GetAccountUserAssociation(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_GetAccountUserAssociation_Call {
	return &MockQuerier_GetAccountUserAssociation_Call{Call: _e.mock.On("GetAccountUserAssociation", ctx, db, arg)}
}

func (_c *MockQuerier_GetAccountUserAssociation_Call) Run(run func(ctx context.Context, db DBTX, arg GetAccountUserAssociationParams)) *MockQuerier_GetAccountUserAssociation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(GetAccountUserAssociationParams))
	})
	return _c
}

func (_c *MockQuerier_GetAccountUserAssociation_Call) Return(_a0 NeosyncApiAccountUserAssociation, _a1 error) *MockQuerier_GetAccountUserAssociation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAccountUserAssociation_Call) RunAndReturn(run func(context.Context, DBTX, GetAccountUserAssociationParams) (NeosyncApiAccountUserAssociation, error)) *MockQuerier_GetAccountUserAssociation_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountsByUser provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) GetAccountsByUser(ctx context.Context, db DBTX, id pgtype.UUID) ([]NeosyncApiAccount, error) {
	ret := _m.Called(ctx, db, id)

	var r0 []NeosyncApiAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) ([]NeosyncApiAccount, error)); ok {
		return rf(ctx, db, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) []NeosyncApiAccount); ok {
		r0 = rf(ctx, db, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NeosyncApiAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAccountsByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountsByUser'
type MockQuerier_GetAccountsByUser_Call struct {
	*mock.Call
}

// GetAccountsByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) GetAccountsByUser(ctx interface{}, db interface{}, id interface{}) *MockQuerier_GetAccountsByUser_Call {
	return &MockQuerier_GetAccountsByUser_Call{Call: _e.mock.On("GetAccountsByUser", ctx, db, id)}
}

func (_c *MockQuerier_GetAccountsByUser_Call) Run(run func(ctx context.Context, db DBTX, id pgtype.UUID)) *MockQuerier_GetAccountsByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetAccountsByUser_Call) Return(_a0 []NeosyncApiAccount, _a1 error) *MockQuerier_GetAccountsByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAccountsByUser_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) ([]NeosyncApiAccount, error)) *MockQuerier_GetAccountsByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnonymousUser provides a mock function with given fields: ctx, db
func (_m *MockQuerier) GetAnonymousUser(ctx context.Context, db DBTX) (NeosyncApiUser, error) {
	ret := _m.Called(ctx, db)

	var r0 NeosyncApiUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) (NeosyncApiUser, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) NeosyncApiUser); ok {
		r0 = rf(ctx, db)
	} else {
		r0 = ret.Get(0).(NeosyncApiUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetAnonymousUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnonymousUser'
type MockQuerier_GetAnonymousUser_Call struct {
	*mock.Call
}

// GetAnonymousUser is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
func (_e *MockQuerier_Expecter) GetAnonymousUser(ctx interface{}, db interface{}) *MockQuerier_GetAnonymousUser_Call {
	return &MockQuerier_GetAnonymousUser_Call{Call: _e.mock.On("GetAnonymousUser", ctx, db)}
}

func (_c *MockQuerier_GetAnonymousUser_Call) Run(run func(ctx context.Context, db DBTX)) *MockQuerier_GetAnonymousUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX))
	})
	return _c
}

func (_c *MockQuerier_GetAnonymousUser_Call) Return(_a0 NeosyncApiUser, _a1 error) *MockQuerier_GetAnonymousUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetAnonymousUser_Call) RunAndReturn(run func(context.Context, DBTX) (NeosyncApiUser, error)) *MockQuerier_GetAnonymousUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionById provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) GetConnectionById(ctx context.Context, db DBTX, id pgtype.UUID) (NeosyncApiConnection, error) {
	ret := _m.Called(ctx, db, id)

	var r0 NeosyncApiConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) (NeosyncApiConnection, error)); ok {
		return rf(ctx, db, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) NeosyncApiConnection); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Get(0).(NeosyncApiConnection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetConnectionById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionById'
type MockQuerier_GetConnectionById_Call struct {
	*mock.Call
}

// GetConnectionById is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) GetConnectionById(ctx interface{}, db interface{}, id interface{}) *MockQuerier_GetConnectionById_Call {
	return &MockQuerier_GetConnectionById_Call{Call: _e.mock.On("GetConnectionById", ctx, db, id)}
}

func (_c *MockQuerier_GetConnectionById_Call) Run(run func(ctx context.Context, db DBTX, id pgtype.UUID)) *MockQuerier_GetConnectionById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetConnectionById_Call) Return(_a0 NeosyncApiConnection, _a1 error) *MockQuerier_GetConnectionById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetConnectionById_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) (NeosyncApiConnection, error)) *MockQuerier_GetConnectionById_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionByNameAndAccount provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) GetConnectionByNameAndAccount(ctx context.Context, db DBTX, arg GetConnectionByNameAndAccountParams) (NeosyncApiConnection, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, GetConnectionByNameAndAccountParams) (NeosyncApiConnection, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, GetConnectionByNameAndAccountParams) NeosyncApiConnection); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiConnection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, GetConnectionByNameAndAccountParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetConnectionByNameAndAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionByNameAndAccount'
type MockQuerier_GetConnectionByNameAndAccount_Call struct {
	*mock.Call
}

// GetConnectionByNameAndAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg GetConnectionByNameAndAccountParams
func (_e *MockQuerier_Expecter) GetConnectionByNameAndAccount(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_GetConnectionByNameAndAccount_Call {
	return &MockQuerier_GetConnectionByNameAndAccount_Call{Call: _e.mock.On("GetConnectionByNameAndAccount", ctx, db, arg)}
}

func (_c *MockQuerier_GetConnectionByNameAndAccount_Call) Run(run func(ctx context.Context, db DBTX, arg GetConnectionByNameAndAccountParams)) *MockQuerier_GetConnectionByNameAndAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(GetConnectionByNameAndAccountParams))
	})
	return _c
}

func (_c *MockQuerier_GetConnectionByNameAndAccount_Call) Return(_a0 NeosyncApiConnection, _a1 error) *MockQuerier_GetConnectionByNameAndAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetConnectionByNameAndAccount_Call) RunAndReturn(run func(context.Context, DBTX, GetConnectionByNameAndAccountParams) (NeosyncApiConnection, error)) *MockQuerier_GetConnectionByNameAndAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionsByAccount provides a mock function with given fields: ctx, db, accountid
func (_m *MockQuerier) GetConnectionsByAccount(ctx context.Context, db DBTX, accountid pgtype.UUID) ([]NeosyncApiConnection, error) {
	ret := _m.Called(ctx, db, accountid)

	var r0 []NeosyncApiConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) ([]NeosyncApiConnection, error)); ok {
		return rf(ctx, db, accountid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) []NeosyncApiConnection); ok {
		r0 = rf(ctx, db, accountid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NeosyncApiConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r1 = rf(ctx, db, accountid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetConnectionsByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionsByAccount'
type MockQuerier_GetConnectionsByAccount_Call struct {
	*mock.Call
}

// GetConnectionsByAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - accountid pgtype.UUID
func (_e *MockQuerier_Expecter) GetConnectionsByAccount(ctx interface{}, db interface{}, accountid interface{}) *MockQuerier_GetConnectionsByAccount_Call {
	return &MockQuerier_GetConnectionsByAccount_Call{Call: _e.mock.On("GetConnectionsByAccount", ctx, db, accountid)}
}

func (_c *MockQuerier_GetConnectionsByAccount_Call) Run(run func(ctx context.Context, db DBTX, accountid pgtype.UUID)) *MockQuerier_GetConnectionsByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetConnectionsByAccount_Call) Return(_a0 []NeosyncApiConnection, _a1 error) *MockQuerier_GetConnectionsByAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetConnectionsByAccount_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) ([]NeosyncApiConnection, error)) *MockQuerier_GetConnectionsByAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomTransformerById provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) GetCustomTransformerById(ctx context.Context, db DBTX, id pgtype.UUID) (NeosyncApiTransformer, error) {
	ret := _m.Called(ctx, db, id)

	var r0 NeosyncApiTransformer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) (NeosyncApiTransformer, error)); ok {
		return rf(ctx, db, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) NeosyncApiTransformer); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Get(0).(NeosyncApiTransformer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetCustomTransformerById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomTransformerById'
type MockQuerier_GetCustomTransformerById_Call struct {
	*mock.Call
}

// GetCustomTransformerById is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) GetCustomTransformerById(ctx interface{}, db interface{}, id interface{}) *MockQuerier_GetCustomTransformerById_Call {
	return &MockQuerier_GetCustomTransformerById_Call{Call: _e.mock.On("GetCustomTransformerById", ctx, db, id)}
}

func (_c *MockQuerier_GetCustomTransformerById_Call) Run(run func(ctx context.Context, db DBTX, id pgtype.UUID)) *MockQuerier_GetCustomTransformerById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetCustomTransformerById_Call) Return(_a0 NeosyncApiTransformer, _a1 error) *MockQuerier_GetCustomTransformerById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetCustomTransformerById_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) (NeosyncApiTransformer, error)) *MockQuerier_GetCustomTransformerById_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomTransformersByAccount provides a mock function with given fields: ctx, db, accountid
func (_m *MockQuerier) GetCustomTransformersByAccount(ctx context.Context, db DBTX, accountid pgtype.UUID) ([]NeosyncApiTransformer, error) {
	ret := _m.Called(ctx, db, accountid)

	var r0 []NeosyncApiTransformer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) ([]NeosyncApiTransformer, error)); ok {
		return rf(ctx, db, accountid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) []NeosyncApiTransformer); ok {
		r0 = rf(ctx, db, accountid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NeosyncApiTransformer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r1 = rf(ctx, db, accountid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetCustomTransformersByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomTransformersByAccount'
type MockQuerier_GetCustomTransformersByAccount_Call struct {
	*mock.Call
}

// GetCustomTransformersByAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - accountid pgtype.UUID
func (_e *MockQuerier_Expecter) GetCustomTransformersByAccount(ctx interface{}, db interface{}, accountid interface{}) *MockQuerier_GetCustomTransformersByAccount_Call {
	return &MockQuerier_GetCustomTransformersByAccount_Call{Call: _e.mock.On("GetCustomTransformersByAccount", ctx, db, accountid)}
}

func (_c *MockQuerier_GetCustomTransformersByAccount_Call) Run(run func(ctx context.Context, db DBTX, accountid pgtype.UUID)) *MockQuerier_GetCustomTransformersByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetCustomTransformersByAccount_Call) Return(_a0 []NeosyncApiTransformer, _a1 error) *MockQuerier_GetCustomTransformersByAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetCustomTransformersByAccount_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) ([]NeosyncApiTransformer, error)) *MockQuerier_GetCustomTransformersByAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobById provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) GetJobById(ctx context.Context, db DBTX, id pgtype.UUID) (NeosyncApiJob, error) {
	ret := _m.Called(ctx, db, id)

	var r0 NeosyncApiJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) (NeosyncApiJob, error)); ok {
		return rf(ctx, db, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) NeosyncApiJob); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Get(0).(NeosyncApiJob)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetJobById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobById'
type MockQuerier_GetJobById_Call struct {
	*mock.Call
}

// GetJobById is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) GetJobById(ctx interface{}, db interface{}, id interface{}) *MockQuerier_GetJobById_Call {
	return &MockQuerier_GetJobById_Call{Call: _e.mock.On("GetJobById", ctx, db, id)}
}

func (_c *MockQuerier_GetJobById_Call) Run(run func(ctx context.Context, db DBTX, id pgtype.UUID)) *MockQuerier_GetJobById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetJobById_Call) Return(_a0 NeosyncApiJob, _a1 error) *MockQuerier_GetJobById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetJobById_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) (NeosyncApiJob, error)) *MockQuerier_GetJobById_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobByNameAndAccount provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) GetJobByNameAndAccount(ctx context.Context, db DBTX, arg GetJobByNameAndAccountParams) (NeosyncApiJob, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, GetJobByNameAndAccountParams) (NeosyncApiJob, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, GetJobByNameAndAccountParams) NeosyncApiJob); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiJob)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, GetJobByNameAndAccountParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetJobByNameAndAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobByNameAndAccount'
type MockQuerier_GetJobByNameAndAccount_Call struct {
	*mock.Call
}

// GetJobByNameAndAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg GetJobByNameAndAccountParams
func (_e *MockQuerier_Expecter) GetJobByNameAndAccount(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_GetJobByNameAndAccount_Call {
	return &MockQuerier_GetJobByNameAndAccount_Call{Call: _e.mock.On("GetJobByNameAndAccount", ctx, db, arg)}
}

func (_c *MockQuerier_GetJobByNameAndAccount_Call) Run(run func(ctx context.Context, db DBTX, arg GetJobByNameAndAccountParams)) *MockQuerier_GetJobByNameAndAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(GetJobByNameAndAccountParams))
	})
	return _c
}

func (_c *MockQuerier_GetJobByNameAndAccount_Call) Return(_a0 NeosyncApiJob, _a1 error) *MockQuerier_GetJobByNameAndAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetJobByNameAndAccount_Call) RunAndReturn(run func(context.Context, DBTX, GetJobByNameAndAccountParams) (NeosyncApiJob, error)) *MockQuerier_GetJobByNameAndAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobConnectionDestination provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) GetJobConnectionDestination(ctx context.Context, db DBTX, id pgtype.UUID) (NeosyncApiJobDestinationConnectionAssociation, error) {
	ret := _m.Called(ctx, db, id)

	var r0 NeosyncApiJobDestinationConnectionAssociation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) (NeosyncApiJobDestinationConnectionAssociation, error)); ok {
		return rf(ctx, db, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) NeosyncApiJobDestinationConnectionAssociation); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Get(0).(NeosyncApiJobDestinationConnectionAssociation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetJobConnectionDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobConnectionDestination'
type MockQuerier_GetJobConnectionDestination_Call struct {
	*mock.Call
}

// GetJobConnectionDestination is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) GetJobConnectionDestination(ctx interface{}, db interface{}, id interface{}) *MockQuerier_GetJobConnectionDestination_Call {
	return &MockQuerier_GetJobConnectionDestination_Call{Call: _e.mock.On("GetJobConnectionDestination", ctx, db, id)}
}

func (_c *MockQuerier_GetJobConnectionDestination_Call) Run(run func(ctx context.Context, db DBTX, id pgtype.UUID)) *MockQuerier_GetJobConnectionDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetJobConnectionDestination_Call) Return(_a0 NeosyncApiJobDestinationConnectionAssociation, _a1 error) *MockQuerier_GetJobConnectionDestination_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetJobConnectionDestination_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) (NeosyncApiJobDestinationConnectionAssociation, error)) *MockQuerier_GetJobConnectionDestination_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobConnectionDestinations provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) GetJobConnectionDestinations(ctx context.Context, db DBTX, id pgtype.UUID) ([]NeosyncApiJobDestinationConnectionAssociation, error) {
	ret := _m.Called(ctx, db, id)

	var r0 []NeosyncApiJobDestinationConnectionAssociation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) ([]NeosyncApiJobDestinationConnectionAssociation, error)); ok {
		return rf(ctx, db, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) []NeosyncApiJobDestinationConnectionAssociation); ok {
		r0 = rf(ctx, db, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NeosyncApiJobDestinationConnectionAssociation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetJobConnectionDestinations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobConnectionDestinations'
type MockQuerier_GetJobConnectionDestinations_Call struct {
	*mock.Call
}

// GetJobConnectionDestinations is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) GetJobConnectionDestinations(ctx interface{}, db interface{}, id interface{}) *MockQuerier_GetJobConnectionDestinations_Call {
	return &MockQuerier_GetJobConnectionDestinations_Call{Call: _e.mock.On("GetJobConnectionDestinations", ctx, db, id)}
}

func (_c *MockQuerier_GetJobConnectionDestinations_Call) Run(run func(ctx context.Context, db DBTX, id pgtype.UUID)) *MockQuerier_GetJobConnectionDestinations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetJobConnectionDestinations_Call) Return(_a0 []NeosyncApiJobDestinationConnectionAssociation, _a1 error) *MockQuerier_GetJobConnectionDestinations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetJobConnectionDestinations_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) ([]NeosyncApiJobDestinationConnectionAssociation, error)) *MockQuerier_GetJobConnectionDestinations_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobConnectionDestinationsByJobIds provides a mock function with given fields: ctx, db, jobids
func (_m *MockQuerier) GetJobConnectionDestinationsByJobIds(ctx context.Context, db DBTX, jobids []pgtype.UUID) ([]NeosyncApiJobDestinationConnectionAssociation, error) {
	ret := _m.Called(ctx, db, jobids)

	var r0 []NeosyncApiJobDestinationConnectionAssociation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, []pgtype.UUID) ([]NeosyncApiJobDestinationConnectionAssociation, error)); ok {
		return rf(ctx, db, jobids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, []pgtype.UUID) []NeosyncApiJobDestinationConnectionAssociation); ok {
		r0 = rf(ctx, db, jobids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NeosyncApiJobDestinationConnectionAssociation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, []pgtype.UUID) error); ok {
		r1 = rf(ctx, db, jobids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetJobConnectionDestinationsByJobIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobConnectionDestinationsByJobIds'
type MockQuerier_GetJobConnectionDestinationsByJobIds_Call struct {
	*mock.Call
}

// GetJobConnectionDestinationsByJobIds is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - jobids []pgtype.UUID
func (_e *MockQuerier_Expecter) GetJobConnectionDestinationsByJobIds(ctx interface{}, db interface{}, jobids interface{}) *MockQuerier_GetJobConnectionDestinationsByJobIds_Call {
	return &MockQuerier_GetJobConnectionDestinationsByJobIds_Call{Call: _e.mock.On("GetJobConnectionDestinationsByJobIds", ctx, db, jobids)}
}

func (_c *MockQuerier_GetJobConnectionDestinationsByJobIds_Call) Run(run func(ctx context.Context, db DBTX, jobids []pgtype.UUID)) *MockQuerier_GetJobConnectionDestinationsByJobIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].([]pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetJobConnectionDestinationsByJobIds_Call) Return(_a0 []NeosyncApiJobDestinationConnectionAssociation, _a1 error) *MockQuerier_GetJobConnectionDestinationsByJobIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetJobConnectionDestinationsByJobIds_Call) RunAndReturn(run func(context.Context, DBTX, []pgtype.UUID) ([]NeosyncApiJobDestinationConnectionAssociation, error)) *MockQuerier_GetJobConnectionDestinationsByJobIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobsByAccount provides a mock function with given fields: ctx, db, accountid
func (_m *MockQuerier) GetJobsByAccount(ctx context.Context, db DBTX, accountid pgtype.UUID) ([]NeosyncApiJob, error) {
	ret := _m.Called(ctx, db, accountid)

	var r0 []NeosyncApiJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) ([]NeosyncApiJob, error)); ok {
		return rf(ctx, db, accountid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) []NeosyncApiJob); ok {
		r0 = rf(ctx, db, accountid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NeosyncApiJob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r1 = rf(ctx, db, accountid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetJobsByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobsByAccount'
type MockQuerier_GetJobsByAccount_Call struct {
	*mock.Call
}

// GetJobsByAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - accountid pgtype.UUID
func (_e *MockQuerier_Expecter) GetJobsByAccount(ctx interface{}, db interface{}, accountid interface{}) *MockQuerier_GetJobsByAccount_Call {
	return &MockQuerier_GetJobsByAccount_Call{Call: _e.mock.On("GetJobsByAccount", ctx, db, accountid)}
}

func (_c *MockQuerier_GetJobsByAccount_Call) Run(run func(ctx context.Context, db DBTX, accountid pgtype.UUID)) *MockQuerier_GetJobsByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetJobsByAccount_Call) Return(_a0 []NeosyncApiJob, _a1 error) *MockQuerier_GetJobsByAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetJobsByAccount_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) ([]NeosyncApiJob, error)) *MockQuerier_GetJobsByAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersonalAccountByUserId provides a mock function with given fields: ctx, db, userid
func (_m *MockQuerier) GetPersonalAccountByUserId(ctx context.Context, db DBTX, userid pgtype.UUID) (NeosyncApiAccount, error) {
	ret := _m.Called(ctx, db, userid)

	var r0 NeosyncApiAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) (NeosyncApiAccount, error)); ok {
		return rf(ctx, db, userid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) NeosyncApiAccount); ok {
		r0 = rf(ctx, db, userid)
	} else {
		r0 = ret.Get(0).(NeosyncApiAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r1 = rf(ctx, db, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetPersonalAccountByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersonalAccountByUserId'
type MockQuerier_GetPersonalAccountByUserId_Call struct {
	*mock.Call
}

// GetPersonalAccountByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - userid pgtype.UUID
func (_e *MockQuerier_Expecter) GetPersonalAccountByUserId(ctx interface{}, db interface{}, userid interface{}) *MockQuerier_GetPersonalAccountByUserId_Call {
	return &MockQuerier_GetPersonalAccountByUserId_Call{Call: _e.mock.On("GetPersonalAccountByUserId", ctx, db, userid)}
}

func (_c *MockQuerier_GetPersonalAccountByUserId_Call) Run(run func(ctx context.Context, db DBTX, userid pgtype.UUID)) *MockQuerier_GetPersonalAccountByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetPersonalAccountByUserId_Call) Return(_a0 NeosyncApiAccount, _a1 error) *MockQuerier_GetPersonalAccountByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetPersonalAccountByUserId_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) (NeosyncApiAccount, error)) *MockQuerier_GetPersonalAccountByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) GetUser(ctx context.Context, db DBTX, id pgtype.UUID) (NeosyncApiUser, error) {
	ret := _m.Called(ctx, db, id)

	var r0 NeosyncApiUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) (NeosyncApiUser, error)); ok {
		return rf(ctx, db, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) NeosyncApiUser); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Get(0).(NeosyncApiUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockQuerier_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) GetUser(ctx interface{}, db interface{}, id interface{}) *MockQuerier_GetUser_Call {
	return &MockQuerier_GetUser_Call{Call: _e.mock.On("GetUser", ctx, db, id)}
}

func (_c *MockQuerier_GetUser_Call) Run(run func(ctx context.Context, db DBTX, id pgtype.UUID)) *MockQuerier_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetUser_Call) Return(_a0 NeosyncApiUser, _a1 error) *MockQuerier_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUser_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) (NeosyncApiUser, error)) *MockQuerier_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAssociationByAuth0Id provides a mock function with given fields: ctx, db, auth0ProviderID
func (_m *MockQuerier) GetUserAssociationByAuth0Id(ctx context.Context, db DBTX, auth0ProviderID string) (NeosyncApiUserIdentityProviderAssociation, error) {
	ret := _m.Called(ctx, db, auth0ProviderID)

	var r0 NeosyncApiUserIdentityProviderAssociation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, string) (NeosyncApiUserIdentityProviderAssociation, error)); ok {
		return rf(ctx, db, auth0ProviderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, string) NeosyncApiUserIdentityProviderAssociation); ok {
		r0 = rf(ctx, db, auth0ProviderID)
	} else {
		r0 = ret.Get(0).(NeosyncApiUserIdentityProviderAssociation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, string) error); ok {
		r1 = rf(ctx, db, auth0ProviderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserAssociationByAuth0Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAssociationByAuth0Id'
type MockQuerier_GetUserAssociationByAuth0Id_Call struct {
	*mock.Call
}

// GetUserAssociationByAuth0Id is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - auth0ProviderID string
func (_e *MockQuerier_Expecter) GetUserAssociationByAuth0Id(ctx interface{}, db interface{}, auth0ProviderID interface{}) *MockQuerier_GetUserAssociationByAuth0Id_Call {
	return &MockQuerier_GetUserAssociationByAuth0Id_Call{Call: _e.mock.On("GetUserAssociationByAuth0Id", ctx, db, auth0ProviderID)}
}

func (_c *MockQuerier_GetUserAssociationByAuth0Id_Call) Run(run func(ctx context.Context, db DBTX, auth0ProviderID string)) *MockQuerier_GetUserAssociationByAuth0Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserAssociationByAuth0Id_Call) Return(_a0 NeosyncApiUserIdentityProviderAssociation, _a1 error) *MockQuerier_GetUserAssociationByAuth0Id_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserAssociationByAuth0Id_Call) RunAndReturn(run func(context.Context, DBTX, string) (NeosyncApiUserIdentityProviderAssociation, error)) *MockQuerier_GetUserAssociationByAuth0Id_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByAuth0Id provides a mock function with given fields: ctx, db, auth0ProviderID
func (_m *MockQuerier) GetUserByAuth0Id(ctx context.Context, db DBTX, auth0ProviderID string) (NeosyncApiUser, error) {
	ret := _m.Called(ctx, db, auth0ProviderID)

	var r0 NeosyncApiUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, string) (NeosyncApiUser, error)); ok {
		return rf(ctx, db, auth0ProviderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, string) NeosyncApiUser); ok {
		r0 = rf(ctx, db, auth0ProviderID)
	} else {
		r0 = ret.Get(0).(NeosyncApiUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, string) error); ok {
		r1 = rf(ctx, db, auth0ProviderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetUserByAuth0Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByAuth0Id'
type MockQuerier_GetUserByAuth0Id_Call struct {
	*mock.Call
}

// GetUserByAuth0Id is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - auth0ProviderID string
func (_e *MockQuerier_Expecter) GetUserByAuth0Id(ctx interface{}, db interface{}, auth0ProviderID interface{}) *MockQuerier_GetUserByAuth0Id_Call {
	return &MockQuerier_GetUserByAuth0Id_Call{Call: _e.mock.On("GetUserByAuth0Id", ctx, db, auth0ProviderID)}
}

func (_c *MockQuerier_GetUserByAuth0Id_Call) Run(run func(ctx context.Context, db DBTX, auth0ProviderID string)) *MockQuerier_GetUserByAuth0Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserByAuth0Id_Call) Return(_a0 NeosyncApiUser, _a1 error) *MockQuerier_GetUserByAuth0Id_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetUserByAuth0Id_Call) RunAndReturn(run func(context.Context, DBTX, string) (NeosyncApiUser, error)) *MockQuerier_GetUserByAuth0Id_Call {
	_c.Call.Return(run)
	return _c
}

// IsConnectionInAccount provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) IsConnectionInAccount(ctx context.Context, db DBTX, arg IsConnectionInAccountParams) (int64, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, IsConnectionInAccountParams) (int64, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, IsConnectionInAccountParams) int64); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, IsConnectionInAccountParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_IsConnectionInAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnectionInAccount'
type MockQuerier_IsConnectionInAccount_Call struct {
	*mock.Call
}

// IsConnectionInAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg IsConnectionInAccountParams
func (_e *MockQuerier_Expecter) IsConnectionInAccount(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_IsConnectionInAccount_Call {
	return &MockQuerier_IsConnectionInAccount_Call{Call: _e.mock.On("IsConnectionInAccount", ctx, db, arg)}
}

func (_c *MockQuerier_IsConnectionInAccount_Call) Run(run func(ctx context.Context, db DBTX, arg IsConnectionInAccountParams)) *MockQuerier_IsConnectionInAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(IsConnectionInAccountParams))
	})
	return _c
}

func (_c *MockQuerier_IsConnectionInAccount_Call) Return(_a0 int64, _a1 error) *MockQuerier_IsConnectionInAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_IsConnectionInAccount_Call) RunAndReturn(run func(context.Context, DBTX, IsConnectionInAccountParams) (int64, error)) *MockQuerier_IsConnectionInAccount_Call {
	_c.Call.Return(run)
	return _c
}

// IsConnectionNameAvailable provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) IsConnectionNameAvailable(ctx context.Context, db DBTX, arg IsConnectionNameAvailableParams) (int64, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, IsConnectionNameAvailableParams) (int64, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, IsConnectionNameAvailableParams) int64); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, IsConnectionNameAvailableParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_IsConnectionNameAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsConnectionNameAvailable'
type MockQuerier_IsConnectionNameAvailable_Call struct {
	*mock.Call
}

// IsConnectionNameAvailable is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg IsConnectionNameAvailableParams
func (_e *MockQuerier_Expecter) IsConnectionNameAvailable(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_IsConnectionNameAvailable_Call {
	return &MockQuerier_IsConnectionNameAvailable_Call{Call: _e.mock.On("IsConnectionNameAvailable", ctx, db, arg)}
}

func (_c *MockQuerier_IsConnectionNameAvailable_Call) Run(run func(ctx context.Context, db DBTX, arg IsConnectionNameAvailableParams)) *MockQuerier_IsConnectionNameAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(IsConnectionNameAvailableParams))
	})
	return _c
}

func (_c *MockQuerier_IsConnectionNameAvailable_Call) Return(_a0 int64, _a1 error) *MockQuerier_IsConnectionNameAvailable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_IsConnectionNameAvailable_Call) RunAndReturn(run func(context.Context, DBTX, IsConnectionNameAvailableParams) (int64, error)) *MockQuerier_IsConnectionNameAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// IsJobNameAvailable provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) IsJobNameAvailable(ctx context.Context, db DBTX, arg IsJobNameAvailableParams) (int64, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, IsJobNameAvailableParams) (int64, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, IsJobNameAvailableParams) int64); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, IsJobNameAvailableParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_IsJobNameAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsJobNameAvailable'
type MockQuerier_IsJobNameAvailable_Call struct {
	*mock.Call
}

// IsJobNameAvailable is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg IsJobNameAvailableParams
func (_e *MockQuerier_Expecter) IsJobNameAvailable(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_IsJobNameAvailable_Call {
	return &MockQuerier_IsJobNameAvailable_Call{Call: _e.mock.On("IsJobNameAvailable", ctx, db, arg)}
}

func (_c *MockQuerier_IsJobNameAvailable_Call) Run(run func(ctx context.Context, db DBTX, arg IsJobNameAvailableParams)) *MockQuerier_IsJobNameAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(IsJobNameAvailableParams))
	})
	return _c
}

func (_c *MockQuerier_IsJobNameAvailable_Call) Return(_a0 int64, _a1 error) *MockQuerier_IsJobNameAvailable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_IsJobNameAvailable_Call) RunAndReturn(run func(context.Context, DBTX, IsJobNameAvailableParams) (int64, error)) *MockQuerier_IsJobNameAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// IsTransformerNameAvailable provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) IsTransformerNameAvailable(ctx context.Context, db DBTX, arg IsTransformerNameAvailableParams) (int64, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, IsTransformerNameAvailableParams) (int64, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, IsTransformerNameAvailableParams) int64); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, IsTransformerNameAvailableParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_IsTransformerNameAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTransformerNameAvailable'
type MockQuerier_IsTransformerNameAvailable_Call struct {
	*mock.Call
}

// IsTransformerNameAvailable is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg IsTransformerNameAvailableParams
func (_e *MockQuerier_Expecter) IsTransformerNameAvailable(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_IsTransformerNameAvailable_Call {
	return &MockQuerier_IsTransformerNameAvailable_Call{Call: _e.mock.On("IsTransformerNameAvailable", ctx, db, arg)}
}

func (_c *MockQuerier_IsTransformerNameAvailable_Call) Run(run func(ctx context.Context, db DBTX, arg IsTransformerNameAvailableParams)) *MockQuerier_IsTransformerNameAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(IsTransformerNameAvailableParams))
	})
	return _c
}

func (_c *MockQuerier_IsTransformerNameAvailable_Call) Return(_a0 int64, _a1 error) *MockQuerier_IsTransformerNameAvailable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_IsTransformerNameAvailable_Call) RunAndReturn(run func(context.Context, DBTX, IsTransformerNameAvailableParams) (int64, error)) *MockQuerier_IsTransformerNameAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserInAccount provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) IsUserInAccount(ctx context.Context, db DBTX, arg IsUserInAccountParams) (int64, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, IsUserInAccountParams) (int64, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, IsUserInAccountParams) int64); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, IsUserInAccountParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_IsUserInAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserInAccount'
type MockQuerier_IsUserInAccount_Call struct {
	*mock.Call
}

// IsUserInAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg IsUserInAccountParams
func (_e *MockQuerier_Expecter) IsUserInAccount(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_IsUserInAccount_Call {
	return &MockQuerier_IsUserInAccount_Call{Call: _e.mock.On("IsUserInAccount", ctx, db, arg)}
}

func (_c *MockQuerier_IsUserInAccount_Call) Run(run func(ctx context.Context, db DBTX, arg IsUserInAccountParams)) *MockQuerier_IsUserInAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(IsUserInAccountParams))
	})
	return _c
}

func (_c *MockQuerier_IsUserInAccount_Call) Return(_a0 int64, _a1 error) *MockQuerier_IsUserInAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_IsUserInAccount_Call) RunAndReturn(run func(context.Context, DBTX, IsUserInAccountParams) (int64, error)) *MockQuerier_IsUserInAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConnectionById provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) RemoveConnectionById(ctx context.Context, db DBTX, id pgtype.UUID) error {
	ret := _m.Called(ctx, db, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RemoveConnectionById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConnectionById'
type MockQuerier_RemoveConnectionById_Call struct {
	*mock.Call
}

// RemoveConnectionById is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) RemoveConnectionById(ctx interface{}, db interface{}, id interface{}) *MockQuerier_RemoveConnectionById_Call {
	return &MockQuerier_RemoveConnectionById_Call{Call: _e.mock.On("RemoveConnectionById", ctx, db, id)}
}

func (_c *MockQuerier_RemoveConnectionById_Call) Run(run func(ctx context.Context, db DBTX, id pgtype.UUID)) *MockQuerier_RemoveConnectionById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_RemoveConnectionById_Call) Return(_a0 error) *MockQuerier_RemoveConnectionById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RemoveConnectionById_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) error) *MockQuerier_RemoveConnectionById_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConnectionByNameAndAccount provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) RemoveConnectionByNameAndAccount(ctx context.Context, db DBTX, arg RemoveConnectionByNameAndAccountParams) error {
	ret := _m.Called(ctx, db, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, RemoveConnectionByNameAndAccountParams) error); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RemoveConnectionByNameAndAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConnectionByNameAndAccount'
type MockQuerier_RemoveConnectionByNameAndAccount_Call struct {
	*mock.Call
}

// RemoveConnectionByNameAndAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg RemoveConnectionByNameAndAccountParams
func (_e *MockQuerier_Expecter) RemoveConnectionByNameAndAccount(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_RemoveConnectionByNameAndAccount_Call {
	return &MockQuerier_RemoveConnectionByNameAndAccount_Call{Call: _e.mock.On("RemoveConnectionByNameAndAccount", ctx, db, arg)}
}

func (_c *MockQuerier_RemoveConnectionByNameAndAccount_Call) Run(run func(ctx context.Context, db DBTX, arg RemoveConnectionByNameAndAccountParams)) *MockQuerier_RemoveConnectionByNameAndAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(RemoveConnectionByNameAndAccountParams))
	})
	return _c
}

func (_c *MockQuerier_RemoveConnectionByNameAndAccount_Call) Return(_a0 error) *MockQuerier_RemoveConnectionByNameAndAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RemoveConnectionByNameAndAccount_Call) RunAndReturn(run func(context.Context, DBTX, RemoveConnectionByNameAndAccountParams) error) *MockQuerier_RemoveConnectionByNameAndAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveJobById provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) RemoveJobById(ctx context.Context, db DBTX, id pgtype.UUID) error {
	ret := _m.Called(ctx, db, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RemoveJobById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveJobById'
type MockQuerier_RemoveJobById_Call struct {
	*mock.Call
}

// RemoveJobById is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) RemoveJobById(ctx interface{}, db interface{}, id interface{}) *MockQuerier_RemoveJobById_Call {
	return &MockQuerier_RemoveJobById_Call{Call: _e.mock.On("RemoveJobById", ctx, db, id)}
}

func (_c *MockQuerier_RemoveJobById_Call) Run(run func(ctx context.Context, db DBTX, id pgtype.UUID)) *MockQuerier_RemoveJobById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_RemoveJobById_Call) Return(_a0 error) *MockQuerier_RemoveJobById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RemoveJobById_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) error) *MockQuerier_RemoveJobById_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveJobConnectionDestination provides a mock function with given fields: ctx, db, id
func (_m *MockQuerier) RemoveJobConnectionDestination(ctx context.Context, db DBTX, id pgtype.UUID) error {
	ret := _m.Called(ctx, db, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, pgtype.UUID) error); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RemoveJobConnectionDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveJobConnectionDestination'
type MockQuerier_RemoveJobConnectionDestination_Call struct {
	*mock.Call
}

// RemoveJobConnectionDestination is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - id pgtype.UUID
func (_e *MockQuerier_Expecter) RemoveJobConnectionDestination(ctx interface{}, db interface{}, id interface{}) *MockQuerier_RemoveJobConnectionDestination_Call {
	return &MockQuerier_RemoveJobConnectionDestination_Call{Call: _e.mock.On("RemoveJobConnectionDestination", ctx, db, id)}
}

func (_c *MockQuerier_RemoveJobConnectionDestination_Call) Run(run func(ctx context.Context, db DBTX, id pgtype.UUID)) *MockQuerier_RemoveJobConnectionDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_RemoveJobConnectionDestination_Call) Return(_a0 error) *MockQuerier_RemoveJobConnectionDestination_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RemoveJobConnectionDestination_Call) RunAndReturn(run func(context.Context, DBTX, pgtype.UUID) error) *MockQuerier_RemoveJobConnectionDestination_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveJobConnectionDestinations provides a mock function with given fields: ctx, db, jobids
func (_m *MockQuerier) RemoveJobConnectionDestinations(ctx context.Context, db DBTX, jobids []pgtype.UUID) error {
	ret := _m.Called(ctx, db, jobids)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, []pgtype.UUID) error); ok {
		r0 = rf(ctx, db, jobids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_RemoveJobConnectionDestinations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveJobConnectionDestinations'
type MockQuerier_RemoveJobConnectionDestinations_Call struct {
	*mock.Call
}

// RemoveJobConnectionDestinations is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - jobids []pgtype.UUID
func (_e *MockQuerier_Expecter) RemoveJobConnectionDestinations(ctx interface{}, db interface{}, jobids interface{}) *MockQuerier_RemoveJobConnectionDestinations_Call {
	return &MockQuerier_RemoveJobConnectionDestinations_Call{Call: _e.mock.On("RemoveJobConnectionDestinations", ctx, db, jobids)}
}

func (_c *MockQuerier_RemoveJobConnectionDestinations_Call) Run(run func(ctx context.Context, db DBTX, jobids []pgtype.UUID)) *MockQuerier_RemoveJobConnectionDestinations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].([]pgtype.UUID))
	})
	return _c
}

func (_c *MockQuerier_RemoveJobConnectionDestinations_Call) Return(_a0 error) *MockQuerier_RemoveJobConnectionDestinations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_RemoveJobConnectionDestinations_Call) RunAndReturn(run func(context.Context, DBTX, []pgtype.UUID) error) *MockQuerier_RemoveJobConnectionDestinations_Call {
	_c.Call.Return(run)
	return _c
}

// SetAnonymousUser provides a mock function with given fields: ctx, db
func (_m *MockQuerier) SetAnonymousUser(ctx context.Context, db DBTX) (NeosyncApiUser, error) {
	ret := _m.Called(ctx, db)

	var r0 NeosyncApiUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) (NeosyncApiUser, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX) NeosyncApiUser); ok {
		r0 = rf(ctx, db)
	} else {
		r0 = ret.Get(0).(NeosyncApiUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_SetAnonymousUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAnonymousUser'
type MockQuerier_SetAnonymousUser_Call struct {
	*mock.Call
}

// SetAnonymousUser is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
func (_e *MockQuerier_Expecter) SetAnonymousUser(ctx interface{}, db interface{}) *MockQuerier_SetAnonymousUser_Call {
	return &MockQuerier_SetAnonymousUser_Call{Call: _e.mock.On("SetAnonymousUser", ctx, db)}
}

func (_c *MockQuerier_SetAnonymousUser_Call) Run(run func(ctx context.Context, db DBTX)) *MockQuerier_SetAnonymousUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX))
	})
	return _c
}

func (_c *MockQuerier_SetAnonymousUser_Call) Return(_a0 NeosyncApiUser, _a1 error) *MockQuerier_SetAnonymousUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_SetAnonymousUser_Call) RunAndReturn(run func(context.Context, DBTX) (NeosyncApiUser, error)) *MockQuerier_SetAnonymousUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConnection provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) UpdateConnection(ctx context.Context, db DBTX, arg UpdateConnectionParams) (NeosyncApiConnection, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, UpdateConnectionParams) (NeosyncApiConnection, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, UpdateConnectionParams) NeosyncApiConnection); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiConnection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, UpdateConnectionParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpdateConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConnection'
type MockQuerier_UpdateConnection_Call struct {
	*mock.Call
}

// UpdateConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg UpdateConnectionParams
func (_e *MockQuerier_Expecter) UpdateConnection(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_UpdateConnection_Call {
	return &MockQuerier_UpdateConnection_Call{Call: _e.mock.On("UpdateConnection", ctx, db, arg)}
}

func (_c *MockQuerier_UpdateConnection_Call) Run(run func(ctx context.Context, db DBTX, arg UpdateConnectionParams)) *MockQuerier_UpdateConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(UpdateConnectionParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateConnection_Call) Return(_a0 NeosyncApiConnection, _a1 error) *MockQuerier_UpdateConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpdateConnection_Call) RunAndReturn(run func(context.Context, DBTX, UpdateConnectionParams) (NeosyncApiConnection, error)) *MockQuerier_UpdateConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomTransformer provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) UpdateCustomTransformer(ctx context.Context, db DBTX, arg UpdateCustomTransformerParams) (NeosyncApiTransformer, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiTransformer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, UpdateCustomTransformerParams) (NeosyncApiTransformer, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, UpdateCustomTransformerParams) NeosyncApiTransformer); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiTransformer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, UpdateCustomTransformerParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpdateCustomTransformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomTransformer'
type MockQuerier_UpdateCustomTransformer_Call struct {
	*mock.Call
}

// UpdateCustomTransformer is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg UpdateCustomTransformerParams
func (_e *MockQuerier_Expecter) UpdateCustomTransformer(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_UpdateCustomTransformer_Call {
	return &MockQuerier_UpdateCustomTransformer_Call{Call: _e.mock.On("UpdateCustomTransformer", ctx, db, arg)}
}

func (_c *MockQuerier_UpdateCustomTransformer_Call) Run(run func(ctx context.Context, db DBTX, arg UpdateCustomTransformerParams)) *MockQuerier_UpdateCustomTransformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(UpdateCustomTransformerParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateCustomTransformer_Call) Return(_a0 NeosyncApiTransformer, _a1 error) *MockQuerier_UpdateCustomTransformer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpdateCustomTransformer_Call) RunAndReturn(run func(context.Context, DBTX, UpdateCustomTransformerParams) (NeosyncApiTransformer, error)) *MockQuerier_UpdateCustomTransformer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJobConnectionDestination provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) UpdateJobConnectionDestination(ctx context.Context, db DBTX, arg UpdateJobConnectionDestinationParams) (NeosyncApiJobDestinationConnectionAssociation, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiJobDestinationConnectionAssociation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, UpdateJobConnectionDestinationParams) (NeosyncApiJobDestinationConnectionAssociation, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, UpdateJobConnectionDestinationParams) NeosyncApiJobDestinationConnectionAssociation); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiJobDestinationConnectionAssociation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, UpdateJobConnectionDestinationParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpdateJobConnectionDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJobConnectionDestination'
type MockQuerier_UpdateJobConnectionDestination_Call struct {
	*mock.Call
}

// UpdateJobConnectionDestination is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg UpdateJobConnectionDestinationParams
func (_e *MockQuerier_Expecter) UpdateJobConnectionDestination(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_UpdateJobConnectionDestination_Call {
	return &MockQuerier_UpdateJobConnectionDestination_Call{Call: _e.mock.On("UpdateJobConnectionDestination", ctx, db, arg)}
}

func (_c *MockQuerier_UpdateJobConnectionDestination_Call) Run(run func(ctx context.Context, db DBTX, arg UpdateJobConnectionDestinationParams)) *MockQuerier_UpdateJobConnectionDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(UpdateJobConnectionDestinationParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateJobConnectionDestination_Call) Return(_a0 NeosyncApiJobDestinationConnectionAssociation, _a1 error) *MockQuerier_UpdateJobConnectionDestination_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpdateJobConnectionDestination_Call) RunAndReturn(run func(context.Context, DBTX, UpdateJobConnectionDestinationParams) (NeosyncApiJobDestinationConnectionAssociation, error)) *MockQuerier_UpdateJobConnectionDestination_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJobMappings provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) UpdateJobMappings(ctx context.Context, db DBTX, arg UpdateJobMappingsParams) (NeosyncApiJob, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, UpdateJobMappingsParams) (NeosyncApiJob, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, UpdateJobMappingsParams) NeosyncApiJob); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiJob)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, UpdateJobMappingsParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpdateJobMappings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJobMappings'
type MockQuerier_UpdateJobMappings_Call struct {
	*mock.Call
}

// UpdateJobMappings is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg UpdateJobMappingsParams
func (_e *MockQuerier_Expecter) UpdateJobMappings(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_UpdateJobMappings_Call {
	return &MockQuerier_UpdateJobMappings_Call{Call: _e.mock.On("UpdateJobMappings", ctx, db, arg)}
}

func (_c *MockQuerier_UpdateJobMappings_Call) Run(run func(ctx context.Context, db DBTX, arg UpdateJobMappingsParams)) *MockQuerier_UpdateJobMappings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(UpdateJobMappingsParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateJobMappings_Call) Return(_a0 NeosyncApiJob, _a1 error) *MockQuerier_UpdateJobMappings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpdateJobMappings_Call) RunAndReturn(run func(context.Context, DBTX, UpdateJobMappingsParams) (NeosyncApiJob, error)) *MockQuerier_UpdateJobMappings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJobSchedule provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) UpdateJobSchedule(ctx context.Context, db DBTX, arg UpdateJobScheduleParams) (NeosyncApiJob, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, UpdateJobScheduleParams) (NeosyncApiJob, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, UpdateJobScheduleParams) NeosyncApiJob); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiJob)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, UpdateJobScheduleParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpdateJobSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJobSchedule'
type MockQuerier_UpdateJobSchedule_Call struct {
	*mock.Call
}

// UpdateJobSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg UpdateJobScheduleParams
func (_e *MockQuerier_Expecter) UpdateJobSchedule(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_UpdateJobSchedule_Call {
	return &MockQuerier_UpdateJobSchedule_Call{Call: _e.mock.On("UpdateJobSchedule", ctx, db, arg)}
}

func (_c *MockQuerier_UpdateJobSchedule_Call) Run(run func(ctx context.Context, db DBTX, arg UpdateJobScheduleParams)) *MockQuerier_UpdateJobSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(UpdateJobScheduleParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateJobSchedule_Call) Return(_a0 NeosyncApiJob, _a1 error) *MockQuerier_UpdateJobSchedule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpdateJobSchedule_Call) RunAndReturn(run func(context.Context, DBTX, UpdateJobScheduleParams) (NeosyncApiJob, error)) *MockQuerier_UpdateJobSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJobSource provides a mock function with given fields: ctx, db, arg
func (_m *MockQuerier) UpdateJobSource(ctx context.Context, db DBTX, arg UpdateJobSourceParams) (NeosyncApiJob, error) {
	ret := _m.Called(ctx, db, arg)

	var r0 NeosyncApiJob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, UpdateJobSourceParams) (NeosyncApiJob, error)); ok {
		return rf(ctx, db, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DBTX, UpdateJobSourceParams) NeosyncApiJob); ok {
		r0 = rf(ctx, db, arg)
	} else {
		r0 = ret.Get(0).(NeosyncApiJob)
	}

	if rf, ok := ret.Get(1).(func(context.Context, DBTX, UpdateJobSourceParams) error); ok {
		r1 = rf(ctx, db, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpdateJobSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJobSource'
type MockQuerier_UpdateJobSource_Call struct {
	*mock.Call
}

// UpdateJobSource is a helper method to define mock.On call
//   - ctx context.Context
//   - db DBTX
//   - arg UpdateJobSourceParams
func (_e *MockQuerier_Expecter) UpdateJobSource(ctx interface{}, db interface{}, arg interface{}) *MockQuerier_UpdateJobSource_Call {
	return &MockQuerier_UpdateJobSource_Call{Call: _e.mock.On("UpdateJobSource", ctx, db, arg)}
}

func (_c *MockQuerier_UpdateJobSource_Call) Run(run func(ctx context.Context, db DBTX, arg UpdateJobSourceParams)) *MockQuerier_UpdateJobSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DBTX), args[2].(UpdateJobSourceParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateJobSource_Call) Return(_a0 NeosyncApiJob, _a1 error) *MockQuerier_UpdateJobSource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpdateJobSource_Call) RunAndReturn(run func(context.Context, DBTX, UpdateJobSourceParams) (NeosyncApiJob, error)) *MockQuerier_UpdateJobSource_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
