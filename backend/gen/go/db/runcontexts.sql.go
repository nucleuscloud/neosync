// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: runcontexts.sql

package db_queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getRunContextByKey = `-- name: GetRunContextByKey :one
SELECT workflow_id, external_id, account_id, value, created_at, updated_at, created_by_id, updated_by_id from neosync_api.runcontexts
WHERE workflow_id = $1
  AND external_id = $2
  AND account_id = $3
`

type GetRunContextByKeyParams struct {
	WorkflowId string
	ExternalId string
	AccountId  pgtype.UUID
}

func (q *Queries) GetRunContextByKey(ctx context.Context, db DBTX, arg GetRunContextByKeyParams) (NeosyncApiRuncontext, error) {
	row := db.QueryRow(ctx, getRunContextByKey, arg.WorkflowId, arg.ExternalId, arg.AccountId)
	var i NeosyncApiRuncontext
	err := row.Scan(
		&i.WorkflowID,
		&i.ExternalID,
		&i.AccountID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedByID,
		&i.UpdatedByID,
	)
	return i, err
}

const setRunContext = `-- name: SetRunContext :exec
INSERT INTO neosync_api.runcontexts (
    workflow_id,
    external_id,
    "value",
    created_by_id,
    updated_by_id,
    account_id
)
VALUES (
    $1,  -- workflow_id
    $2,  -- external_id
    $3,  -- value
    $4,  -- created_by_id
    $5,  -- updated_by_id
    $6   -- account_id
)
ON CONFLICT (workflow_id, external_id, account_id)
DO UPDATE SET
    value = EXCLUDED.value,
    updated_by_id = EXCLUDED.updated_by_id
`

type SetRunContextParams struct {
	WorkflowID  string
	ExternalID  string
	Value       []byte
	CreatedByID pgtype.UUID
	UpdatedByID pgtype.UUID
	AccountID   pgtype.UUID
}

func (q *Queries) SetRunContext(ctx context.Context, db DBTX, arg SetRunContextParams) error {
	_, err := db.Exec(ctx, setRunContext,
		arg.WorkflowID,
		arg.ExternalID,
		arg.Value,
		arg.CreatedByID,
		arg.UpdatedByID,
		arg.AccountID,
	)
	return err
}
