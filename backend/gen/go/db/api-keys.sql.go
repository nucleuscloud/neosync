// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: api-keys.sql

package db_queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccountApiKey = `-- name: CreateAccountApiKey :one
INSERT INTO neosync_api.account_api_keys (
  key_name, key_value, account_id, expires_at, created_by_id, updated_by_id, user_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, account_id, key_value, created_by_id, updated_by_id, created_at, updated_at, expires_at, key_name, user_id
`

type CreateAccountApiKeyParams struct {
	KeyName     string
	KeyValue    string
	AccountID   pgtype.UUID
	ExpiresAt   pgtype.Timestamp
	CreatedByID pgtype.UUID
	UpdatedByID pgtype.UUID
	UserID      pgtype.UUID
}

func (q *Queries) CreateAccountApiKey(ctx context.Context, db DBTX, arg CreateAccountApiKeyParams) (NeosyncApiAccountApiKey, error) {
	row := db.QueryRow(ctx, createAccountApiKey,
		arg.KeyName,
		arg.KeyValue,
		arg.AccountID,
		arg.ExpiresAt,
		arg.CreatedByID,
		arg.UpdatedByID,
		arg.UserID,
	)
	var i NeosyncApiAccountApiKey
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.KeyValue,
		&i.CreatedByID,
		&i.UpdatedByID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.KeyName,
		&i.UserID,
	)
	return i, err
}

const getAccountApiKeyById = `-- name: GetAccountApiKeyById :one
SELECT id, account_id, key_value, created_by_id, updated_by_id, created_at, updated_at, expires_at, key_name, user_id from neosync_api.account_api_keys WHERE id = $1
`

func (q *Queries) GetAccountApiKeyById(ctx context.Context, db DBTX, id pgtype.UUID) (NeosyncApiAccountApiKey, error) {
	row := db.QueryRow(ctx, getAccountApiKeyById, id)
	var i NeosyncApiAccountApiKey
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.KeyValue,
		&i.CreatedByID,
		&i.UpdatedByID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.KeyName,
		&i.UserID,
	)
	return i, err
}

const getAccountApiKeyByKeyValue = `-- name: GetAccountApiKeyByKeyValue :one
SELECT id, account_id, key_value, created_by_id, updated_by_id, created_at, updated_at, expires_at, key_name, user_id from neosync_api.account_api_keys WHERE key_value = $1
`

func (q *Queries) GetAccountApiKeyByKeyValue(ctx context.Context, db DBTX, keyValue string) (NeosyncApiAccountApiKey, error) {
	row := db.QueryRow(ctx, getAccountApiKeyByKeyValue, keyValue)
	var i NeosyncApiAccountApiKey
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.KeyValue,
		&i.CreatedByID,
		&i.UpdatedByID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.KeyName,
		&i.UserID,
	)
	return i, err
}

const getAccountApiKeys = `-- name: GetAccountApiKeys :many
SELECT aak.id, aak.account_id, aak.key_value, aak.created_by_id, aak.updated_by_id, aak.created_at, aak.updated_at, aak.expires_at, aak.key_name, aak.user_id from neosync_api.account_api_keys aak
INNER JOIN neosync_api.accounts a on a.id = aak.account_id
WHERE a.id = $1
`

func (q *Queries) GetAccountApiKeys(ctx context.Context, db DBTX, accountid pgtype.UUID) ([]NeosyncApiAccountApiKey, error) {
	rows, err := db.Query(ctx, getAccountApiKeys, accountid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NeosyncApiAccountApiKey
	for rows.Next() {
		var i NeosyncApiAccountApiKey
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.KeyValue,
			&i.CreatedByID,
			&i.UpdatedByID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.KeyName,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserInAccountApiKey = `-- name: IsUserInAccountApiKey :one
SELECT count(apk.id) from neosync_api.account_api_keys apk 
INNER JOIN neosync_api.accounts a ON a.id = apk.account_id
INNER JOIN neosync_api.users u ON u.id = apk.user_id
WHERE a.id = $1 AND u.id = $2
`

type IsUserInAccountApiKeyParams struct {
	AccountId pgtype.UUID
	UserId    pgtype.UUID
}

func (q *Queries) IsUserInAccountApiKey(ctx context.Context, db DBTX, arg IsUserInAccountApiKeyParams) (int64, error) {
	row := db.QueryRow(ctx, isUserInAccountApiKey, arg.AccountId, arg.UserId)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const removeAccountApiKey = `-- name: RemoveAccountApiKey :exec
DELETE FROM neosync_api.account_api_keys WHERE id = $1
`

func (q *Queries) RemoveAccountApiKey(ctx context.Context, db DBTX, id pgtype.UUID) error {
	_, err := db.Exec(ctx, removeAccountApiKey, id)
	return err
}

const updateAccountApiKeyValue = `-- name: UpdateAccountApiKeyValue :one
UPDATE neosync_api.account_api_keys
SET key_value = $1,
    expires_at = $2,
    updated_by_id = $3
WHERE id = $4
RETURNING id, account_id, key_value, created_by_id, updated_by_id, created_at, updated_at, expires_at, key_name, user_id
`

type UpdateAccountApiKeyValueParams struct {
	KeyValue    string
	ExpiresAt   pgtype.Timestamp
	UpdatedByID pgtype.UUID
	ID          pgtype.UUID
}

func (q *Queries) UpdateAccountApiKeyValue(ctx context.Context, db DBTX, arg UpdateAccountApiKeyValueParams) (NeosyncApiAccountApiKey, error) {
	row := db.QueryRow(ctx, updateAccountApiKeyValue,
		arg.KeyValue,
		arg.ExpiresAt,
		arg.UpdatedByID,
		arg.ID,
	)
	var i NeosyncApiAccountApiKey
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.KeyValue,
		&i.CreatedByID,
		&i.UpdatedByID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.KeyName,
		&i.UserID,
	)
	return i, err
}
