// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: job-hooks.sql

package db_queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJobHook = `-- name: CreateJobHook :one
INSERT INTO neosync_api.job_hooks (
  name, description, job_id, config, created_by_user_id, updated_by_user_id, enabled, priority
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, name, description, job_id, config, created_by_user_id, created_at, updated_by_user_id, updated_at, enabled, priority, hook_timing, connection_id
`

type CreateJobHookParams struct {
	Name            string
	Description     string
	JobID           pgtype.UUID
	Config          []byte
	CreatedByUserID pgtype.UUID
	UpdatedByUserID pgtype.UUID
	Enabled         bool
	Priority        int32
}

func (q *Queries) CreateJobHook(ctx context.Context, db DBTX, arg CreateJobHookParams) (NeosyncApiJobHook, error) {
	row := db.QueryRow(ctx, createJobHook,
		arg.Name,
		arg.Description,
		arg.JobID,
		arg.Config,
		arg.CreatedByUserID,
		arg.UpdatedByUserID,
		arg.Enabled,
		arg.Priority,
	)
	var i NeosyncApiJobHook
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.JobID,
		&i.Config,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedByUserID,
		&i.UpdatedAt,
		&i.Enabled,
		&i.Priority,
		&i.HookTiming,
		&i.ConnectionID,
	)
	return i, err
}

const getActiveJobHooks = `-- name: GetActiveJobHooks :many
SELECT id, name, description, job_id, config, created_by_user_id, created_at, updated_by_user_id, updated_at, enabled, priority, hook_timing, connection_id
FROM neosync_api.job_hooks
WHERE job_id = $1
  AND enabled = true
ORDER BY priority, created_at, id ASC
`

func (q *Queries) GetActiveJobHooks(ctx context.Context, db DBTX, jobID pgtype.UUID) ([]NeosyncApiJobHook, error) {
	rows, err := db.Query(ctx, getActiveJobHooks, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NeosyncApiJobHook
	for rows.Next() {
		var i NeosyncApiJobHook
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.JobID,
			&i.Config,
			&i.CreatedByUserID,
			&i.CreatedAt,
			&i.UpdatedByUserID,
			&i.UpdatedAt,
			&i.Enabled,
			&i.Priority,
			&i.HookTiming,
			&i.ConnectionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActivePostSyncJobHooks = `-- name: GetActivePostSyncJobHooks :many
SELECT id, name, description, job_id, config, created_by_user_id, created_at, updated_by_user_id, updated_at, enabled, priority, hook_timing, connection_id
FROM neosync_api.job_hooks
WHERE job_id = $1
  AND enabled = true
  AND hook_timing = 'postSync'
ORDER BY priority, created_at, id ASC
`

func (q *Queries) GetActivePostSyncJobHooks(ctx context.Context, db DBTX, jobID pgtype.UUID) ([]NeosyncApiJobHook, error) {
	rows, err := db.Query(ctx, getActivePostSyncJobHooks, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NeosyncApiJobHook
	for rows.Next() {
		var i NeosyncApiJobHook
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.JobID,
			&i.Config,
			&i.CreatedByUserID,
			&i.CreatedAt,
			&i.UpdatedByUserID,
			&i.UpdatedAt,
			&i.Enabled,
			&i.Priority,
			&i.HookTiming,
			&i.ConnectionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActivePreSyncJobHooks = `-- name: GetActivePreSyncJobHooks :many
SELECT id, name, description, job_id, config, created_by_user_id, created_at, updated_by_user_id, updated_at, enabled, priority, hook_timing, connection_id
FROM neosync_api.job_hooks
WHERE job_id = $1
  AND enabled = true
  AND hook_timing = 'preSync'
ORDER BY priority, created_at, id ASC
`

func (q *Queries) GetActivePreSyncJobHooks(ctx context.Context, db DBTX, jobID pgtype.UUID) ([]NeosyncApiJobHook, error) {
	rows, err := db.Query(ctx, getActivePreSyncJobHooks, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NeosyncApiJobHook
	for rows.Next() {
		var i NeosyncApiJobHook
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.JobID,
			&i.Config,
			&i.CreatedByUserID,
			&i.CreatedAt,
			&i.UpdatedByUserID,
			&i.UpdatedAt,
			&i.Enabled,
			&i.Priority,
			&i.HookTiming,
			&i.ConnectionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJobHookById = `-- name: GetJobHookById :one
SELECT id, name, description, job_id, config, created_by_user_id, created_at, updated_by_user_id, updated_at, enabled, priority, hook_timing, connection_id from neosync_api.job_hooks WHERE id = $1
`

func (q *Queries) GetJobHookById(ctx context.Context, db DBTX, id pgtype.UUID) (NeosyncApiJobHook, error) {
	row := db.QueryRow(ctx, getJobHookById, id)
	var i NeosyncApiJobHook
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.JobID,
		&i.Config,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedByUserID,
		&i.UpdatedAt,
		&i.Enabled,
		&i.Priority,
		&i.HookTiming,
		&i.ConnectionID,
	)
	return i, err
}

const getJobHooksByJob = `-- name: GetJobHooksByJob :many
SELECT id, name, description, job_id, config, created_by_user_id, created_at, updated_by_user_id, updated_at, enabled, priority, hook_timing, connection_id from neosync_api.job_hooks WHERE job_id = $1
`

func (q *Queries) GetJobHooksByJob(ctx context.Context, db DBTX, jobID pgtype.UUID) ([]NeosyncApiJobHook, error) {
	rows, err := db.Query(ctx, getJobHooksByJob, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NeosyncApiJobHook
	for rows.Next() {
		var i NeosyncApiJobHook
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.JobID,
			&i.Config,
			&i.CreatedByUserID,
			&i.CreatedAt,
			&i.UpdatedByUserID,
			&i.UpdatedAt,
			&i.Enabled,
			&i.Priority,
			&i.HookTiming,
			&i.ConnectionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isJobHookNameAvailable = `-- name: IsJobHookNameAvailable :one
SELECT NOT EXISTS(
  SELECT 1
  FROM neosync_api.job_hooks
  WHERE job_id = $1 and name = $2
)
`

type IsJobHookNameAvailableParams struct {
	JobID pgtype.UUID
	Name  string
}

func (q *Queries) IsJobHookNameAvailable(ctx context.Context, db DBTX, arg IsJobHookNameAvailableParams) (bool, error) {
	row := db.QueryRow(ctx, isJobHookNameAvailable, arg.JobID, arg.Name)
	var not_exists bool
	err := row.Scan(&not_exists)
	return not_exists, err
}

const removeJobHookById = `-- name: RemoveJobHookById :exec
DELETE FROM neosync_api.job_hooks WHERE id = $1
`

func (q *Queries) RemoveJobHookById(ctx context.Context, db DBTX, id pgtype.UUID) error {
	_, err := db.Exec(ctx, removeJobHookById, id)
	return err
}

const setJobHookEnabled = `-- name: SetJobHookEnabled :one
UPDATE neosync_api.job_hooks
SET enabled = $1,
    updated_by_user_id = $2
WHERE id = $3
RETURNING id, name, description, job_id, config, created_by_user_id, created_at, updated_by_user_id, updated_at, enabled, priority, hook_timing, connection_id
`

type SetJobHookEnabledParams struct {
	Enabled         bool
	UpdatedByUserID pgtype.UUID
	ID              pgtype.UUID
}

func (q *Queries) SetJobHookEnabled(ctx context.Context, db DBTX, arg SetJobHookEnabledParams) (NeosyncApiJobHook, error) {
	row := db.QueryRow(ctx, setJobHookEnabled, arg.Enabled, arg.UpdatedByUserID, arg.ID)
	var i NeosyncApiJobHook
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.JobID,
		&i.Config,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedByUserID,
		&i.UpdatedAt,
		&i.Enabled,
		&i.Priority,
		&i.HookTiming,
		&i.ConnectionID,
	)
	return i, err
}

const updateJobHook = `-- name: UpdateJobHook :one
UPDATE neosync_api.job_hooks
SET name = $1,
    description = $2,
    config = $3,
    enabled = $4,
    priority = $5,
    updated_by_user_id = $6
WHERE id = $7
RETURNING id, name, description, job_id, config, created_by_user_id, created_at, updated_by_user_id, updated_at, enabled, priority, hook_timing, connection_id
`

type UpdateJobHookParams struct {
	Name            string
	Description     string
	Config          []byte
	Enabled         bool
	Priority        int32
	UpdatedByUserID pgtype.UUID
	ID              pgtype.UUID
}

func (q *Queries) UpdateJobHook(ctx context.Context, db DBTX, arg UpdateJobHookParams) (NeosyncApiJobHook, error) {
	row := db.QueryRow(ctx, updateJobHook,
		arg.Name,
		arg.Description,
		arg.Config,
		arg.Enabled,
		arg.Priority,
		arg.UpdatedByUserID,
		arg.ID,
	)
	var i NeosyncApiJobHook
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.JobID,
		&i.Config,
		&i.CreatedByUserID,
		&i.CreatedAt,
		&i.UpdatedByUserID,
		&i.UpdatedAt,
		&i.Enabled,
		&i.Priority,
		&i.HookTiming,
		&i.ConnectionID,
	)
	return i, err
}
