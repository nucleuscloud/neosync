// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mgmt/v1alpha1/connection_data.proto

package mgmtv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PostgresStreamConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostgresStreamConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresStreamConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostgresStreamConfigMultiError, or nil if none found.
func (m *PostgresStreamConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresStreamConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PostgresStreamConfigMultiError(errors)
	}

	return nil
}

// PostgresStreamConfigMultiError is an error wrapping multiple validation
// errors returned by PostgresStreamConfig.ValidateAll() if the designated
// constraints aren't met.
type PostgresStreamConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresStreamConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresStreamConfigMultiError) AllErrors() []error { return m }

// PostgresStreamConfigValidationError is the validation error returned by
// PostgresStreamConfig.Validate if the designated constraints aren't met.
type PostgresStreamConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresStreamConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresStreamConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresStreamConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresStreamConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresStreamConfigValidationError) ErrorName() string {
	return "PostgresStreamConfigValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresStreamConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresStreamConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresStreamConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresStreamConfigValidationError{}

// Validate checks the field values on MysqlStreamConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MysqlStreamConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MysqlStreamConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MysqlStreamConfigMultiError, or nil if none found.
func (m *MysqlStreamConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MysqlStreamConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MysqlStreamConfigMultiError(errors)
	}

	return nil
}

// MysqlStreamConfigMultiError is an error wrapping multiple validation errors
// returned by MysqlStreamConfig.ValidateAll() if the designated constraints
// aren't met.
type MysqlStreamConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MysqlStreamConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MysqlStreamConfigMultiError) AllErrors() []error { return m }

// MysqlStreamConfigValidationError is the validation error returned by
// MysqlStreamConfig.Validate if the designated constraints aren't met.
type MysqlStreamConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlStreamConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlStreamConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlStreamConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlStreamConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlStreamConfigValidationError) ErrorName() string {
	return "MysqlStreamConfigValidationError"
}

// Error satisfies the builtin error interface
func (e MysqlStreamConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysqlStreamConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlStreamConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlStreamConfigValidationError{}

// Validate checks the field values on AwsS3StreamConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AwsS3StreamConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AwsS3StreamConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AwsS3StreamConfigMultiError, or nil if none found.
func (m *AwsS3StreamConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AwsS3StreamConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Id.(type) {
	case *AwsS3StreamConfig_JobId:
		if v == nil {
			err := AwsS3StreamConfigValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for JobId
	case *AwsS3StreamConfig_JobRunId:
		if v == nil {
			err := AwsS3StreamConfigValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for JobRunId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AwsS3StreamConfigMultiError(errors)
	}

	return nil
}

// AwsS3StreamConfigMultiError is an error wrapping multiple validation errors
// returned by AwsS3StreamConfig.ValidateAll() if the designated constraints
// aren't met.
type AwsS3StreamConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AwsS3StreamConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AwsS3StreamConfigMultiError) AllErrors() []error { return m }

// AwsS3StreamConfigValidationError is the validation error returned by
// AwsS3StreamConfig.Validate if the designated constraints aren't met.
type AwsS3StreamConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AwsS3StreamConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AwsS3StreamConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AwsS3StreamConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AwsS3StreamConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AwsS3StreamConfigValidationError) ErrorName() string {
	return "AwsS3StreamConfigValidationError"
}

// Error satisfies the builtin error interface
func (e AwsS3StreamConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAwsS3StreamConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AwsS3StreamConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AwsS3StreamConfigValidationError{}

// Validate checks the field values on ConnectionStreamConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectionStreamConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectionStreamConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectionStreamConfigMultiError, or nil if none found.
func (m *ConnectionStreamConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectionStreamConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *ConnectionStreamConfig_PgConfig:
		if v == nil {
			err := ConnectionStreamConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPgConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConnectionStreamConfigValidationError{
						field:  "PgConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConnectionStreamConfigValidationError{
						field:  "PgConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPgConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectionStreamConfigValidationError{
					field:  "PgConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConnectionStreamConfig_AwsS3Config:
		if v == nil {
			err := ConnectionStreamConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsS3Config()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConnectionStreamConfigValidationError{
						field:  "AwsS3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConnectionStreamConfigValidationError{
						field:  "AwsS3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsS3Config()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectionStreamConfigValidationError{
					field:  "AwsS3Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConnectionStreamConfig_MysqlConfig:
		if v == nil {
			err := ConnectionStreamConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConnectionStreamConfigValidationError{
						field:  "MysqlConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConnectionStreamConfigValidationError{
						field:  "MysqlConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectionStreamConfigValidationError{
					field:  "MysqlConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ConnectionStreamConfigMultiError(errors)
	}

	return nil
}

// ConnectionStreamConfigMultiError is an error wrapping multiple validation
// errors returned by ConnectionStreamConfig.ValidateAll() if the designated
// constraints aren't met.
type ConnectionStreamConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectionStreamConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectionStreamConfigMultiError) AllErrors() []error { return m }

// ConnectionStreamConfigValidationError is the validation error returned by
// ConnectionStreamConfig.Validate if the designated constraints aren't met.
type ConnectionStreamConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectionStreamConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectionStreamConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectionStreamConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectionStreamConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectionStreamConfigValidationError) ErrorName() string {
	return "ConnectionStreamConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectionStreamConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectionStreamConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectionStreamConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectionStreamConfigValidationError{}

// Validate checks the field values on GetConnectionDataStreamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConnectionDataStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConnectionDataStreamRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetConnectionDataStreamRequestMultiError, or nil if none found.
func (m *GetConnectionDataStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectionDataStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectionId

	if all {
		switch v := interface{}(m.GetStreamConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConnectionDataStreamRequestValidationError{
					field:  "StreamConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConnectionDataStreamRequestValidationError{
					field:  "StreamConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreamConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConnectionDataStreamRequestValidationError{
				field:  "StreamConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Schema

	// no validation rules for Table

	if len(errors) > 0 {
		return GetConnectionDataStreamRequestMultiError(errors)
	}

	return nil
}

// GetConnectionDataStreamRequestMultiError is an error wrapping multiple
// validation errors returned by GetConnectionDataStreamRequest.ValidateAll()
// if the designated constraints aren't met.
type GetConnectionDataStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectionDataStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectionDataStreamRequestMultiError) AllErrors() []error { return m }

// GetConnectionDataStreamRequestValidationError is the validation error
// returned by GetConnectionDataStreamRequest.Validate if the designated
// constraints aren't met.
type GetConnectionDataStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectionDataStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectionDataStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectionDataStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectionDataStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectionDataStreamRequestValidationError) ErrorName() string {
	return "GetConnectionDataStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectionDataStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectionDataStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectionDataStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectionDataStreamRequestValidationError{}

// Validate checks the field values on GetConnectionDataStreamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConnectionDataStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConnectionDataStreamResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetConnectionDataStreamResponseMultiError, or nil if none found.
func (m *GetConnectionDataStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectionDataStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Row

	if len(errors) > 0 {
		return GetConnectionDataStreamResponseMultiError(errors)
	}

	return nil
}

// GetConnectionDataStreamResponseMultiError is an error wrapping multiple
// validation errors returned by GetConnectionDataStreamResponse.ValidateAll()
// if the designated constraints aren't met.
type GetConnectionDataStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectionDataStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectionDataStreamResponseMultiError) AllErrors() []error { return m }

// GetConnectionDataStreamResponseValidationError is the validation error
// returned by GetConnectionDataStreamResponse.Validate if the designated
// constraints aren't met.
type GetConnectionDataStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectionDataStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectionDataStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectionDataStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectionDataStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectionDataStreamResponseValidationError) ErrorName() string {
	return "GetConnectionDataStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectionDataStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectionDataStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectionDataStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectionDataStreamResponseValidationError{}

// Validate checks the field values on PostgresSchemaConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostgresSchemaConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresSchemaConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostgresSchemaConfigMultiError, or nil if none found.
func (m *PostgresSchemaConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresSchemaConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PostgresSchemaConfigMultiError(errors)
	}

	return nil
}

// PostgresSchemaConfigMultiError is an error wrapping multiple validation
// errors returned by PostgresSchemaConfig.ValidateAll() if the designated
// constraints aren't met.
type PostgresSchemaConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresSchemaConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresSchemaConfigMultiError) AllErrors() []error { return m }

// PostgresSchemaConfigValidationError is the validation error returned by
// PostgresSchemaConfig.Validate if the designated constraints aren't met.
type PostgresSchemaConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresSchemaConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresSchemaConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresSchemaConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresSchemaConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresSchemaConfigValidationError) ErrorName() string {
	return "PostgresSchemaConfigValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresSchemaConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresSchemaConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresSchemaConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresSchemaConfigValidationError{}

// Validate checks the field values on MysqlSchemaConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MysqlSchemaConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MysqlSchemaConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MysqlSchemaConfigMultiError, or nil if none found.
func (m *MysqlSchemaConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MysqlSchemaConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MysqlSchemaConfigMultiError(errors)
	}

	return nil
}

// MysqlSchemaConfigMultiError is an error wrapping multiple validation errors
// returned by MysqlSchemaConfig.ValidateAll() if the designated constraints
// aren't met.
type MysqlSchemaConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MysqlSchemaConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MysqlSchemaConfigMultiError) AllErrors() []error { return m }

// MysqlSchemaConfigValidationError is the validation error returned by
// MysqlSchemaConfig.Validate if the designated constraints aren't met.
type MysqlSchemaConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlSchemaConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlSchemaConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlSchemaConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlSchemaConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlSchemaConfigValidationError) ErrorName() string {
	return "MysqlSchemaConfigValidationError"
}

// Error satisfies the builtin error interface
func (e MysqlSchemaConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysqlSchemaConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlSchemaConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlSchemaConfigValidationError{}

// Validate checks the field values on AwsS3SchemaConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AwsS3SchemaConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AwsS3SchemaConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AwsS3SchemaConfigMultiError, or nil if none found.
func (m *AwsS3SchemaConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AwsS3SchemaConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Id.(type) {
	case *AwsS3SchemaConfig_JobId:
		if v == nil {
			err := AwsS3SchemaConfigValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for JobId
	case *AwsS3SchemaConfig_JobRunId:
		if v == nil {
			err := AwsS3SchemaConfigValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for JobRunId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AwsS3SchemaConfigMultiError(errors)
	}

	return nil
}

// AwsS3SchemaConfigMultiError is an error wrapping multiple validation errors
// returned by AwsS3SchemaConfig.ValidateAll() if the designated constraints
// aren't met.
type AwsS3SchemaConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AwsS3SchemaConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AwsS3SchemaConfigMultiError) AllErrors() []error { return m }

// AwsS3SchemaConfigValidationError is the validation error returned by
// AwsS3SchemaConfig.Validate if the designated constraints aren't met.
type AwsS3SchemaConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AwsS3SchemaConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AwsS3SchemaConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AwsS3SchemaConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AwsS3SchemaConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AwsS3SchemaConfigValidationError) ErrorName() string {
	return "AwsS3SchemaConfigValidationError"
}

// Error satisfies the builtin error interface
func (e AwsS3SchemaConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAwsS3SchemaConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AwsS3SchemaConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AwsS3SchemaConfigValidationError{}

// Validate checks the field values on ConnectionSchemaConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectionSchemaConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectionSchemaConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectionSchemaConfigMultiError, or nil if none found.
func (m *ConnectionSchemaConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectionSchemaConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *ConnectionSchemaConfig_PgConfig:
		if v == nil {
			err := ConnectionSchemaConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPgConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConnectionSchemaConfigValidationError{
						field:  "PgConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConnectionSchemaConfigValidationError{
						field:  "PgConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPgConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectionSchemaConfigValidationError{
					field:  "PgConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConnectionSchemaConfig_AwsS3Config:
		if v == nil {
			err := ConnectionSchemaConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsS3Config()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConnectionSchemaConfigValidationError{
						field:  "AwsS3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConnectionSchemaConfigValidationError{
						field:  "AwsS3Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsS3Config()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectionSchemaConfigValidationError{
					field:  "AwsS3Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ConnectionSchemaConfig_MysqlConfig:
		if v == nil {
			err := ConnectionSchemaConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConnectionSchemaConfigValidationError{
						field:  "MysqlConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConnectionSchemaConfigValidationError{
						field:  "MysqlConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectionSchemaConfigValidationError{
					field:  "MysqlConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ConnectionSchemaConfigMultiError(errors)
	}

	return nil
}

// ConnectionSchemaConfigMultiError is an error wrapping multiple validation
// errors returned by ConnectionSchemaConfig.ValidateAll() if the designated
// constraints aren't met.
type ConnectionSchemaConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectionSchemaConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectionSchemaConfigMultiError) AllErrors() []error { return m }

// ConnectionSchemaConfigValidationError is the validation error returned by
// ConnectionSchemaConfig.Validate if the designated constraints aren't met.
type ConnectionSchemaConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectionSchemaConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectionSchemaConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectionSchemaConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectionSchemaConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectionSchemaConfigValidationError) ErrorName() string {
	return "ConnectionSchemaConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectionSchemaConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectionSchemaConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectionSchemaConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectionSchemaConfigValidationError{}

// Validate checks the field values on DatabaseColumn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DatabaseColumn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DatabaseColumn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DatabaseColumnMultiError,
// or nil if none found.
func (m *DatabaseColumn) ValidateAll() error {
	return m.validate(true)
}

func (m *DatabaseColumn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	// no validation rules for Table

	// no validation rules for Column

	// no validation rules for DataType

	if len(errors) > 0 {
		return DatabaseColumnMultiError(errors)
	}

	return nil
}

// DatabaseColumnMultiError is an error wrapping multiple validation errors
// returned by DatabaseColumn.ValidateAll() if the designated constraints
// aren't met.
type DatabaseColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DatabaseColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DatabaseColumnMultiError) AllErrors() []error { return m }

// DatabaseColumnValidationError is the validation error returned by
// DatabaseColumn.Validate if the designated constraints aren't met.
type DatabaseColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatabaseColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatabaseColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatabaseColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatabaseColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatabaseColumnValidationError) ErrorName() string { return "DatabaseColumnValidationError" }

// Error satisfies the builtin error interface
func (e DatabaseColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatabaseColumn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatabaseColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatabaseColumnValidationError{}

// Validate checks the field values on GetConnectionSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConnectionSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConnectionSchemaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConnectionSchemaRequestMultiError, or nil if none found.
func (m *GetConnectionSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectionSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectionId

	if all {
		switch v := interface{}(m.GetSchemaConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConnectionSchemaRequestValidationError{
					field:  "SchemaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConnectionSchemaRequestValidationError{
					field:  "SchemaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchemaConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConnectionSchemaRequestValidationError{
				field:  "SchemaConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConnectionSchemaRequestMultiError(errors)
	}

	return nil
}

// GetConnectionSchemaRequestMultiError is an error wrapping multiple
// validation errors returned by GetConnectionSchemaRequest.ValidateAll() if
// the designated constraints aren't met.
type GetConnectionSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectionSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectionSchemaRequestMultiError) AllErrors() []error { return m }

// GetConnectionSchemaRequestValidationError is the validation error returned
// by GetConnectionSchemaRequest.Validate if the designated constraints aren't met.
type GetConnectionSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectionSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectionSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectionSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectionSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectionSchemaRequestValidationError) ErrorName() string {
	return "GetConnectionSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectionSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectionSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectionSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectionSchemaRequestValidationError{}

// Validate checks the field values on GetConnectionSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConnectionSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConnectionSchemaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConnectionSchemaResponseMultiError, or nil if none found.
func (m *GetConnectionSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectionSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConnectionSchemaResponseValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConnectionSchemaResponseValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConnectionSchemaResponseValidationError{
					field:  fmt.Sprintf("Schemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConnectionSchemaResponseMultiError(errors)
	}

	return nil
}

// GetConnectionSchemaResponseMultiError is an error wrapping multiple
// validation errors returned by GetConnectionSchemaResponse.ValidateAll() if
// the designated constraints aren't met.
type GetConnectionSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectionSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectionSchemaResponseMultiError) AllErrors() []error { return m }

// GetConnectionSchemaResponseValidationError is the validation error returned
// by GetConnectionSchemaResponse.Validate if the designated constraints
// aren't met.
type GetConnectionSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectionSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectionSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectionSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectionSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectionSchemaResponseValidationError) ErrorName() string {
	return "GetConnectionSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectionSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectionSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectionSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectionSchemaResponseValidationError{}

// Validate checks the field values on GetConnectionForeignConstraintsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetConnectionForeignConstraintsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetConnectionForeignConstraintsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetConnectionForeignConstraintsRequestMultiError, or nil if none found.
func (m *GetConnectionForeignConstraintsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectionForeignConstraintsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectionId

	if len(errors) > 0 {
		return GetConnectionForeignConstraintsRequestMultiError(errors)
	}

	return nil
}

// GetConnectionForeignConstraintsRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetConnectionForeignConstraintsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConnectionForeignConstraintsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectionForeignConstraintsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectionForeignConstraintsRequestMultiError) AllErrors() []error { return m }

// GetConnectionForeignConstraintsRequestValidationError is the validation
// error returned by GetConnectionForeignConstraintsRequest.Validate if the
// designated constraints aren't met.
type GetConnectionForeignConstraintsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectionForeignConstraintsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectionForeignConstraintsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectionForeignConstraintsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectionForeignConstraintsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectionForeignConstraintsRequestValidationError) ErrorName() string {
	return "GetConnectionForeignConstraintsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectionForeignConstraintsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectionForeignConstraintsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectionForeignConstraintsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectionForeignConstraintsRequestValidationError{}

// Validate checks the field values on ForeignKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ForeignKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForeignKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ForeignKeyMultiError, or
// nil if none found.
func (m *ForeignKey) ValidateAll() error {
	return m.validate(true)
}

func (m *ForeignKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Table

	// no validation rules for Column

	if len(errors) > 0 {
		return ForeignKeyMultiError(errors)
	}

	return nil
}

// ForeignKeyMultiError is an error wrapping multiple validation errors
// returned by ForeignKey.ValidateAll() if the designated constraints aren't met.
type ForeignKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForeignKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForeignKeyMultiError) AllErrors() []error { return m }

// ForeignKeyValidationError is the validation error returned by
// ForeignKey.Validate if the designated constraints aren't met.
type ForeignKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForeignKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForeignKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForeignKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForeignKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForeignKeyValidationError) ErrorName() string { return "ForeignKeyValidationError" }

// Error satisfies the builtin error interface
func (e ForeignKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForeignKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForeignKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForeignKeyValidationError{}

// Validate checks the field values on ForeignConstraint with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ForeignConstraint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForeignConstraint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForeignConstraintMultiError, or nil if none found.
func (m *ForeignConstraint) ValidateAll() error {
	return m.validate(true)
}

func (m *ForeignConstraint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Column

	// no validation rules for IsNullable

	if all {
		switch v := interface{}(m.GetForeignKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ForeignConstraintValidationError{
					field:  "ForeignKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ForeignConstraintValidationError{
					field:  "ForeignKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetForeignKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ForeignConstraintValidationError{
				field:  "ForeignKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ForeignConstraintMultiError(errors)
	}

	return nil
}

// ForeignConstraintMultiError is an error wrapping multiple validation errors
// returned by ForeignConstraint.ValidateAll() if the designated constraints
// aren't met.
type ForeignConstraintMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForeignConstraintMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForeignConstraintMultiError) AllErrors() []error { return m }

// ForeignConstraintValidationError is the validation error returned by
// ForeignConstraint.Validate if the designated constraints aren't met.
type ForeignConstraintValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForeignConstraintValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForeignConstraintValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForeignConstraintValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForeignConstraintValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForeignConstraintValidationError) ErrorName() string {
	return "ForeignConstraintValidationError"
}

// Error satisfies the builtin error interface
func (e ForeignConstraintValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForeignConstraint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForeignConstraintValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForeignConstraintValidationError{}

// Validate checks the field values on ForeignConstraintTables with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForeignConstraintTables) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForeignConstraintTables with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForeignConstraintTablesMultiError, or nil if none found.
func (m *ForeignConstraintTables) ValidateAll() error {
	return m.validate(true)
}

func (m *ForeignConstraintTables) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConstraints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ForeignConstraintTablesValidationError{
						field:  fmt.Sprintf("Constraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ForeignConstraintTablesValidationError{
						field:  fmt.Sprintf("Constraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ForeignConstraintTablesValidationError{
					field:  fmt.Sprintf("Constraints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ForeignConstraintTablesMultiError(errors)
	}

	return nil
}

// ForeignConstraintTablesMultiError is an error wrapping multiple validation
// errors returned by ForeignConstraintTables.ValidateAll() if the designated
// constraints aren't met.
type ForeignConstraintTablesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForeignConstraintTablesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForeignConstraintTablesMultiError) AllErrors() []error { return m }

// ForeignConstraintTablesValidationError is the validation error returned by
// ForeignConstraintTables.Validate if the designated constraints aren't met.
type ForeignConstraintTablesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForeignConstraintTablesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForeignConstraintTablesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForeignConstraintTablesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForeignConstraintTablesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForeignConstraintTablesValidationError) ErrorName() string {
	return "ForeignConstraintTablesValidationError"
}

// Error satisfies the builtin error interface
func (e ForeignConstraintTablesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForeignConstraintTables.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForeignConstraintTablesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForeignConstraintTablesValidationError{}

// Validate checks the field values on GetConnectionForeignConstraintsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetConnectionForeignConstraintsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetConnectionForeignConstraintsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetConnectionForeignConstraintsResponseMultiError, or nil if none found.
func (m *GetConnectionForeignConstraintsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectionForeignConstraintsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetTableConstraints()))
		i := 0
		for key := range m.GetTableConstraints() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTableConstraints()[key]
			_ = val

			// no validation rules for TableConstraints[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetConnectionForeignConstraintsResponseValidationError{
							field:  fmt.Sprintf("TableConstraints[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetConnectionForeignConstraintsResponseValidationError{
							field:  fmt.Sprintf("TableConstraints[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetConnectionForeignConstraintsResponseValidationError{
						field:  fmt.Sprintf("TableConstraints[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetConnectionForeignConstraintsResponseMultiError(errors)
	}

	return nil
}

// GetConnectionForeignConstraintsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetConnectionForeignConstraintsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConnectionForeignConstraintsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectionForeignConstraintsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectionForeignConstraintsResponseMultiError) AllErrors() []error { return m }

// GetConnectionForeignConstraintsResponseValidationError is the validation
// error returned by GetConnectionForeignConstraintsResponse.Validate if the
// designated constraints aren't met.
type GetConnectionForeignConstraintsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectionForeignConstraintsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectionForeignConstraintsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectionForeignConstraintsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectionForeignConstraintsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectionForeignConstraintsResponseValidationError) ErrorName() string {
	return "GetConnectionForeignConstraintsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectionForeignConstraintsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectionForeignConstraintsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectionForeignConstraintsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectionForeignConstraintsResponseValidationError{}

// Validate checks the field values on InitStatementOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitStatementOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitStatementOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitStatementOptionsMultiError, or nil if none found.
func (m *InitStatementOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *InitStatementOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InitSchema

	// no validation rules for TruncateBeforeInsert

	// no validation rules for TruncateCascade

	if len(errors) > 0 {
		return InitStatementOptionsMultiError(errors)
	}

	return nil
}

// InitStatementOptionsMultiError is an error wrapping multiple validation
// errors returned by InitStatementOptions.ValidateAll() if the designated
// constraints aren't met.
type InitStatementOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitStatementOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitStatementOptionsMultiError) AllErrors() []error { return m }

// InitStatementOptionsValidationError is the validation error returned by
// InitStatementOptions.Validate if the designated constraints aren't met.
type InitStatementOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitStatementOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitStatementOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitStatementOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitStatementOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitStatementOptionsValidationError) ErrorName() string {
	return "InitStatementOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e InitStatementOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitStatementOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitStatementOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitStatementOptionsValidationError{}

// Validate checks the field values on GetConnectionInitStatementsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetConnectionInitStatementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConnectionInitStatementsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetConnectionInitStatementsRequestMultiError, or nil if none found.
func (m *GetConnectionInitStatementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectionInitStatementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectionId

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConnectionInitStatementsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConnectionInitStatementsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConnectionInitStatementsRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConnectionInitStatementsRequestMultiError(errors)
	}

	return nil
}

// GetConnectionInitStatementsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetConnectionInitStatementsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConnectionInitStatementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectionInitStatementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectionInitStatementsRequestMultiError) AllErrors() []error { return m }

// GetConnectionInitStatementsRequestValidationError is the validation error
// returned by GetConnectionInitStatementsRequest.Validate if the designated
// constraints aren't met.
type GetConnectionInitStatementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectionInitStatementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectionInitStatementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectionInitStatementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectionInitStatementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectionInitStatementsRequestValidationError) ErrorName() string {
	return "GetConnectionInitStatementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectionInitStatementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectionInitStatementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectionInitStatementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectionInitStatementsRequestValidationError{}

// Validate checks the field values on GetConnectionInitStatementsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetConnectionInitStatementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConnectionInitStatementsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetConnectionInitStatementsResponseMultiError, or nil if none found.
func (m *GetConnectionInitStatementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectionInitStatementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableInitStatements

	if len(errors) > 0 {
		return GetConnectionInitStatementsResponseMultiError(errors)
	}

	return nil
}

// GetConnectionInitStatementsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetConnectionInitStatementsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConnectionInitStatementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectionInitStatementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectionInitStatementsResponseMultiError) AllErrors() []error { return m }

// GetConnectionInitStatementsResponseValidationError is the validation error
// returned by GetConnectionInitStatementsResponse.Validate if the designated
// constraints aren't met.
type GetConnectionInitStatementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectionInitStatementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectionInitStatementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectionInitStatementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectionInitStatementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectionInitStatementsResponseValidationError) ErrorName() string {
	return "GetConnectionInitStatementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectionInitStatementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectionInitStatementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectionInitStatementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectionInitStatementsResponseValidationError{}
