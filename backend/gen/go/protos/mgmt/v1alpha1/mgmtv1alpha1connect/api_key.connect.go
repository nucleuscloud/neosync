// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mgmt/v1alpha1/api_key.proto

package mgmtv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApiKeyServiceName is the fully-qualified name of the ApiKeyService service.
	ApiKeyServiceName = "mgmt.v1alpha1.ApiKeyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApiKeyServiceGetAccountApiKeysProcedure is the fully-qualified name of the ApiKeyService's
	// GetAccountApiKeys RPC.
	ApiKeyServiceGetAccountApiKeysProcedure = "/mgmt.v1alpha1.ApiKeyService/GetAccountApiKeys"
	// ApiKeyServiceGetAccountApiKeyProcedure is the fully-qualified name of the ApiKeyService's
	// GetAccountApiKey RPC.
	ApiKeyServiceGetAccountApiKeyProcedure = "/mgmt.v1alpha1.ApiKeyService/GetAccountApiKey"
	// ApiKeyServiceCreateAccountApiKeyProcedure is the fully-qualified name of the ApiKeyService's
	// CreateAccountApiKey RPC.
	ApiKeyServiceCreateAccountApiKeyProcedure = "/mgmt.v1alpha1.ApiKeyService/CreateAccountApiKey"
	// ApiKeyServiceRegenerateAccountApiKeyProcedure is the fully-qualified name of the ApiKeyService's
	// RegenerateAccountApiKey RPC.
	ApiKeyServiceRegenerateAccountApiKeyProcedure = "/mgmt.v1alpha1.ApiKeyService/RegenerateAccountApiKey"
	// ApiKeyServiceDeleteAccountApiKeyProcedure is the fully-qualified name of the ApiKeyService's
	// DeleteAccountApiKey RPC.
	ApiKeyServiceDeleteAccountApiKeyProcedure = "/mgmt.v1alpha1.ApiKeyService/DeleteAccountApiKey"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	apiKeyServiceServiceDescriptor                       = v1alpha1.File_mgmt_v1alpha1_api_key_proto.Services().ByName("ApiKeyService")
	apiKeyServiceGetAccountApiKeysMethodDescriptor       = apiKeyServiceServiceDescriptor.Methods().ByName("GetAccountApiKeys")
	apiKeyServiceGetAccountApiKeyMethodDescriptor        = apiKeyServiceServiceDescriptor.Methods().ByName("GetAccountApiKey")
	apiKeyServiceCreateAccountApiKeyMethodDescriptor     = apiKeyServiceServiceDescriptor.Methods().ByName("CreateAccountApiKey")
	apiKeyServiceRegenerateAccountApiKeyMethodDescriptor = apiKeyServiceServiceDescriptor.Methods().ByName("RegenerateAccountApiKey")
	apiKeyServiceDeleteAccountApiKeyMethodDescriptor     = apiKeyServiceServiceDescriptor.Methods().ByName("DeleteAccountApiKey")
)

// ApiKeyServiceClient is a client for the mgmt.v1alpha1.ApiKeyService service.
type ApiKeyServiceClient interface {
	// Retrieves a list of Account API Keys
	GetAccountApiKeys(context.Context, *connect.Request[v1alpha1.GetAccountApiKeysRequest]) (*connect.Response[v1alpha1.GetAccountApiKeysResponse], error)
	// Retrieves a single API Key
	GetAccountApiKey(context.Context, *connect.Request[v1alpha1.GetAccountApiKeyRequest]) (*connect.Response[v1alpha1.GetAccountApiKeyResponse], error)
	// Creates a single API Key
	// This method will return the decrypted contents of the API key
	CreateAccountApiKey(context.Context, *connect.Request[v1alpha1.CreateAccountApiKeyRequest]) (*connect.Response[v1alpha1.CreateAccountApiKeyResponse], error)
	// Regenerates a single API Key with a new expiration time
	// This method will return the decrypted contents of the API key
	RegenerateAccountApiKey(context.Context, *connect.Request[v1alpha1.RegenerateAccountApiKeyRequest]) (*connect.Response[v1alpha1.RegenerateAccountApiKeyResponse], error)
	// Deletes an API Key from the system.
	DeleteAccountApiKey(context.Context, *connect.Request[v1alpha1.DeleteAccountApiKeyRequest]) (*connect.Response[v1alpha1.DeleteAccountApiKeyResponse], error)
}

// NewApiKeyServiceClient constructs a client for the mgmt.v1alpha1.ApiKeyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiKeyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApiKeyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &apiKeyServiceClient{
		getAccountApiKeys: connect.NewClient[v1alpha1.GetAccountApiKeysRequest, v1alpha1.GetAccountApiKeysResponse](
			httpClient,
			baseURL+ApiKeyServiceGetAccountApiKeysProcedure,
			connect.WithSchema(apiKeyServiceGetAccountApiKeysMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAccountApiKey: connect.NewClient[v1alpha1.GetAccountApiKeyRequest, v1alpha1.GetAccountApiKeyResponse](
			httpClient,
			baseURL+ApiKeyServiceGetAccountApiKeyProcedure,
			connect.WithSchema(apiKeyServiceGetAccountApiKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAccountApiKey: connect.NewClient[v1alpha1.CreateAccountApiKeyRequest, v1alpha1.CreateAccountApiKeyResponse](
			httpClient,
			baseURL+ApiKeyServiceCreateAccountApiKeyProcedure,
			connect.WithSchema(apiKeyServiceCreateAccountApiKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		regenerateAccountApiKey: connect.NewClient[v1alpha1.RegenerateAccountApiKeyRequest, v1alpha1.RegenerateAccountApiKeyResponse](
			httpClient,
			baseURL+ApiKeyServiceRegenerateAccountApiKeyProcedure,
			connect.WithSchema(apiKeyServiceRegenerateAccountApiKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAccountApiKey: connect.NewClient[v1alpha1.DeleteAccountApiKeyRequest, v1alpha1.DeleteAccountApiKeyResponse](
			httpClient,
			baseURL+ApiKeyServiceDeleteAccountApiKeyProcedure,
			connect.WithSchema(apiKeyServiceDeleteAccountApiKeyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// apiKeyServiceClient implements ApiKeyServiceClient.
type apiKeyServiceClient struct {
	getAccountApiKeys       *connect.Client[v1alpha1.GetAccountApiKeysRequest, v1alpha1.GetAccountApiKeysResponse]
	getAccountApiKey        *connect.Client[v1alpha1.GetAccountApiKeyRequest, v1alpha1.GetAccountApiKeyResponse]
	createAccountApiKey     *connect.Client[v1alpha1.CreateAccountApiKeyRequest, v1alpha1.CreateAccountApiKeyResponse]
	regenerateAccountApiKey *connect.Client[v1alpha1.RegenerateAccountApiKeyRequest, v1alpha1.RegenerateAccountApiKeyResponse]
	deleteAccountApiKey     *connect.Client[v1alpha1.DeleteAccountApiKeyRequest, v1alpha1.DeleteAccountApiKeyResponse]
}

// GetAccountApiKeys calls mgmt.v1alpha1.ApiKeyService.GetAccountApiKeys.
func (c *apiKeyServiceClient) GetAccountApiKeys(ctx context.Context, req *connect.Request[v1alpha1.GetAccountApiKeysRequest]) (*connect.Response[v1alpha1.GetAccountApiKeysResponse], error) {
	return c.getAccountApiKeys.CallUnary(ctx, req)
}

// GetAccountApiKey calls mgmt.v1alpha1.ApiKeyService.GetAccountApiKey.
func (c *apiKeyServiceClient) GetAccountApiKey(ctx context.Context, req *connect.Request[v1alpha1.GetAccountApiKeyRequest]) (*connect.Response[v1alpha1.GetAccountApiKeyResponse], error) {
	return c.getAccountApiKey.CallUnary(ctx, req)
}

// CreateAccountApiKey calls mgmt.v1alpha1.ApiKeyService.CreateAccountApiKey.
func (c *apiKeyServiceClient) CreateAccountApiKey(ctx context.Context, req *connect.Request[v1alpha1.CreateAccountApiKeyRequest]) (*connect.Response[v1alpha1.CreateAccountApiKeyResponse], error) {
	return c.createAccountApiKey.CallUnary(ctx, req)
}

// RegenerateAccountApiKey calls mgmt.v1alpha1.ApiKeyService.RegenerateAccountApiKey.
func (c *apiKeyServiceClient) RegenerateAccountApiKey(ctx context.Context, req *connect.Request[v1alpha1.RegenerateAccountApiKeyRequest]) (*connect.Response[v1alpha1.RegenerateAccountApiKeyResponse], error) {
	return c.regenerateAccountApiKey.CallUnary(ctx, req)
}

// DeleteAccountApiKey calls mgmt.v1alpha1.ApiKeyService.DeleteAccountApiKey.
func (c *apiKeyServiceClient) DeleteAccountApiKey(ctx context.Context, req *connect.Request[v1alpha1.DeleteAccountApiKeyRequest]) (*connect.Response[v1alpha1.DeleteAccountApiKeyResponse], error) {
	return c.deleteAccountApiKey.CallUnary(ctx, req)
}

// ApiKeyServiceHandler is an implementation of the mgmt.v1alpha1.ApiKeyService service.
type ApiKeyServiceHandler interface {
	// Retrieves a list of Account API Keys
	GetAccountApiKeys(context.Context, *connect.Request[v1alpha1.GetAccountApiKeysRequest]) (*connect.Response[v1alpha1.GetAccountApiKeysResponse], error)
	// Retrieves a single API Key
	GetAccountApiKey(context.Context, *connect.Request[v1alpha1.GetAccountApiKeyRequest]) (*connect.Response[v1alpha1.GetAccountApiKeyResponse], error)
	// Creates a single API Key
	// This method will return the decrypted contents of the API key
	CreateAccountApiKey(context.Context, *connect.Request[v1alpha1.CreateAccountApiKeyRequest]) (*connect.Response[v1alpha1.CreateAccountApiKeyResponse], error)
	// Regenerates a single API Key with a new expiration time
	// This method will return the decrypted contents of the API key
	RegenerateAccountApiKey(context.Context, *connect.Request[v1alpha1.RegenerateAccountApiKeyRequest]) (*connect.Response[v1alpha1.RegenerateAccountApiKeyResponse], error)
	// Deletes an API Key from the system.
	DeleteAccountApiKey(context.Context, *connect.Request[v1alpha1.DeleteAccountApiKeyRequest]) (*connect.Response[v1alpha1.DeleteAccountApiKeyResponse], error)
}

// NewApiKeyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiKeyServiceHandler(svc ApiKeyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	apiKeyServiceGetAccountApiKeysHandler := connect.NewUnaryHandler(
		ApiKeyServiceGetAccountApiKeysProcedure,
		svc.GetAccountApiKeys,
		connect.WithSchema(apiKeyServiceGetAccountApiKeysMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiKeyServiceGetAccountApiKeyHandler := connect.NewUnaryHandler(
		ApiKeyServiceGetAccountApiKeyProcedure,
		svc.GetAccountApiKey,
		connect.WithSchema(apiKeyServiceGetAccountApiKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiKeyServiceCreateAccountApiKeyHandler := connect.NewUnaryHandler(
		ApiKeyServiceCreateAccountApiKeyProcedure,
		svc.CreateAccountApiKey,
		connect.WithSchema(apiKeyServiceCreateAccountApiKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiKeyServiceRegenerateAccountApiKeyHandler := connect.NewUnaryHandler(
		ApiKeyServiceRegenerateAccountApiKeyProcedure,
		svc.RegenerateAccountApiKey,
		connect.WithSchema(apiKeyServiceRegenerateAccountApiKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiKeyServiceDeleteAccountApiKeyHandler := connect.NewUnaryHandler(
		ApiKeyServiceDeleteAccountApiKeyProcedure,
		svc.DeleteAccountApiKey,
		connect.WithSchema(apiKeyServiceDeleteAccountApiKeyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mgmt.v1alpha1.ApiKeyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApiKeyServiceGetAccountApiKeysProcedure:
			apiKeyServiceGetAccountApiKeysHandler.ServeHTTP(w, r)
		case ApiKeyServiceGetAccountApiKeyProcedure:
			apiKeyServiceGetAccountApiKeyHandler.ServeHTTP(w, r)
		case ApiKeyServiceCreateAccountApiKeyProcedure:
			apiKeyServiceCreateAccountApiKeyHandler.ServeHTTP(w, r)
		case ApiKeyServiceRegenerateAccountApiKeyProcedure:
			apiKeyServiceRegenerateAccountApiKeyHandler.ServeHTTP(w, r)
		case ApiKeyServiceDeleteAccountApiKeyProcedure:
			apiKeyServiceDeleteAccountApiKeyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApiKeyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApiKeyServiceHandler struct{}

func (UnimplementedApiKeyServiceHandler) GetAccountApiKeys(context.Context, *connect.Request[v1alpha1.GetAccountApiKeysRequest]) (*connect.Response[v1alpha1.GetAccountApiKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.ApiKeyService.GetAccountApiKeys is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) GetAccountApiKey(context.Context, *connect.Request[v1alpha1.GetAccountApiKeyRequest]) (*connect.Response[v1alpha1.GetAccountApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.ApiKeyService.GetAccountApiKey is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) CreateAccountApiKey(context.Context, *connect.Request[v1alpha1.CreateAccountApiKeyRequest]) (*connect.Response[v1alpha1.CreateAccountApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.ApiKeyService.CreateAccountApiKey is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) RegenerateAccountApiKey(context.Context, *connect.Request[v1alpha1.RegenerateAccountApiKeyRequest]) (*connect.Response[v1alpha1.RegenerateAccountApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.ApiKeyService.RegenerateAccountApiKey is not implemented"))
}

func (UnimplementedApiKeyServiceHandler) DeleteAccountApiKey(context.Context, *connect.Request[v1alpha1.DeleteAccountApiKeyRequest]) (*connect.Response[v1alpha1.DeleteAccountApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.ApiKeyService.DeleteAccountApiKey is not implemented"))
}
