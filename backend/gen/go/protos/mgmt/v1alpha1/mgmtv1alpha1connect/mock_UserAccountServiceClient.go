// Code generated by mockery. DO NOT EDIT.

package mgmtv1alpha1connect

import (
	context "context"

	connect "connectrpc.com/connect"

	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockUserAccountServiceClient is an autogenerated mock type for the UserAccountServiceClient type
type MockUserAccountServiceClient struct {
	mock.Mock
}

type MockUserAccountServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserAccountServiceClient) EXPECT() *MockUserAccountServiceClient_Expecter {
	return &MockUserAccountServiceClient_Expecter{mock: &_m.Mock}
}

// ConvertPersonalToTeamAccount provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceClient) ConvertPersonalToTeamAccount(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.ConvertPersonalToTeamAccountRequest]) (*connect.Response[mgmtv1alpha1.ConvertPersonalToTeamAccountResponse], error) {
	ret := _m.Called(_a0, _a1)

	var r0 *connect.Response[mgmtv1alpha1.ConvertPersonalToTeamAccountResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.ConvertPersonalToTeamAccountRequest]) (*connect.Response[mgmtv1alpha1.ConvertPersonalToTeamAccountResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.ConvertPersonalToTeamAccountRequest]) *connect.Response[mgmtv1alpha1.ConvertPersonalToTeamAccountResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.ConvertPersonalToTeamAccountResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.ConvertPersonalToTeamAccountRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_ConvertPersonalToTeamAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertPersonalToTeamAccount'
type MockUserAccountServiceClient_ConvertPersonalToTeamAccount_Call struct {
	*mock.Call
}

// ConvertPersonalToTeamAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.ConvertPersonalToTeamAccountRequest]
func (_e *MockUserAccountServiceClient_Expecter) ConvertPersonalToTeamAccount(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceClient_ConvertPersonalToTeamAccount_Call {
	return &MockUserAccountServiceClient_ConvertPersonalToTeamAccount_Call{Call: _e.mock.On("ConvertPersonalToTeamAccount", _a0, _a1)}
}

func (_c *MockUserAccountServiceClient_ConvertPersonalToTeamAccount_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.ConvertPersonalToTeamAccountRequest])) *MockUserAccountServiceClient_ConvertPersonalToTeamAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.ConvertPersonalToTeamAccountRequest]))
	})
	return _c
}

func (_c *MockUserAccountServiceClient_ConvertPersonalToTeamAccount_Call) Return(_a0 *connect.Response[mgmtv1alpha1.ConvertPersonalToTeamAccountResponse], _a1 error) *MockUserAccountServiceClient_ConvertPersonalToTeamAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_ConvertPersonalToTeamAccount_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.ConvertPersonalToTeamAccountRequest]) (*connect.Response[mgmtv1alpha1.ConvertPersonalToTeamAccountResponse], error)) *MockUserAccountServiceClient_ConvertPersonalToTeamAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountTemporalConfig provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceClient) GetAccountTemporalConfig(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetAccountTemporalConfigRequest]) (*connect.Response[mgmtv1alpha1.GetAccountTemporalConfigResponse], error) {
	ret := _m.Called(_a0, _a1)

	var r0 *connect.Response[mgmtv1alpha1.GetAccountTemporalConfigResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAccountTemporalConfigRequest]) (*connect.Response[mgmtv1alpha1.GetAccountTemporalConfigResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAccountTemporalConfigRequest]) *connect.Response[mgmtv1alpha1.GetAccountTemporalConfigResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetAccountTemporalConfigResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAccountTemporalConfigRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_GetAccountTemporalConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountTemporalConfig'
type MockUserAccountServiceClient_GetAccountTemporalConfig_Call struct {
	*mock.Call
}

// GetAccountTemporalConfig is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetAccountTemporalConfigRequest]
func (_e *MockUserAccountServiceClient_Expecter) GetAccountTemporalConfig(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceClient_GetAccountTemporalConfig_Call {
	return &MockUserAccountServiceClient_GetAccountTemporalConfig_Call{Call: _e.mock.On("GetAccountTemporalConfig", _a0, _a1)}
}

func (_c *MockUserAccountServiceClient_GetAccountTemporalConfig_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetAccountTemporalConfigRequest])) *MockUserAccountServiceClient_GetAccountTemporalConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetAccountTemporalConfigRequest]))
	})
	return _c
}

func (_c *MockUserAccountServiceClient_GetAccountTemporalConfig_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetAccountTemporalConfigResponse], _a1 error) *MockUserAccountServiceClient_GetAccountTemporalConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_GetAccountTemporalConfig_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetAccountTemporalConfigRequest]) (*connect.Response[mgmtv1alpha1.GetAccountTemporalConfigResponse], error)) *MockUserAccountServiceClient_GetAccountTemporalConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceClient) GetUser(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetUserRequest]) (*connect.Response[mgmtv1alpha1.GetUserResponse], error) {
	ret := _m.Called(_a0, _a1)

	var r0 *connect.Response[mgmtv1alpha1.GetUserResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetUserRequest]) (*connect.Response[mgmtv1alpha1.GetUserResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetUserRequest]) *connect.Response[mgmtv1alpha1.GetUserResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetUserResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetUserRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserAccountServiceClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetUserRequest]
func (_e *MockUserAccountServiceClient_Expecter) GetUser(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceClient_GetUser_Call {
	return &MockUserAccountServiceClient_GetUser_Call{Call: _e.mock.On("GetUser", _a0, _a1)}
}

func (_c *MockUserAccountServiceClient_GetUser_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetUserRequest])) *MockUserAccountServiceClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetUserRequest]))
	})
	return _c
}

func (_c *MockUserAccountServiceClient_GetUser_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetUserResponse], _a1 error) *MockUserAccountServiceClient_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_GetUser_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetUserRequest]) (*connect.Response[mgmtv1alpha1.GetUserResponse], error)) *MockUserAccountServiceClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAccounts provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceClient) GetUserAccounts(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetUserAccountsRequest]) (*connect.Response[mgmtv1alpha1.GetUserAccountsResponse], error) {
	ret := _m.Called(_a0, _a1)

	var r0 *connect.Response[mgmtv1alpha1.GetUserAccountsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetUserAccountsRequest]) (*connect.Response[mgmtv1alpha1.GetUserAccountsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetUserAccountsRequest]) *connect.Response[mgmtv1alpha1.GetUserAccountsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetUserAccountsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetUserAccountsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_GetUserAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAccounts'
type MockUserAccountServiceClient_GetUserAccounts_Call struct {
	*mock.Call
}

// GetUserAccounts is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetUserAccountsRequest]
func (_e *MockUserAccountServiceClient_Expecter) GetUserAccounts(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceClient_GetUserAccounts_Call {
	return &MockUserAccountServiceClient_GetUserAccounts_Call{Call: _e.mock.On("GetUserAccounts", _a0, _a1)}
}

func (_c *MockUserAccountServiceClient_GetUserAccounts_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetUserAccountsRequest])) *MockUserAccountServiceClient_GetUserAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetUserAccountsRequest]))
	})
	return _c
}

func (_c *MockUserAccountServiceClient_GetUserAccounts_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetUserAccountsResponse], _a1 error) *MockUserAccountServiceClient_GetUserAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_GetUserAccounts_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetUserAccountsRequest]) (*connect.Response[mgmtv1alpha1.GetUserAccountsResponse], error)) *MockUserAccountServiceClient_GetUserAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserInAccount provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceClient) IsUserInAccount(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.IsUserInAccountRequest]) (*connect.Response[mgmtv1alpha1.IsUserInAccountResponse], error) {
	ret := _m.Called(_a0, _a1)

	var r0 *connect.Response[mgmtv1alpha1.IsUserInAccountResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.IsUserInAccountRequest]) (*connect.Response[mgmtv1alpha1.IsUserInAccountResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.IsUserInAccountRequest]) *connect.Response[mgmtv1alpha1.IsUserInAccountResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.IsUserInAccountResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.IsUserInAccountRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_IsUserInAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserInAccount'
type MockUserAccountServiceClient_IsUserInAccount_Call struct {
	*mock.Call
}

// IsUserInAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.IsUserInAccountRequest]
func (_e *MockUserAccountServiceClient_Expecter) IsUserInAccount(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceClient_IsUserInAccount_Call {
	return &MockUserAccountServiceClient_IsUserInAccount_Call{Call: _e.mock.On("IsUserInAccount", _a0, _a1)}
}

func (_c *MockUserAccountServiceClient_IsUserInAccount_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.IsUserInAccountRequest])) *MockUserAccountServiceClient_IsUserInAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.IsUserInAccountRequest]))
	})
	return _c
}

func (_c *MockUserAccountServiceClient_IsUserInAccount_Call) Return(_a0 *connect.Response[mgmtv1alpha1.IsUserInAccountResponse], _a1 error) *MockUserAccountServiceClient_IsUserInAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_IsUserInAccount_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.IsUserInAccountRequest]) (*connect.Response[mgmtv1alpha1.IsUserInAccountResponse], error)) *MockUserAccountServiceClient_IsUserInAccount_Call {
	_c.Call.Return(run)
	return _c
}

// SetAccountTemporalConfig provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceClient) SetAccountTemporalConfig(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetAccountTemporalConfigRequest]) (*connect.Response[mgmtv1alpha1.SetAccountTemporalConfigResponse], error) {
	ret := _m.Called(_a0, _a1)

	var r0 *connect.Response[mgmtv1alpha1.SetAccountTemporalConfigResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetAccountTemporalConfigRequest]) (*connect.Response[mgmtv1alpha1.SetAccountTemporalConfigResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetAccountTemporalConfigRequest]) *connect.Response[mgmtv1alpha1.SetAccountTemporalConfigResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.SetAccountTemporalConfigResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.SetAccountTemporalConfigRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_SetAccountTemporalConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAccountTemporalConfig'
type MockUserAccountServiceClient_SetAccountTemporalConfig_Call struct {
	*mock.Call
}

// SetAccountTemporalConfig is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.SetAccountTemporalConfigRequest]
func (_e *MockUserAccountServiceClient_Expecter) SetAccountTemporalConfig(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceClient_SetAccountTemporalConfig_Call {
	return &MockUserAccountServiceClient_SetAccountTemporalConfig_Call{Call: _e.mock.On("SetAccountTemporalConfig", _a0, _a1)}
}

func (_c *MockUserAccountServiceClient_SetAccountTemporalConfig_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetAccountTemporalConfigRequest])) *MockUserAccountServiceClient_SetAccountTemporalConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.SetAccountTemporalConfigRequest]))
	})
	return _c
}

func (_c *MockUserAccountServiceClient_SetAccountTemporalConfig_Call) Return(_a0 *connect.Response[mgmtv1alpha1.SetAccountTemporalConfigResponse], _a1 error) *MockUserAccountServiceClient_SetAccountTemporalConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_SetAccountTemporalConfig_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.SetAccountTemporalConfigRequest]) (*connect.Response[mgmtv1alpha1.SetAccountTemporalConfigResponse], error)) *MockUserAccountServiceClient_SetAccountTemporalConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SetPersonalAccount provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceClient) SetPersonalAccount(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetPersonalAccountRequest]) (*connect.Response[mgmtv1alpha1.SetPersonalAccountResponse], error) {
	ret := _m.Called(_a0, _a1)

	var r0 *connect.Response[mgmtv1alpha1.SetPersonalAccountResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetPersonalAccountRequest]) (*connect.Response[mgmtv1alpha1.SetPersonalAccountResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetPersonalAccountRequest]) *connect.Response[mgmtv1alpha1.SetPersonalAccountResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.SetPersonalAccountResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.SetPersonalAccountRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_SetPersonalAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPersonalAccount'
type MockUserAccountServiceClient_SetPersonalAccount_Call struct {
	*mock.Call
}

// SetPersonalAccount is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.SetPersonalAccountRequest]
func (_e *MockUserAccountServiceClient_Expecter) SetPersonalAccount(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceClient_SetPersonalAccount_Call {
	return &MockUserAccountServiceClient_SetPersonalAccount_Call{Call: _e.mock.On("SetPersonalAccount", _a0, _a1)}
}

func (_c *MockUserAccountServiceClient_SetPersonalAccount_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetPersonalAccountRequest])) *MockUserAccountServiceClient_SetPersonalAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.SetPersonalAccountRequest]))
	})
	return _c
}

func (_c *MockUserAccountServiceClient_SetPersonalAccount_Call) Return(_a0 *connect.Response[mgmtv1alpha1.SetPersonalAccountResponse], _a1 error) *MockUserAccountServiceClient_SetPersonalAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_SetPersonalAccount_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.SetPersonalAccountRequest]) (*connect.Response[mgmtv1alpha1.SetPersonalAccountResponse], error)) *MockUserAccountServiceClient_SetPersonalAccount_Call {
	_c.Call.Return(run)
	return _c
}

// SetUser provides a mock function with given fields: _a0, _a1
func (_m *MockUserAccountServiceClient) SetUser(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetUserRequest]) (*connect.Response[mgmtv1alpha1.SetUserResponse], error) {
	ret := _m.Called(_a0, _a1)

	var r0 *connect.Response[mgmtv1alpha1.SetUserResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetUserRequest]) (*connect.Response[mgmtv1alpha1.SetUserResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetUserRequest]) *connect.Response[mgmtv1alpha1.SetUserResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.SetUserResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.SetUserRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAccountServiceClient_SetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUser'
type MockUserAccountServiceClient_SetUser_Call struct {
	*mock.Call
}

// SetUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.SetUserRequest]
func (_e *MockUserAccountServiceClient_Expecter) SetUser(_a0 interface{}, _a1 interface{}) *MockUserAccountServiceClient_SetUser_Call {
	return &MockUserAccountServiceClient_SetUser_Call{Call: _e.mock.On("SetUser", _a0, _a1)}
}

func (_c *MockUserAccountServiceClient_SetUser_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetUserRequest])) *MockUserAccountServiceClient_SetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.SetUserRequest]))
	})
	return _c
}

func (_c *MockUserAccountServiceClient_SetUser_Call) Return(_a0 *connect.Response[mgmtv1alpha1.SetUserResponse], _a1 error) *MockUserAccountServiceClient_SetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAccountServiceClient_SetUser_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.SetUserRequest]) (*connect.Response[mgmtv1alpha1.SetUserResponse], error)) *MockUserAccountServiceClient_SetUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserAccountServiceClient creates a new instance of MockUserAccountServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserAccountServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserAccountServiceClient {
	mock := &MockUserAccountServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
