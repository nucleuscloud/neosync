// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mgmt/v1alpha1/auth.proto

package mgmtv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "mgmt.v1alpha1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceLoginCliProcedure is the fully-qualified name of the AuthService's LoginCli RPC.
	AuthServiceLoginCliProcedure = "/mgmt.v1alpha1.AuthService/LoginCli"
	// AuthServiceGetCliIssuerProcedure is the fully-qualified name of the AuthService's GetCliIssuer
	// RPC.
	AuthServiceGetCliIssuerProcedure = "/mgmt.v1alpha1.AuthService/GetCliIssuer"
	// AuthServiceGetAuthorizeUrlProcedure is the fully-qualified name of the AuthService's
	// GetAuthorizeUrl RPC.
	AuthServiceGetAuthorizeUrlProcedure = "/mgmt.v1alpha1.AuthService/GetAuthorizeUrl"
	// AuthServiceGetAuthStatusProcedure is the fully-qualified name of the AuthService's GetAuthStatus
	// RPC.
	AuthServiceGetAuthStatusProcedure = "/mgmt.v1alpha1.AuthService/GetAuthStatus"
)

// AuthServiceClient is a client for the mgmt.v1alpha1.AuthService service.
type AuthServiceClient interface {
	LoginCli(context.Context, *connect.Request[v1alpha1.LoginCliRequest]) (*connect.Response[v1alpha1.LoginCliResponse], error)
	GetCliIssuer(context.Context, *connect.Request[v1alpha1.GetCliIssuerRequest]) (*connect.Response[v1alpha1.GetCliIssuerResponse], error)
	GetAuthorizeUrl(context.Context, *connect.Request[v1alpha1.GetAuthorizeUrlRequest]) (*connect.Response[v1alpha1.GetAuthorizeUrlResponse], error)
	GetAuthStatus(context.Context, *connect.Request[v1alpha1.GetAuthStatusRequest]) (*connect.Response[v1alpha1.GetAuthStatusResponse], error)
}

// NewAuthServiceClient constructs a client for the mgmt.v1alpha1.AuthService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		loginCli: connect.NewClient[v1alpha1.LoginCliRequest, v1alpha1.LoginCliResponse](
			httpClient,
			baseURL+AuthServiceLoginCliProcedure,
			opts...,
		),
		getCliIssuer: connect.NewClient[v1alpha1.GetCliIssuerRequest, v1alpha1.GetCliIssuerResponse](
			httpClient,
			baseURL+AuthServiceGetCliIssuerProcedure,
			opts...,
		),
		getAuthorizeUrl: connect.NewClient[v1alpha1.GetAuthorizeUrlRequest, v1alpha1.GetAuthorizeUrlResponse](
			httpClient,
			baseURL+AuthServiceGetAuthorizeUrlProcedure,
			opts...,
		),
		getAuthStatus: connect.NewClient[v1alpha1.GetAuthStatusRequest, v1alpha1.GetAuthStatusResponse](
			httpClient,
			baseURL+AuthServiceGetAuthStatusProcedure,
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	loginCli        *connect.Client[v1alpha1.LoginCliRequest, v1alpha1.LoginCliResponse]
	getCliIssuer    *connect.Client[v1alpha1.GetCliIssuerRequest, v1alpha1.GetCliIssuerResponse]
	getAuthorizeUrl *connect.Client[v1alpha1.GetAuthorizeUrlRequest, v1alpha1.GetAuthorizeUrlResponse]
	getAuthStatus   *connect.Client[v1alpha1.GetAuthStatusRequest, v1alpha1.GetAuthStatusResponse]
}

// LoginCli calls mgmt.v1alpha1.AuthService.LoginCli.
func (c *authServiceClient) LoginCli(ctx context.Context, req *connect.Request[v1alpha1.LoginCliRequest]) (*connect.Response[v1alpha1.LoginCliResponse], error) {
	return c.loginCli.CallUnary(ctx, req)
}

// GetCliIssuer calls mgmt.v1alpha1.AuthService.GetCliIssuer.
func (c *authServiceClient) GetCliIssuer(ctx context.Context, req *connect.Request[v1alpha1.GetCliIssuerRequest]) (*connect.Response[v1alpha1.GetCliIssuerResponse], error) {
	return c.getCliIssuer.CallUnary(ctx, req)
}

// GetAuthorizeUrl calls mgmt.v1alpha1.AuthService.GetAuthorizeUrl.
func (c *authServiceClient) GetAuthorizeUrl(ctx context.Context, req *connect.Request[v1alpha1.GetAuthorizeUrlRequest]) (*connect.Response[v1alpha1.GetAuthorizeUrlResponse], error) {
	return c.getAuthorizeUrl.CallUnary(ctx, req)
}

// GetAuthStatus calls mgmt.v1alpha1.AuthService.GetAuthStatus.
func (c *authServiceClient) GetAuthStatus(ctx context.Context, req *connect.Request[v1alpha1.GetAuthStatusRequest]) (*connect.Response[v1alpha1.GetAuthStatusResponse], error) {
	return c.getAuthStatus.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the mgmt.v1alpha1.AuthService service.
type AuthServiceHandler interface {
	LoginCli(context.Context, *connect.Request[v1alpha1.LoginCliRequest]) (*connect.Response[v1alpha1.LoginCliResponse], error)
	GetCliIssuer(context.Context, *connect.Request[v1alpha1.GetCliIssuerRequest]) (*connect.Response[v1alpha1.GetCliIssuerResponse], error)
	GetAuthorizeUrl(context.Context, *connect.Request[v1alpha1.GetAuthorizeUrlRequest]) (*connect.Response[v1alpha1.GetAuthorizeUrlResponse], error)
	GetAuthStatus(context.Context, *connect.Request[v1alpha1.GetAuthStatusRequest]) (*connect.Response[v1alpha1.GetAuthStatusResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceLoginCliHandler := connect.NewUnaryHandler(
		AuthServiceLoginCliProcedure,
		svc.LoginCli,
		opts...,
	)
	authServiceGetCliIssuerHandler := connect.NewUnaryHandler(
		AuthServiceGetCliIssuerProcedure,
		svc.GetCliIssuer,
		opts...,
	)
	authServiceGetAuthorizeUrlHandler := connect.NewUnaryHandler(
		AuthServiceGetAuthorizeUrlProcedure,
		svc.GetAuthorizeUrl,
		opts...,
	)
	authServiceGetAuthStatusHandler := connect.NewUnaryHandler(
		AuthServiceGetAuthStatusProcedure,
		svc.GetAuthStatus,
		opts...,
	)
	return "/mgmt.v1alpha1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginCliProcedure:
			authServiceLoginCliHandler.ServeHTTP(w, r)
		case AuthServiceGetCliIssuerProcedure:
			authServiceGetCliIssuerHandler.ServeHTTP(w, r)
		case AuthServiceGetAuthorizeUrlProcedure:
			authServiceGetAuthorizeUrlHandler.ServeHTTP(w, r)
		case AuthServiceGetAuthStatusProcedure:
			authServiceGetAuthStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) LoginCli(context.Context, *connect.Request[v1alpha1.LoginCliRequest]) (*connect.Response[v1alpha1.LoginCliResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.AuthService.LoginCli is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetCliIssuer(context.Context, *connect.Request[v1alpha1.GetCliIssuerRequest]) (*connect.Response[v1alpha1.GetCliIssuerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.AuthService.GetCliIssuer is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetAuthorizeUrl(context.Context, *connect.Request[v1alpha1.GetAuthorizeUrlRequest]) (*connect.Response[v1alpha1.GetAuthorizeUrlResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.AuthService.GetAuthorizeUrl is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetAuthStatus(context.Context, *connect.Request[v1alpha1.GetAuthStatusRequest]) (*connect.Response[v1alpha1.GetAuthStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.AuthService.GetAuthStatus is not implemented"))
}
