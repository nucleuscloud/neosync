// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mgmt/v1alpha1/transformer.proto

package mgmtv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// TransformersServiceName is the fully-qualified name of the TransformersService service.
	TransformersServiceName = "mgmt.v1alpha1.TransformersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TransformersServiceGetSystemTransformersProcedure is the fully-qualified name of the
	// TransformersService's GetSystemTransformers RPC.
	TransformersServiceGetSystemTransformersProcedure = "/mgmt.v1alpha1.TransformersService/GetSystemTransformers"
	// TransformersServiceGetCustomTransformersProcedure is the fully-qualified name of the
	// TransformersService's GetCustomTransformers RPC.
	TransformersServiceGetCustomTransformersProcedure = "/mgmt.v1alpha1.TransformersService/GetCustomTransformers"
	// TransformersServiceCreateCustomTransformerProcedure is the fully-qualified name of the
	// TransformersService's CreateCustomTransformer RPC.
	TransformersServiceCreateCustomTransformerProcedure = "/mgmt.v1alpha1.TransformersService/CreateCustomTransformer"
	// TransformersServiceDeleteCustomTransformerProcedure is the fully-qualified name of the
	// TransformersService's DeleteCustomTransformer RPC.
	TransformersServiceDeleteCustomTransformerProcedure = "/mgmt.v1alpha1.TransformersService/DeleteCustomTransformer"
	// TransformersServiceUpdateCustomTransformerProcedure is the fully-qualified name of the
	// TransformersService's UpdateCustomTransformer RPC.
	TransformersServiceUpdateCustomTransformerProcedure = "/mgmt.v1alpha1.TransformersService/UpdateCustomTransformer"
	// TransformersServiceIsTransformerNameAvailableProcedure is the fully-qualified name of the
	// TransformersService's IsTransformerNameAvailable RPC.
	TransformersServiceIsTransformerNameAvailableProcedure = "/mgmt.v1alpha1.TransformersService/IsTransformerNameAvailable"
)

// TransformersServiceClient is a client for the mgmt.v1alpha1.TransformersService service.
type TransformersServiceClient interface {
	GetSystemTransformers(context.Context, *connect.Request[v1alpha1.GetSystemTransformersRequest]) (*connect.Response[v1alpha1.GetSystemTransformersResponse], error)
	GetCustomTransformers(context.Context, *connect.Request[v1alpha1.GetCustomTransformersRequest]) (*connect.Response[v1alpha1.GetCustomTransformersResponse], error)
	CreateCustomTransformer(context.Context, *connect.Request[v1alpha1.CreateCustomTransformerRequest]) (*connect.Response[v1alpha1.CreateCustomTransformerResponse], error)
	DeleteCustomTransformer(context.Context, *connect.Request[v1alpha1.DeleteCustomTransformerRequest]) (*connect.Response[v1alpha1.DeleteCustomTransformerResponse], error)
	UpdateCustomTransformer(context.Context, *connect.Request[v1alpha1.UpdateCustomTransformerRequest]) (*connect.Response[v1alpha1.UpdateCustomTransformerResponse], error)
	IsTransformerNameAvailable(context.Context, *connect.Request[v1alpha1.IsTransformerNameAvailableRequest]) (*connect.Response[v1alpha1.IsTransformerNameAvailableResponse], error)
}

// NewTransformersServiceClient constructs a client for the mgmt.v1alpha1.TransformersService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransformersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TransformersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &transformersServiceClient{
		getSystemTransformers: connect.NewClient[v1alpha1.GetSystemTransformersRequest, v1alpha1.GetSystemTransformersResponse](
			httpClient,
			baseURL+TransformersServiceGetSystemTransformersProcedure,
			opts...,
		),
		getCustomTransformers: connect.NewClient[v1alpha1.GetCustomTransformersRequest, v1alpha1.GetCustomTransformersResponse](
			httpClient,
			baseURL+TransformersServiceGetCustomTransformersProcedure,
			opts...,
		),
		createCustomTransformer: connect.NewClient[v1alpha1.CreateCustomTransformerRequest, v1alpha1.CreateCustomTransformerResponse](
			httpClient,
			baseURL+TransformersServiceCreateCustomTransformerProcedure,
			opts...,
		),
		deleteCustomTransformer: connect.NewClient[v1alpha1.DeleteCustomTransformerRequest, v1alpha1.DeleteCustomTransformerResponse](
			httpClient,
			baseURL+TransformersServiceDeleteCustomTransformerProcedure,
			opts...,
		),
		updateCustomTransformer: connect.NewClient[v1alpha1.UpdateCustomTransformerRequest, v1alpha1.UpdateCustomTransformerResponse](
			httpClient,
			baseURL+TransformersServiceUpdateCustomTransformerProcedure,
			opts...,
		),
		isTransformerNameAvailable: connect.NewClient[v1alpha1.IsTransformerNameAvailableRequest, v1alpha1.IsTransformerNameAvailableResponse](
			httpClient,
			baseURL+TransformersServiceIsTransformerNameAvailableProcedure,
			opts...,
		),
	}
}

// transformersServiceClient implements TransformersServiceClient.
type transformersServiceClient struct {
	getSystemTransformers      *connect.Client[v1alpha1.GetSystemTransformersRequest, v1alpha1.GetSystemTransformersResponse]
	getCustomTransformers      *connect.Client[v1alpha1.GetCustomTransformersRequest, v1alpha1.GetCustomTransformersResponse]
	createCustomTransformer    *connect.Client[v1alpha1.CreateCustomTransformerRequest, v1alpha1.CreateCustomTransformerResponse]
	deleteCustomTransformer    *connect.Client[v1alpha1.DeleteCustomTransformerRequest, v1alpha1.DeleteCustomTransformerResponse]
	updateCustomTransformer    *connect.Client[v1alpha1.UpdateCustomTransformerRequest, v1alpha1.UpdateCustomTransformerResponse]
	isTransformerNameAvailable *connect.Client[v1alpha1.IsTransformerNameAvailableRequest, v1alpha1.IsTransformerNameAvailableResponse]
}

// GetSystemTransformers calls mgmt.v1alpha1.TransformersService.GetSystemTransformers.
func (c *transformersServiceClient) GetSystemTransformers(ctx context.Context, req *connect.Request[v1alpha1.GetSystemTransformersRequest]) (*connect.Response[v1alpha1.GetSystemTransformersResponse], error) {
	return c.getSystemTransformers.CallUnary(ctx, req)
}

// GetCustomTransformers calls mgmt.v1alpha1.TransformersService.GetCustomTransformers.
func (c *transformersServiceClient) GetCustomTransformers(ctx context.Context, req *connect.Request[v1alpha1.GetCustomTransformersRequest]) (*connect.Response[v1alpha1.GetCustomTransformersResponse], error) {
	return c.getCustomTransformers.CallUnary(ctx, req)
}

// CreateCustomTransformer calls mgmt.v1alpha1.TransformersService.CreateCustomTransformer.
func (c *transformersServiceClient) CreateCustomTransformer(ctx context.Context, req *connect.Request[v1alpha1.CreateCustomTransformerRequest]) (*connect.Response[v1alpha1.CreateCustomTransformerResponse], error) {
	return c.createCustomTransformer.CallUnary(ctx, req)
}

// DeleteCustomTransformer calls mgmt.v1alpha1.TransformersService.DeleteCustomTransformer.
func (c *transformersServiceClient) DeleteCustomTransformer(ctx context.Context, req *connect.Request[v1alpha1.DeleteCustomTransformerRequest]) (*connect.Response[v1alpha1.DeleteCustomTransformerResponse], error) {
	return c.deleteCustomTransformer.CallUnary(ctx, req)
}

// UpdateCustomTransformer calls mgmt.v1alpha1.TransformersService.UpdateCustomTransformer.
func (c *transformersServiceClient) UpdateCustomTransformer(ctx context.Context, req *connect.Request[v1alpha1.UpdateCustomTransformerRequest]) (*connect.Response[v1alpha1.UpdateCustomTransformerResponse], error) {
	return c.updateCustomTransformer.CallUnary(ctx, req)
}

// IsTransformerNameAvailable calls mgmt.v1alpha1.TransformersService.IsTransformerNameAvailable.
func (c *transformersServiceClient) IsTransformerNameAvailable(ctx context.Context, req *connect.Request[v1alpha1.IsTransformerNameAvailableRequest]) (*connect.Response[v1alpha1.IsTransformerNameAvailableResponse], error) {
	return c.isTransformerNameAvailable.CallUnary(ctx, req)
}

// TransformersServiceHandler is an implementation of the mgmt.v1alpha1.TransformersService service.
type TransformersServiceHandler interface {
	GetSystemTransformers(context.Context, *connect.Request[v1alpha1.GetSystemTransformersRequest]) (*connect.Response[v1alpha1.GetSystemTransformersResponse], error)
	GetCustomTransformers(context.Context, *connect.Request[v1alpha1.GetCustomTransformersRequest]) (*connect.Response[v1alpha1.GetCustomTransformersResponse], error)
	CreateCustomTransformer(context.Context, *connect.Request[v1alpha1.CreateCustomTransformerRequest]) (*connect.Response[v1alpha1.CreateCustomTransformerResponse], error)
	DeleteCustomTransformer(context.Context, *connect.Request[v1alpha1.DeleteCustomTransformerRequest]) (*connect.Response[v1alpha1.DeleteCustomTransformerResponse], error)
	UpdateCustomTransformer(context.Context, *connect.Request[v1alpha1.UpdateCustomTransformerRequest]) (*connect.Response[v1alpha1.UpdateCustomTransformerResponse], error)
	IsTransformerNameAvailable(context.Context, *connect.Request[v1alpha1.IsTransformerNameAvailableRequest]) (*connect.Response[v1alpha1.IsTransformerNameAvailableResponse], error)
}

// NewTransformersServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransformersServiceHandler(svc TransformersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	transformersServiceGetSystemTransformersHandler := connect.NewUnaryHandler(
		TransformersServiceGetSystemTransformersProcedure,
		svc.GetSystemTransformers,
		opts...,
	)
	transformersServiceGetCustomTransformersHandler := connect.NewUnaryHandler(
		TransformersServiceGetCustomTransformersProcedure,
		svc.GetCustomTransformers,
		opts...,
	)
	transformersServiceCreateCustomTransformerHandler := connect.NewUnaryHandler(
		TransformersServiceCreateCustomTransformerProcedure,
		svc.CreateCustomTransformer,
		opts...,
	)
	transformersServiceDeleteCustomTransformerHandler := connect.NewUnaryHandler(
		TransformersServiceDeleteCustomTransformerProcedure,
		svc.DeleteCustomTransformer,
		opts...,
	)
	transformersServiceUpdateCustomTransformerHandler := connect.NewUnaryHandler(
		TransformersServiceUpdateCustomTransformerProcedure,
		svc.UpdateCustomTransformer,
		opts...,
	)
	transformersServiceIsTransformerNameAvailableHandler := connect.NewUnaryHandler(
		TransformersServiceIsTransformerNameAvailableProcedure,
		svc.IsTransformerNameAvailable,
		opts...,
	)
	return "/mgmt.v1alpha1.TransformersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransformersServiceGetSystemTransformersProcedure:
			transformersServiceGetSystemTransformersHandler.ServeHTTP(w, r)
		case TransformersServiceGetCustomTransformersProcedure:
			transformersServiceGetCustomTransformersHandler.ServeHTTP(w, r)
		case TransformersServiceCreateCustomTransformerProcedure:
			transformersServiceCreateCustomTransformerHandler.ServeHTTP(w, r)
		case TransformersServiceDeleteCustomTransformerProcedure:
			transformersServiceDeleteCustomTransformerHandler.ServeHTTP(w, r)
		case TransformersServiceUpdateCustomTransformerProcedure:
			transformersServiceUpdateCustomTransformerHandler.ServeHTTP(w, r)
		case TransformersServiceIsTransformerNameAvailableProcedure:
			transformersServiceIsTransformerNameAvailableHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransformersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransformersServiceHandler struct{}

func (UnimplementedTransformersServiceHandler) GetSystemTransformers(context.Context, *connect.Request[v1alpha1.GetSystemTransformersRequest]) (*connect.Response[v1alpha1.GetSystemTransformersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.TransformersService.GetSystemTransformers is not implemented"))
}

func (UnimplementedTransformersServiceHandler) GetCustomTransformers(context.Context, *connect.Request[v1alpha1.GetCustomTransformersRequest]) (*connect.Response[v1alpha1.GetCustomTransformersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.TransformersService.GetCustomTransformers is not implemented"))
}

func (UnimplementedTransformersServiceHandler) CreateCustomTransformer(context.Context, *connect.Request[v1alpha1.CreateCustomTransformerRequest]) (*connect.Response[v1alpha1.CreateCustomTransformerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.TransformersService.CreateCustomTransformer is not implemented"))
}

func (UnimplementedTransformersServiceHandler) DeleteCustomTransformer(context.Context, *connect.Request[v1alpha1.DeleteCustomTransformerRequest]) (*connect.Response[v1alpha1.DeleteCustomTransformerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.TransformersService.DeleteCustomTransformer is not implemented"))
}

func (UnimplementedTransformersServiceHandler) UpdateCustomTransformer(context.Context, *connect.Request[v1alpha1.UpdateCustomTransformerRequest]) (*connect.Response[v1alpha1.UpdateCustomTransformerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.TransformersService.UpdateCustomTransformer is not implemented"))
}

func (UnimplementedTransformersServiceHandler) IsTransformerNameAvailable(context.Context, *connect.Request[v1alpha1.IsTransformerNameAvailableRequest]) (*connect.Response[v1alpha1.IsTransformerNameAvailableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.TransformersService.IsTransformerNameAvailable is not implemented"))
}
