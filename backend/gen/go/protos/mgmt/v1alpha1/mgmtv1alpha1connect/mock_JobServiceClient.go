// Code generated by mockery. DO NOT EDIT.

package mgmtv1alpha1connect

import (
	context "context"

	connect "connectrpc.com/connect"

	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockJobServiceClient is an autogenerated mock type for the JobServiceClient type
type MockJobServiceClient struct {
	mock.Mock
}

type MockJobServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobServiceClient) EXPECT() *MockJobServiceClient_Expecter {
	return &MockJobServiceClient_Expecter{mock: &_m.Mock}
}

// CancelJobRun provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) CancelJobRun(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CancelJobRunRequest]) (*connect.Response[mgmtv1alpha1.CancelJobRunResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CancelJobRun")
	}

	var r0 *connect.Response[mgmtv1alpha1.CancelJobRunResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CancelJobRunRequest]) (*connect.Response[mgmtv1alpha1.CancelJobRunResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CancelJobRunRequest]) *connect.Response[mgmtv1alpha1.CancelJobRunResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.CancelJobRunResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.CancelJobRunRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_CancelJobRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelJobRun'
type MockJobServiceClient_CancelJobRun_Call struct {
	*mock.Call
}

// CancelJobRun is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.CancelJobRunRequest]
func (_e *MockJobServiceClient_Expecter) CancelJobRun(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_CancelJobRun_Call {
	return &MockJobServiceClient_CancelJobRun_Call{Call: _e.mock.On("CancelJobRun", _a0, _a1)}
}

func (_c *MockJobServiceClient_CancelJobRun_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CancelJobRunRequest])) *MockJobServiceClient_CancelJobRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.CancelJobRunRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_CancelJobRun_Call) Return(_a0 *connect.Response[mgmtv1alpha1.CancelJobRunResponse], _a1 error) *MockJobServiceClient_CancelJobRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_CancelJobRun_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.CancelJobRunRequest]) (*connect.Response[mgmtv1alpha1.CancelJobRunResponse], error)) *MockJobServiceClient_CancelJobRun_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJob provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) CreateJob(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CreateJobRequest]) (*connect.Response[mgmtv1alpha1.CreateJobResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *connect.Response[mgmtv1alpha1.CreateJobResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobRequest]) (*connect.Response[mgmtv1alpha1.CreateJobResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobRequest]) *connect.Response[mgmtv1alpha1.CreateJobResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.CreateJobResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type MockJobServiceClient_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.CreateJobRequest]
func (_e *MockJobServiceClient_Expecter) CreateJob(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_CreateJob_Call {
	return &MockJobServiceClient_CreateJob_Call{Call: _e.mock.On("CreateJob", _a0, _a1)}
}

func (_c *MockJobServiceClient_CreateJob_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CreateJobRequest])) *MockJobServiceClient_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.CreateJobRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_CreateJob_Call) Return(_a0 *connect.Response[mgmtv1alpha1.CreateJobResponse], _a1 error) *MockJobServiceClient_CreateJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_CreateJob_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobRequest]) (*connect.Response[mgmtv1alpha1.CreateJobResponse], error)) *MockJobServiceClient_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJobDestinationConnections provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) CreateJobDestinationConnections(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CreateJobDestinationConnectionsRequest]) (*connect.Response[mgmtv1alpha1.CreateJobDestinationConnectionsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateJobDestinationConnections")
	}

	var r0 *connect.Response[mgmtv1alpha1.CreateJobDestinationConnectionsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobDestinationConnectionsRequest]) (*connect.Response[mgmtv1alpha1.CreateJobDestinationConnectionsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobDestinationConnectionsRequest]) *connect.Response[mgmtv1alpha1.CreateJobDestinationConnectionsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.CreateJobDestinationConnectionsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobDestinationConnectionsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_CreateJobDestinationConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJobDestinationConnections'
type MockJobServiceClient_CreateJobDestinationConnections_Call struct {
	*mock.Call
}

// CreateJobDestinationConnections is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.CreateJobDestinationConnectionsRequest]
func (_e *MockJobServiceClient_Expecter) CreateJobDestinationConnections(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_CreateJobDestinationConnections_Call {
	return &MockJobServiceClient_CreateJobDestinationConnections_Call{Call: _e.mock.On("CreateJobDestinationConnections", _a0, _a1)}
}

func (_c *MockJobServiceClient_CreateJobDestinationConnections_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CreateJobDestinationConnectionsRequest])) *MockJobServiceClient_CreateJobDestinationConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.CreateJobDestinationConnectionsRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_CreateJobDestinationConnections_Call) Return(_a0 *connect.Response[mgmtv1alpha1.CreateJobDestinationConnectionsResponse], _a1 error) *MockJobServiceClient_CreateJobDestinationConnections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_CreateJobDestinationConnections_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobDestinationConnectionsRequest]) (*connect.Response[mgmtv1alpha1.CreateJobDestinationConnectionsResponse], error)) *MockJobServiceClient_CreateJobDestinationConnections_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJobHook provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) CreateJobHook(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CreateJobHookRequest]) (*connect.Response[mgmtv1alpha1.CreateJobHookResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateJobHook")
	}

	var r0 *connect.Response[mgmtv1alpha1.CreateJobHookResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobHookRequest]) (*connect.Response[mgmtv1alpha1.CreateJobHookResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobHookRequest]) *connect.Response[mgmtv1alpha1.CreateJobHookResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.CreateJobHookResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobHookRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_CreateJobHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJobHook'
type MockJobServiceClient_CreateJobHook_Call struct {
	*mock.Call
}

// CreateJobHook is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.CreateJobHookRequest]
func (_e *MockJobServiceClient_Expecter) CreateJobHook(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_CreateJobHook_Call {
	return &MockJobServiceClient_CreateJobHook_Call{Call: _e.mock.On("CreateJobHook", _a0, _a1)}
}

func (_c *MockJobServiceClient_CreateJobHook_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CreateJobHookRequest])) *MockJobServiceClient_CreateJobHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.CreateJobHookRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_CreateJobHook_Call) Return(_a0 *connect.Response[mgmtv1alpha1.CreateJobHookResponse], _a1 error) *MockJobServiceClient_CreateJobHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_CreateJobHook_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobHookRequest]) (*connect.Response[mgmtv1alpha1.CreateJobHookResponse], error)) *MockJobServiceClient_CreateJobHook_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJobRun provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) CreateJobRun(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CreateJobRunRequest]) (*connect.Response[mgmtv1alpha1.CreateJobRunResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateJobRun")
	}

	var r0 *connect.Response[mgmtv1alpha1.CreateJobRunResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobRunRequest]) (*connect.Response[mgmtv1alpha1.CreateJobRunResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobRunRequest]) *connect.Response[mgmtv1alpha1.CreateJobRunResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.CreateJobRunResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobRunRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_CreateJobRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJobRun'
type MockJobServiceClient_CreateJobRun_Call struct {
	*mock.Call
}

// CreateJobRun is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.CreateJobRunRequest]
func (_e *MockJobServiceClient_Expecter) CreateJobRun(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_CreateJobRun_Call {
	return &MockJobServiceClient_CreateJobRun_Call{Call: _e.mock.On("CreateJobRun", _a0, _a1)}
}

func (_c *MockJobServiceClient_CreateJobRun_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CreateJobRunRequest])) *MockJobServiceClient_CreateJobRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.CreateJobRunRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_CreateJobRun_Call) Return(_a0 *connect.Response[mgmtv1alpha1.CreateJobRunResponse], _a1 error) *MockJobServiceClient_CreateJobRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_CreateJobRun_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.CreateJobRunRequest]) (*connect.Response[mgmtv1alpha1.CreateJobRunResponse], error)) *MockJobServiceClient_CreateJobRun_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJob provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) DeleteJob(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.DeleteJobRequest]) (*connect.Response[mgmtv1alpha1.DeleteJobResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 *connect.Response[mgmtv1alpha1.DeleteJobResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobRequest]) (*connect.Response[mgmtv1alpha1.DeleteJobResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobRequest]) *connect.Response[mgmtv1alpha1.DeleteJobResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.DeleteJobResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_DeleteJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJob'
type MockJobServiceClient_DeleteJob_Call struct {
	*mock.Call
}

// DeleteJob is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.DeleteJobRequest]
func (_e *MockJobServiceClient_Expecter) DeleteJob(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_DeleteJob_Call {
	return &MockJobServiceClient_DeleteJob_Call{Call: _e.mock.On("DeleteJob", _a0, _a1)}
}

func (_c *MockJobServiceClient_DeleteJob_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.DeleteJobRequest])) *MockJobServiceClient_DeleteJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.DeleteJobRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_DeleteJob_Call) Return(_a0 *connect.Response[mgmtv1alpha1.DeleteJobResponse], _a1 error) *MockJobServiceClient_DeleteJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_DeleteJob_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobRequest]) (*connect.Response[mgmtv1alpha1.DeleteJobResponse], error)) *MockJobServiceClient_DeleteJob_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJobDestinationConnection provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) DeleteJobDestinationConnection(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.DeleteJobDestinationConnectionRequest]) (*connect.Response[mgmtv1alpha1.DeleteJobDestinationConnectionResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobDestinationConnection")
	}

	var r0 *connect.Response[mgmtv1alpha1.DeleteJobDestinationConnectionResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobDestinationConnectionRequest]) (*connect.Response[mgmtv1alpha1.DeleteJobDestinationConnectionResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobDestinationConnectionRequest]) *connect.Response[mgmtv1alpha1.DeleteJobDestinationConnectionResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.DeleteJobDestinationConnectionResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobDestinationConnectionRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_DeleteJobDestinationConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJobDestinationConnection'
type MockJobServiceClient_DeleteJobDestinationConnection_Call struct {
	*mock.Call
}

// DeleteJobDestinationConnection is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.DeleteJobDestinationConnectionRequest]
func (_e *MockJobServiceClient_Expecter) DeleteJobDestinationConnection(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_DeleteJobDestinationConnection_Call {
	return &MockJobServiceClient_DeleteJobDestinationConnection_Call{Call: _e.mock.On("DeleteJobDestinationConnection", _a0, _a1)}
}

func (_c *MockJobServiceClient_DeleteJobDestinationConnection_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.DeleteJobDestinationConnectionRequest])) *MockJobServiceClient_DeleteJobDestinationConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.DeleteJobDestinationConnectionRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_DeleteJobDestinationConnection_Call) Return(_a0 *connect.Response[mgmtv1alpha1.DeleteJobDestinationConnectionResponse], _a1 error) *MockJobServiceClient_DeleteJobDestinationConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_DeleteJobDestinationConnection_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobDestinationConnectionRequest]) (*connect.Response[mgmtv1alpha1.DeleteJobDestinationConnectionResponse], error)) *MockJobServiceClient_DeleteJobDestinationConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJobHook provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) DeleteJobHook(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.DeleteJobHookRequest]) (*connect.Response[mgmtv1alpha1.DeleteJobHookResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobHook")
	}

	var r0 *connect.Response[mgmtv1alpha1.DeleteJobHookResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobHookRequest]) (*connect.Response[mgmtv1alpha1.DeleteJobHookResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobHookRequest]) *connect.Response[mgmtv1alpha1.DeleteJobHookResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.DeleteJobHookResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobHookRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_DeleteJobHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJobHook'
type MockJobServiceClient_DeleteJobHook_Call struct {
	*mock.Call
}

// DeleteJobHook is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.DeleteJobHookRequest]
func (_e *MockJobServiceClient_Expecter) DeleteJobHook(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_DeleteJobHook_Call {
	return &MockJobServiceClient_DeleteJobHook_Call{Call: _e.mock.On("DeleteJobHook", _a0, _a1)}
}

func (_c *MockJobServiceClient_DeleteJobHook_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.DeleteJobHookRequest])) *MockJobServiceClient_DeleteJobHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.DeleteJobHookRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_DeleteJobHook_Call) Return(_a0 *connect.Response[mgmtv1alpha1.DeleteJobHookResponse], _a1 error) *MockJobServiceClient_DeleteJobHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_DeleteJobHook_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobHookRequest]) (*connect.Response[mgmtv1alpha1.DeleteJobHookResponse], error)) *MockJobServiceClient_DeleteJobHook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJobRun provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) DeleteJobRun(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.DeleteJobRunRequest]) (*connect.Response[mgmtv1alpha1.DeleteJobRunResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobRun")
	}

	var r0 *connect.Response[mgmtv1alpha1.DeleteJobRunResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobRunRequest]) (*connect.Response[mgmtv1alpha1.DeleteJobRunResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobRunRequest]) *connect.Response[mgmtv1alpha1.DeleteJobRunResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.DeleteJobRunResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobRunRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_DeleteJobRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJobRun'
type MockJobServiceClient_DeleteJobRun_Call struct {
	*mock.Call
}

// DeleteJobRun is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.DeleteJobRunRequest]
func (_e *MockJobServiceClient_Expecter) DeleteJobRun(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_DeleteJobRun_Call {
	return &MockJobServiceClient_DeleteJobRun_Call{Call: _e.mock.On("DeleteJobRun", _a0, _a1)}
}

func (_c *MockJobServiceClient_DeleteJobRun_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.DeleteJobRunRequest])) *MockJobServiceClient_DeleteJobRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.DeleteJobRunRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_DeleteJobRun_Call) Return(_a0 *connect.Response[mgmtv1alpha1.DeleteJobRunResponse], _a1 error) *MockJobServiceClient_DeleteJobRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_DeleteJobRun_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.DeleteJobRunRequest]) (*connect.Response[mgmtv1alpha1.DeleteJobRunResponse], error)) *MockJobServiceClient_DeleteJobRun_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveJobHooksByTiming provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetActiveJobHooksByTiming(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetActiveJobHooksByTimingRequest]) (*connect.Response[mgmtv1alpha1.GetActiveJobHooksByTimingResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveJobHooksByTiming")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetActiveJobHooksByTimingResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetActiveJobHooksByTimingRequest]) (*connect.Response[mgmtv1alpha1.GetActiveJobHooksByTimingResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetActiveJobHooksByTimingRequest]) *connect.Response[mgmtv1alpha1.GetActiveJobHooksByTimingResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetActiveJobHooksByTimingResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetActiveJobHooksByTimingRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetActiveJobHooksByTiming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveJobHooksByTiming'
type MockJobServiceClient_GetActiveJobHooksByTiming_Call struct {
	*mock.Call
}

// GetActiveJobHooksByTiming is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetActiveJobHooksByTimingRequest]
func (_e *MockJobServiceClient_Expecter) GetActiveJobHooksByTiming(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetActiveJobHooksByTiming_Call {
	return &MockJobServiceClient_GetActiveJobHooksByTiming_Call{Call: _e.mock.On("GetActiveJobHooksByTiming", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetActiveJobHooksByTiming_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetActiveJobHooksByTimingRequest])) *MockJobServiceClient_GetActiveJobHooksByTiming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetActiveJobHooksByTimingRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetActiveJobHooksByTiming_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetActiveJobHooksByTimingResponse], _a1 error) *MockJobServiceClient_GetActiveJobHooksByTiming_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetActiveJobHooksByTiming_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetActiveJobHooksByTimingRequest]) (*connect.Response[mgmtv1alpha1.GetActiveJobHooksByTimingResponse], error)) *MockJobServiceClient_GetActiveJobHooksByTiming_Call {
	_c.Call.Return(run)
	return _c
}

// GetJob provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetJob(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobRequest]) (*connect.Response[mgmtv1alpha1.GetJobResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetJobResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRequest]) (*connect.Response[mgmtv1alpha1.GetJobResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRequest]) *connect.Response[mgmtv1alpha1.GetJobResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetJobResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type MockJobServiceClient_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetJobRequest]
func (_e *MockJobServiceClient_Expecter) GetJob(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetJob_Call {
	return &MockJobServiceClient_GetJob_Call{Call: _e.mock.On("GetJob", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetJob_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobRequest])) *MockJobServiceClient_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetJobRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetJob_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetJobResponse], _a1 error) *MockJobServiceClient_GetJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetJob_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRequest]) (*connect.Response[mgmtv1alpha1.GetJobResponse], error)) *MockJobServiceClient_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobHook provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetJobHook(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobHookRequest]) (*connect.Response[mgmtv1alpha1.GetJobHookResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJobHook")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetJobHookResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobHookRequest]) (*connect.Response[mgmtv1alpha1.GetJobHookResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobHookRequest]) *connect.Response[mgmtv1alpha1.GetJobHookResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetJobHookResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobHookRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetJobHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobHook'
type MockJobServiceClient_GetJobHook_Call struct {
	*mock.Call
}

// GetJobHook is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetJobHookRequest]
func (_e *MockJobServiceClient_Expecter) GetJobHook(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetJobHook_Call {
	return &MockJobServiceClient_GetJobHook_Call{Call: _e.mock.On("GetJobHook", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetJobHook_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobHookRequest])) *MockJobServiceClient_GetJobHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetJobHookRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetJobHook_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetJobHookResponse], _a1 error) *MockJobServiceClient_GetJobHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetJobHook_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetJobHookRequest]) (*connect.Response[mgmtv1alpha1.GetJobHookResponse], error)) *MockJobServiceClient_GetJobHook_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobHooks provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetJobHooks(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobHooksRequest]) (*connect.Response[mgmtv1alpha1.GetJobHooksResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJobHooks")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetJobHooksResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobHooksRequest]) (*connect.Response[mgmtv1alpha1.GetJobHooksResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobHooksRequest]) *connect.Response[mgmtv1alpha1.GetJobHooksResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetJobHooksResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobHooksRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetJobHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobHooks'
type MockJobServiceClient_GetJobHooks_Call struct {
	*mock.Call
}

// GetJobHooks is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetJobHooksRequest]
func (_e *MockJobServiceClient_Expecter) GetJobHooks(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetJobHooks_Call {
	return &MockJobServiceClient_GetJobHooks_Call{Call: _e.mock.On("GetJobHooks", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetJobHooks_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobHooksRequest])) *MockJobServiceClient_GetJobHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetJobHooksRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetJobHooks_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetJobHooksResponse], _a1 error) *MockJobServiceClient_GetJobHooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetJobHooks_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetJobHooksRequest]) (*connect.Response[mgmtv1alpha1.GetJobHooksResponse], error)) *MockJobServiceClient_GetJobHooks_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobNextRuns provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetJobNextRuns(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobNextRunsRequest]) (*connect.Response[mgmtv1alpha1.GetJobNextRunsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJobNextRuns")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetJobNextRunsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobNextRunsRequest]) (*connect.Response[mgmtv1alpha1.GetJobNextRunsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobNextRunsRequest]) *connect.Response[mgmtv1alpha1.GetJobNextRunsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetJobNextRunsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobNextRunsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetJobNextRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobNextRuns'
type MockJobServiceClient_GetJobNextRuns_Call struct {
	*mock.Call
}

// GetJobNextRuns is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetJobNextRunsRequest]
func (_e *MockJobServiceClient_Expecter) GetJobNextRuns(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetJobNextRuns_Call {
	return &MockJobServiceClient_GetJobNextRuns_Call{Call: _e.mock.On("GetJobNextRuns", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetJobNextRuns_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobNextRunsRequest])) *MockJobServiceClient_GetJobNextRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetJobNextRunsRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetJobNextRuns_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetJobNextRunsResponse], _a1 error) *MockJobServiceClient_GetJobNextRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetJobNextRuns_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetJobNextRunsRequest]) (*connect.Response[mgmtv1alpha1.GetJobNextRunsResponse], error)) *MockJobServiceClient_GetJobNextRuns_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobRecentRuns provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetJobRecentRuns(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobRecentRunsRequest]) (*connect.Response[mgmtv1alpha1.GetJobRecentRunsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJobRecentRuns")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetJobRecentRunsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRecentRunsRequest]) (*connect.Response[mgmtv1alpha1.GetJobRecentRunsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRecentRunsRequest]) *connect.Response[mgmtv1alpha1.GetJobRecentRunsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetJobRecentRunsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRecentRunsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetJobRecentRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobRecentRuns'
type MockJobServiceClient_GetJobRecentRuns_Call struct {
	*mock.Call
}

// GetJobRecentRuns is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetJobRecentRunsRequest]
func (_e *MockJobServiceClient_Expecter) GetJobRecentRuns(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetJobRecentRuns_Call {
	return &MockJobServiceClient_GetJobRecentRuns_Call{Call: _e.mock.On("GetJobRecentRuns", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetJobRecentRuns_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobRecentRunsRequest])) *MockJobServiceClient_GetJobRecentRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetJobRecentRunsRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetJobRecentRuns_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetJobRecentRunsResponse], _a1 error) *MockJobServiceClient_GetJobRecentRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetJobRecentRuns_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRecentRunsRequest]) (*connect.Response[mgmtv1alpha1.GetJobRecentRunsResponse], error)) *MockJobServiceClient_GetJobRecentRuns_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobRun provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetJobRun(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobRunRequest]) (*connect.Response[mgmtv1alpha1.GetJobRunResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJobRun")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetJobRunResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunRequest]) (*connect.Response[mgmtv1alpha1.GetJobRunResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunRequest]) *connect.Response[mgmtv1alpha1.GetJobRunResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetJobRunResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetJobRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobRun'
type MockJobServiceClient_GetJobRun_Call struct {
	*mock.Call
}

// GetJobRun is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetJobRunRequest]
func (_e *MockJobServiceClient_Expecter) GetJobRun(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetJobRun_Call {
	return &MockJobServiceClient_GetJobRun_Call{Call: _e.mock.On("GetJobRun", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetJobRun_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobRunRequest])) *MockJobServiceClient_GetJobRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetJobRunRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetJobRun_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetJobRunResponse], _a1 error) *MockJobServiceClient_GetJobRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetJobRun_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunRequest]) (*connect.Response[mgmtv1alpha1.GetJobRunResponse], error)) *MockJobServiceClient_GetJobRun_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobRunEvents provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetJobRunEvents(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobRunEventsRequest]) (*connect.Response[mgmtv1alpha1.GetJobRunEventsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJobRunEvents")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetJobRunEventsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunEventsRequest]) (*connect.Response[mgmtv1alpha1.GetJobRunEventsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunEventsRequest]) *connect.Response[mgmtv1alpha1.GetJobRunEventsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetJobRunEventsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunEventsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetJobRunEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobRunEvents'
type MockJobServiceClient_GetJobRunEvents_Call struct {
	*mock.Call
}

// GetJobRunEvents is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetJobRunEventsRequest]
func (_e *MockJobServiceClient_Expecter) GetJobRunEvents(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetJobRunEvents_Call {
	return &MockJobServiceClient_GetJobRunEvents_Call{Call: _e.mock.On("GetJobRunEvents", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetJobRunEvents_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobRunEventsRequest])) *MockJobServiceClient_GetJobRunEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetJobRunEventsRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetJobRunEvents_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetJobRunEventsResponse], _a1 error) *MockJobServiceClient_GetJobRunEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetJobRunEvents_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunEventsRequest]) (*connect.Response[mgmtv1alpha1.GetJobRunEventsResponse], error)) *MockJobServiceClient_GetJobRunEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobRunLogsStream provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetJobRunLogsStream(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobRunLogsStreamRequest]) (*connect.ServerStreamForClient[mgmtv1alpha1.GetJobRunLogsStreamResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJobRunLogsStream")
	}

	var r0 *connect.ServerStreamForClient[mgmtv1alpha1.GetJobRunLogsStreamResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunLogsStreamRequest]) (*connect.ServerStreamForClient[mgmtv1alpha1.GetJobRunLogsStreamResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunLogsStreamRequest]) *connect.ServerStreamForClient[mgmtv1alpha1.GetJobRunLogsStreamResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ServerStreamForClient[mgmtv1alpha1.GetJobRunLogsStreamResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunLogsStreamRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetJobRunLogsStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobRunLogsStream'
type MockJobServiceClient_GetJobRunLogsStream_Call struct {
	*mock.Call
}

// GetJobRunLogsStream is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetJobRunLogsStreamRequest]
func (_e *MockJobServiceClient_Expecter) GetJobRunLogsStream(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetJobRunLogsStream_Call {
	return &MockJobServiceClient_GetJobRunLogsStream_Call{Call: _e.mock.On("GetJobRunLogsStream", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetJobRunLogsStream_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobRunLogsStreamRequest])) *MockJobServiceClient_GetJobRunLogsStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetJobRunLogsStreamRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetJobRunLogsStream_Call) Return(_a0 *connect.ServerStreamForClient[mgmtv1alpha1.GetJobRunLogsStreamResponse], _a1 error) *MockJobServiceClient_GetJobRunLogsStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetJobRunLogsStream_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunLogsStreamRequest]) (*connect.ServerStreamForClient[mgmtv1alpha1.GetJobRunLogsStreamResponse], error)) *MockJobServiceClient_GetJobRunLogsStream_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobRuns provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetJobRuns(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobRunsRequest]) (*connect.Response[mgmtv1alpha1.GetJobRunsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJobRuns")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetJobRunsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunsRequest]) (*connect.Response[mgmtv1alpha1.GetJobRunsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunsRequest]) *connect.Response[mgmtv1alpha1.GetJobRunsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetJobRunsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetJobRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobRuns'
type MockJobServiceClient_GetJobRuns_Call struct {
	*mock.Call
}

// GetJobRuns is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetJobRunsRequest]
func (_e *MockJobServiceClient_Expecter) GetJobRuns(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetJobRuns_Call {
	return &MockJobServiceClient_GetJobRuns_Call{Call: _e.mock.On("GetJobRuns", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetJobRuns_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobRunsRequest])) *MockJobServiceClient_GetJobRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetJobRunsRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetJobRuns_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetJobRunsResponse], _a1 error) *MockJobServiceClient_GetJobRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetJobRuns_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetJobRunsRequest]) (*connect.Response[mgmtv1alpha1.GetJobRunsResponse], error)) *MockJobServiceClient_GetJobRuns_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobStatus provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetJobStatus(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobStatusRequest]) (*connect.Response[mgmtv1alpha1.GetJobStatusResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJobStatus")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetJobStatusResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobStatusRequest]) (*connect.Response[mgmtv1alpha1.GetJobStatusResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobStatusRequest]) *connect.Response[mgmtv1alpha1.GetJobStatusResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetJobStatusResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobStatusRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetJobStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobStatus'
type MockJobServiceClient_GetJobStatus_Call struct {
	*mock.Call
}

// GetJobStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetJobStatusRequest]
func (_e *MockJobServiceClient_Expecter) GetJobStatus(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetJobStatus_Call {
	return &MockJobServiceClient_GetJobStatus_Call{Call: _e.mock.On("GetJobStatus", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetJobStatus_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobStatusRequest])) *MockJobServiceClient_GetJobStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetJobStatusRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetJobStatus_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetJobStatusResponse], _a1 error) *MockJobServiceClient_GetJobStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetJobStatus_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetJobStatusRequest]) (*connect.Response[mgmtv1alpha1.GetJobStatusResponse], error)) *MockJobServiceClient_GetJobStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobStatuses provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetJobStatuses(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobStatusesRequest]) (*connect.Response[mgmtv1alpha1.GetJobStatusesResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJobStatuses")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetJobStatusesResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobStatusesRequest]) (*connect.Response[mgmtv1alpha1.GetJobStatusesResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobStatusesRequest]) *connect.Response[mgmtv1alpha1.GetJobStatusesResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetJobStatusesResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobStatusesRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetJobStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobStatuses'
type MockJobServiceClient_GetJobStatuses_Call struct {
	*mock.Call
}

// GetJobStatuses is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetJobStatusesRequest]
func (_e *MockJobServiceClient_Expecter) GetJobStatuses(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetJobStatuses_Call {
	return &MockJobServiceClient_GetJobStatuses_Call{Call: _e.mock.On("GetJobStatuses", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetJobStatuses_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobStatusesRequest])) *MockJobServiceClient_GetJobStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetJobStatusesRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetJobStatuses_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetJobStatusesResponse], _a1 error) *MockJobServiceClient_GetJobStatuses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetJobStatuses_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetJobStatusesRequest]) (*connect.Response[mgmtv1alpha1.GetJobStatusesResponse], error)) *MockJobServiceClient_GetJobStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobs provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetJobs(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobsRequest]) (*connect.Response[mgmtv1alpha1.GetJobsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJobs")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetJobsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobsRequest]) (*connect.Response[mgmtv1alpha1.GetJobsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobsRequest]) *connect.Response[mgmtv1alpha1.GetJobsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetJobsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetJobsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobs'
type MockJobServiceClient_GetJobs_Call struct {
	*mock.Call
}

// GetJobs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetJobsRequest]
func (_e *MockJobServiceClient_Expecter) GetJobs(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetJobs_Call {
	return &MockJobServiceClient_GetJobs_Call{Call: _e.mock.On("GetJobs", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetJobs_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetJobsRequest])) *MockJobServiceClient_GetJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetJobsRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetJobs_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetJobsResponse], _a1 error) *MockJobServiceClient_GetJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetJobs_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetJobsRequest]) (*connect.Response[mgmtv1alpha1.GetJobsResponse], error)) *MockJobServiceClient_GetJobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetRunContext provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) GetRunContext(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetRunContextRequest]) (*connect.Response[mgmtv1alpha1.GetRunContextResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRunContext")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetRunContextResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetRunContextRequest]) (*connect.Response[mgmtv1alpha1.GetRunContextResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetRunContextRequest]) *connect.Response[mgmtv1alpha1.GetRunContextResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetRunContextResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetRunContextRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_GetRunContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRunContext'
type MockJobServiceClient_GetRunContext_Call struct {
	*mock.Call
}

// GetRunContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetRunContextRequest]
func (_e *MockJobServiceClient_Expecter) GetRunContext(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_GetRunContext_Call {
	return &MockJobServiceClient_GetRunContext_Call{Call: _e.mock.On("GetRunContext", _a0, _a1)}
}

func (_c *MockJobServiceClient_GetRunContext_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetRunContextRequest])) *MockJobServiceClient_GetRunContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetRunContextRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_GetRunContext_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetRunContextResponse], _a1 error) *MockJobServiceClient_GetRunContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_GetRunContext_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetRunContextRequest]) (*connect.Response[mgmtv1alpha1.GetRunContextResponse], error)) *MockJobServiceClient_GetRunContext_Call {
	_c.Call.Return(run)
	return _c
}

// IsJobHookNameAvailable provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) IsJobHookNameAvailable(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.IsJobHookNameAvailableRequest]) (*connect.Response[mgmtv1alpha1.IsJobHookNameAvailableResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IsJobHookNameAvailable")
	}

	var r0 *connect.Response[mgmtv1alpha1.IsJobHookNameAvailableResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.IsJobHookNameAvailableRequest]) (*connect.Response[mgmtv1alpha1.IsJobHookNameAvailableResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.IsJobHookNameAvailableRequest]) *connect.Response[mgmtv1alpha1.IsJobHookNameAvailableResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.IsJobHookNameAvailableResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.IsJobHookNameAvailableRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_IsJobHookNameAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsJobHookNameAvailable'
type MockJobServiceClient_IsJobHookNameAvailable_Call struct {
	*mock.Call
}

// IsJobHookNameAvailable is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.IsJobHookNameAvailableRequest]
func (_e *MockJobServiceClient_Expecter) IsJobHookNameAvailable(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_IsJobHookNameAvailable_Call {
	return &MockJobServiceClient_IsJobHookNameAvailable_Call{Call: _e.mock.On("IsJobHookNameAvailable", _a0, _a1)}
}

func (_c *MockJobServiceClient_IsJobHookNameAvailable_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.IsJobHookNameAvailableRequest])) *MockJobServiceClient_IsJobHookNameAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.IsJobHookNameAvailableRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_IsJobHookNameAvailable_Call) Return(_a0 *connect.Response[mgmtv1alpha1.IsJobHookNameAvailableResponse], _a1 error) *MockJobServiceClient_IsJobHookNameAvailable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_IsJobHookNameAvailable_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.IsJobHookNameAvailableRequest]) (*connect.Response[mgmtv1alpha1.IsJobHookNameAvailableResponse], error)) *MockJobServiceClient_IsJobHookNameAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// IsJobNameAvailable provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) IsJobNameAvailable(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.IsJobNameAvailableRequest]) (*connect.Response[mgmtv1alpha1.IsJobNameAvailableResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IsJobNameAvailable")
	}

	var r0 *connect.Response[mgmtv1alpha1.IsJobNameAvailableResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.IsJobNameAvailableRequest]) (*connect.Response[mgmtv1alpha1.IsJobNameAvailableResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.IsJobNameAvailableRequest]) *connect.Response[mgmtv1alpha1.IsJobNameAvailableResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.IsJobNameAvailableResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.IsJobNameAvailableRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_IsJobNameAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsJobNameAvailable'
type MockJobServiceClient_IsJobNameAvailable_Call struct {
	*mock.Call
}

// IsJobNameAvailable is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.IsJobNameAvailableRequest]
func (_e *MockJobServiceClient_Expecter) IsJobNameAvailable(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_IsJobNameAvailable_Call {
	return &MockJobServiceClient_IsJobNameAvailable_Call{Call: _e.mock.On("IsJobNameAvailable", _a0, _a1)}
}

func (_c *MockJobServiceClient_IsJobNameAvailable_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.IsJobNameAvailableRequest])) *MockJobServiceClient_IsJobNameAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.IsJobNameAvailableRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_IsJobNameAvailable_Call) Return(_a0 *connect.Response[mgmtv1alpha1.IsJobNameAvailableResponse], _a1 error) *MockJobServiceClient_IsJobNameAvailable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_IsJobNameAvailable_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.IsJobNameAvailableRequest]) (*connect.Response[mgmtv1alpha1.IsJobNameAvailableResponse], error)) *MockJobServiceClient_IsJobNameAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// PauseJob provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) PauseJob(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.PauseJobRequest]) (*connect.Response[mgmtv1alpha1.PauseJobResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PauseJob")
	}

	var r0 *connect.Response[mgmtv1alpha1.PauseJobResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.PauseJobRequest]) (*connect.Response[mgmtv1alpha1.PauseJobResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.PauseJobRequest]) *connect.Response[mgmtv1alpha1.PauseJobResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.PauseJobResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.PauseJobRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_PauseJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PauseJob'
type MockJobServiceClient_PauseJob_Call struct {
	*mock.Call
}

// PauseJob is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.PauseJobRequest]
func (_e *MockJobServiceClient_Expecter) PauseJob(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_PauseJob_Call {
	return &MockJobServiceClient_PauseJob_Call{Call: _e.mock.On("PauseJob", _a0, _a1)}
}

func (_c *MockJobServiceClient_PauseJob_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.PauseJobRequest])) *MockJobServiceClient_PauseJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.PauseJobRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_PauseJob_Call) Return(_a0 *connect.Response[mgmtv1alpha1.PauseJobResponse], _a1 error) *MockJobServiceClient_PauseJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_PauseJob_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.PauseJobRequest]) (*connect.Response[mgmtv1alpha1.PauseJobResponse], error)) *MockJobServiceClient_PauseJob_Call {
	_c.Call.Return(run)
	return _c
}

// SetJobHookEnabled provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) SetJobHookEnabled(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetJobHookEnabledRequest]) (*connect.Response[mgmtv1alpha1.SetJobHookEnabledResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetJobHookEnabled")
	}

	var r0 *connect.Response[mgmtv1alpha1.SetJobHookEnabledResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetJobHookEnabledRequest]) (*connect.Response[mgmtv1alpha1.SetJobHookEnabledResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetJobHookEnabledRequest]) *connect.Response[mgmtv1alpha1.SetJobHookEnabledResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.SetJobHookEnabledResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.SetJobHookEnabledRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_SetJobHookEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJobHookEnabled'
type MockJobServiceClient_SetJobHookEnabled_Call struct {
	*mock.Call
}

// SetJobHookEnabled is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.SetJobHookEnabledRequest]
func (_e *MockJobServiceClient_Expecter) SetJobHookEnabled(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_SetJobHookEnabled_Call {
	return &MockJobServiceClient_SetJobHookEnabled_Call{Call: _e.mock.On("SetJobHookEnabled", _a0, _a1)}
}

func (_c *MockJobServiceClient_SetJobHookEnabled_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetJobHookEnabledRequest])) *MockJobServiceClient_SetJobHookEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.SetJobHookEnabledRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_SetJobHookEnabled_Call) Return(_a0 *connect.Response[mgmtv1alpha1.SetJobHookEnabledResponse], _a1 error) *MockJobServiceClient_SetJobHookEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_SetJobHookEnabled_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.SetJobHookEnabledRequest]) (*connect.Response[mgmtv1alpha1.SetJobHookEnabledResponse], error)) *MockJobServiceClient_SetJobHookEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// SetJobSourceSqlConnectionSubsets provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) SetJobSourceSqlConnectionSubsets(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsRequest]) (*connect.Response[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetJobSourceSqlConnectionSubsets")
	}

	var r0 *connect.Response[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsRequest]) (*connect.Response[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsRequest]) *connect.Response[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_SetJobSourceSqlConnectionSubsets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJobSourceSqlConnectionSubsets'
type MockJobServiceClient_SetJobSourceSqlConnectionSubsets_Call struct {
	*mock.Call
}

// SetJobSourceSqlConnectionSubsets is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsRequest]
func (_e *MockJobServiceClient_Expecter) SetJobSourceSqlConnectionSubsets(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_SetJobSourceSqlConnectionSubsets_Call {
	return &MockJobServiceClient_SetJobSourceSqlConnectionSubsets_Call{Call: _e.mock.On("SetJobSourceSqlConnectionSubsets", _a0, _a1)}
}

func (_c *MockJobServiceClient_SetJobSourceSqlConnectionSubsets_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsRequest])) *MockJobServiceClient_SetJobSourceSqlConnectionSubsets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_SetJobSourceSqlConnectionSubsets_Call) Return(_a0 *connect.Response[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsResponse], _a1 error) *MockJobServiceClient_SetJobSourceSqlConnectionSubsets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_SetJobSourceSqlConnectionSubsets_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsRequest]) (*connect.Response[mgmtv1alpha1.SetJobSourceSqlConnectionSubsetsResponse], error)) *MockJobServiceClient_SetJobSourceSqlConnectionSubsets_Call {
	_c.Call.Return(run)
	return _c
}

// SetJobSyncOptions provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) SetJobSyncOptions(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetJobSyncOptionsRequest]) (*connect.Response[mgmtv1alpha1.SetJobSyncOptionsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetJobSyncOptions")
	}

	var r0 *connect.Response[mgmtv1alpha1.SetJobSyncOptionsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetJobSyncOptionsRequest]) (*connect.Response[mgmtv1alpha1.SetJobSyncOptionsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetJobSyncOptionsRequest]) *connect.Response[mgmtv1alpha1.SetJobSyncOptionsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.SetJobSyncOptionsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.SetJobSyncOptionsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_SetJobSyncOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJobSyncOptions'
type MockJobServiceClient_SetJobSyncOptions_Call struct {
	*mock.Call
}

// SetJobSyncOptions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.SetJobSyncOptionsRequest]
func (_e *MockJobServiceClient_Expecter) SetJobSyncOptions(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_SetJobSyncOptions_Call {
	return &MockJobServiceClient_SetJobSyncOptions_Call{Call: _e.mock.On("SetJobSyncOptions", _a0, _a1)}
}

func (_c *MockJobServiceClient_SetJobSyncOptions_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetJobSyncOptionsRequest])) *MockJobServiceClient_SetJobSyncOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.SetJobSyncOptionsRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_SetJobSyncOptions_Call) Return(_a0 *connect.Response[mgmtv1alpha1.SetJobSyncOptionsResponse], _a1 error) *MockJobServiceClient_SetJobSyncOptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_SetJobSyncOptions_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.SetJobSyncOptionsRequest]) (*connect.Response[mgmtv1alpha1.SetJobSyncOptionsResponse], error)) *MockJobServiceClient_SetJobSyncOptions_Call {
	_c.Call.Return(run)
	return _c
}

// SetJobWorkflowOptions provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) SetJobWorkflowOptions(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetJobWorkflowOptionsRequest]) (*connect.Response[mgmtv1alpha1.SetJobWorkflowOptionsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetJobWorkflowOptions")
	}

	var r0 *connect.Response[mgmtv1alpha1.SetJobWorkflowOptionsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetJobWorkflowOptionsRequest]) (*connect.Response[mgmtv1alpha1.SetJobWorkflowOptionsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetJobWorkflowOptionsRequest]) *connect.Response[mgmtv1alpha1.SetJobWorkflowOptionsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.SetJobWorkflowOptionsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.SetJobWorkflowOptionsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_SetJobWorkflowOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJobWorkflowOptions'
type MockJobServiceClient_SetJobWorkflowOptions_Call struct {
	*mock.Call
}

// SetJobWorkflowOptions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.SetJobWorkflowOptionsRequest]
func (_e *MockJobServiceClient_Expecter) SetJobWorkflowOptions(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_SetJobWorkflowOptions_Call {
	return &MockJobServiceClient_SetJobWorkflowOptions_Call{Call: _e.mock.On("SetJobWorkflowOptions", _a0, _a1)}
}

func (_c *MockJobServiceClient_SetJobWorkflowOptions_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetJobWorkflowOptionsRequest])) *MockJobServiceClient_SetJobWorkflowOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.SetJobWorkflowOptionsRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_SetJobWorkflowOptions_Call) Return(_a0 *connect.Response[mgmtv1alpha1.SetJobWorkflowOptionsResponse], _a1 error) *MockJobServiceClient_SetJobWorkflowOptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_SetJobWorkflowOptions_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.SetJobWorkflowOptionsRequest]) (*connect.Response[mgmtv1alpha1.SetJobWorkflowOptionsResponse], error)) *MockJobServiceClient_SetJobWorkflowOptions_Call {
	_c.Call.Return(run)
	return _c
}

// SetRunContext provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) SetRunContext(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetRunContextRequest]) (*connect.Response[mgmtv1alpha1.SetRunContextResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetRunContext")
	}

	var r0 *connect.Response[mgmtv1alpha1.SetRunContextResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetRunContextRequest]) (*connect.Response[mgmtv1alpha1.SetRunContextResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetRunContextRequest]) *connect.Response[mgmtv1alpha1.SetRunContextResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.SetRunContextResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.SetRunContextRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_SetRunContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRunContext'
type MockJobServiceClient_SetRunContext_Call struct {
	*mock.Call
}

// SetRunContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.SetRunContextRequest]
func (_e *MockJobServiceClient_Expecter) SetRunContext(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_SetRunContext_Call {
	return &MockJobServiceClient_SetRunContext_Call{Call: _e.mock.On("SetRunContext", _a0, _a1)}
}

func (_c *MockJobServiceClient_SetRunContext_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetRunContextRequest])) *MockJobServiceClient_SetRunContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.SetRunContextRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_SetRunContext_Call) Return(_a0 *connect.Response[mgmtv1alpha1.SetRunContextResponse], _a1 error) *MockJobServiceClient_SetRunContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_SetRunContext_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.SetRunContextRequest]) (*connect.Response[mgmtv1alpha1.SetRunContextResponse], error)) *MockJobServiceClient_SetRunContext_Call {
	_c.Call.Return(run)
	return _c
}

// SetRunContexts provides a mock function with given fields: _a0
func (_m *MockJobServiceClient) SetRunContexts(_a0 context.Context) *connect.ClientStreamForClient[mgmtv1alpha1.SetRunContextsRequest, mgmtv1alpha1.SetRunContextsResponse] {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetRunContexts")
	}

	var r0 *connect.ClientStreamForClient[mgmtv1alpha1.SetRunContextsRequest, mgmtv1alpha1.SetRunContextsResponse]
	if rf, ok := ret.Get(0).(func(context.Context) *connect.ClientStreamForClient[mgmtv1alpha1.SetRunContextsRequest, mgmtv1alpha1.SetRunContextsResponse]); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ClientStreamForClient[mgmtv1alpha1.SetRunContextsRequest, mgmtv1alpha1.SetRunContextsResponse])
		}
	}

	return r0
}

// MockJobServiceClient_SetRunContexts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRunContexts'
type MockJobServiceClient_SetRunContexts_Call struct {
	*mock.Call
}

// SetRunContexts is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockJobServiceClient_Expecter) SetRunContexts(_a0 interface{}) *MockJobServiceClient_SetRunContexts_Call {
	return &MockJobServiceClient_SetRunContexts_Call{Call: _e.mock.On("SetRunContexts", _a0)}
}

func (_c *MockJobServiceClient_SetRunContexts_Call) Run(run func(_a0 context.Context)) *MockJobServiceClient_SetRunContexts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockJobServiceClient_SetRunContexts_Call) Return(_a0 *connect.ClientStreamForClient[mgmtv1alpha1.SetRunContextsRequest, mgmtv1alpha1.SetRunContextsResponse]) *MockJobServiceClient_SetRunContexts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobServiceClient_SetRunContexts_Call) RunAndReturn(run func(context.Context) *connect.ClientStreamForClient[mgmtv1alpha1.SetRunContextsRequest, mgmtv1alpha1.SetRunContextsResponse]) *MockJobServiceClient_SetRunContexts_Call {
	_c.Call.Return(run)
	return _c
}

// TerminateJobRun provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) TerminateJobRun(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.TerminateJobRunRequest]) (*connect.Response[mgmtv1alpha1.TerminateJobRunResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TerminateJobRun")
	}

	var r0 *connect.Response[mgmtv1alpha1.TerminateJobRunResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.TerminateJobRunRequest]) (*connect.Response[mgmtv1alpha1.TerminateJobRunResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.TerminateJobRunRequest]) *connect.Response[mgmtv1alpha1.TerminateJobRunResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.TerminateJobRunResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.TerminateJobRunRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_TerminateJobRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminateJobRun'
type MockJobServiceClient_TerminateJobRun_Call struct {
	*mock.Call
}

// TerminateJobRun is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.TerminateJobRunRequest]
func (_e *MockJobServiceClient_Expecter) TerminateJobRun(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_TerminateJobRun_Call {
	return &MockJobServiceClient_TerminateJobRun_Call{Call: _e.mock.On("TerminateJobRun", _a0, _a1)}
}

func (_c *MockJobServiceClient_TerminateJobRun_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.TerminateJobRunRequest])) *MockJobServiceClient_TerminateJobRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.TerminateJobRunRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_TerminateJobRun_Call) Return(_a0 *connect.Response[mgmtv1alpha1.TerminateJobRunResponse], _a1 error) *MockJobServiceClient_TerminateJobRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_TerminateJobRun_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.TerminateJobRunRequest]) (*connect.Response[mgmtv1alpha1.TerminateJobRunResponse], error)) *MockJobServiceClient_TerminateJobRun_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJobDestinationConnection provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) UpdateJobDestinationConnection(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.UpdateJobDestinationConnectionRequest]) (*connect.Response[mgmtv1alpha1.UpdateJobDestinationConnectionResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobDestinationConnection")
	}

	var r0 *connect.Response[mgmtv1alpha1.UpdateJobDestinationConnectionResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobDestinationConnectionRequest]) (*connect.Response[mgmtv1alpha1.UpdateJobDestinationConnectionResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobDestinationConnectionRequest]) *connect.Response[mgmtv1alpha1.UpdateJobDestinationConnectionResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.UpdateJobDestinationConnectionResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobDestinationConnectionRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_UpdateJobDestinationConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJobDestinationConnection'
type MockJobServiceClient_UpdateJobDestinationConnection_Call struct {
	*mock.Call
}

// UpdateJobDestinationConnection is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.UpdateJobDestinationConnectionRequest]
func (_e *MockJobServiceClient_Expecter) UpdateJobDestinationConnection(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_UpdateJobDestinationConnection_Call {
	return &MockJobServiceClient_UpdateJobDestinationConnection_Call{Call: _e.mock.On("UpdateJobDestinationConnection", _a0, _a1)}
}

func (_c *MockJobServiceClient_UpdateJobDestinationConnection_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.UpdateJobDestinationConnectionRequest])) *MockJobServiceClient_UpdateJobDestinationConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.UpdateJobDestinationConnectionRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_UpdateJobDestinationConnection_Call) Return(_a0 *connect.Response[mgmtv1alpha1.UpdateJobDestinationConnectionResponse], _a1 error) *MockJobServiceClient_UpdateJobDestinationConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_UpdateJobDestinationConnection_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobDestinationConnectionRequest]) (*connect.Response[mgmtv1alpha1.UpdateJobDestinationConnectionResponse], error)) *MockJobServiceClient_UpdateJobDestinationConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJobHook provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) UpdateJobHook(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.UpdateJobHookRequest]) (*connect.Response[mgmtv1alpha1.UpdateJobHookResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobHook")
	}

	var r0 *connect.Response[mgmtv1alpha1.UpdateJobHookResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobHookRequest]) (*connect.Response[mgmtv1alpha1.UpdateJobHookResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobHookRequest]) *connect.Response[mgmtv1alpha1.UpdateJobHookResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.UpdateJobHookResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobHookRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_UpdateJobHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJobHook'
type MockJobServiceClient_UpdateJobHook_Call struct {
	*mock.Call
}

// UpdateJobHook is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.UpdateJobHookRequest]
func (_e *MockJobServiceClient_Expecter) UpdateJobHook(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_UpdateJobHook_Call {
	return &MockJobServiceClient_UpdateJobHook_Call{Call: _e.mock.On("UpdateJobHook", _a0, _a1)}
}

func (_c *MockJobServiceClient_UpdateJobHook_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.UpdateJobHookRequest])) *MockJobServiceClient_UpdateJobHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.UpdateJobHookRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_UpdateJobHook_Call) Return(_a0 *connect.Response[mgmtv1alpha1.UpdateJobHookResponse], _a1 error) *MockJobServiceClient_UpdateJobHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_UpdateJobHook_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobHookRequest]) (*connect.Response[mgmtv1alpha1.UpdateJobHookResponse], error)) *MockJobServiceClient_UpdateJobHook_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJobSchedule provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) UpdateJobSchedule(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.UpdateJobScheduleRequest]) (*connect.Response[mgmtv1alpha1.UpdateJobScheduleResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobSchedule")
	}

	var r0 *connect.Response[mgmtv1alpha1.UpdateJobScheduleResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobScheduleRequest]) (*connect.Response[mgmtv1alpha1.UpdateJobScheduleResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobScheduleRequest]) *connect.Response[mgmtv1alpha1.UpdateJobScheduleResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.UpdateJobScheduleResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobScheduleRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_UpdateJobSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJobSchedule'
type MockJobServiceClient_UpdateJobSchedule_Call struct {
	*mock.Call
}

// UpdateJobSchedule is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.UpdateJobScheduleRequest]
func (_e *MockJobServiceClient_Expecter) UpdateJobSchedule(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_UpdateJobSchedule_Call {
	return &MockJobServiceClient_UpdateJobSchedule_Call{Call: _e.mock.On("UpdateJobSchedule", _a0, _a1)}
}

func (_c *MockJobServiceClient_UpdateJobSchedule_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.UpdateJobScheduleRequest])) *MockJobServiceClient_UpdateJobSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.UpdateJobScheduleRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_UpdateJobSchedule_Call) Return(_a0 *connect.Response[mgmtv1alpha1.UpdateJobScheduleResponse], _a1 error) *MockJobServiceClient_UpdateJobSchedule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_UpdateJobSchedule_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobScheduleRequest]) (*connect.Response[mgmtv1alpha1.UpdateJobScheduleResponse], error)) *MockJobServiceClient_UpdateJobSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateJobSourceConnection provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) UpdateJobSourceConnection(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.UpdateJobSourceConnectionRequest]) (*connect.Response[mgmtv1alpha1.UpdateJobSourceConnectionResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobSourceConnection")
	}

	var r0 *connect.Response[mgmtv1alpha1.UpdateJobSourceConnectionResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobSourceConnectionRequest]) (*connect.Response[mgmtv1alpha1.UpdateJobSourceConnectionResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobSourceConnectionRequest]) *connect.Response[mgmtv1alpha1.UpdateJobSourceConnectionResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.UpdateJobSourceConnectionResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobSourceConnectionRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_UpdateJobSourceConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateJobSourceConnection'
type MockJobServiceClient_UpdateJobSourceConnection_Call struct {
	*mock.Call
}

// UpdateJobSourceConnection is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.UpdateJobSourceConnectionRequest]
func (_e *MockJobServiceClient_Expecter) UpdateJobSourceConnection(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_UpdateJobSourceConnection_Call {
	return &MockJobServiceClient_UpdateJobSourceConnection_Call{Call: _e.mock.On("UpdateJobSourceConnection", _a0, _a1)}
}

func (_c *MockJobServiceClient_UpdateJobSourceConnection_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.UpdateJobSourceConnectionRequest])) *MockJobServiceClient_UpdateJobSourceConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.UpdateJobSourceConnectionRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_UpdateJobSourceConnection_Call) Return(_a0 *connect.Response[mgmtv1alpha1.UpdateJobSourceConnectionResponse], _a1 error) *MockJobServiceClient_UpdateJobSourceConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_UpdateJobSourceConnection_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.UpdateJobSourceConnectionRequest]) (*connect.Response[mgmtv1alpha1.UpdateJobSourceConnectionResponse], error)) *MockJobServiceClient_UpdateJobSourceConnection_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateJobMappings provides a mock function with given fields: _a0, _a1
func (_m *MockJobServiceClient) ValidateJobMappings(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.ValidateJobMappingsRequest]) (*connect.Response[mgmtv1alpha1.ValidateJobMappingsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ValidateJobMappings")
	}

	var r0 *connect.Response[mgmtv1alpha1.ValidateJobMappingsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.ValidateJobMappingsRequest]) (*connect.Response[mgmtv1alpha1.ValidateJobMappingsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.ValidateJobMappingsRequest]) *connect.Response[mgmtv1alpha1.ValidateJobMappingsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.ValidateJobMappingsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.ValidateJobMappingsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobServiceClient_ValidateJobMappings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateJobMappings'
type MockJobServiceClient_ValidateJobMappings_Call struct {
	*mock.Call
}

// ValidateJobMappings is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.ValidateJobMappingsRequest]
func (_e *MockJobServiceClient_Expecter) ValidateJobMappings(_a0 interface{}, _a1 interface{}) *MockJobServiceClient_ValidateJobMappings_Call {
	return &MockJobServiceClient_ValidateJobMappings_Call{Call: _e.mock.On("ValidateJobMappings", _a0, _a1)}
}

func (_c *MockJobServiceClient_ValidateJobMappings_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.ValidateJobMappingsRequest])) *MockJobServiceClient_ValidateJobMappings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.ValidateJobMappingsRequest]))
	})
	return _c
}

func (_c *MockJobServiceClient_ValidateJobMappings_Call) Return(_a0 *connect.Response[mgmtv1alpha1.ValidateJobMappingsResponse], _a1 error) *MockJobServiceClient_ValidateJobMappings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceClient_ValidateJobMappings_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.ValidateJobMappingsRequest]) (*connect.Response[mgmtv1alpha1.ValidateJobMappingsResponse], error)) *MockJobServiceClient_ValidateJobMappings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobServiceClient creates a new instance of MockJobServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobServiceClient {
	mock := &MockJobServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
