// Code generated by mockery. DO NOT EDIT.

package mgmtv1alpha1connect

import (
	context "context"

	connect "connectrpc.com/connect"

	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockAccountHookServiceClient is an autogenerated mock type for the AccountHookServiceClient type
type MockAccountHookServiceClient struct {
	mock.Mock
}

type MockAccountHookServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountHookServiceClient) EXPECT() *MockAccountHookServiceClient_Expecter {
	return &MockAccountHookServiceClient_Expecter{mock: &_m.Mock}
}

// CreateAccountHook provides a mock function with given fields: _a0, _a1
func (_m *MockAccountHookServiceClient) CreateAccountHook(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CreateAccountHookRequest]) (*connect.Response[mgmtv1alpha1.CreateAccountHookResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountHook")
	}

	var r0 *connect.Response[mgmtv1alpha1.CreateAccountHookResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateAccountHookRequest]) (*connect.Response[mgmtv1alpha1.CreateAccountHookResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateAccountHookRequest]) *connect.Response[mgmtv1alpha1.CreateAccountHookResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.CreateAccountHookResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateAccountHookRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountHookServiceClient_CreateAccountHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccountHook'
type MockAccountHookServiceClient_CreateAccountHook_Call struct {
	*mock.Call
}

// CreateAccountHook is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.CreateAccountHookRequest]
func (_e *MockAccountHookServiceClient_Expecter) CreateAccountHook(_a0 interface{}, _a1 interface{}) *MockAccountHookServiceClient_CreateAccountHook_Call {
	return &MockAccountHookServiceClient_CreateAccountHook_Call{Call: _e.mock.On("CreateAccountHook", _a0, _a1)}
}

func (_c *MockAccountHookServiceClient_CreateAccountHook_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CreateAccountHookRequest])) *MockAccountHookServiceClient_CreateAccountHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.CreateAccountHookRequest]))
	})
	return _c
}

func (_c *MockAccountHookServiceClient_CreateAccountHook_Call) Return(_a0 *connect.Response[mgmtv1alpha1.CreateAccountHookResponse], _a1 error) *MockAccountHookServiceClient_CreateAccountHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountHookServiceClient_CreateAccountHook_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.CreateAccountHookRequest]) (*connect.Response[mgmtv1alpha1.CreateAccountHookResponse], error)) *MockAccountHookServiceClient_CreateAccountHook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccountHook provides a mock function with given fields: _a0, _a1
func (_m *MockAccountHookServiceClient) DeleteAccountHook(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.DeleteAccountHookRequest]) (*connect.Response[mgmtv1alpha1.DeleteAccountHookResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccountHook")
	}

	var r0 *connect.Response[mgmtv1alpha1.DeleteAccountHookResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteAccountHookRequest]) (*connect.Response[mgmtv1alpha1.DeleteAccountHookResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteAccountHookRequest]) *connect.Response[mgmtv1alpha1.DeleteAccountHookResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.DeleteAccountHookResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteAccountHookRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountHookServiceClient_DeleteAccountHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccountHook'
type MockAccountHookServiceClient_DeleteAccountHook_Call struct {
	*mock.Call
}

// DeleteAccountHook is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.DeleteAccountHookRequest]
func (_e *MockAccountHookServiceClient_Expecter) DeleteAccountHook(_a0 interface{}, _a1 interface{}) *MockAccountHookServiceClient_DeleteAccountHook_Call {
	return &MockAccountHookServiceClient_DeleteAccountHook_Call{Call: _e.mock.On("DeleteAccountHook", _a0, _a1)}
}

func (_c *MockAccountHookServiceClient_DeleteAccountHook_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.DeleteAccountHookRequest])) *MockAccountHookServiceClient_DeleteAccountHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.DeleteAccountHookRequest]))
	})
	return _c
}

func (_c *MockAccountHookServiceClient_DeleteAccountHook_Call) Return(_a0 *connect.Response[mgmtv1alpha1.DeleteAccountHookResponse], _a1 error) *MockAccountHookServiceClient_DeleteAccountHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountHookServiceClient_DeleteAccountHook_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.DeleteAccountHookRequest]) (*connect.Response[mgmtv1alpha1.DeleteAccountHookResponse], error)) *MockAccountHookServiceClient_DeleteAccountHook_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountHook provides a mock function with given fields: _a0, _a1
func (_m *MockAccountHookServiceClient) GetAccountHook(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetAccountHookRequest]) (*connect.Response[mgmtv1alpha1.GetAccountHookResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountHook")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetAccountHookResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAccountHookRequest]) (*connect.Response[mgmtv1alpha1.GetAccountHookResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAccountHookRequest]) *connect.Response[mgmtv1alpha1.GetAccountHookResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetAccountHookResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAccountHookRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountHookServiceClient_GetAccountHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountHook'
type MockAccountHookServiceClient_GetAccountHook_Call struct {
	*mock.Call
}

// GetAccountHook is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetAccountHookRequest]
func (_e *MockAccountHookServiceClient_Expecter) GetAccountHook(_a0 interface{}, _a1 interface{}) *MockAccountHookServiceClient_GetAccountHook_Call {
	return &MockAccountHookServiceClient_GetAccountHook_Call{Call: _e.mock.On("GetAccountHook", _a0, _a1)}
}

func (_c *MockAccountHookServiceClient_GetAccountHook_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetAccountHookRequest])) *MockAccountHookServiceClient_GetAccountHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetAccountHookRequest]))
	})
	return _c
}

func (_c *MockAccountHookServiceClient_GetAccountHook_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetAccountHookResponse], _a1 error) *MockAccountHookServiceClient_GetAccountHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountHookServiceClient_GetAccountHook_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetAccountHookRequest]) (*connect.Response[mgmtv1alpha1.GetAccountHookResponse], error)) *MockAccountHookServiceClient_GetAccountHook_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountHooks provides a mock function with given fields: _a0, _a1
func (_m *MockAccountHookServiceClient) GetAccountHooks(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetAccountHooksRequest]) (*connect.Response[mgmtv1alpha1.GetAccountHooksResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountHooks")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetAccountHooksResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAccountHooksRequest]) (*connect.Response[mgmtv1alpha1.GetAccountHooksResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAccountHooksRequest]) *connect.Response[mgmtv1alpha1.GetAccountHooksResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetAccountHooksResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAccountHooksRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountHookServiceClient_GetAccountHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountHooks'
type MockAccountHookServiceClient_GetAccountHooks_Call struct {
	*mock.Call
}

// GetAccountHooks is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetAccountHooksRequest]
func (_e *MockAccountHookServiceClient_Expecter) GetAccountHooks(_a0 interface{}, _a1 interface{}) *MockAccountHookServiceClient_GetAccountHooks_Call {
	return &MockAccountHookServiceClient_GetAccountHooks_Call{Call: _e.mock.On("GetAccountHooks", _a0, _a1)}
}

func (_c *MockAccountHookServiceClient_GetAccountHooks_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetAccountHooksRequest])) *MockAccountHookServiceClient_GetAccountHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetAccountHooksRequest]))
	})
	return _c
}

func (_c *MockAccountHookServiceClient_GetAccountHooks_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetAccountHooksResponse], _a1 error) *MockAccountHookServiceClient_GetAccountHooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountHookServiceClient_GetAccountHooks_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetAccountHooksRequest]) (*connect.Response[mgmtv1alpha1.GetAccountHooksResponse], error)) *MockAccountHookServiceClient_GetAccountHooks_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveAccountHooksByEvent provides a mock function with given fields: _a0, _a1
func (_m *MockAccountHookServiceClient) GetActiveAccountHooksByEvent(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetActiveAccountHooksByEventRequest]) (*connect.Response[mgmtv1alpha1.GetActiveAccountHooksByEventResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveAccountHooksByEvent")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetActiveAccountHooksByEventResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetActiveAccountHooksByEventRequest]) (*connect.Response[mgmtv1alpha1.GetActiveAccountHooksByEventResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetActiveAccountHooksByEventRequest]) *connect.Response[mgmtv1alpha1.GetActiveAccountHooksByEventResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetActiveAccountHooksByEventResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetActiveAccountHooksByEventRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountHookServiceClient_GetActiveAccountHooksByEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveAccountHooksByEvent'
type MockAccountHookServiceClient_GetActiveAccountHooksByEvent_Call struct {
	*mock.Call
}

// GetActiveAccountHooksByEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetActiveAccountHooksByEventRequest]
func (_e *MockAccountHookServiceClient_Expecter) GetActiveAccountHooksByEvent(_a0 interface{}, _a1 interface{}) *MockAccountHookServiceClient_GetActiveAccountHooksByEvent_Call {
	return &MockAccountHookServiceClient_GetActiveAccountHooksByEvent_Call{Call: _e.mock.On("GetActiveAccountHooksByEvent", _a0, _a1)}
}

func (_c *MockAccountHookServiceClient_GetActiveAccountHooksByEvent_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetActiveAccountHooksByEventRequest])) *MockAccountHookServiceClient_GetActiveAccountHooksByEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetActiveAccountHooksByEventRequest]))
	})
	return _c
}

func (_c *MockAccountHookServiceClient_GetActiveAccountHooksByEvent_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetActiveAccountHooksByEventResponse], _a1 error) *MockAccountHookServiceClient_GetActiveAccountHooksByEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountHookServiceClient_GetActiveAccountHooksByEvent_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetActiveAccountHooksByEventRequest]) (*connect.Response[mgmtv1alpha1.GetActiveAccountHooksByEventResponse], error)) *MockAccountHookServiceClient_GetActiveAccountHooksByEvent_Call {
	_c.Call.Return(run)
	return _c
}

// IsAccountHookNameAvailable provides a mock function with given fields: _a0, _a1
func (_m *MockAccountHookServiceClient) IsAccountHookNameAvailable(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.IsAccountHookNameAvailableRequest]) (*connect.Response[mgmtv1alpha1.IsAccountHookNameAvailableResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IsAccountHookNameAvailable")
	}

	var r0 *connect.Response[mgmtv1alpha1.IsAccountHookNameAvailableResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.IsAccountHookNameAvailableRequest]) (*connect.Response[mgmtv1alpha1.IsAccountHookNameAvailableResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.IsAccountHookNameAvailableRequest]) *connect.Response[mgmtv1alpha1.IsAccountHookNameAvailableResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.IsAccountHookNameAvailableResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.IsAccountHookNameAvailableRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountHookServiceClient_IsAccountHookNameAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAccountHookNameAvailable'
type MockAccountHookServiceClient_IsAccountHookNameAvailable_Call struct {
	*mock.Call
}

// IsAccountHookNameAvailable is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.IsAccountHookNameAvailableRequest]
func (_e *MockAccountHookServiceClient_Expecter) IsAccountHookNameAvailable(_a0 interface{}, _a1 interface{}) *MockAccountHookServiceClient_IsAccountHookNameAvailable_Call {
	return &MockAccountHookServiceClient_IsAccountHookNameAvailable_Call{Call: _e.mock.On("IsAccountHookNameAvailable", _a0, _a1)}
}

func (_c *MockAccountHookServiceClient_IsAccountHookNameAvailable_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.IsAccountHookNameAvailableRequest])) *MockAccountHookServiceClient_IsAccountHookNameAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.IsAccountHookNameAvailableRequest]))
	})
	return _c
}

func (_c *MockAccountHookServiceClient_IsAccountHookNameAvailable_Call) Return(_a0 *connect.Response[mgmtv1alpha1.IsAccountHookNameAvailableResponse], _a1 error) *MockAccountHookServiceClient_IsAccountHookNameAvailable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountHookServiceClient_IsAccountHookNameAvailable_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.IsAccountHookNameAvailableRequest]) (*connect.Response[mgmtv1alpha1.IsAccountHookNameAvailableResponse], error)) *MockAccountHookServiceClient_IsAccountHookNameAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// SetAccountHookEnabled provides a mock function with given fields: _a0, _a1
func (_m *MockAccountHookServiceClient) SetAccountHookEnabled(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetAccountHookEnabledRequest]) (*connect.Response[mgmtv1alpha1.SetAccountHookEnabledResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetAccountHookEnabled")
	}

	var r0 *connect.Response[mgmtv1alpha1.SetAccountHookEnabledResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetAccountHookEnabledRequest]) (*connect.Response[mgmtv1alpha1.SetAccountHookEnabledResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.SetAccountHookEnabledRequest]) *connect.Response[mgmtv1alpha1.SetAccountHookEnabledResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.SetAccountHookEnabledResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.SetAccountHookEnabledRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountHookServiceClient_SetAccountHookEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAccountHookEnabled'
type MockAccountHookServiceClient_SetAccountHookEnabled_Call struct {
	*mock.Call
}

// SetAccountHookEnabled is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.SetAccountHookEnabledRequest]
func (_e *MockAccountHookServiceClient_Expecter) SetAccountHookEnabled(_a0 interface{}, _a1 interface{}) *MockAccountHookServiceClient_SetAccountHookEnabled_Call {
	return &MockAccountHookServiceClient_SetAccountHookEnabled_Call{Call: _e.mock.On("SetAccountHookEnabled", _a0, _a1)}
}

func (_c *MockAccountHookServiceClient_SetAccountHookEnabled_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.SetAccountHookEnabledRequest])) *MockAccountHookServiceClient_SetAccountHookEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.SetAccountHookEnabledRequest]))
	})
	return _c
}

func (_c *MockAccountHookServiceClient_SetAccountHookEnabled_Call) Return(_a0 *connect.Response[mgmtv1alpha1.SetAccountHookEnabledResponse], _a1 error) *MockAccountHookServiceClient_SetAccountHookEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountHookServiceClient_SetAccountHookEnabled_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.SetAccountHookEnabledRequest]) (*connect.Response[mgmtv1alpha1.SetAccountHookEnabledResponse], error)) *MockAccountHookServiceClient_SetAccountHookEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccountHook provides a mock function with given fields: _a0, _a1
func (_m *MockAccountHookServiceClient) UpdateAccountHook(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.UpdateAccountHookRequest]) (*connect.Response[mgmtv1alpha1.UpdateAccountHookResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountHook")
	}

	var r0 *connect.Response[mgmtv1alpha1.UpdateAccountHookResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateAccountHookRequest]) (*connect.Response[mgmtv1alpha1.UpdateAccountHookResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateAccountHookRequest]) *connect.Response[mgmtv1alpha1.UpdateAccountHookResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.UpdateAccountHookResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateAccountHookRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountHookServiceClient_UpdateAccountHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccountHook'
type MockAccountHookServiceClient_UpdateAccountHook_Call struct {
	*mock.Call
}

// UpdateAccountHook is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.UpdateAccountHookRequest]
func (_e *MockAccountHookServiceClient_Expecter) UpdateAccountHook(_a0 interface{}, _a1 interface{}) *MockAccountHookServiceClient_UpdateAccountHook_Call {
	return &MockAccountHookServiceClient_UpdateAccountHook_Call{Call: _e.mock.On("UpdateAccountHook", _a0, _a1)}
}

func (_c *MockAccountHookServiceClient_UpdateAccountHook_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.UpdateAccountHookRequest])) *MockAccountHookServiceClient_UpdateAccountHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.UpdateAccountHookRequest]))
	})
	return _c
}

func (_c *MockAccountHookServiceClient_UpdateAccountHook_Call) Return(_a0 *connect.Response[mgmtv1alpha1.UpdateAccountHookResponse], _a1 error) *MockAccountHookServiceClient_UpdateAccountHook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountHookServiceClient_UpdateAccountHook_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.UpdateAccountHookRequest]) (*connect.Response[mgmtv1alpha1.UpdateAccountHookResponse], error)) *MockAccountHookServiceClient_UpdateAccountHook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountHookServiceClient creates a new instance of MockAccountHookServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountHookServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountHookServiceClient {
	mock := &MockAccountHookServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
