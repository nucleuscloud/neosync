// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mgmt/v1alpha1/account_hook.proto

package mgmtv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountHookServiceName is the fully-qualified name of the AccountHookService service.
	AccountHookServiceName = "mgmt.v1alpha1.AccountHookService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountHookServiceGetAccountHooksProcedure is the fully-qualified name of the
	// AccountHookService's GetAccountHooks RPC.
	AccountHookServiceGetAccountHooksProcedure = "/mgmt.v1alpha1.AccountHookService/GetAccountHooks"
	// AccountHookServiceGetAccountHookProcedure is the fully-qualified name of the AccountHookService's
	// GetAccountHook RPC.
	AccountHookServiceGetAccountHookProcedure = "/mgmt.v1alpha1.AccountHookService/GetAccountHook"
	// AccountHookServiceCreateAccountHookProcedure is the fully-qualified name of the
	// AccountHookService's CreateAccountHook RPC.
	AccountHookServiceCreateAccountHookProcedure = "/mgmt.v1alpha1.AccountHookService/CreateAccountHook"
	// AccountHookServiceUpdateAccountHookProcedure is the fully-qualified name of the
	// AccountHookService's UpdateAccountHook RPC.
	AccountHookServiceUpdateAccountHookProcedure = "/mgmt.v1alpha1.AccountHookService/UpdateAccountHook"
	// AccountHookServiceDeleteAccountHookProcedure is the fully-qualified name of the
	// AccountHookService's DeleteAccountHook RPC.
	AccountHookServiceDeleteAccountHookProcedure = "/mgmt.v1alpha1.AccountHookService/DeleteAccountHook"
	// AccountHookServiceIsAccountHookNameAvailableProcedure is the fully-qualified name of the
	// AccountHookService's IsAccountHookNameAvailable RPC.
	AccountHookServiceIsAccountHookNameAvailableProcedure = "/mgmt.v1alpha1.AccountHookService/IsAccountHookNameAvailable"
	// AccountHookServiceSetAccountHookEnabledProcedure is the fully-qualified name of the
	// AccountHookService's SetAccountHookEnabled RPC.
	AccountHookServiceSetAccountHookEnabledProcedure = "/mgmt.v1alpha1.AccountHookService/SetAccountHookEnabled"
	// AccountHookServiceGetActiveAccountHooksByEventProcedure is the fully-qualified name of the
	// AccountHookService's GetActiveAccountHooksByEvent RPC.
	AccountHookServiceGetActiveAccountHooksByEventProcedure = "/mgmt.v1alpha1.AccountHookService/GetActiveAccountHooksByEvent"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	accountHookServiceServiceDescriptor                            = v1alpha1.File_mgmt_v1alpha1_account_hook_proto.Services().ByName("AccountHookService")
	accountHookServiceGetAccountHooksMethodDescriptor              = accountHookServiceServiceDescriptor.Methods().ByName("GetAccountHooks")
	accountHookServiceGetAccountHookMethodDescriptor               = accountHookServiceServiceDescriptor.Methods().ByName("GetAccountHook")
	accountHookServiceCreateAccountHookMethodDescriptor            = accountHookServiceServiceDescriptor.Methods().ByName("CreateAccountHook")
	accountHookServiceUpdateAccountHookMethodDescriptor            = accountHookServiceServiceDescriptor.Methods().ByName("UpdateAccountHook")
	accountHookServiceDeleteAccountHookMethodDescriptor            = accountHookServiceServiceDescriptor.Methods().ByName("DeleteAccountHook")
	accountHookServiceIsAccountHookNameAvailableMethodDescriptor   = accountHookServiceServiceDescriptor.Methods().ByName("IsAccountHookNameAvailable")
	accountHookServiceSetAccountHookEnabledMethodDescriptor        = accountHookServiceServiceDescriptor.Methods().ByName("SetAccountHookEnabled")
	accountHookServiceGetActiveAccountHooksByEventMethodDescriptor = accountHookServiceServiceDescriptor.Methods().ByName("GetActiveAccountHooksByEvent")
)

// AccountHookServiceClient is a client for the mgmt.v1alpha1.AccountHookService service.
type AccountHookServiceClient interface {
	// Retrieves all account hooks.
	GetAccountHooks(context.Context, *connect.Request[v1alpha1.GetAccountHooksRequest]) (*connect.Response[v1alpha1.GetAccountHooksResponse], error)
	// Retrieves a specific account hook.
	GetAccountHook(context.Context, *connect.Request[v1alpha1.GetAccountHookRequest]) (*connect.Response[v1alpha1.GetAccountHookResponse], error)
	// Creates a new account hook.
	CreateAccountHook(context.Context, *connect.Request[v1alpha1.CreateAccountHookRequest]) (*connect.Response[v1alpha1.CreateAccountHookResponse], error)
	// Updates an existing account hook.
	UpdateAccountHook(context.Context, *connect.Request[v1alpha1.UpdateAccountHookRequest]) (*connect.Response[v1alpha1.UpdateAccountHookResponse], error)
	// Deletes an account hook.
	DeleteAccountHook(context.Context, *connect.Request[v1alpha1.DeleteAccountHookRequest]) (*connect.Response[v1alpha1.DeleteAccountHookResponse], error)
	// Checks if an account hook name is available.
	IsAccountHookNameAvailable(context.Context, *connect.Request[v1alpha1.IsAccountHookNameAvailableRequest]) (*connect.Response[v1alpha1.IsAccountHookNameAvailableResponse], error)
	// Enables or disables an account hook.
	SetAccountHookEnabled(context.Context, *connect.Request[v1alpha1.SetAccountHookEnabledRequest]) (*connect.Response[v1alpha1.SetAccountHookEnabledResponse], error)
	// Retrieves all active account hooks for a specific event.
	GetActiveAccountHooksByEvent(context.Context, *connect.Request[v1alpha1.GetActiveAccountHooksByEventRequest]) (*connect.Response[v1alpha1.GetActiveAccountHooksByEventResponse], error)
}

// NewAccountHookServiceClient constructs a client for the mgmt.v1alpha1.AccountHookService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountHookServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountHookServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountHookServiceClient{
		getAccountHooks: connect.NewClient[v1alpha1.GetAccountHooksRequest, v1alpha1.GetAccountHooksResponse](
			httpClient,
			baseURL+AccountHookServiceGetAccountHooksProcedure,
			connect.WithSchema(accountHookServiceGetAccountHooksMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAccountHook: connect.NewClient[v1alpha1.GetAccountHookRequest, v1alpha1.GetAccountHookResponse](
			httpClient,
			baseURL+AccountHookServiceGetAccountHookProcedure,
			connect.WithSchema(accountHookServiceGetAccountHookMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createAccountHook: connect.NewClient[v1alpha1.CreateAccountHookRequest, v1alpha1.CreateAccountHookResponse](
			httpClient,
			baseURL+AccountHookServiceCreateAccountHookProcedure,
			connect.WithSchema(accountHookServiceCreateAccountHookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAccountHook: connect.NewClient[v1alpha1.UpdateAccountHookRequest, v1alpha1.UpdateAccountHookResponse](
			httpClient,
			baseURL+AccountHookServiceUpdateAccountHookProcedure,
			connect.WithSchema(accountHookServiceUpdateAccountHookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAccountHook: connect.NewClient[v1alpha1.DeleteAccountHookRequest, v1alpha1.DeleteAccountHookResponse](
			httpClient,
			baseURL+AccountHookServiceDeleteAccountHookProcedure,
			connect.WithSchema(accountHookServiceDeleteAccountHookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		isAccountHookNameAvailable: connect.NewClient[v1alpha1.IsAccountHookNameAvailableRequest, v1alpha1.IsAccountHookNameAvailableResponse](
			httpClient,
			baseURL+AccountHookServiceIsAccountHookNameAvailableProcedure,
			connect.WithSchema(accountHookServiceIsAccountHookNameAvailableMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setAccountHookEnabled: connect.NewClient[v1alpha1.SetAccountHookEnabledRequest, v1alpha1.SetAccountHookEnabledResponse](
			httpClient,
			baseURL+AccountHookServiceSetAccountHookEnabledProcedure,
			connect.WithSchema(accountHookServiceSetAccountHookEnabledMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getActiveAccountHooksByEvent: connect.NewClient[v1alpha1.GetActiveAccountHooksByEventRequest, v1alpha1.GetActiveAccountHooksByEventResponse](
			httpClient,
			baseURL+AccountHookServiceGetActiveAccountHooksByEventProcedure,
			connect.WithSchema(accountHookServiceGetActiveAccountHooksByEventMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountHookServiceClient implements AccountHookServiceClient.
type accountHookServiceClient struct {
	getAccountHooks              *connect.Client[v1alpha1.GetAccountHooksRequest, v1alpha1.GetAccountHooksResponse]
	getAccountHook               *connect.Client[v1alpha1.GetAccountHookRequest, v1alpha1.GetAccountHookResponse]
	createAccountHook            *connect.Client[v1alpha1.CreateAccountHookRequest, v1alpha1.CreateAccountHookResponse]
	updateAccountHook            *connect.Client[v1alpha1.UpdateAccountHookRequest, v1alpha1.UpdateAccountHookResponse]
	deleteAccountHook            *connect.Client[v1alpha1.DeleteAccountHookRequest, v1alpha1.DeleteAccountHookResponse]
	isAccountHookNameAvailable   *connect.Client[v1alpha1.IsAccountHookNameAvailableRequest, v1alpha1.IsAccountHookNameAvailableResponse]
	setAccountHookEnabled        *connect.Client[v1alpha1.SetAccountHookEnabledRequest, v1alpha1.SetAccountHookEnabledResponse]
	getActiveAccountHooksByEvent *connect.Client[v1alpha1.GetActiveAccountHooksByEventRequest, v1alpha1.GetActiveAccountHooksByEventResponse]
}

// GetAccountHooks calls mgmt.v1alpha1.AccountHookService.GetAccountHooks.
func (c *accountHookServiceClient) GetAccountHooks(ctx context.Context, req *connect.Request[v1alpha1.GetAccountHooksRequest]) (*connect.Response[v1alpha1.GetAccountHooksResponse], error) {
	return c.getAccountHooks.CallUnary(ctx, req)
}

// GetAccountHook calls mgmt.v1alpha1.AccountHookService.GetAccountHook.
func (c *accountHookServiceClient) GetAccountHook(ctx context.Context, req *connect.Request[v1alpha1.GetAccountHookRequest]) (*connect.Response[v1alpha1.GetAccountHookResponse], error) {
	return c.getAccountHook.CallUnary(ctx, req)
}

// CreateAccountHook calls mgmt.v1alpha1.AccountHookService.CreateAccountHook.
func (c *accountHookServiceClient) CreateAccountHook(ctx context.Context, req *connect.Request[v1alpha1.CreateAccountHookRequest]) (*connect.Response[v1alpha1.CreateAccountHookResponse], error) {
	return c.createAccountHook.CallUnary(ctx, req)
}

// UpdateAccountHook calls mgmt.v1alpha1.AccountHookService.UpdateAccountHook.
func (c *accountHookServiceClient) UpdateAccountHook(ctx context.Context, req *connect.Request[v1alpha1.UpdateAccountHookRequest]) (*connect.Response[v1alpha1.UpdateAccountHookResponse], error) {
	return c.updateAccountHook.CallUnary(ctx, req)
}

// DeleteAccountHook calls mgmt.v1alpha1.AccountHookService.DeleteAccountHook.
func (c *accountHookServiceClient) DeleteAccountHook(ctx context.Context, req *connect.Request[v1alpha1.DeleteAccountHookRequest]) (*connect.Response[v1alpha1.DeleteAccountHookResponse], error) {
	return c.deleteAccountHook.CallUnary(ctx, req)
}

// IsAccountHookNameAvailable calls mgmt.v1alpha1.AccountHookService.IsAccountHookNameAvailable.
func (c *accountHookServiceClient) IsAccountHookNameAvailable(ctx context.Context, req *connect.Request[v1alpha1.IsAccountHookNameAvailableRequest]) (*connect.Response[v1alpha1.IsAccountHookNameAvailableResponse], error) {
	return c.isAccountHookNameAvailable.CallUnary(ctx, req)
}

// SetAccountHookEnabled calls mgmt.v1alpha1.AccountHookService.SetAccountHookEnabled.
func (c *accountHookServiceClient) SetAccountHookEnabled(ctx context.Context, req *connect.Request[v1alpha1.SetAccountHookEnabledRequest]) (*connect.Response[v1alpha1.SetAccountHookEnabledResponse], error) {
	return c.setAccountHookEnabled.CallUnary(ctx, req)
}

// GetActiveAccountHooksByEvent calls mgmt.v1alpha1.AccountHookService.GetActiveAccountHooksByEvent.
func (c *accountHookServiceClient) GetActiveAccountHooksByEvent(ctx context.Context, req *connect.Request[v1alpha1.GetActiveAccountHooksByEventRequest]) (*connect.Response[v1alpha1.GetActiveAccountHooksByEventResponse], error) {
	return c.getActiveAccountHooksByEvent.CallUnary(ctx, req)
}

// AccountHookServiceHandler is an implementation of the mgmt.v1alpha1.AccountHookService service.
type AccountHookServiceHandler interface {
	// Retrieves all account hooks.
	GetAccountHooks(context.Context, *connect.Request[v1alpha1.GetAccountHooksRequest]) (*connect.Response[v1alpha1.GetAccountHooksResponse], error)
	// Retrieves a specific account hook.
	GetAccountHook(context.Context, *connect.Request[v1alpha1.GetAccountHookRequest]) (*connect.Response[v1alpha1.GetAccountHookResponse], error)
	// Creates a new account hook.
	CreateAccountHook(context.Context, *connect.Request[v1alpha1.CreateAccountHookRequest]) (*connect.Response[v1alpha1.CreateAccountHookResponse], error)
	// Updates an existing account hook.
	UpdateAccountHook(context.Context, *connect.Request[v1alpha1.UpdateAccountHookRequest]) (*connect.Response[v1alpha1.UpdateAccountHookResponse], error)
	// Deletes an account hook.
	DeleteAccountHook(context.Context, *connect.Request[v1alpha1.DeleteAccountHookRequest]) (*connect.Response[v1alpha1.DeleteAccountHookResponse], error)
	// Checks if an account hook name is available.
	IsAccountHookNameAvailable(context.Context, *connect.Request[v1alpha1.IsAccountHookNameAvailableRequest]) (*connect.Response[v1alpha1.IsAccountHookNameAvailableResponse], error)
	// Enables or disables an account hook.
	SetAccountHookEnabled(context.Context, *connect.Request[v1alpha1.SetAccountHookEnabledRequest]) (*connect.Response[v1alpha1.SetAccountHookEnabledResponse], error)
	// Retrieves all active account hooks for a specific event.
	GetActiveAccountHooksByEvent(context.Context, *connect.Request[v1alpha1.GetActiveAccountHooksByEventRequest]) (*connect.Response[v1alpha1.GetActiveAccountHooksByEventResponse], error)
}

// NewAccountHookServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountHookServiceHandler(svc AccountHookServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountHookServiceGetAccountHooksHandler := connect.NewUnaryHandler(
		AccountHookServiceGetAccountHooksProcedure,
		svc.GetAccountHooks,
		connect.WithSchema(accountHookServiceGetAccountHooksMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	accountHookServiceGetAccountHookHandler := connect.NewUnaryHandler(
		AccountHookServiceGetAccountHookProcedure,
		svc.GetAccountHook,
		connect.WithSchema(accountHookServiceGetAccountHookMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	accountHookServiceCreateAccountHookHandler := connect.NewUnaryHandler(
		AccountHookServiceCreateAccountHookProcedure,
		svc.CreateAccountHook,
		connect.WithSchema(accountHookServiceCreateAccountHookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountHookServiceUpdateAccountHookHandler := connect.NewUnaryHandler(
		AccountHookServiceUpdateAccountHookProcedure,
		svc.UpdateAccountHook,
		connect.WithSchema(accountHookServiceUpdateAccountHookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountHookServiceDeleteAccountHookHandler := connect.NewUnaryHandler(
		AccountHookServiceDeleteAccountHookProcedure,
		svc.DeleteAccountHook,
		connect.WithSchema(accountHookServiceDeleteAccountHookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountHookServiceIsAccountHookNameAvailableHandler := connect.NewUnaryHandler(
		AccountHookServiceIsAccountHookNameAvailableProcedure,
		svc.IsAccountHookNameAvailable,
		connect.WithSchema(accountHookServiceIsAccountHookNameAvailableMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountHookServiceSetAccountHookEnabledHandler := connect.NewUnaryHandler(
		AccountHookServiceSetAccountHookEnabledProcedure,
		svc.SetAccountHookEnabled,
		connect.WithSchema(accountHookServiceSetAccountHookEnabledMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountHookServiceGetActiveAccountHooksByEventHandler := connect.NewUnaryHandler(
		AccountHookServiceGetActiveAccountHooksByEventProcedure,
		svc.GetActiveAccountHooksByEvent,
		connect.WithSchema(accountHookServiceGetActiveAccountHooksByEventMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/mgmt.v1alpha1.AccountHookService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountHookServiceGetAccountHooksProcedure:
			accountHookServiceGetAccountHooksHandler.ServeHTTP(w, r)
		case AccountHookServiceGetAccountHookProcedure:
			accountHookServiceGetAccountHookHandler.ServeHTTP(w, r)
		case AccountHookServiceCreateAccountHookProcedure:
			accountHookServiceCreateAccountHookHandler.ServeHTTP(w, r)
		case AccountHookServiceUpdateAccountHookProcedure:
			accountHookServiceUpdateAccountHookHandler.ServeHTTP(w, r)
		case AccountHookServiceDeleteAccountHookProcedure:
			accountHookServiceDeleteAccountHookHandler.ServeHTTP(w, r)
		case AccountHookServiceIsAccountHookNameAvailableProcedure:
			accountHookServiceIsAccountHookNameAvailableHandler.ServeHTTP(w, r)
		case AccountHookServiceSetAccountHookEnabledProcedure:
			accountHookServiceSetAccountHookEnabledHandler.ServeHTTP(w, r)
		case AccountHookServiceGetActiveAccountHooksByEventProcedure:
			accountHookServiceGetActiveAccountHooksByEventHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountHookServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountHookServiceHandler struct{}

func (UnimplementedAccountHookServiceHandler) GetAccountHooks(context.Context, *connect.Request[v1alpha1.GetAccountHooksRequest]) (*connect.Response[v1alpha1.GetAccountHooksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.AccountHookService.GetAccountHooks is not implemented"))
}

func (UnimplementedAccountHookServiceHandler) GetAccountHook(context.Context, *connect.Request[v1alpha1.GetAccountHookRequest]) (*connect.Response[v1alpha1.GetAccountHookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.AccountHookService.GetAccountHook is not implemented"))
}

func (UnimplementedAccountHookServiceHandler) CreateAccountHook(context.Context, *connect.Request[v1alpha1.CreateAccountHookRequest]) (*connect.Response[v1alpha1.CreateAccountHookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.AccountHookService.CreateAccountHook is not implemented"))
}

func (UnimplementedAccountHookServiceHandler) UpdateAccountHook(context.Context, *connect.Request[v1alpha1.UpdateAccountHookRequest]) (*connect.Response[v1alpha1.UpdateAccountHookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.AccountHookService.UpdateAccountHook is not implemented"))
}

func (UnimplementedAccountHookServiceHandler) DeleteAccountHook(context.Context, *connect.Request[v1alpha1.DeleteAccountHookRequest]) (*connect.Response[v1alpha1.DeleteAccountHookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.AccountHookService.DeleteAccountHook is not implemented"))
}

func (UnimplementedAccountHookServiceHandler) IsAccountHookNameAvailable(context.Context, *connect.Request[v1alpha1.IsAccountHookNameAvailableRequest]) (*connect.Response[v1alpha1.IsAccountHookNameAvailableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.AccountHookService.IsAccountHookNameAvailable is not implemented"))
}

func (UnimplementedAccountHookServiceHandler) SetAccountHookEnabled(context.Context, *connect.Request[v1alpha1.SetAccountHookEnabledRequest]) (*connect.Response[v1alpha1.SetAccountHookEnabledResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.AccountHookService.SetAccountHookEnabled is not implemented"))
}

func (UnimplementedAccountHookServiceHandler) GetActiveAccountHooksByEvent(context.Context, *connect.Request[v1alpha1.GetActiveAccountHooksByEventRequest]) (*connect.Response[v1alpha1.GetActiveAccountHooksByEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.AccountHookService.GetActiveAccountHooksByEvent is not implemented"))
}
