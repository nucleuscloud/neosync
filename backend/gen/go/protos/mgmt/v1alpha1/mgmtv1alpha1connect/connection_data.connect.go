// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mgmt/v1alpha1/connection_data.proto

package mgmtv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ConnectionDataServiceName is the fully-qualified name of the ConnectionDataService service.
	ConnectionDataServiceName = "mgmt.v1alpha1.ConnectionDataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConnectionDataServiceGetConnectionDataStreamProcedure is the fully-qualified name of the
	// ConnectionDataService's GetConnectionDataStream RPC.
	ConnectionDataServiceGetConnectionDataStreamProcedure = "/mgmt.v1alpha1.ConnectionDataService/GetConnectionDataStream"
	// ConnectionDataServiceGetConnectionDataSchemaProcedure is the fully-qualified name of the
	// ConnectionDataService's GetConnectionDataSchema RPC.
	ConnectionDataServiceGetConnectionDataSchemaProcedure = "/mgmt.v1alpha1.ConnectionDataService/GetConnectionDataSchema"
)

// ConnectionDataServiceClient is a client for the mgmt.v1alpha1.ConnectionDataService service.
type ConnectionDataServiceClient interface {
	// Streaming endpoint that will stream the data available from the Connection to the client.
	// Used primarily by the CLI sync command.
	GetConnectionDataStream(context.Context, *connect.Request[v1alpha1.GetConnectionDataStreamRequest]) (*connect.ServerStreamForClient[v1alpha1.GetConnectionDataStreamResponse], error)
	GetConnectionDataSchema(context.Context, *connect.Request[v1alpha1.GetConnectionDataSchemaRequest]) (*connect.Response[v1alpha1.GetConnectionDataSchemaResponse], error)
}

// NewConnectionDataServiceClient constructs a client for the mgmt.v1alpha1.ConnectionDataService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectionDataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConnectionDataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &connectionDataServiceClient{
		getConnectionDataStream: connect.NewClient[v1alpha1.GetConnectionDataStreamRequest, v1alpha1.GetConnectionDataStreamResponse](
			httpClient,
			baseURL+ConnectionDataServiceGetConnectionDataStreamProcedure,
			opts...,
		),
		getConnectionDataSchema: connect.NewClient[v1alpha1.GetConnectionDataSchemaRequest, v1alpha1.GetConnectionDataSchemaResponse](
			httpClient,
			baseURL+ConnectionDataServiceGetConnectionDataSchemaProcedure,
			opts...,
		),
	}
}

// connectionDataServiceClient implements ConnectionDataServiceClient.
type connectionDataServiceClient struct {
	getConnectionDataStream *connect.Client[v1alpha1.GetConnectionDataStreamRequest, v1alpha1.GetConnectionDataStreamResponse]
	getConnectionDataSchema *connect.Client[v1alpha1.GetConnectionDataSchemaRequest, v1alpha1.GetConnectionDataSchemaResponse]
}

// GetConnectionDataStream calls mgmt.v1alpha1.ConnectionDataService.GetConnectionDataStream.
func (c *connectionDataServiceClient) GetConnectionDataStream(ctx context.Context, req *connect.Request[v1alpha1.GetConnectionDataStreamRequest]) (*connect.ServerStreamForClient[v1alpha1.GetConnectionDataStreamResponse], error) {
	return c.getConnectionDataStream.CallServerStream(ctx, req)
}

// GetConnectionDataSchema calls mgmt.v1alpha1.ConnectionDataService.GetConnectionDataSchema.
func (c *connectionDataServiceClient) GetConnectionDataSchema(ctx context.Context, req *connect.Request[v1alpha1.GetConnectionDataSchemaRequest]) (*connect.Response[v1alpha1.GetConnectionDataSchemaResponse], error) {
	return c.getConnectionDataSchema.CallUnary(ctx, req)
}

// ConnectionDataServiceHandler is an implementation of the mgmt.v1alpha1.ConnectionDataService
// service.
type ConnectionDataServiceHandler interface {
	// Streaming endpoint that will stream the data available from the Connection to the client.
	// Used primarily by the CLI sync command.
	GetConnectionDataStream(context.Context, *connect.Request[v1alpha1.GetConnectionDataStreamRequest], *connect.ServerStream[v1alpha1.GetConnectionDataStreamResponse]) error
	GetConnectionDataSchema(context.Context, *connect.Request[v1alpha1.GetConnectionDataSchemaRequest]) (*connect.Response[v1alpha1.GetConnectionDataSchemaResponse], error)
}

// NewConnectionDataServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectionDataServiceHandler(svc ConnectionDataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	connectionDataServiceGetConnectionDataStreamHandler := connect.NewServerStreamHandler(
		ConnectionDataServiceGetConnectionDataStreamProcedure,
		svc.GetConnectionDataStream,
		opts...,
	)
	connectionDataServiceGetConnectionDataSchemaHandler := connect.NewUnaryHandler(
		ConnectionDataServiceGetConnectionDataSchemaProcedure,
		svc.GetConnectionDataSchema,
		opts...,
	)
	return "/mgmt.v1alpha1.ConnectionDataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConnectionDataServiceGetConnectionDataStreamProcedure:
			connectionDataServiceGetConnectionDataStreamHandler.ServeHTTP(w, r)
		case ConnectionDataServiceGetConnectionDataSchemaProcedure:
			connectionDataServiceGetConnectionDataSchemaHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConnectionDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectionDataServiceHandler struct{}

func (UnimplementedConnectionDataServiceHandler) GetConnectionDataStream(context.Context, *connect.Request[v1alpha1.GetConnectionDataStreamRequest], *connect.ServerStream[v1alpha1.GetConnectionDataStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.ConnectionDataService.GetConnectionDataStream is not implemented"))
}

func (UnimplementedConnectionDataServiceHandler) GetConnectionDataSchema(context.Context, *connect.Request[v1alpha1.GetConnectionDataSchemaRequest]) (*connect.Response[v1alpha1.GetConnectionDataSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.ConnectionDataService.GetConnectionDataSchema is not implemented"))
}
