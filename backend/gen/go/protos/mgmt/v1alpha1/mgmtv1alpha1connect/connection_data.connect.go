// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mgmt/v1alpha1/connection_data.proto

package mgmtv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ConnectionDataServiceName is the fully-qualified name of the ConnectionDataService service.
	ConnectionDataServiceName = "mgmt.v1alpha1.ConnectionDataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConnectionDataServiceGetConnectionDataStreamProcedure is the fully-qualified name of the
	// ConnectionDataService's GetConnectionDataStream RPC.
	ConnectionDataServiceGetConnectionDataStreamProcedure = "/mgmt.v1alpha1.ConnectionDataService/GetConnectionDataStream"
	// ConnectionDataServiceGetConnectionSchemaProcedure is the fully-qualified name of the
	// ConnectionDataService's GetConnectionSchema RPC.
	ConnectionDataServiceGetConnectionSchemaProcedure = "/mgmt.v1alpha1.ConnectionDataService/GetConnectionSchema"
	// ConnectionDataServiceGetConnectionForeignConstraintsProcedure is the fully-qualified name of the
	// ConnectionDataService's GetConnectionForeignConstraints RPC.
	ConnectionDataServiceGetConnectionForeignConstraintsProcedure = "/mgmt.v1alpha1.ConnectionDataService/GetConnectionForeignConstraints"
	// ConnectionDataServiceGetConnectionPrimaryConstraintsProcedure is the fully-qualified name of the
	// ConnectionDataService's GetConnectionPrimaryConstraints RPC.
	ConnectionDataServiceGetConnectionPrimaryConstraintsProcedure = "/mgmt.v1alpha1.ConnectionDataService/GetConnectionPrimaryConstraints"
	// ConnectionDataServiceGetConnectionInitStatementsProcedure is the fully-qualified name of the
	// ConnectionDataService's GetConnectionInitStatements RPC.
	ConnectionDataServiceGetConnectionInitStatementsProcedure = "/mgmt.v1alpha1.ConnectionDataService/GetConnectionInitStatements"
)

// ConnectionDataServiceClient is a client for the mgmt.v1alpha1.ConnectionDataService service.
type ConnectionDataServiceClient interface {
	// Streaming endpoint that will stream the data available from the Connection to the client.
	// Used primarily by the CLI sync command.
	GetConnectionDataStream(context.Context, *connect.Request[v1alpha1.GetConnectionDataStreamRequest]) (*connect.ServerStreamForClient[v1alpha1.GetConnectionDataStreamResponse], error)
	// Returns the schema for a specific connection. Used mostly for SQL-based connections
	GetConnectionSchema(context.Context, *connect.Request[v1alpha1.GetConnectionSchemaRequest]) (*connect.Response[v1alpha1.GetConnectionSchemaResponse], error)
	// For a specific connection, returns the foreign key constraints. Mostly useful for SQL-based Connections.
	// Used primarily by the CLI sync command to determine stream order.
	GetConnectionForeignConstraints(context.Context, *connect.Request[v1alpha1.GetConnectionForeignConstraintsRequest]) (*connect.Response[v1alpha1.GetConnectionForeignConstraintsResponse], error)
	// For a specific connection, returns the primary key constraints. Mostly useful for SQL-based Connections.
	// Used primarily by the CLI sync command to determine stream order.
	GetConnectionPrimaryConstraints(context.Context, *connect.Request[v1alpha1.GetConnectionPrimaryConstraintsRequest]) (*connect.Response[v1alpha1.GetConnectionPrimaryConstraintsResponse], error)
	// For a specific connection, returns the init table statements. Mostly useful for SQL-based Connections.
	// Used primarily by the CLI sync command to create table schema init statement.
	GetConnectionInitStatements(context.Context, *connect.Request[v1alpha1.GetConnectionInitStatementsRequest]) (*connect.Response[v1alpha1.GetConnectionInitStatementsResponse], error)
}

// NewConnectionDataServiceClient constructs a client for the mgmt.v1alpha1.ConnectionDataService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectionDataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConnectionDataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &connectionDataServiceClient{
		getConnectionDataStream: connect.NewClient[v1alpha1.GetConnectionDataStreamRequest, v1alpha1.GetConnectionDataStreamResponse](
			httpClient,
			baseURL+ConnectionDataServiceGetConnectionDataStreamProcedure,
			opts...,
		),
		getConnectionSchema: connect.NewClient[v1alpha1.GetConnectionSchemaRequest, v1alpha1.GetConnectionSchemaResponse](
			httpClient,
			baseURL+ConnectionDataServiceGetConnectionSchemaProcedure,
			opts...,
		),
		getConnectionForeignConstraints: connect.NewClient[v1alpha1.GetConnectionForeignConstraintsRequest, v1alpha1.GetConnectionForeignConstraintsResponse](
			httpClient,
			baseURL+ConnectionDataServiceGetConnectionForeignConstraintsProcedure,
			opts...,
		),
		getConnectionPrimaryConstraints: connect.NewClient[v1alpha1.GetConnectionPrimaryConstraintsRequest, v1alpha1.GetConnectionPrimaryConstraintsResponse](
			httpClient,
			baseURL+ConnectionDataServiceGetConnectionPrimaryConstraintsProcedure,
			opts...,
		),
		getConnectionInitStatements: connect.NewClient[v1alpha1.GetConnectionInitStatementsRequest, v1alpha1.GetConnectionInitStatementsResponse](
			httpClient,
			baseURL+ConnectionDataServiceGetConnectionInitStatementsProcedure,
			opts...,
		),
	}
}

// connectionDataServiceClient implements ConnectionDataServiceClient.
type connectionDataServiceClient struct {
	getConnectionDataStream         *connect.Client[v1alpha1.GetConnectionDataStreamRequest, v1alpha1.GetConnectionDataStreamResponse]
	getConnectionSchema             *connect.Client[v1alpha1.GetConnectionSchemaRequest, v1alpha1.GetConnectionSchemaResponse]
	getConnectionForeignConstraints *connect.Client[v1alpha1.GetConnectionForeignConstraintsRequest, v1alpha1.GetConnectionForeignConstraintsResponse]
	getConnectionPrimaryConstraints *connect.Client[v1alpha1.GetConnectionPrimaryConstraintsRequest, v1alpha1.GetConnectionPrimaryConstraintsResponse]
	getConnectionInitStatements     *connect.Client[v1alpha1.GetConnectionInitStatementsRequest, v1alpha1.GetConnectionInitStatementsResponse]
}

// GetConnectionDataStream calls mgmt.v1alpha1.ConnectionDataService.GetConnectionDataStream.
func (c *connectionDataServiceClient) GetConnectionDataStream(ctx context.Context, req *connect.Request[v1alpha1.GetConnectionDataStreamRequest]) (*connect.ServerStreamForClient[v1alpha1.GetConnectionDataStreamResponse], error) {
	return c.getConnectionDataStream.CallServerStream(ctx, req)
}

// GetConnectionSchema calls mgmt.v1alpha1.ConnectionDataService.GetConnectionSchema.
func (c *connectionDataServiceClient) GetConnectionSchema(ctx context.Context, req *connect.Request[v1alpha1.GetConnectionSchemaRequest]) (*connect.Response[v1alpha1.GetConnectionSchemaResponse], error) {
	return c.getConnectionSchema.CallUnary(ctx, req)
}

// GetConnectionForeignConstraints calls
// mgmt.v1alpha1.ConnectionDataService.GetConnectionForeignConstraints.
func (c *connectionDataServiceClient) GetConnectionForeignConstraints(ctx context.Context, req *connect.Request[v1alpha1.GetConnectionForeignConstraintsRequest]) (*connect.Response[v1alpha1.GetConnectionForeignConstraintsResponse], error) {
	return c.getConnectionForeignConstraints.CallUnary(ctx, req)
}

// GetConnectionPrimaryConstraints calls
// mgmt.v1alpha1.ConnectionDataService.GetConnectionPrimaryConstraints.
func (c *connectionDataServiceClient) GetConnectionPrimaryConstraints(ctx context.Context, req *connect.Request[v1alpha1.GetConnectionPrimaryConstraintsRequest]) (*connect.Response[v1alpha1.GetConnectionPrimaryConstraintsResponse], error) {
	return c.getConnectionPrimaryConstraints.CallUnary(ctx, req)
}

// GetConnectionInitStatements calls
// mgmt.v1alpha1.ConnectionDataService.GetConnectionInitStatements.
func (c *connectionDataServiceClient) GetConnectionInitStatements(ctx context.Context, req *connect.Request[v1alpha1.GetConnectionInitStatementsRequest]) (*connect.Response[v1alpha1.GetConnectionInitStatementsResponse], error) {
	return c.getConnectionInitStatements.CallUnary(ctx, req)
}

// ConnectionDataServiceHandler is an implementation of the mgmt.v1alpha1.ConnectionDataService
// service.
type ConnectionDataServiceHandler interface {
	// Streaming endpoint that will stream the data available from the Connection to the client.
	// Used primarily by the CLI sync command.
	GetConnectionDataStream(context.Context, *connect.Request[v1alpha1.GetConnectionDataStreamRequest], *connect.ServerStream[v1alpha1.GetConnectionDataStreamResponse]) error
	// Returns the schema for a specific connection. Used mostly for SQL-based connections
	GetConnectionSchema(context.Context, *connect.Request[v1alpha1.GetConnectionSchemaRequest]) (*connect.Response[v1alpha1.GetConnectionSchemaResponse], error)
	// For a specific connection, returns the foreign key constraints. Mostly useful for SQL-based Connections.
	// Used primarily by the CLI sync command to determine stream order.
	GetConnectionForeignConstraints(context.Context, *connect.Request[v1alpha1.GetConnectionForeignConstraintsRequest]) (*connect.Response[v1alpha1.GetConnectionForeignConstraintsResponse], error)
	// For a specific connection, returns the primary key constraints. Mostly useful for SQL-based Connections.
	// Used primarily by the CLI sync command to determine stream order.
	GetConnectionPrimaryConstraints(context.Context, *connect.Request[v1alpha1.GetConnectionPrimaryConstraintsRequest]) (*connect.Response[v1alpha1.GetConnectionPrimaryConstraintsResponse], error)
	// For a specific connection, returns the init table statements. Mostly useful for SQL-based Connections.
	// Used primarily by the CLI sync command to create table schema init statement.
	GetConnectionInitStatements(context.Context, *connect.Request[v1alpha1.GetConnectionInitStatementsRequest]) (*connect.Response[v1alpha1.GetConnectionInitStatementsResponse], error)
}

// NewConnectionDataServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectionDataServiceHandler(svc ConnectionDataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	connectionDataServiceGetConnectionDataStreamHandler := connect.NewServerStreamHandler(
		ConnectionDataServiceGetConnectionDataStreamProcedure,
		svc.GetConnectionDataStream,
		opts...,
	)
	connectionDataServiceGetConnectionSchemaHandler := connect.NewUnaryHandler(
		ConnectionDataServiceGetConnectionSchemaProcedure,
		svc.GetConnectionSchema,
		opts...,
	)
	connectionDataServiceGetConnectionForeignConstraintsHandler := connect.NewUnaryHandler(
		ConnectionDataServiceGetConnectionForeignConstraintsProcedure,
		svc.GetConnectionForeignConstraints,
		opts...,
	)
	connectionDataServiceGetConnectionPrimaryConstraintsHandler := connect.NewUnaryHandler(
		ConnectionDataServiceGetConnectionPrimaryConstraintsProcedure,
		svc.GetConnectionPrimaryConstraints,
		opts...,
	)
	connectionDataServiceGetConnectionInitStatementsHandler := connect.NewUnaryHandler(
		ConnectionDataServiceGetConnectionInitStatementsProcedure,
		svc.GetConnectionInitStatements,
		opts...,
	)
	return "/mgmt.v1alpha1.ConnectionDataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConnectionDataServiceGetConnectionDataStreamProcedure:
			connectionDataServiceGetConnectionDataStreamHandler.ServeHTTP(w, r)
		case ConnectionDataServiceGetConnectionSchemaProcedure:
			connectionDataServiceGetConnectionSchemaHandler.ServeHTTP(w, r)
		case ConnectionDataServiceGetConnectionForeignConstraintsProcedure:
			connectionDataServiceGetConnectionForeignConstraintsHandler.ServeHTTP(w, r)
		case ConnectionDataServiceGetConnectionPrimaryConstraintsProcedure:
			connectionDataServiceGetConnectionPrimaryConstraintsHandler.ServeHTTP(w, r)
		case ConnectionDataServiceGetConnectionInitStatementsProcedure:
			connectionDataServiceGetConnectionInitStatementsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConnectionDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectionDataServiceHandler struct{}

func (UnimplementedConnectionDataServiceHandler) GetConnectionDataStream(context.Context, *connect.Request[v1alpha1.GetConnectionDataStreamRequest], *connect.ServerStream[v1alpha1.GetConnectionDataStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.ConnectionDataService.GetConnectionDataStream is not implemented"))
}

func (UnimplementedConnectionDataServiceHandler) GetConnectionSchema(context.Context, *connect.Request[v1alpha1.GetConnectionSchemaRequest]) (*connect.Response[v1alpha1.GetConnectionSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.ConnectionDataService.GetConnectionSchema is not implemented"))
}

func (UnimplementedConnectionDataServiceHandler) GetConnectionForeignConstraints(context.Context, *connect.Request[v1alpha1.GetConnectionForeignConstraintsRequest]) (*connect.Response[v1alpha1.GetConnectionForeignConstraintsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.ConnectionDataService.GetConnectionForeignConstraints is not implemented"))
}

func (UnimplementedConnectionDataServiceHandler) GetConnectionPrimaryConstraints(context.Context, *connect.Request[v1alpha1.GetConnectionPrimaryConstraintsRequest]) (*connect.Response[v1alpha1.GetConnectionPrimaryConstraintsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.ConnectionDataService.GetConnectionPrimaryConstraints is not implemented"))
}

func (UnimplementedConnectionDataServiceHandler) GetConnectionInitStatements(context.Context, *connect.Request[v1alpha1.GetConnectionInitStatementsRequest]) (*connect.Response[v1alpha1.GetConnectionInitStatementsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.ConnectionDataService.GetConnectionInitStatements is not implemented"))
}
