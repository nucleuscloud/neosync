// Code generated by mockery. DO NOT EDIT.

package mgmtv1alpha1connect

import (
	context "context"

	connect "connectrpc.com/connect"

	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthServiceClient is an autogenerated mock type for the AuthServiceClient type
type MockAuthServiceClient struct {
	mock.Mock
}

type MockAuthServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthServiceClient) EXPECT() *MockAuthServiceClient_Expecter {
	return &MockAuthServiceClient_Expecter{mock: &_m.Mock}
}

// GetAuthStatus provides a mock function with given fields: _a0, _a1
func (_m *MockAuthServiceClient) GetAuthStatus(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetAuthStatusRequest]) (*connect.Response[mgmtv1alpha1.GetAuthStatusResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthStatus")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetAuthStatusResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAuthStatusRequest]) (*connect.Response[mgmtv1alpha1.GetAuthStatusResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAuthStatusRequest]) *connect.Response[mgmtv1alpha1.GetAuthStatusResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetAuthStatusResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAuthStatusRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceClient_GetAuthStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthStatus'
type MockAuthServiceClient_GetAuthStatus_Call struct {
	*mock.Call
}

// GetAuthStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetAuthStatusRequest]
func (_e *MockAuthServiceClient_Expecter) GetAuthStatus(_a0 interface{}, _a1 interface{}) *MockAuthServiceClient_GetAuthStatus_Call {
	return &MockAuthServiceClient_GetAuthStatus_Call{Call: _e.mock.On("GetAuthStatus", _a0, _a1)}
}

func (_c *MockAuthServiceClient_GetAuthStatus_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetAuthStatusRequest])) *MockAuthServiceClient_GetAuthStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetAuthStatusRequest]))
	})
	return _c
}

func (_c *MockAuthServiceClient_GetAuthStatus_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetAuthStatusResponse], _a1 error) *MockAuthServiceClient_GetAuthStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceClient_GetAuthStatus_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetAuthStatusRequest]) (*connect.Response[mgmtv1alpha1.GetAuthStatusResponse], error)) *MockAuthServiceClient_GetAuthStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthUser provides a mock function with given fields: _a0, _a1
func (_m *MockAuthServiceClient) GetAuthUser(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetAuthUserRequest]) (*connect.Response[mgmtv1alpha1.GetAuthUserResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthUser")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetAuthUserResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAuthUserRequest]) (*connect.Response[mgmtv1alpha1.GetAuthUserResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAuthUserRequest]) *connect.Response[mgmtv1alpha1.GetAuthUserResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetAuthUserResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAuthUserRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceClient_GetAuthUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthUser'
type MockAuthServiceClient_GetAuthUser_Call struct {
	*mock.Call
}

// GetAuthUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetAuthUserRequest]
func (_e *MockAuthServiceClient_Expecter) GetAuthUser(_a0 interface{}, _a1 interface{}) *MockAuthServiceClient_GetAuthUser_Call {
	return &MockAuthServiceClient_GetAuthUser_Call{Call: _e.mock.On("GetAuthUser", _a0, _a1)}
}

func (_c *MockAuthServiceClient_GetAuthUser_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetAuthUserRequest])) *MockAuthServiceClient_GetAuthUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetAuthUserRequest]))
	})
	return _c
}

func (_c *MockAuthServiceClient_GetAuthUser_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetAuthUserResponse], _a1 error) *MockAuthServiceClient_GetAuthUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceClient_GetAuthUser_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetAuthUserRequest]) (*connect.Response[mgmtv1alpha1.GetAuthUserResponse], error)) *MockAuthServiceClient_GetAuthUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorizeUrl provides a mock function with given fields: _a0, _a1
func (_m *MockAuthServiceClient) GetAuthorizeUrl(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetAuthorizeUrlRequest]) (*connect.Response[mgmtv1alpha1.GetAuthorizeUrlResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizeUrl")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetAuthorizeUrlResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAuthorizeUrlRequest]) (*connect.Response[mgmtv1alpha1.GetAuthorizeUrlResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAuthorizeUrlRequest]) *connect.Response[mgmtv1alpha1.GetAuthorizeUrlResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetAuthorizeUrlResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetAuthorizeUrlRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceClient_GetAuthorizeUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizeUrl'
type MockAuthServiceClient_GetAuthorizeUrl_Call struct {
	*mock.Call
}

// GetAuthorizeUrl is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetAuthorizeUrlRequest]
func (_e *MockAuthServiceClient_Expecter) GetAuthorizeUrl(_a0 interface{}, _a1 interface{}) *MockAuthServiceClient_GetAuthorizeUrl_Call {
	return &MockAuthServiceClient_GetAuthorizeUrl_Call{Call: _e.mock.On("GetAuthorizeUrl", _a0, _a1)}
}

func (_c *MockAuthServiceClient_GetAuthorizeUrl_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetAuthorizeUrlRequest])) *MockAuthServiceClient_GetAuthorizeUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetAuthorizeUrlRequest]))
	})
	return _c
}

func (_c *MockAuthServiceClient_GetAuthorizeUrl_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetAuthorizeUrlResponse], _a1 error) *MockAuthServiceClient_GetAuthorizeUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceClient_GetAuthorizeUrl_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetAuthorizeUrlRequest]) (*connect.Response[mgmtv1alpha1.GetAuthorizeUrlResponse], error)) *MockAuthServiceClient_GetAuthorizeUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetCliIssuer provides a mock function with given fields: _a0, _a1
func (_m *MockAuthServiceClient) GetCliIssuer(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetCliIssuerRequest]) (*connect.Response[mgmtv1alpha1.GetCliIssuerResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCliIssuer")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetCliIssuerResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetCliIssuerRequest]) (*connect.Response[mgmtv1alpha1.GetCliIssuerResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetCliIssuerRequest]) *connect.Response[mgmtv1alpha1.GetCliIssuerResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetCliIssuerResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetCliIssuerRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceClient_GetCliIssuer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCliIssuer'
type MockAuthServiceClient_GetCliIssuer_Call struct {
	*mock.Call
}

// GetCliIssuer is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetCliIssuerRequest]
func (_e *MockAuthServiceClient_Expecter) GetCliIssuer(_a0 interface{}, _a1 interface{}) *MockAuthServiceClient_GetCliIssuer_Call {
	return &MockAuthServiceClient_GetCliIssuer_Call{Call: _e.mock.On("GetCliIssuer", _a0, _a1)}
}

func (_c *MockAuthServiceClient_GetCliIssuer_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetCliIssuerRequest])) *MockAuthServiceClient_GetCliIssuer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetCliIssuerRequest]))
	})
	return _c
}

func (_c *MockAuthServiceClient_GetCliIssuer_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetCliIssuerResponse], _a1 error) *MockAuthServiceClient_GetCliIssuer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceClient_GetCliIssuer_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetCliIssuerRequest]) (*connect.Response[mgmtv1alpha1.GetCliIssuerResponse], error)) *MockAuthServiceClient_GetCliIssuer_Call {
	_c.Call.Return(run)
	return _c
}

// LoginCli provides a mock function with given fields: _a0, _a1
func (_m *MockAuthServiceClient) LoginCli(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.LoginCliRequest]) (*connect.Response[mgmtv1alpha1.LoginCliResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LoginCli")
	}

	var r0 *connect.Response[mgmtv1alpha1.LoginCliResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.LoginCliRequest]) (*connect.Response[mgmtv1alpha1.LoginCliResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.LoginCliRequest]) *connect.Response[mgmtv1alpha1.LoginCliResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.LoginCliResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.LoginCliRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthServiceClient_LoginCli_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginCli'
type MockAuthServiceClient_LoginCli_Call struct {
	*mock.Call
}

// LoginCli is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.LoginCliRequest]
func (_e *MockAuthServiceClient_Expecter) LoginCli(_a0 interface{}, _a1 interface{}) *MockAuthServiceClient_LoginCli_Call {
	return &MockAuthServiceClient_LoginCli_Call{Call: _e.mock.On("LoginCli", _a0, _a1)}
}

func (_c *MockAuthServiceClient_LoginCli_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.LoginCliRequest])) *MockAuthServiceClient_LoginCli_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.LoginCliRequest]))
	})
	return _c
}

func (_c *MockAuthServiceClient_LoginCli_Call) Return(_a0 *connect.Response[mgmtv1alpha1.LoginCliResponse], _a1 error) *MockAuthServiceClient_LoginCli_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthServiceClient_LoginCli_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.LoginCliRequest]) (*connect.Response[mgmtv1alpha1.LoginCliResponse], error)) *MockAuthServiceClient_LoginCli_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthServiceClient creates a new instance of MockAuthServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
