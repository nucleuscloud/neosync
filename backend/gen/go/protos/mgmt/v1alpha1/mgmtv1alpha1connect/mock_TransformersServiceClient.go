// Code generated by mockery. DO NOT EDIT.

package mgmtv1alpha1connect

import (
	context "context"

	connect "connectrpc.com/connect"

	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockTransformersServiceClient is an autogenerated mock type for the TransformersServiceClient type
type MockTransformersServiceClient struct {
	mock.Mock
}

type MockTransformersServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransformersServiceClient) EXPECT() *MockTransformersServiceClient_Expecter {
	return &MockTransformersServiceClient_Expecter{mock: &_m.Mock}
}

// CreateUserDefinedTransformer provides a mock function with given fields: _a0, _a1
func (_m *MockTransformersServiceClient) CreateUserDefinedTransformer(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CreateUserDefinedTransformerRequest]) (*connect.Response[mgmtv1alpha1.CreateUserDefinedTransformerResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserDefinedTransformer")
	}

	var r0 *connect.Response[mgmtv1alpha1.CreateUserDefinedTransformerResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateUserDefinedTransformerRequest]) (*connect.Response[mgmtv1alpha1.CreateUserDefinedTransformerResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateUserDefinedTransformerRequest]) *connect.Response[mgmtv1alpha1.CreateUserDefinedTransformerResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.CreateUserDefinedTransformerResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.CreateUserDefinedTransformerRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransformersServiceClient_CreateUserDefinedTransformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserDefinedTransformer'
type MockTransformersServiceClient_CreateUserDefinedTransformer_Call struct {
	*mock.Call
}

// CreateUserDefinedTransformer is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.CreateUserDefinedTransformerRequest]
func (_e *MockTransformersServiceClient_Expecter) CreateUserDefinedTransformer(_a0 interface{}, _a1 interface{}) *MockTransformersServiceClient_CreateUserDefinedTransformer_Call {
	return &MockTransformersServiceClient_CreateUserDefinedTransformer_Call{Call: _e.mock.On("CreateUserDefinedTransformer", _a0, _a1)}
}

func (_c *MockTransformersServiceClient_CreateUserDefinedTransformer_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.CreateUserDefinedTransformerRequest])) *MockTransformersServiceClient_CreateUserDefinedTransformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.CreateUserDefinedTransformerRequest]))
	})
	return _c
}

func (_c *MockTransformersServiceClient_CreateUserDefinedTransformer_Call) Return(_a0 *connect.Response[mgmtv1alpha1.CreateUserDefinedTransformerResponse], _a1 error) *MockTransformersServiceClient_CreateUserDefinedTransformer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransformersServiceClient_CreateUserDefinedTransformer_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.CreateUserDefinedTransformerRequest]) (*connect.Response[mgmtv1alpha1.CreateUserDefinedTransformerResponse], error)) *MockTransformersServiceClient_CreateUserDefinedTransformer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserDefinedTransformer provides a mock function with given fields: _a0, _a1
func (_m *MockTransformersServiceClient) DeleteUserDefinedTransformer(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.DeleteUserDefinedTransformerRequest]) (*connect.Response[mgmtv1alpha1.DeleteUserDefinedTransformerResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserDefinedTransformer")
	}

	var r0 *connect.Response[mgmtv1alpha1.DeleteUserDefinedTransformerResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteUserDefinedTransformerRequest]) (*connect.Response[mgmtv1alpha1.DeleteUserDefinedTransformerResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteUserDefinedTransformerRequest]) *connect.Response[mgmtv1alpha1.DeleteUserDefinedTransformerResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.DeleteUserDefinedTransformerResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.DeleteUserDefinedTransformerRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransformersServiceClient_DeleteUserDefinedTransformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserDefinedTransformer'
type MockTransformersServiceClient_DeleteUserDefinedTransformer_Call struct {
	*mock.Call
}

// DeleteUserDefinedTransformer is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.DeleteUserDefinedTransformerRequest]
func (_e *MockTransformersServiceClient_Expecter) DeleteUserDefinedTransformer(_a0 interface{}, _a1 interface{}) *MockTransformersServiceClient_DeleteUserDefinedTransformer_Call {
	return &MockTransformersServiceClient_DeleteUserDefinedTransformer_Call{Call: _e.mock.On("DeleteUserDefinedTransformer", _a0, _a1)}
}

func (_c *MockTransformersServiceClient_DeleteUserDefinedTransformer_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.DeleteUserDefinedTransformerRequest])) *MockTransformersServiceClient_DeleteUserDefinedTransformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.DeleteUserDefinedTransformerRequest]))
	})
	return _c
}

func (_c *MockTransformersServiceClient_DeleteUserDefinedTransformer_Call) Return(_a0 *connect.Response[mgmtv1alpha1.DeleteUserDefinedTransformerResponse], _a1 error) *MockTransformersServiceClient_DeleteUserDefinedTransformer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransformersServiceClient_DeleteUserDefinedTransformer_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.DeleteUserDefinedTransformerRequest]) (*connect.Response[mgmtv1alpha1.DeleteUserDefinedTransformerResponse], error)) *MockTransformersServiceClient_DeleteUserDefinedTransformer_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemTransformerBySource provides a mock function with given fields: _a0, _a1
func (_m *MockTransformersServiceClient) GetSystemTransformerBySource(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetSystemTransformerBySourceRequest]) (*connect.Response[mgmtv1alpha1.GetSystemTransformerBySourceResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemTransformerBySource")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetSystemTransformerBySourceResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetSystemTransformerBySourceRequest]) (*connect.Response[mgmtv1alpha1.GetSystemTransformerBySourceResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetSystemTransformerBySourceRequest]) *connect.Response[mgmtv1alpha1.GetSystemTransformerBySourceResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetSystemTransformerBySourceResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetSystemTransformerBySourceRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransformersServiceClient_GetSystemTransformerBySource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemTransformerBySource'
type MockTransformersServiceClient_GetSystemTransformerBySource_Call struct {
	*mock.Call
}

// GetSystemTransformerBySource is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetSystemTransformerBySourceRequest]
func (_e *MockTransformersServiceClient_Expecter) GetSystemTransformerBySource(_a0 interface{}, _a1 interface{}) *MockTransformersServiceClient_GetSystemTransformerBySource_Call {
	return &MockTransformersServiceClient_GetSystemTransformerBySource_Call{Call: _e.mock.On("GetSystemTransformerBySource", _a0, _a1)}
}

func (_c *MockTransformersServiceClient_GetSystemTransformerBySource_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetSystemTransformerBySourceRequest])) *MockTransformersServiceClient_GetSystemTransformerBySource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetSystemTransformerBySourceRequest]))
	})
	return _c
}

func (_c *MockTransformersServiceClient_GetSystemTransformerBySource_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetSystemTransformerBySourceResponse], _a1 error) *MockTransformersServiceClient_GetSystemTransformerBySource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransformersServiceClient_GetSystemTransformerBySource_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetSystemTransformerBySourceRequest]) (*connect.Response[mgmtv1alpha1.GetSystemTransformerBySourceResponse], error)) *MockTransformersServiceClient_GetSystemTransformerBySource_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemTransformers provides a mock function with given fields: _a0, _a1
func (_m *MockTransformersServiceClient) GetSystemTransformers(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetSystemTransformersRequest]) (*connect.Response[mgmtv1alpha1.GetSystemTransformersResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemTransformers")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetSystemTransformersResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetSystemTransformersRequest]) (*connect.Response[mgmtv1alpha1.GetSystemTransformersResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetSystemTransformersRequest]) *connect.Response[mgmtv1alpha1.GetSystemTransformersResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetSystemTransformersResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetSystemTransformersRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransformersServiceClient_GetSystemTransformers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemTransformers'
type MockTransformersServiceClient_GetSystemTransformers_Call struct {
	*mock.Call
}

// GetSystemTransformers is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetSystemTransformersRequest]
func (_e *MockTransformersServiceClient_Expecter) GetSystemTransformers(_a0 interface{}, _a1 interface{}) *MockTransformersServiceClient_GetSystemTransformers_Call {
	return &MockTransformersServiceClient_GetSystemTransformers_Call{Call: _e.mock.On("GetSystemTransformers", _a0, _a1)}
}

func (_c *MockTransformersServiceClient_GetSystemTransformers_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetSystemTransformersRequest])) *MockTransformersServiceClient_GetSystemTransformers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetSystemTransformersRequest]))
	})
	return _c
}

func (_c *MockTransformersServiceClient_GetSystemTransformers_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetSystemTransformersResponse], _a1 error) *MockTransformersServiceClient_GetSystemTransformers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransformersServiceClient_GetSystemTransformers_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetSystemTransformersRequest]) (*connect.Response[mgmtv1alpha1.GetSystemTransformersResponse], error)) *MockTransformersServiceClient_GetSystemTransformers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserDefinedTransformerById provides a mock function with given fields: _a0, _a1
func (_m *MockTransformersServiceClient) GetUserDefinedTransformerById(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetUserDefinedTransformerByIdRequest]) (*connect.Response[mgmtv1alpha1.GetUserDefinedTransformerByIdResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDefinedTransformerById")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetUserDefinedTransformerByIdResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetUserDefinedTransformerByIdRequest]) (*connect.Response[mgmtv1alpha1.GetUserDefinedTransformerByIdResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetUserDefinedTransformerByIdRequest]) *connect.Response[mgmtv1alpha1.GetUserDefinedTransformerByIdResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetUserDefinedTransformerByIdResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetUserDefinedTransformerByIdRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransformersServiceClient_GetUserDefinedTransformerById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDefinedTransformerById'
type MockTransformersServiceClient_GetUserDefinedTransformerById_Call struct {
	*mock.Call
}

// GetUserDefinedTransformerById is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetUserDefinedTransformerByIdRequest]
func (_e *MockTransformersServiceClient_Expecter) GetUserDefinedTransformerById(_a0 interface{}, _a1 interface{}) *MockTransformersServiceClient_GetUserDefinedTransformerById_Call {
	return &MockTransformersServiceClient_GetUserDefinedTransformerById_Call{Call: _e.mock.On("GetUserDefinedTransformerById", _a0, _a1)}
}

func (_c *MockTransformersServiceClient_GetUserDefinedTransformerById_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetUserDefinedTransformerByIdRequest])) *MockTransformersServiceClient_GetUserDefinedTransformerById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetUserDefinedTransformerByIdRequest]))
	})
	return _c
}

func (_c *MockTransformersServiceClient_GetUserDefinedTransformerById_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetUserDefinedTransformerByIdResponse], _a1 error) *MockTransformersServiceClient_GetUserDefinedTransformerById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransformersServiceClient_GetUserDefinedTransformerById_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetUserDefinedTransformerByIdRequest]) (*connect.Response[mgmtv1alpha1.GetUserDefinedTransformerByIdResponse], error)) *MockTransformersServiceClient_GetUserDefinedTransformerById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserDefinedTransformers provides a mock function with given fields: _a0, _a1
func (_m *MockTransformersServiceClient) GetUserDefinedTransformers(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetUserDefinedTransformersRequest]) (*connect.Response[mgmtv1alpha1.GetUserDefinedTransformersResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDefinedTransformers")
	}

	var r0 *connect.Response[mgmtv1alpha1.GetUserDefinedTransformersResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetUserDefinedTransformersRequest]) (*connect.Response[mgmtv1alpha1.GetUserDefinedTransformersResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.GetUserDefinedTransformersRequest]) *connect.Response[mgmtv1alpha1.GetUserDefinedTransformersResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.GetUserDefinedTransformersResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.GetUserDefinedTransformersRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransformersServiceClient_GetUserDefinedTransformers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDefinedTransformers'
type MockTransformersServiceClient_GetUserDefinedTransformers_Call struct {
	*mock.Call
}

// GetUserDefinedTransformers is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.GetUserDefinedTransformersRequest]
func (_e *MockTransformersServiceClient_Expecter) GetUserDefinedTransformers(_a0 interface{}, _a1 interface{}) *MockTransformersServiceClient_GetUserDefinedTransformers_Call {
	return &MockTransformersServiceClient_GetUserDefinedTransformers_Call{Call: _e.mock.On("GetUserDefinedTransformers", _a0, _a1)}
}

func (_c *MockTransformersServiceClient_GetUserDefinedTransformers_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.GetUserDefinedTransformersRequest])) *MockTransformersServiceClient_GetUserDefinedTransformers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.GetUserDefinedTransformersRequest]))
	})
	return _c
}

func (_c *MockTransformersServiceClient_GetUserDefinedTransformers_Call) Return(_a0 *connect.Response[mgmtv1alpha1.GetUserDefinedTransformersResponse], _a1 error) *MockTransformersServiceClient_GetUserDefinedTransformers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransformersServiceClient_GetUserDefinedTransformers_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.GetUserDefinedTransformersRequest]) (*connect.Response[mgmtv1alpha1.GetUserDefinedTransformersResponse], error)) *MockTransformersServiceClient_GetUserDefinedTransformers_Call {
	_c.Call.Return(run)
	return _c
}

// IsTransformerNameAvailable provides a mock function with given fields: _a0, _a1
func (_m *MockTransformersServiceClient) IsTransformerNameAvailable(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.IsTransformerNameAvailableRequest]) (*connect.Response[mgmtv1alpha1.IsTransformerNameAvailableResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IsTransformerNameAvailable")
	}

	var r0 *connect.Response[mgmtv1alpha1.IsTransformerNameAvailableResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.IsTransformerNameAvailableRequest]) (*connect.Response[mgmtv1alpha1.IsTransformerNameAvailableResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.IsTransformerNameAvailableRequest]) *connect.Response[mgmtv1alpha1.IsTransformerNameAvailableResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.IsTransformerNameAvailableResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.IsTransformerNameAvailableRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransformersServiceClient_IsTransformerNameAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTransformerNameAvailable'
type MockTransformersServiceClient_IsTransformerNameAvailable_Call struct {
	*mock.Call
}

// IsTransformerNameAvailable is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.IsTransformerNameAvailableRequest]
func (_e *MockTransformersServiceClient_Expecter) IsTransformerNameAvailable(_a0 interface{}, _a1 interface{}) *MockTransformersServiceClient_IsTransformerNameAvailable_Call {
	return &MockTransformersServiceClient_IsTransformerNameAvailable_Call{Call: _e.mock.On("IsTransformerNameAvailable", _a0, _a1)}
}

func (_c *MockTransformersServiceClient_IsTransformerNameAvailable_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.IsTransformerNameAvailableRequest])) *MockTransformersServiceClient_IsTransformerNameAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.IsTransformerNameAvailableRequest]))
	})
	return _c
}

func (_c *MockTransformersServiceClient_IsTransformerNameAvailable_Call) Return(_a0 *connect.Response[mgmtv1alpha1.IsTransformerNameAvailableResponse], _a1 error) *MockTransformersServiceClient_IsTransformerNameAvailable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransformersServiceClient_IsTransformerNameAvailable_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.IsTransformerNameAvailableRequest]) (*connect.Response[mgmtv1alpha1.IsTransformerNameAvailableResponse], error)) *MockTransformersServiceClient_IsTransformerNameAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserDefinedTransformer provides a mock function with given fields: _a0, _a1
func (_m *MockTransformersServiceClient) UpdateUserDefinedTransformer(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.UpdateUserDefinedTransformerRequest]) (*connect.Response[mgmtv1alpha1.UpdateUserDefinedTransformerResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserDefinedTransformer")
	}

	var r0 *connect.Response[mgmtv1alpha1.UpdateUserDefinedTransformerResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateUserDefinedTransformerRequest]) (*connect.Response[mgmtv1alpha1.UpdateUserDefinedTransformerResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateUserDefinedTransformerRequest]) *connect.Response[mgmtv1alpha1.UpdateUserDefinedTransformerResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.UpdateUserDefinedTransformerResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.UpdateUserDefinedTransformerRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransformersServiceClient_UpdateUserDefinedTransformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserDefinedTransformer'
type MockTransformersServiceClient_UpdateUserDefinedTransformer_Call struct {
	*mock.Call
}

// UpdateUserDefinedTransformer is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.UpdateUserDefinedTransformerRequest]
func (_e *MockTransformersServiceClient_Expecter) UpdateUserDefinedTransformer(_a0 interface{}, _a1 interface{}) *MockTransformersServiceClient_UpdateUserDefinedTransformer_Call {
	return &MockTransformersServiceClient_UpdateUserDefinedTransformer_Call{Call: _e.mock.On("UpdateUserDefinedTransformer", _a0, _a1)}
}

func (_c *MockTransformersServiceClient_UpdateUserDefinedTransformer_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.UpdateUserDefinedTransformerRequest])) *MockTransformersServiceClient_UpdateUserDefinedTransformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.UpdateUserDefinedTransformerRequest]))
	})
	return _c
}

func (_c *MockTransformersServiceClient_UpdateUserDefinedTransformer_Call) Return(_a0 *connect.Response[mgmtv1alpha1.UpdateUserDefinedTransformerResponse], _a1 error) *MockTransformersServiceClient_UpdateUserDefinedTransformer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransformersServiceClient_UpdateUserDefinedTransformer_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.UpdateUserDefinedTransformerRequest]) (*connect.Response[mgmtv1alpha1.UpdateUserDefinedTransformerResponse], error)) *MockTransformersServiceClient_UpdateUserDefinedTransformer_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUserJavascriptCode provides a mock function with given fields: _a0, _a1
func (_m *MockTransformersServiceClient) ValidateUserJavascriptCode(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.ValidateUserJavascriptCodeRequest]) (*connect.Response[mgmtv1alpha1.ValidateUserJavascriptCodeResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUserJavascriptCode")
	}

	var r0 *connect.Response[mgmtv1alpha1.ValidateUserJavascriptCodeResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.ValidateUserJavascriptCodeRequest]) (*connect.Response[mgmtv1alpha1.ValidateUserJavascriptCodeResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.ValidateUserJavascriptCodeRequest]) *connect.Response[mgmtv1alpha1.ValidateUserJavascriptCodeResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.ValidateUserJavascriptCodeResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.ValidateUserJavascriptCodeRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransformersServiceClient_ValidateUserJavascriptCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUserJavascriptCode'
type MockTransformersServiceClient_ValidateUserJavascriptCode_Call struct {
	*mock.Call
}

// ValidateUserJavascriptCode is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.ValidateUserJavascriptCodeRequest]
func (_e *MockTransformersServiceClient_Expecter) ValidateUserJavascriptCode(_a0 interface{}, _a1 interface{}) *MockTransformersServiceClient_ValidateUserJavascriptCode_Call {
	return &MockTransformersServiceClient_ValidateUserJavascriptCode_Call{Call: _e.mock.On("ValidateUserJavascriptCode", _a0, _a1)}
}

func (_c *MockTransformersServiceClient_ValidateUserJavascriptCode_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.ValidateUserJavascriptCodeRequest])) *MockTransformersServiceClient_ValidateUserJavascriptCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.ValidateUserJavascriptCodeRequest]))
	})
	return _c
}

func (_c *MockTransformersServiceClient_ValidateUserJavascriptCode_Call) Return(_a0 *connect.Response[mgmtv1alpha1.ValidateUserJavascriptCodeResponse], _a1 error) *MockTransformersServiceClient_ValidateUserJavascriptCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransformersServiceClient_ValidateUserJavascriptCode_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.ValidateUserJavascriptCodeRequest]) (*connect.Response[mgmtv1alpha1.ValidateUserJavascriptCodeResponse], error)) *MockTransformersServiceClient_ValidateUserJavascriptCode_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUserRegexCode provides a mock function with given fields: _a0, _a1
func (_m *MockTransformersServiceClient) ValidateUserRegexCode(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.ValidateUserRegexCodeRequest]) (*connect.Response[mgmtv1alpha1.ValidateUserRegexCodeResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUserRegexCode")
	}

	var r0 *connect.Response[mgmtv1alpha1.ValidateUserRegexCodeResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.ValidateUserRegexCodeRequest]) (*connect.Response[mgmtv1alpha1.ValidateUserRegexCodeResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[mgmtv1alpha1.ValidateUserRegexCodeRequest]) *connect.Response[mgmtv1alpha1.ValidateUserRegexCodeResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[mgmtv1alpha1.ValidateUserRegexCodeResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[mgmtv1alpha1.ValidateUserRegexCodeRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransformersServiceClient_ValidateUserRegexCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUserRegexCode'
type MockTransformersServiceClient_ValidateUserRegexCode_Call struct {
	*mock.Call
}

// ValidateUserRegexCode is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connect.Request[mgmtv1alpha1.ValidateUserRegexCodeRequest]
func (_e *MockTransformersServiceClient_Expecter) ValidateUserRegexCode(_a0 interface{}, _a1 interface{}) *MockTransformersServiceClient_ValidateUserRegexCode_Call {
	return &MockTransformersServiceClient_ValidateUserRegexCode_Call{Call: _e.mock.On("ValidateUserRegexCode", _a0, _a1)}
}

func (_c *MockTransformersServiceClient_ValidateUserRegexCode_Call) Run(run func(_a0 context.Context, _a1 *connect.Request[mgmtv1alpha1.ValidateUserRegexCodeRequest])) *MockTransformersServiceClient_ValidateUserRegexCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[mgmtv1alpha1.ValidateUserRegexCodeRequest]))
	})
	return _c
}

func (_c *MockTransformersServiceClient_ValidateUserRegexCode_Call) Return(_a0 *connect.Response[mgmtv1alpha1.ValidateUserRegexCodeResponse], _a1 error) *MockTransformersServiceClient_ValidateUserRegexCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransformersServiceClient_ValidateUserRegexCode_Call) RunAndReturn(run func(context.Context, *connect.Request[mgmtv1alpha1.ValidateUserRegexCodeRequest]) (*connect.Response[mgmtv1alpha1.ValidateUserRegexCodeResponse], error)) *MockTransformersServiceClient_ValidateUserRegexCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransformersServiceClient creates a new instance of MockTransformersServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransformersServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransformersServiceClient {
	mock := &MockTransformersServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
