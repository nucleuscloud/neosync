// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mgmt/v1alpha1/job.proto

package mgmtv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JobServiceName is the fully-qualified name of the JobService service.
	JobServiceName = "mgmt.v1alpha1.JobService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JobServiceGetJobsProcedure is the fully-qualified name of the JobService's GetJobs RPC.
	JobServiceGetJobsProcedure = "/mgmt.v1alpha1.JobService/GetJobs"
	// JobServiceGetJobProcedure is the fully-qualified name of the JobService's GetJob RPC.
	JobServiceGetJobProcedure = "/mgmt.v1alpha1.JobService/GetJob"
	// JobServiceCreateJobProcedure is the fully-qualified name of the JobService's CreateJob RPC.
	JobServiceCreateJobProcedure = "/mgmt.v1alpha1.JobService/CreateJob"
	// JobServiceDeleteJobProcedure is the fully-qualified name of the JobService's DeleteJob RPC.
	JobServiceDeleteJobProcedure = "/mgmt.v1alpha1.JobService/DeleteJob"
	// JobServiceIsJobNameAvailableProcedure is the fully-qualified name of the JobService's
	// IsJobNameAvailable RPC.
	JobServiceIsJobNameAvailableProcedure = "/mgmt.v1alpha1.JobService/IsJobNameAvailable"
	// JobServiceUpdateJobScheduleProcedure is the fully-qualified name of the JobService's
	// UpdateJobSchedule RPC.
	JobServiceUpdateJobScheduleProcedure = "/mgmt.v1alpha1.JobService/UpdateJobSchedule"
	// JobServiceUpdateJobSourceConnectionProcedure is the fully-qualified name of the JobService's
	// UpdateJobSourceConnection RPC.
	JobServiceUpdateJobSourceConnectionProcedure = "/mgmt.v1alpha1.JobService/UpdateJobSourceConnection"
	// JobServiceSetJobSourceSqlConnectionSubsetsProcedure is the fully-qualified name of the
	// JobService's SetJobSourceSqlConnectionSubsets RPC.
	JobServiceSetJobSourceSqlConnectionSubsetsProcedure = "/mgmt.v1alpha1.JobService/SetJobSourceSqlConnectionSubsets"
	// JobServiceUpdateJobDestinationConnectionProcedure is the fully-qualified name of the JobService's
	// UpdateJobDestinationConnection RPC.
	JobServiceUpdateJobDestinationConnectionProcedure = "/mgmt.v1alpha1.JobService/UpdateJobDestinationConnection"
	// JobServiceDeleteJobDestinationConnectionProcedure is the fully-qualified name of the JobService's
	// DeleteJobDestinationConnection RPC.
	JobServiceDeleteJobDestinationConnectionProcedure = "/mgmt.v1alpha1.JobService/DeleteJobDestinationConnection"
	// JobServiceCreateJobDestinationConnectionsProcedure is the fully-qualified name of the
	// JobService's CreateJobDestinationConnections RPC.
	JobServiceCreateJobDestinationConnectionsProcedure = "/mgmt.v1alpha1.JobService/CreateJobDestinationConnections"
	// JobServicePauseJobProcedure is the fully-qualified name of the JobService's PauseJob RPC.
	JobServicePauseJobProcedure = "/mgmt.v1alpha1.JobService/PauseJob"
	// JobServiceGetJobRecentRunsProcedure is the fully-qualified name of the JobService's
	// GetJobRecentRuns RPC.
	JobServiceGetJobRecentRunsProcedure = "/mgmt.v1alpha1.JobService/GetJobRecentRuns"
	// JobServiceGetJobNextRunsProcedure is the fully-qualified name of the JobService's GetJobNextRuns
	// RPC.
	JobServiceGetJobNextRunsProcedure = "/mgmt.v1alpha1.JobService/GetJobNextRuns"
	// JobServiceGetJobStatusProcedure is the fully-qualified name of the JobService's GetJobStatus RPC.
	JobServiceGetJobStatusProcedure = "/mgmt.v1alpha1.JobService/GetJobStatus"
	// JobServiceGetJobStatusesProcedure is the fully-qualified name of the JobService's GetJobStatuses
	// RPC.
	JobServiceGetJobStatusesProcedure = "/mgmt.v1alpha1.JobService/GetJobStatuses"
	// JobServiceGetJobRunsProcedure is the fully-qualified name of the JobService's GetJobRuns RPC.
	JobServiceGetJobRunsProcedure = "/mgmt.v1alpha1.JobService/GetJobRuns"
	// JobServiceGetJobRunEventsProcedure is the fully-qualified name of the JobService's
	// GetJobRunEvents RPC.
	JobServiceGetJobRunEventsProcedure = "/mgmt.v1alpha1.JobService/GetJobRunEvents"
	// JobServiceGetJobRunProcedure is the fully-qualified name of the JobService's GetJobRun RPC.
	JobServiceGetJobRunProcedure = "/mgmt.v1alpha1.JobService/GetJobRun"
	// JobServiceDeleteJobRunProcedure is the fully-qualified name of the JobService's DeleteJobRun RPC.
	JobServiceDeleteJobRunProcedure = "/mgmt.v1alpha1.JobService/DeleteJobRun"
	// JobServiceCreateJobRunProcedure is the fully-qualified name of the JobService's CreateJobRun RPC.
	JobServiceCreateJobRunProcedure = "/mgmt.v1alpha1.JobService/CreateJobRun"
	// JobServiceCancelJobRunProcedure is the fully-qualified name of the JobService's CancelJobRun RPC.
	JobServiceCancelJobRunProcedure = "/mgmt.v1alpha1.JobService/CancelJobRun"
	// JobServiceTerminateJobRunProcedure is the fully-qualified name of the JobService's
	// TerminateJobRun RPC.
	JobServiceTerminateJobRunProcedure = "/mgmt.v1alpha1.JobService/TerminateJobRun"
	// JobServiceGetJobRunLogsStreamProcedure is the fully-qualified name of the JobService's
	// GetJobRunLogsStream RPC.
	JobServiceGetJobRunLogsStreamProcedure = "/mgmt.v1alpha1.JobService/GetJobRunLogsStream"
	// JobServiceSetJobWorkflowOptionsProcedure is the fully-qualified name of the JobService's
	// SetJobWorkflowOptions RPC.
	JobServiceSetJobWorkflowOptionsProcedure = "/mgmt.v1alpha1.JobService/SetJobWorkflowOptions"
	// JobServiceSetJobSyncOptionsProcedure is the fully-qualified name of the JobService's
	// SetJobSyncOptions RPC.
	JobServiceSetJobSyncOptionsProcedure = "/mgmt.v1alpha1.JobService/SetJobSyncOptions"
	// JobServiceValidateJobMappingsProcedure is the fully-qualified name of the JobService's
	// ValidateJobMappings RPC.
	JobServiceValidateJobMappingsProcedure = "/mgmt.v1alpha1.JobService/ValidateJobMappings"
	// JobServiceGetRunContextProcedure is the fully-qualified name of the JobService's GetRunContext
	// RPC.
	JobServiceGetRunContextProcedure = "/mgmt.v1alpha1.JobService/GetRunContext"
	// JobServiceSetRunContextProcedure is the fully-qualified name of the JobService's SetRunContext
	// RPC.
	JobServiceSetRunContextProcedure = "/mgmt.v1alpha1.JobService/SetRunContext"
	// JobServiceSetRunContextsProcedure is the fully-qualified name of the JobService's SetRunContexts
	// RPC.
	JobServiceSetRunContextsProcedure = "/mgmt.v1alpha1.JobService/SetRunContexts"
	// JobServiceGetJobHooksProcedure is the fully-qualified name of the JobService's GetJobHooks RPC.
	JobServiceGetJobHooksProcedure = "/mgmt.v1alpha1.JobService/GetJobHooks"
	// JobServiceGetJobHookProcedure is the fully-qualified name of the JobService's GetJobHook RPC.
	JobServiceGetJobHookProcedure = "/mgmt.v1alpha1.JobService/GetJobHook"
	// JobServiceCreateJobHookProcedure is the fully-qualified name of the JobService's CreateJobHook
	// RPC.
	JobServiceCreateJobHookProcedure = "/mgmt.v1alpha1.JobService/CreateJobHook"
	// JobServiceDeleteJobHookProcedure is the fully-qualified name of the JobService's DeleteJobHook
	// RPC.
	JobServiceDeleteJobHookProcedure = "/mgmt.v1alpha1.JobService/DeleteJobHook"
	// JobServiceIsJobHookNameAvailableProcedure is the fully-qualified name of the JobService's
	// IsJobHookNameAvailable RPC.
	JobServiceIsJobHookNameAvailableProcedure = "/mgmt.v1alpha1.JobService/IsJobHookNameAvailable"
	// JobServiceUpdateJobHookProcedure is the fully-qualified name of the JobService's UpdateJobHook
	// RPC.
	JobServiceUpdateJobHookProcedure = "/mgmt.v1alpha1.JobService/UpdateJobHook"
	// JobServiceSetJobHookEnabledProcedure is the fully-qualified name of the JobService's
	// SetJobHookEnabled RPC.
	JobServiceSetJobHookEnabledProcedure = "/mgmt.v1alpha1.JobService/SetJobHookEnabled"
	// JobServiceGetActiveJobHooksByTimingProcedure is the fully-qualified name of the JobService's
	// GetActiveJobHooksByTiming RPC.
	JobServiceGetActiveJobHooksByTimingProcedure = "/mgmt.v1alpha1.JobService/GetActiveJobHooksByTiming"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	jobServiceServiceDescriptor                                = v1alpha1.File_mgmt_v1alpha1_job_proto.Services().ByName("JobService")
	jobServiceGetJobsMethodDescriptor                          = jobServiceServiceDescriptor.Methods().ByName("GetJobs")
	jobServiceGetJobMethodDescriptor                           = jobServiceServiceDescriptor.Methods().ByName("GetJob")
	jobServiceCreateJobMethodDescriptor                        = jobServiceServiceDescriptor.Methods().ByName("CreateJob")
	jobServiceDeleteJobMethodDescriptor                        = jobServiceServiceDescriptor.Methods().ByName("DeleteJob")
	jobServiceIsJobNameAvailableMethodDescriptor               = jobServiceServiceDescriptor.Methods().ByName("IsJobNameAvailable")
	jobServiceUpdateJobScheduleMethodDescriptor                = jobServiceServiceDescriptor.Methods().ByName("UpdateJobSchedule")
	jobServiceUpdateJobSourceConnectionMethodDescriptor        = jobServiceServiceDescriptor.Methods().ByName("UpdateJobSourceConnection")
	jobServiceSetJobSourceSqlConnectionSubsetsMethodDescriptor = jobServiceServiceDescriptor.Methods().ByName("SetJobSourceSqlConnectionSubsets")
	jobServiceUpdateJobDestinationConnectionMethodDescriptor   = jobServiceServiceDescriptor.Methods().ByName("UpdateJobDestinationConnection")
	jobServiceDeleteJobDestinationConnectionMethodDescriptor   = jobServiceServiceDescriptor.Methods().ByName("DeleteJobDestinationConnection")
	jobServiceCreateJobDestinationConnectionsMethodDescriptor  = jobServiceServiceDescriptor.Methods().ByName("CreateJobDestinationConnections")
	jobServicePauseJobMethodDescriptor                         = jobServiceServiceDescriptor.Methods().ByName("PauseJob")
	jobServiceGetJobRecentRunsMethodDescriptor                 = jobServiceServiceDescriptor.Methods().ByName("GetJobRecentRuns")
	jobServiceGetJobNextRunsMethodDescriptor                   = jobServiceServiceDescriptor.Methods().ByName("GetJobNextRuns")
	jobServiceGetJobStatusMethodDescriptor                     = jobServiceServiceDescriptor.Methods().ByName("GetJobStatus")
	jobServiceGetJobStatusesMethodDescriptor                   = jobServiceServiceDescriptor.Methods().ByName("GetJobStatuses")
	jobServiceGetJobRunsMethodDescriptor                       = jobServiceServiceDescriptor.Methods().ByName("GetJobRuns")
	jobServiceGetJobRunEventsMethodDescriptor                  = jobServiceServiceDescriptor.Methods().ByName("GetJobRunEvents")
	jobServiceGetJobRunMethodDescriptor                        = jobServiceServiceDescriptor.Methods().ByName("GetJobRun")
	jobServiceDeleteJobRunMethodDescriptor                     = jobServiceServiceDescriptor.Methods().ByName("DeleteJobRun")
	jobServiceCreateJobRunMethodDescriptor                     = jobServiceServiceDescriptor.Methods().ByName("CreateJobRun")
	jobServiceCancelJobRunMethodDescriptor                     = jobServiceServiceDescriptor.Methods().ByName("CancelJobRun")
	jobServiceTerminateJobRunMethodDescriptor                  = jobServiceServiceDescriptor.Methods().ByName("TerminateJobRun")
	jobServiceGetJobRunLogsStreamMethodDescriptor              = jobServiceServiceDescriptor.Methods().ByName("GetJobRunLogsStream")
	jobServiceSetJobWorkflowOptionsMethodDescriptor            = jobServiceServiceDescriptor.Methods().ByName("SetJobWorkflowOptions")
	jobServiceSetJobSyncOptionsMethodDescriptor                = jobServiceServiceDescriptor.Methods().ByName("SetJobSyncOptions")
	jobServiceValidateJobMappingsMethodDescriptor              = jobServiceServiceDescriptor.Methods().ByName("ValidateJobMappings")
	jobServiceGetRunContextMethodDescriptor                    = jobServiceServiceDescriptor.Methods().ByName("GetRunContext")
	jobServiceSetRunContextMethodDescriptor                    = jobServiceServiceDescriptor.Methods().ByName("SetRunContext")
	jobServiceSetRunContextsMethodDescriptor                   = jobServiceServiceDescriptor.Methods().ByName("SetRunContexts")
	jobServiceGetJobHooksMethodDescriptor                      = jobServiceServiceDescriptor.Methods().ByName("GetJobHooks")
	jobServiceGetJobHookMethodDescriptor                       = jobServiceServiceDescriptor.Methods().ByName("GetJobHook")
	jobServiceCreateJobHookMethodDescriptor                    = jobServiceServiceDescriptor.Methods().ByName("CreateJobHook")
	jobServiceDeleteJobHookMethodDescriptor                    = jobServiceServiceDescriptor.Methods().ByName("DeleteJobHook")
	jobServiceIsJobHookNameAvailableMethodDescriptor           = jobServiceServiceDescriptor.Methods().ByName("IsJobHookNameAvailable")
	jobServiceUpdateJobHookMethodDescriptor                    = jobServiceServiceDescriptor.Methods().ByName("UpdateJobHook")
	jobServiceSetJobHookEnabledMethodDescriptor                = jobServiceServiceDescriptor.Methods().ByName("SetJobHookEnabled")
	jobServiceGetActiveJobHooksByTimingMethodDescriptor        = jobServiceServiceDescriptor.Methods().ByName("GetActiveJobHooksByTiming")
)

// JobServiceClient is a client for the mgmt.v1alpha1.JobService service.
type JobServiceClient interface {
	GetJobs(context.Context, *connect.Request[v1alpha1.GetJobsRequest]) (*connect.Response[v1alpha1.GetJobsResponse], error)
	GetJob(context.Context, *connect.Request[v1alpha1.GetJobRequest]) (*connect.Response[v1alpha1.GetJobResponse], error)
	CreateJob(context.Context, *connect.Request[v1alpha1.CreateJobRequest]) (*connect.Response[v1alpha1.CreateJobResponse], error)
	DeleteJob(context.Context, *connect.Request[v1alpha1.DeleteJobRequest]) (*connect.Response[v1alpha1.DeleteJobResponse], error)
	IsJobNameAvailable(context.Context, *connect.Request[v1alpha1.IsJobNameAvailableRequest]) (*connect.Response[v1alpha1.IsJobNameAvailableResponse], error)
	UpdateJobSchedule(context.Context, *connect.Request[v1alpha1.UpdateJobScheduleRequest]) (*connect.Response[v1alpha1.UpdateJobScheduleResponse], error)
	UpdateJobSourceConnection(context.Context, *connect.Request[v1alpha1.UpdateJobSourceConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobSourceConnectionResponse], error)
	SetJobSourceSqlConnectionSubsets(context.Context, *connect.Request[v1alpha1.SetJobSourceSqlConnectionSubsetsRequest]) (*connect.Response[v1alpha1.SetJobSourceSqlConnectionSubsetsResponse], error)
	UpdateJobDestinationConnection(context.Context, *connect.Request[v1alpha1.UpdateJobDestinationConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobDestinationConnectionResponse], error)
	DeleteJobDestinationConnection(context.Context, *connect.Request[v1alpha1.DeleteJobDestinationConnectionRequest]) (*connect.Response[v1alpha1.DeleteJobDestinationConnectionResponse], error)
	CreateJobDestinationConnections(context.Context, *connect.Request[v1alpha1.CreateJobDestinationConnectionsRequest]) (*connect.Response[v1alpha1.CreateJobDestinationConnectionsResponse], error)
	PauseJob(context.Context, *connect.Request[v1alpha1.PauseJobRequest]) (*connect.Response[v1alpha1.PauseJobResponse], error)
	// Returns a list of recently invoked job runs baseds on the Temporal cron scheduler. This will return a list of job runs that include archived runs
	GetJobRecentRuns(context.Context, *connect.Request[v1alpha1.GetJobRecentRunsRequest]) (*connect.Response[v1alpha1.GetJobRecentRunsResponse], error)
	// Returns a list of runs that are scheduled for execution based on the Temporal cron scheduler.
	GetJobNextRuns(context.Context, *connect.Request[v1alpha1.GetJobNextRunsRequest]) (*connect.Response[v1alpha1.GetJobNextRunsResponse], error)
	GetJobStatus(context.Context, *connect.Request[v1alpha1.GetJobStatusRequest]) (*connect.Response[v1alpha1.GetJobStatusResponse], error)
	GetJobStatuses(context.Context, *connect.Request[v1alpha1.GetJobStatusesRequest]) (*connect.Response[v1alpha1.GetJobStatusesResponse], error)
	// Returns a list of job runs by either account or job
	GetJobRuns(context.Context, *connect.Request[v1alpha1.GetJobRunsRequest]) (*connect.Response[v1alpha1.GetJobRunsResponse], error)
	GetJobRunEvents(context.Context, *connect.Request[v1alpha1.GetJobRunEventsRequest]) (*connect.Response[v1alpha1.GetJobRunEventsResponse], error)
	// Returns a specific job run, along with any of its pending activities
	GetJobRun(context.Context, *connect.Request[v1alpha1.GetJobRunRequest]) (*connect.Response[v1alpha1.GetJobRunResponse], error)
	DeleteJobRun(context.Context, *connect.Request[v1alpha1.DeleteJobRunRequest]) (*connect.Response[v1alpha1.DeleteJobRunResponse], error)
	CreateJobRun(context.Context, *connect.Request[v1alpha1.CreateJobRunRequest]) (*connect.Response[v1alpha1.CreateJobRunResponse], error)
	CancelJobRun(context.Context, *connect.Request[v1alpha1.CancelJobRunRequest]) (*connect.Response[v1alpha1.CancelJobRunResponse], error)
	TerminateJobRun(context.Context, *connect.Request[v1alpha1.TerminateJobRunRequest]) (*connect.Response[v1alpha1.TerminateJobRunResponse], error)
	// Returns a stream of logs from the worker nodes that pertain to a specific job run
	GetJobRunLogsStream(context.Context, *connect.Request[v1alpha1.GetJobRunLogsStreamRequest]) (*connect.ServerStreamForClient[v1alpha1.GetJobRunLogsStreamResponse], error)
	// Set any job workflow options. Must provide entire object as is it will fully override the previous configuration
	SetJobWorkflowOptions(context.Context, *connect.Request[v1alpha1.SetJobWorkflowOptionsRequest]) (*connect.Response[v1alpha1.SetJobWorkflowOptionsResponse], error)
	// Set the job sync options. Must provide entire object as it will fully override the previous configuration
	SetJobSyncOptions(context.Context, *connect.Request[v1alpha1.SetJobSyncOptionsRequest]) (*connect.Response[v1alpha1.SetJobSyncOptionsResponse], error)
	// validates that the jobmapping configured can run with table constraints
	ValidateJobMappings(context.Context, *connect.Request[v1alpha1.ValidateJobMappingsRequest]) (*connect.Response[v1alpha1.ValidateJobMappingsResponse], error)
	// Gets a run context to be used by a workflow run
	GetRunContext(context.Context, *connect.Request[v1alpha1.GetRunContextRequest]) (*connect.Response[v1alpha1.GetRunContextResponse], error)
	// Sets a run context to be used by a workflow run
	SetRunContext(context.Context, *connect.Request[v1alpha1.SetRunContextRequest]) (*connect.Response[v1alpha1.SetRunContextResponse], error)
	// Sets a stream of run contexts to be used by a workflow run
	SetRunContexts(context.Context) *connect.ClientStreamForClient[v1alpha1.SetRunContextsRequest, v1alpha1.SetRunContextsResponse]
	// Retrieves all job hooks
	GetJobHooks(context.Context, *connect.Request[v1alpha1.GetJobHooksRequest]) (*connect.Response[v1alpha1.GetJobHooksResponse], error)
	// Retrieves a specific job hook
	GetJobHook(context.Context, *connect.Request[v1alpha1.GetJobHookRequest]) (*connect.Response[v1alpha1.GetJobHookResponse], error)
	// Creates a new job hook
	CreateJobHook(context.Context, *connect.Request[v1alpha1.CreateJobHookRequest]) (*connect.Response[v1alpha1.CreateJobHookResponse], error)
	// Removes a job hook
	DeleteJobHook(context.Context, *connect.Request[v1alpha1.DeleteJobHookRequest]) (*connect.Response[v1alpha1.DeleteJobHookResponse], error)
	// Check if a specific job hook name is available
	IsJobHookNameAvailable(context.Context, *connect.Request[v1alpha1.IsJobHookNameAvailableRequest]) (*connect.Response[v1alpha1.IsJobHookNameAvailableResponse], error)
	// Updates a job hook
	UpdateJobHook(context.Context, *connect.Request[v1alpha1.UpdateJobHookRequest]) (*connect.Response[v1alpha1.UpdateJobHookResponse], error)
	// Enables or disables a job hook
	SetJobHookEnabled(context.Context, *connect.Request[v1alpha1.SetJobHookEnabledRequest]) (*connect.Response[v1alpha1.SetJobHookEnabledResponse], error)
	// Returns job hooks that are enabled by a specific timing. They will be sorted by priority, created_at, and id ascending.
	GetActiveJobHooksByTiming(context.Context, *connect.Request[v1alpha1.GetActiveJobHooksByTimingRequest]) (*connect.Response[v1alpha1.GetActiveJobHooksByTimingResponse], error)
}

// NewJobServiceClient constructs a client for the mgmt.v1alpha1.JobService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJobServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JobServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &jobServiceClient{
		getJobs: connect.NewClient[v1alpha1.GetJobsRequest, v1alpha1.GetJobsResponse](
			httpClient,
			baseURL+JobServiceGetJobsProcedure,
			connect.WithSchema(jobServiceGetJobsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJob: connect.NewClient[v1alpha1.GetJobRequest, v1alpha1.GetJobResponse](
			httpClient,
			baseURL+JobServiceGetJobProcedure,
			connect.WithSchema(jobServiceGetJobMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createJob: connect.NewClient[v1alpha1.CreateJobRequest, v1alpha1.CreateJobResponse](
			httpClient,
			baseURL+JobServiceCreateJobProcedure,
			connect.WithSchema(jobServiceCreateJobMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteJob: connect.NewClient[v1alpha1.DeleteJobRequest, v1alpha1.DeleteJobResponse](
			httpClient,
			baseURL+JobServiceDeleteJobProcedure,
			connect.WithSchema(jobServiceDeleteJobMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		isJobNameAvailable: connect.NewClient[v1alpha1.IsJobNameAvailableRequest, v1alpha1.IsJobNameAvailableResponse](
			httpClient,
			baseURL+JobServiceIsJobNameAvailableProcedure,
			connect.WithSchema(jobServiceIsJobNameAvailableMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateJobSchedule: connect.NewClient[v1alpha1.UpdateJobScheduleRequest, v1alpha1.UpdateJobScheduleResponse](
			httpClient,
			baseURL+JobServiceUpdateJobScheduleProcedure,
			connect.WithSchema(jobServiceUpdateJobScheduleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateJobSourceConnection: connect.NewClient[v1alpha1.UpdateJobSourceConnectionRequest, v1alpha1.UpdateJobSourceConnectionResponse](
			httpClient,
			baseURL+JobServiceUpdateJobSourceConnectionProcedure,
			connect.WithSchema(jobServiceUpdateJobSourceConnectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setJobSourceSqlConnectionSubsets: connect.NewClient[v1alpha1.SetJobSourceSqlConnectionSubsetsRequest, v1alpha1.SetJobSourceSqlConnectionSubsetsResponse](
			httpClient,
			baseURL+JobServiceSetJobSourceSqlConnectionSubsetsProcedure,
			connect.WithSchema(jobServiceSetJobSourceSqlConnectionSubsetsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateJobDestinationConnection: connect.NewClient[v1alpha1.UpdateJobDestinationConnectionRequest, v1alpha1.UpdateJobDestinationConnectionResponse](
			httpClient,
			baseURL+JobServiceUpdateJobDestinationConnectionProcedure,
			connect.WithSchema(jobServiceUpdateJobDestinationConnectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteJobDestinationConnection: connect.NewClient[v1alpha1.DeleteJobDestinationConnectionRequest, v1alpha1.DeleteJobDestinationConnectionResponse](
			httpClient,
			baseURL+JobServiceDeleteJobDestinationConnectionProcedure,
			connect.WithSchema(jobServiceDeleteJobDestinationConnectionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createJobDestinationConnections: connect.NewClient[v1alpha1.CreateJobDestinationConnectionsRequest, v1alpha1.CreateJobDestinationConnectionsResponse](
			httpClient,
			baseURL+JobServiceCreateJobDestinationConnectionsProcedure,
			connect.WithSchema(jobServiceCreateJobDestinationConnectionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pauseJob: connect.NewClient[v1alpha1.PauseJobRequest, v1alpha1.PauseJobResponse](
			httpClient,
			baseURL+JobServicePauseJobProcedure,
			connect.WithSchema(jobServicePauseJobMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobRecentRuns: connect.NewClient[v1alpha1.GetJobRecentRunsRequest, v1alpha1.GetJobRecentRunsResponse](
			httpClient,
			baseURL+JobServiceGetJobRecentRunsProcedure,
			connect.WithSchema(jobServiceGetJobRecentRunsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobNextRuns: connect.NewClient[v1alpha1.GetJobNextRunsRequest, v1alpha1.GetJobNextRunsResponse](
			httpClient,
			baseURL+JobServiceGetJobNextRunsProcedure,
			connect.WithSchema(jobServiceGetJobNextRunsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobStatus: connect.NewClient[v1alpha1.GetJobStatusRequest, v1alpha1.GetJobStatusResponse](
			httpClient,
			baseURL+JobServiceGetJobStatusProcedure,
			connect.WithSchema(jobServiceGetJobStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobStatuses: connect.NewClient[v1alpha1.GetJobStatusesRequest, v1alpha1.GetJobStatusesResponse](
			httpClient,
			baseURL+JobServiceGetJobStatusesProcedure,
			connect.WithSchema(jobServiceGetJobStatusesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobRuns: connect.NewClient[v1alpha1.GetJobRunsRequest, v1alpha1.GetJobRunsResponse](
			httpClient,
			baseURL+JobServiceGetJobRunsProcedure,
			connect.WithSchema(jobServiceGetJobRunsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobRunEvents: connect.NewClient[v1alpha1.GetJobRunEventsRequest, v1alpha1.GetJobRunEventsResponse](
			httpClient,
			baseURL+JobServiceGetJobRunEventsProcedure,
			connect.WithSchema(jobServiceGetJobRunEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobRun: connect.NewClient[v1alpha1.GetJobRunRequest, v1alpha1.GetJobRunResponse](
			httpClient,
			baseURL+JobServiceGetJobRunProcedure,
			connect.WithSchema(jobServiceGetJobRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteJobRun: connect.NewClient[v1alpha1.DeleteJobRunRequest, v1alpha1.DeleteJobRunResponse](
			httpClient,
			baseURL+JobServiceDeleteJobRunProcedure,
			connect.WithSchema(jobServiceDeleteJobRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createJobRun: connect.NewClient[v1alpha1.CreateJobRunRequest, v1alpha1.CreateJobRunResponse](
			httpClient,
			baseURL+JobServiceCreateJobRunProcedure,
			connect.WithSchema(jobServiceCreateJobRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelJobRun: connect.NewClient[v1alpha1.CancelJobRunRequest, v1alpha1.CancelJobRunResponse](
			httpClient,
			baseURL+JobServiceCancelJobRunProcedure,
			connect.WithSchema(jobServiceCancelJobRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		terminateJobRun: connect.NewClient[v1alpha1.TerminateJobRunRequest, v1alpha1.TerminateJobRunResponse](
			httpClient,
			baseURL+JobServiceTerminateJobRunProcedure,
			connect.WithSchema(jobServiceTerminateJobRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobRunLogsStream: connect.NewClient[v1alpha1.GetJobRunLogsStreamRequest, v1alpha1.GetJobRunLogsStreamResponse](
			httpClient,
			baseURL+JobServiceGetJobRunLogsStreamProcedure,
			connect.WithSchema(jobServiceGetJobRunLogsStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setJobWorkflowOptions: connect.NewClient[v1alpha1.SetJobWorkflowOptionsRequest, v1alpha1.SetJobWorkflowOptionsResponse](
			httpClient,
			baseURL+JobServiceSetJobWorkflowOptionsProcedure,
			connect.WithSchema(jobServiceSetJobWorkflowOptionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setJobSyncOptions: connect.NewClient[v1alpha1.SetJobSyncOptionsRequest, v1alpha1.SetJobSyncOptionsResponse](
			httpClient,
			baseURL+JobServiceSetJobSyncOptionsProcedure,
			connect.WithSchema(jobServiceSetJobSyncOptionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		validateJobMappings: connect.NewClient[v1alpha1.ValidateJobMappingsRequest, v1alpha1.ValidateJobMappingsResponse](
			httpClient,
			baseURL+JobServiceValidateJobMappingsProcedure,
			connect.WithSchema(jobServiceValidateJobMappingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRunContext: connect.NewClient[v1alpha1.GetRunContextRequest, v1alpha1.GetRunContextResponse](
			httpClient,
			baseURL+JobServiceGetRunContextProcedure,
			connect.WithSchema(jobServiceGetRunContextMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setRunContext: connect.NewClient[v1alpha1.SetRunContextRequest, v1alpha1.SetRunContextResponse](
			httpClient,
			baseURL+JobServiceSetRunContextProcedure,
			connect.WithSchema(jobServiceSetRunContextMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setRunContexts: connect.NewClient[v1alpha1.SetRunContextsRequest, v1alpha1.SetRunContextsResponse](
			httpClient,
			baseURL+JobServiceSetRunContextsProcedure,
			connect.WithSchema(jobServiceSetRunContextsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobHooks: connect.NewClient[v1alpha1.GetJobHooksRequest, v1alpha1.GetJobHooksResponse](
			httpClient,
			baseURL+JobServiceGetJobHooksProcedure,
			connect.WithSchema(jobServiceGetJobHooksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getJobHook: connect.NewClient[v1alpha1.GetJobHookRequest, v1alpha1.GetJobHookResponse](
			httpClient,
			baseURL+JobServiceGetJobHookProcedure,
			connect.WithSchema(jobServiceGetJobHookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createJobHook: connect.NewClient[v1alpha1.CreateJobHookRequest, v1alpha1.CreateJobHookResponse](
			httpClient,
			baseURL+JobServiceCreateJobHookProcedure,
			connect.WithSchema(jobServiceCreateJobHookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteJobHook: connect.NewClient[v1alpha1.DeleteJobHookRequest, v1alpha1.DeleteJobHookResponse](
			httpClient,
			baseURL+JobServiceDeleteJobHookProcedure,
			connect.WithSchema(jobServiceDeleteJobHookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		isJobHookNameAvailable: connect.NewClient[v1alpha1.IsJobHookNameAvailableRequest, v1alpha1.IsJobHookNameAvailableResponse](
			httpClient,
			baseURL+JobServiceIsJobHookNameAvailableProcedure,
			connect.WithSchema(jobServiceIsJobHookNameAvailableMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateJobHook: connect.NewClient[v1alpha1.UpdateJobHookRequest, v1alpha1.UpdateJobHookResponse](
			httpClient,
			baseURL+JobServiceUpdateJobHookProcedure,
			connect.WithSchema(jobServiceUpdateJobHookMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setJobHookEnabled: connect.NewClient[v1alpha1.SetJobHookEnabledRequest, v1alpha1.SetJobHookEnabledResponse](
			httpClient,
			baseURL+JobServiceSetJobHookEnabledProcedure,
			connect.WithSchema(jobServiceSetJobHookEnabledMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getActiveJobHooksByTiming: connect.NewClient[v1alpha1.GetActiveJobHooksByTimingRequest, v1alpha1.GetActiveJobHooksByTimingResponse](
			httpClient,
			baseURL+JobServiceGetActiveJobHooksByTimingProcedure,
			connect.WithSchema(jobServiceGetActiveJobHooksByTimingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// jobServiceClient implements JobServiceClient.
type jobServiceClient struct {
	getJobs                          *connect.Client[v1alpha1.GetJobsRequest, v1alpha1.GetJobsResponse]
	getJob                           *connect.Client[v1alpha1.GetJobRequest, v1alpha1.GetJobResponse]
	createJob                        *connect.Client[v1alpha1.CreateJobRequest, v1alpha1.CreateJobResponse]
	deleteJob                        *connect.Client[v1alpha1.DeleteJobRequest, v1alpha1.DeleteJobResponse]
	isJobNameAvailable               *connect.Client[v1alpha1.IsJobNameAvailableRequest, v1alpha1.IsJobNameAvailableResponse]
	updateJobSchedule                *connect.Client[v1alpha1.UpdateJobScheduleRequest, v1alpha1.UpdateJobScheduleResponse]
	updateJobSourceConnection        *connect.Client[v1alpha1.UpdateJobSourceConnectionRequest, v1alpha1.UpdateJobSourceConnectionResponse]
	setJobSourceSqlConnectionSubsets *connect.Client[v1alpha1.SetJobSourceSqlConnectionSubsetsRequest, v1alpha1.SetJobSourceSqlConnectionSubsetsResponse]
	updateJobDestinationConnection   *connect.Client[v1alpha1.UpdateJobDestinationConnectionRequest, v1alpha1.UpdateJobDestinationConnectionResponse]
	deleteJobDestinationConnection   *connect.Client[v1alpha1.DeleteJobDestinationConnectionRequest, v1alpha1.DeleteJobDestinationConnectionResponse]
	createJobDestinationConnections  *connect.Client[v1alpha1.CreateJobDestinationConnectionsRequest, v1alpha1.CreateJobDestinationConnectionsResponse]
	pauseJob                         *connect.Client[v1alpha1.PauseJobRequest, v1alpha1.PauseJobResponse]
	getJobRecentRuns                 *connect.Client[v1alpha1.GetJobRecentRunsRequest, v1alpha1.GetJobRecentRunsResponse]
	getJobNextRuns                   *connect.Client[v1alpha1.GetJobNextRunsRequest, v1alpha1.GetJobNextRunsResponse]
	getJobStatus                     *connect.Client[v1alpha1.GetJobStatusRequest, v1alpha1.GetJobStatusResponse]
	getJobStatuses                   *connect.Client[v1alpha1.GetJobStatusesRequest, v1alpha1.GetJobStatusesResponse]
	getJobRuns                       *connect.Client[v1alpha1.GetJobRunsRequest, v1alpha1.GetJobRunsResponse]
	getJobRunEvents                  *connect.Client[v1alpha1.GetJobRunEventsRequest, v1alpha1.GetJobRunEventsResponse]
	getJobRun                        *connect.Client[v1alpha1.GetJobRunRequest, v1alpha1.GetJobRunResponse]
	deleteJobRun                     *connect.Client[v1alpha1.DeleteJobRunRequest, v1alpha1.DeleteJobRunResponse]
	createJobRun                     *connect.Client[v1alpha1.CreateJobRunRequest, v1alpha1.CreateJobRunResponse]
	cancelJobRun                     *connect.Client[v1alpha1.CancelJobRunRequest, v1alpha1.CancelJobRunResponse]
	terminateJobRun                  *connect.Client[v1alpha1.TerminateJobRunRequest, v1alpha1.TerminateJobRunResponse]
	getJobRunLogsStream              *connect.Client[v1alpha1.GetJobRunLogsStreamRequest, v1alpha1.GetJobRunLogsStreamResponse]
	setJobWorkflowOptions            *connect.Client[v1alpha1.SetJobWorkflowOptionsRequest, v1alpha1.SetJobWorkflowOptionsResponse]
	setJobSyncOptions                *connect.Client[v1alpha1.SetJobSyncOptionsRequest, v1alpha1.SetJobSyncOptionsResponse]
	validateJobMappings              *connect.Client[v1alpha1.ValidateJobMappingsRequest, v1alpha1.ValidateJobMappingsResponse]
	getRunContext                    *connect.Client[v1alpha1.GetRunContextRequest, v1alpha1.GetRunContextResponse]
	setRunContext                    *connect.Client[v1alpha1.SetRunContextRequest, v1alpha1.SetRunContextResponse]
	setRunContexts                   *connect.Client[v1alpha1.SetRunContextsRequest, v1alpha1.SetRunContextsResponse]
	getJobHooks                      *connect.Client[v1alpha1.GetJobHooksRequest, v1alpha1.GetJobHooksResponse]
	getJobHook                       *connect.Client[v1alpha1.GetJobHookRequest, v1alpha1.GetJobHookResponse]
	createJobHook                    *connect.Client[v1alpha1.CreateJobHookRequest, v1alpha1.CreateJobHookResponse]
	deleteJobHook                    *connect.Client[v1alpha1.DeleteJobHookRequest, v1alpha1.DeleteJobHookResponse]
	isJobHookNameAvailable           *connect.Client[v1alpha1.IsJobHookNameAvailableRequest, v1alpha1.IsJobHookNameAvailableResponse]
	updateJobHook                    *connect.Client[v1alpha1.UpdateJobHookRequest, v1alpha1.UpdateJobHookResponse]
	setJobHookEnabled                *connect.Client[v1alpha1.SetJobHookEnabledRequest, v1alpha1.SetJobHookEnabledResponse]
	getActiveJobHooksByTiming        *connect.Client[v1alpha1.GetActiveJobHooksByTimingRequest, v1alpha1.GetActiveJobHooksByTimingResponse]
}

// GetJobs calls mgmt.v1alpha1.JobService.GetJobs.
func (c *jobServiceClient) GetJobs(ctx context.Context, req *connect.Request[v1alpha1.GetJobsRequest]) (*connect.Response[v1alpha1.GetJobsResponse], error) {
	return c.getJobs.CallUnary(ctx, req)
}

// GetJob calls mgmt.v1alpha1.JobService.GetJob.
func (c *jobServiceClient) GetJob(ctx context.Context, req *connect.Request[v1alpha1.GetJobRequest]) (*connect.Response[v1alpha1.GetJobResponse], error) {
	return c.getJob.CallUnary(ctx, req)
}

// CreateJob calls mgmt.v1alpha1.JobService.CreateJob.
func (c *jobServiceClient) CreateJob(ctx context.Context, req *connect.Request[v1alpha1.CreateJobRequest]) (*connect.Response[v1alpha1.CreateJobResponse], error) {
	return c.createJob.CallUnary(ctx, req)
}

// DeleteJob calls mgmt.v1alpha1.JobService.DeleteJob.
func (c *jobServiceClient) DeleteJob(ctx context.Context, req *connect.Request[v1alpha1.DeleteJobRequest]) (*connect.Response[v1alpha1.DeleteJobResponse], error) {
	return c.deleteJob.CallUnary(ctx, req)
}

// IsJobNameAvailable calls mgmt.v1alpha1.JobService.IsJobNameAvailable.
func (c *jobServiceClient) IsJobNameAvailable(ctx context.Context, req *connect.Request[v1alpha1.IsJobNameAvailableRequest]) (*connect.Response[v1alpha1.IsJobNameAvailableResponse], error) {
	return c.isJobNameAvailable.CallUnary(ctx, req)
}

// UpdateJobSchedule calls mgmt.v1alpha1.JobService.UpdateJobSchedule.
func (c *jobServiceClient) UpdateJobSchedule(ctx context.Context, req *connect.Request[v1alpha1.UpdateJobScheduleRequest]) (*connect.Response[v1alpha1.UpdateJobScheduleResponse], error) {
	return c.updateJobSchedule.CallUnary(ctx, req)
}

// UpdateJobSourceConnection calls mgmt.v1alpha1.JobService.UpdateJobSourceConnection.
func (c *jobServiceClient) UpdateJobSourceConnection(ctx context.Context, req *connect.Request[v1alpha1.UpdateJobSourceConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobSourceConnectionResponse], error) {
	return c.updateJobSourceConnection.CallUnary(ctx, req)
}

// SetJobSourceSqlConnectionSubsets calls mgmt.v1alpha1.JobService.SetJobSourceSqlConnectionSubsets.
func (c *jobServiceClient) SetJobSourceSqlConnectionSubsets(ctx context.Context, req *connect.Request[v1alpha1.SetJobSourceSqlConnectionSubsetsRequest]) (*connect.Response[v1alpha1.SetJobSourceSqlConnectionSubsetsResponse], error) {
	return c.setJobSourceSqlConnectionSubsets.CallUnary(ctx, req)
}

// UpdateJobDestinationConnection calls mgmt.v1alpha1.JobService.UpdateJobDestinationConnection.
func (c *jobServiceClient) UpdateJobDestinationConnection(ctx context.Context, req *connect.Request[v1alpha1.UpdateJobDestinationConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobDestinationConnectionResponse], error) {
	return c.updateJobDestinationConnection.CallUnary(ctx, req)
}

// DeleteJobDestinationConnection calls mgmt.v1alpha1.JobService.DeleteJobDestinationConnection.
func (c *jobServiceClient) DeleteJobDestinationConnection(ctx context.Context, req *connect.Request[v1alpha1.DeleteJobDestinationConnectionRequest]) (*connect.Response[v1alpha1.DeleteJobDestinationConnectionResponse], error) {
	return c.deleteJobDestinationConnection.CallUnary(ctx, req)
}

// CreateJobDestinationConnections calls mgmt.v1alpha1.JobService.CreateJobDestinationConnections.
func (c *jobServiceClient) CreateJobDestinationConnections(ctx context.Context, req *connect.Request[v1alpha1.CreateJobDestinationConnectionsRequest]) (*connect.Response[v1alpha1.CreateJobDestinationConnectionsResponse], error) {
	return c.createJobDestinationConnections.CallUnary(ctx, req)
}

// PauseJob calls mgmt.v1alpha1.JobService.PauseJob.
func (c *jobServiceClient) PauseJob(ctx context.Context, req *connect.Request[v1alpha1.PauseJobRequest]) (*connect.Response[v1alpha1.PauseJobResponse], error) {
	return c.pauseJob.CallUnary(ctx, req)
}

// GetJobRecentRuns calls mgmt.v1alpha1.JobService.GetJobRecentRuns.
func (c *jobServiceClient) GetJobRecentRuns(ctx context.Context, req *connect.Request[v1alpha1.GetJobRecentRunsRequest]) (*connect.Response[v1alpha1.GetJobRecentRunsResponse], error) {
	return c.getJobRecentRuns.CallUnary(ctx, req)
}

// GetJobNextRuns calls mgmt.v1alpha1.JobService.GetJobNextRuns.
func (c *jobServiceClient) GetJobNextRuns(ctx context.Context, req *connect.Request[v1alpha1.GetJobNextRunsRequest]) (*connect.Response[v1alpha1.GetJobNextRunsResponse], error) {
	return c.getJobNextRuns.CallUnary(ctx, req)
}

// GetJobStatus calls mgmt.v1alpha1.JobService.GetJobStatus.
func (c *jobServiceClient) GetJobStatus(ctx context.Context, req *connect.Request[v1alpha1.GetJobStatusRequest]) (*connect.Response[v1alpha1.GetJobStatusResponse], error) {
	return c.getJobStatus.CallUnary(ctx, req)
}

// GetJobStatuses calls mgmt.v1alpha1.JobService.GetJobStatuses.
func (c *jobServiceClient) GetJobStatuses(ctx context.Context, req *connect.Request[v1alpha1.GetJobStatusesRequest]) (*connect.Response[v1alpha1.GetJobStatusesResponse], error) {
	return c.getJobStatuses.CallUnary(ctx, req)
}

// GetJobRuns calls mgmt.v1alpha1.JobService.GetJobRuns.
func (c *jobServiceClient) GetJobRuns(ctx context.Context, req *connect.Request[v1alpha1.GetJobRunsRequest]) (*connect.Response[v1alpha1.GetJobRunsResponse], error) {
	return c.getJobRuns.CallUnary(ctx, req)
}

// GetJobRunEvents calls mgmt.v1alpha1.JobService.GetJobRunEvents.
func (c *jobServiceClient) GetJobRunEvents(ctx context.Context, req *connect.Request[v1alpha1.GetJobRunEventsRequest]) (*connect.Response[v1alpha1.GetJobRunEventsResponse], error) {
	return c.getJobRunEvents.CallUnary(ctx, req)
}

// GetJobRun calls mgmt.v1alpha1.JobService.GetJobRun.
func (c *jobServiceClient) GetJobRun(ctx context.Context, req *connect.Request[v1alpha1.GetJobRunRequest]) (*connect.Response[v1alpha1.GetJobRunResponse], error) {
	return c.getJobRun.CallUnary(ctx, req)
}

// DeleteJobRun calls mgmt.v1alpha1.JobService.DeleteJobRun.
func (c *jobServiceClient) DeleteJobRun(ctx context.Context, req *connect.Request[v1alpha1.DeleteJobRunRequest]) (*connect.Response[v1alpha1.DeleteJobRunResponse], error) {
	return c.deleteJobRun.CallUnary(ctx, req)
}

// CreateJobRun calls mgmt.v1alpha1.JobService.CreateJobRun.
func (c *jobServiceClient) CreateJobRun(ctx context.Context, req *connect.Request[v1alpha1.CreateJobRunRequest]) (*connect.Response[v1alpha1.CreateJobRunResponse], error) {
	return c.createJobRun.CallUnary(ctx, req)
}

// CancelJobRun calls mgmt.v1alpha1.JobService.CancelJobRun.
func (c *jobServiceClient) CancelJobRun(ctx context.Context, req *connect.Request[v1alpha1.CancelJobRunRequest]) (*connect.Response[v1alpha1.CancelJobRunResponse], error) {
	return c.cancelJobRun.CallUnary(ctx, req)
}

// TerminateJobRun calls mgmt.v1alpha1.JobService.TerminateJobRun.
func (c *jobServiceClient) TerminateJobRun(ctx context.Context, req *connect.Request[v1alpha1.TerminateJobRunRequest]) (*connect.Response[v1alpha1.TerminateJobRunResponse], error) {
	return c.terminateJobRun.CallUnary(ctx, req)
}

// GetJobRunLogsStream calls mgmt.v1alpha1.JobService.GetJobRunLogsStream.
func (c *jobServiceClient) GetJobRunLogsStream(ctx context.Context, req *connect.Request[v1alpha1.GetJobRunLogsStreamRequest]) (*connect.ServerStreamForClient[v1alpha1.GetJobRunLogsStreamResponse], error) {
	return c.getJobRunLogsStream.CallServerStream(ctx, req)
}

// SetJobWorkflowOptions calls mgmt.v1alpha1.JobService.SetJobWorkflowOptions.
func (c *jobServiceClient) SetJobWorkflowOptions(ctx context.Context, req *connect.Request[v1alpha1.SetJobWorkflowOptionsRequest]) (*connect.Response[v1alpha1.SetJobWorkflowOptionsResponse], error) {
	return c.setJobWorkflowOptions.CallUnary(ctx, req)
}

// SetJobSyncOptions calls mgmt.v1alpha1.JobService.SetJobSyncOptions.
func (c *jobServiceClient) SetJobSyncOptions(ctx context.Context, req *connect.Request[v1alpha1.SetJobSyncOptionsRequest]) (*connect.Response[v1alpha1.SetJobSyncOptionsResponse], error) {
	return c.setJobSyncOptions.CallUnary(ctx, req)
}

// ValidateJobMappings calls mgmt.v1alpha1.JobService.ValidateJobMappings.
func (c *jobServiceClient) ValidateJobMappings(ctx context.Context, req *connect.Request[v1alpha1.ValidateJobMappingsRequest]) (*connect.Response[v1alpha1.ValidateJobMappingsResponse], error) {
	return c.validateJobMappings.CallUnary(ctx, req)
}

// GetRunContext calls mgmt.v1alpha1.JobService.GetRunContext.
func (c *jobServiceClient) GetRunContext(ctx context.Context, req *connect.Request[v1alpha1.GetRunContextRequest]) (*connect.Response[v1alpha1.GetRunContextResponse], error) {
	return c.getRunContext.CallUnary(ctx, req)
}

// SetRunContext calls mgmt.v1alpha1.JobService.SetRunContext.
func (c *jobServiceClient) SetRunContext(ctx context.Context, req *connect.Request[v1alpha1.SetRunContextRequest]) (*connect.Response[v1alpha1.SetRunContextResponse], error) {
	return c.setRunContext.CallUnary(ctx, req)
}

// SetRunContexts calls mgmt.v1alpha1.JobService.SetRunContexts.
func (c *jobServiceClient) SetRunContexts(ctx context.Context) *connect.ClientStreamForClient[v1alpha1.SetRunContextsRequest, v1alpha1.SetRunContextsResponse] {
	return c.setRunContexts.CallClientStream(ctx)
}

// GetJobHooks calls mgmt.v1alpha1.JobService.GetJobHooks.
func (c *jobServiceClient) GetJobHooks(ctx context.Context, req *connect.Request[v1alpha1.GetJobHooksRequest]) (*connect.Response[v1alpha1.GetJobHooksResponse], error) {
	return c.getJobHooks.CallUnary(ctx, req)
}

// GetJobHook calls mgmt.v1alpha1.JobService.GetJobHook.
func (c *jobServiceClient) GetJobHook(ctx context.Context, req *connect.Request[v1alpha1.GetJobHookRequest]) (*connect.Response[v1alpha1.GetJobHookResponse], error) {
	return c.getJobHook.CallUnary(ctx, req)
}

// CreateJobHook calls mgmt.v1alpha1.JobService.CreateJobHook.
func (c *jobServiceClient) CreateJobHook(ctx context.Context, req *connect.Request[v1alpha1.CreateJobHookRequest]) (*connect.Response[v1alpha1.CreateJobHookResponse], error) {
	return c.createJobHook.CallUnary(ctx, req)
}

// DeleteJobHook calls mgmt.v1alpha1.JobService.DeleteJobHook.
func (c *jobServiceClient) DeleteJobHook(ctx context.Context, req *connect.Request[v1alpha1.DeleteJobHookRequest]) (*connect.Response[v1alpha1.DeleteJobHookResponse], error) {
	return c.deleteJobHook.CallUnary(ctx, req)
}

// IsJobHookNameAvailable calls mgmt.v1alpha1.JobService.IsJobHookNameAvailable.
func (c *jobServiceClient) IsJobHookNameAvailable(ctx context.Context, req *connect.Request[v1alpha1.IsJobHookNameAvailableRequest]) (*connect.Response[v1alpha1.IsJobHookNameAvailableResponse], error) {
	return c.isJobHookNameAvailable.CallUnary(ctx, req)
}

// UpdateJobHook calls mgmt.v1alpha1.JobService.UpdateJobHook.
func (c *jobServiceClient) UpdateJobHook(ctx context.Context, req *connect.Request[v1alpha1.UpdateJobHookRequest]) (*connect.Response[v1alpha1.UpdateJobHookResponse], error) {
	return c.updateJobHook.CallUnary(ctx, req)
}

// SetJobHookEnabled calls mgmt.v1alpha1.JobService.SetJobHookEnabled.
func (c *jobServiceClient) SetJobHookEnabled(ctx context.Context, req *connect.Request[v1alpha1.SetJobHookEnabledRequest]) (*connect.Response[v1alpha1.SetJobHookEnabledResponse], error) {
	return c.setJobHookEnabled.CallUnary(ctx, req)
}

// GetActiveJobHooksByTiming calls mgmt.v1alpha1.JobService.GetActiveJobHooksByTiming.
func (c *jobServiceClient) GetActiveJobHooksByTiming(ctx context.Context, req *connect.Request[v1alpha1.GetActiveJobHooksByTimingRequest]) (*connect.Response[v1alpha1.GetActiveJobHooksByTimingResponse], error) {
	return c.getActiveJobHooksByTiming.CallUnary(ctx, req)
}

// JobServiceHandler is an implementation of the mgmt.v1alpha1.JobService service.
type JobServiceHandler interface {
	GetJobs(context.Context, *connect.Request[v1alpha1.GetJobsRequest]) (*connect.Response[v1alpha1.GetJobsResponse], error)
	GetJob(context.Context, *connect.Request[v1alpha1.GetJobRequest]) (*connect.Response[v1alpha1.GetJobResponse], error)
	CreateJob(context.Context, *connect.Request[v1alpha1.CreateJobRequest]) (*connect.Response[v1alpha1.CreateJobResponse], error)
	DeleteJob(context.Context, *connect.Request[v1alpha1.DeleteJobRequest]) (*connect.Response[v1alpha1.DeleteJobResponse], error)
	IsJobNameAvailable(context.Context, *connect.Request[v1alpha1.IsJobNameAvailableRequest]) (*connect.Response[v1alpha1.IsJobNameAvailableResponse], error)
	UpdateJobSchedule(context.Context, *connect.Request[v1alpha1.UpdateJobScheduleRequest]) (*connect.Response[v1alpha1.UpdateJobScheduleResponse], error)
	UpdateJobSourceConnection(context.Context, *connect.Request[v1alpha1.UpdateJobSourceConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobSourceConnectionResponse], error)
	SetJobSourceSqlConnectionSubsets(context.Context, *connect.Request[v1alpha1.SetJobSourceSqlConnectionSubsetsRequest]) (*connect.Response[v1alpha1.SetJobSourceSqlConnectionSubsetsResponse], error)
	UpdateJobDestinationConnection(context.Context, *connect.Request[v1alpha1.UpdateJobDestinationConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobDestinationConnectionResponse], error)
	DeleteJobDestinationConnection(context.Context, *connect.Request[v1alpha1.DeleteJobDestinationConnectionRequest]) (*connect.Response[v1alpha1.DeleteJobDestinationConnectionResponse], error)
	CreateJobDestinationConnections(context.Context, *connect.Request[v1alpha1.CreateJobDestinationConnectionsRequest]) (*connect.Response[v1alpha1.CreateJobDestinationConnectionsResponse], error)
	PauseJob(context.Context, *connect.Request[v1alpha1.PauseJobRequest]) (*connect.Response[v1alpha1.PauseJobResponse], error)
	// Returns a list of recently invoked job runs baseds on the Temporal cron scheduler. This will return a list of job runs that include archived runs
	GetJobRecentRuns(context.Context, *connect.Request[v1alpha1.GetJobRecentRunsRequest]) (*connect.Response[v1alpha1.GetJobRecentRunsResponse], error)
	// Returns a list of runs that are scheduled for execution based on the Temporal cron scheduler.
	GetJobNextRuns(context.Context, *connect.Request[v1alpha1.GetJobNextRunsRequest]) (*connect.Response[v1alpha1.GetJobNextRunsResponse], error)
	GetJobStatus(context.Context, *connect.Request[v1alpha1.GetJobStatusRequest]) (*connect.Response[v1alpha1.GetJobStatusResponse], error)
	GetJobStatuses(context.Context, *connect.Request[v1alpha1.GetJobStatusesRequest]) (*connect.Response[v1alpha1.GetJobStatusesResponse], error)
	// Returns a list of job runs by either account or job
	GetJobRuns(context.Context, *connect.Request[v1alpha1.GetJobRunsRequest]) (*connect.Response[v1alpha1.GetJobRunsResponse], error)
	GetJobRunEvents(context.Context, *connect.Request[v1alpha1.GetJobRunEventsRequest]) (*connect.Response[v1alpha1.GetJobRunEventsResponse], error)
	// Returns a specific job run, along with any of its pending activities
	GetJobRun(context.Context, *connect.Request[v1alpha1.GetJobRunRequest]) (*connect.Response[v1alpha1.GetJobRunResponse], error)
	DeleteJobRun(context.Context, *connect.Request[v1alpha1.DeleteJobRunRequest]) (*connect.Response[v1alpha1.DeleteJobRunResponse], error)
	CreateJobRun(context.Context, *connect.Request[v1alpha1.CreateJobRunRequest]) (*connect.Response[v1alpha1.CreateJobRunResponse], error)
	CancelJobRun(context.Context, *connect.Request[v1alpha1.CancelJobRunRequest]) (*connect.Response[v1alpha1.CancelJobRunResponse], error)
	TerminateJobRun(context.Context, *connect.Request[v1alpha1.TerminateJobRunRequest]) (*connect.Response[v1alpha1.TerminateJobRunResponse], error)
	// Returns a stream of logs from the worker nodes that pertain to a specific job run
	GetJobRunLogsStream(context.Context, *connect.Request[v1alpha1.GetJobRunLogsStreamRequest], *connect.ServerStream[v1alpha1.GetJobRunLogsStreamResponse]) error
	// Set any job workflow options. Must provide entire object as is it will fully override the previous configuration
	SetJobWorkflowOptions(context.Context, *connect.Request[v1alpha1.SetJobWorkflowOptionsRequest]) (*connect.Response[v1alpha1.SetJobWorkflowOptionsResponse], error)
	// Set the job sync options. Must provide entire object as it will fully override the previous configuration
	SetJobSyncOptions(context.Context, *connect.Request[v1alpha1.SetJobSyncOptionsRequest]) (*connect.Response[v1alpha1.SetJobSyncOptionsResponse], error)
	// validates that the jobmapping configured can run with table constraints
	ValidateJobMappings(context.Context, *connect.Request[v1alpha1.ValidateJobMappingsRequest]) (*connect.Response[v1alpha1.ValidateJobMappingsResponse], error)
	// Gets a run context to be used by a workflow run
	GetRunContext(context.Context, *connect.Request[v1alpha1.GetRunContextRequest]) (*connect.Response[v1alpha1.GetRunContextResponse], error)
	// Sets a run context to be used by a workflow run
	SetRunContext(context.Context, *connect.Request[v1alpha1.SetRunContextRequest]) (*connect.Response[v1alpha1.SetRunContextResponse], error)
	// Sets a stream of run contexts to be used by a workflow run
	SetRunContexts(context.Context, *connect.ClientStream[v1alpha1.SetRunContextsRequest]) (*connect.Response[v1alpha1.SetRunContextsResponse], error)
	// Retrieves all job hooks
	GetJobHooks(context.Context, *connect.Request[v1alpha1.GetJobHooksRequest]) (*connect.Response[v1alpha1.GetJobHooksResponse], error)
	// Retrieves a specific job hook
	GetJobHook(context.Context, *connect.Request[v1alpha1.GetJobHookRequest]) (*connect.Response[v1alpha1.GetJobHookResponse], error)
	// Creates a new job hook
	CreateJobHook(context.Context, *connect.Request[v1alpha1.CreateJobHookRequest]) (*connect.Response[v1alpha1.CreateJobHookResponse], error)
	// Removes a job hook
	DeleteJobHook(context.Context, *connect.Request[v1alpha1.DeleteJobHookRequest]) (*connect.Response[v1alpha1.DeleteJobHookResponse], error)
	// Check if a specific job hook name is available
	IsJobHookNameAvailable(context.Context, *connect.Request[v1alpha1.IsJobHookNameAvailableRequest]) (*connect.Response[v1alpha1.IsJobHookNameAvailableResponse], error)
	// Updates a job hook
	UpdateJobHook(context.Context, *connect.Request[v1alpha1.UpdateJobHookRequest]) (*connect.Response[v1alpha1.UpdateJobHookResponse], error)
	// Enables or disables a job hook
	SetJobHookEnabled(context.Context, *connect.Request[v1alpha1.SetJobHookEnabledRequest]) (*connect.Response[v1alpha1.SetJobHookEnabledResponse], error)
	// Returns job hooks that are enabled by a specific timing. They will be sorted by priority, created_at, and id ascending.
	GetActiveJobHooksByTiming(context.Context, *connect.Request[v1alpha1.GetActiveJobHooksByTimingRequest]) (*connect.Response[v1alpha1.GetActiveJobHooksByTimingResponse], error)
}

// NewJobServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJobServiceHandler(svc JobServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jobServiceGetJobsHandler := connect.NewUnaryHandler(
		JobServiceGetJobsProcedure,
		svc.GetJobs,
		connect.WithSchema(jobServiceGetJobsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobHandler := connect.NewUnaryHandler(
		JobServiceGetJobProcedure,
		svc.GetJob,
		connect.WithSchema(jobServiceGetJobMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceCreateJobHandler := connect.NewUnaryHandler(
		JobServiceCreateJobProcedure,
		svc.CreateJob,
		connect.WithSchema(jobServiceCreateJobMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceDeleteJobHandler := connect.NewUnaryHandler(
		JobServiceDeleteJobProcedure,
		svc.DeleteJob,
		connect.WithSchema(jobServiceDeleteJobMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceIsJobNameAvailableHandler := connect.NewUnaryHandler(
		JobServiceIsJobNameAvailableProcedure,
		svc.IsJobNameAvailable,
		connect.WithSchema(jobServiceIsJobNameAvailableMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceUpdateJobScheduleHandler := connect.NewUnaryHandler(
		JobServiceUpdateJobScheduleProcedure,
		svc.UpdateJobSchedule,
		connect.WithSchema(jobServiceUpdateJobScheduleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceUpdateJobSourceConnectionHandler := connect.NewUnaryHandler(
		JobServiceUpdateJobSourceConnectionProcedure,
		svc.UpdateJobSourceConnection,
		connect.WithSchema(jobServiceUpdateJobSourceConnectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceSetJobSourceSqlConnectionSubsetsHandler := connect.NewUnaryHandler(
		JobServiceSetJobSourceSqlConnectionSubsetsProcedure,
		svc.SetJobSourceSqlConnectionSubsets,
		connect.WithSchema(jobServiceSetJobSourceSqlConnectionSubsetsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceUpdateJobDestinationConnectionHandler := connect.NewUnaryHandler(
		JobServiceUpdateJobDestinationConnectionProcedure,
		svc.UpdateJobDestinationConnection,
		connect.WithSchema(jobServiceUpdateJobDestinationConnectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceDeleteJobDestinationConnectionHandler := connect.NewUnaryHandler(
		JobServiceDeleteJobDestinationConnectionProcedure,
		svc.DeleteJobDestinationConnection,
		connect.WithSchema(jobServiceDeleteJobDestinationConnectionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceCreateJobDestinationConnectionsHandler := connect.NewUnaryHandler(
		JobServiceCreateJobDestinationConnectionsProcedure,
		svc.CreateJobDestinationConnections,
		connect.WithSchema(jobServiceCreateJobDestinationConnectionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServicePauseJobHandler := connect.NewUnaryHandler(
		JobServicePauseJobProcedure,
		svc.PauseJob,
		connect.WithSchema(jobServicePauseJobMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobRecentRunsHandler := connect.NewUnaryHandler(
		JobServiceGetJobRecentRunsProcedure,
		svc.GetJobRecentRuns,
		connect.WithSchema(jobServiceGetJobRecentRunsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobNextRunsHandler := connect.NewUnaryHandler(
		JobServiceGetJobNextRunsProcedure,
		svc.GetJobNextRuns,
		connect.WithSchema(jobServiceGetJobNextRunsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobStatusHandler := connect.NewUnaryHandler(
		JobServiceGetJobStatusProcedure,
		svc.GetJobStatus,
		connect.WithSchema(jobServiceGetJobStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobStatusesHandler := connect.NewUnaryHandler(
		JobServiceGetJobStatusesProcedure,
		svc.GetJobStatuses,
		connect.WithSchema(jobServiceGetJobStatusesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobRunsHandler := connect.NewUnaryHandler(
		JobServiceGetJobRunsProcedure,
		svc.GetJobRuns,
		connect.WithSchema(jobServiceGetJobRunsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobRunEventsHandler := connect.NewUnaryHandler(
		JobServiceGetJobRunEventsProcedure,
		svc.GetJobRunEvents,
		connect.WithSchema(jobServiceGetJobRunEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobRunHandler := connect.NewUnaryHandler(
		JobServiceGetJobRunProcedure,
		svc.GetJobRun,
		connect.WithSchema(jobServiceGetJobRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceDeleteJobRunHandler := connect.NewUnaryHandler(
		JobServiceDeleteJobRunProcedure,
		svc.DeleteJobRun,
		connect.WithSchema(jobServiceDeleteJobRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceCreateJobRunHandler := connect.NewUnaryHandler(
		JobServiceCreateJobRunProcedure,
		svc.CreateJobRun,
		connect.WithSchema(jobServiceCreateJobRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceCancelJobRunHandler := connect.NewUnaryHandler(
		JobServiceCancelJobRunProcedure,
		svc.CancelJobRun,
		connect.WithSchema(jobServiceCancelJobRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceTerminateJobRunHandler := connect.NewUnaryHandler(
		JobServiceTerminateJobRunProcedure,
		svc.TerminateJobRun,
		connect.WithSchema(jobServiceTerminateJobRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobRunLogsStreamHandler := connect.NewServerStreamHandler(
		JobServiceGetJobRunLogsStreamProcedure,
		svc.GetJobRunLogsStream,
		connect.WithSchema(jobServiceGetJobRunLogsStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceSetJobWorkflowOptionsHandler := connect.NewUnaryHandler(
		JobServiceSetJobWorkflowOptionsProcedure,
		svc.SetJobWorkflowOptions,
		connect.WithSchema(jobServiceSetJobWorkflowOptionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceSetJobSyncOptionsHandler := connect.NewUnaryHandler(
		JobServiceSetJobSyncOptionsProcedure,
		svc.SetJobSyncOptions,
		connect.WithSchema(jobServiceSetJobSyncOptionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceValidateJobMappingsHandler := connect.NewUnaryHandler(
		JobServiceValidateJobMappingsProcedure,
		svc.ValidateJobMappings,
		connect.WithSchema(jobServiceValidateJobMappingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetRunContextHandler := connect.NewUnaryHandler(
		JobServiceGetRunContextProcedure,
		svc.GetRunContext,
		connect.WithSchema(jobServiceGetRunContextMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceSetRunContextHandler := connect.NewUnaryHandler(
		JobServiceSetRunContextProcedure,
		svc.SetRunContext,
		connect.WithSchema(jobServiceSetRunContextMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceSetRunContextsHandler := connect.NewClientStreamHandler(
		JobServiceSetRunContextsProcedure,
		svc.SetRunContexts,
		connect.WithSchema(jobServiceSetRunContextsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobHooksHandler := connect.NewUnaryHandler(
		JobServiceGetJobHooksProcedure,
		svc.GetJobHooks,
		connect.WithSchema(jobServiceGetJobHooksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetJobHookHandler := connect.NewUnaryHandler(
		JobServiceGetJobHookProcedure,
		svc.GetJobHook,
		connect.WithSchema(jobServiceGetJobHookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceCreateJobHookHandler := connect.NewUnaryHandler(
		JobServiceCreateJobHookProcedure,
		svc.CreateJobHook,
		connect.WithSchema(jobServiceCreateJobHookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceDeleteJobHookHandler := connect.NewUnaryHandler(
		JobServiceDeleteJobHookProcedure,
		svc.DeleteJobHook,
		connect.WithSchema(jobServiceDeleteJobHookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceIsJobHookNameAvailableHandler := connect.NewUnaryHandler(
		JobServiceIsJobHookNameAvailableProcedure,
		svc.IsJobHookNameAvailable,
		connect.WithSchema(jobServiceIsJobHookNameAvailableMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceUpdateJobHookHandler := connect.NewUnaryHandler(
		JobServiceUpdateJobHookProcedure,
		svc.UpdateJobHook,
		connect.WithSchema(jobServiceUpdateJobHookMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceSetJobHookEnabledHandler := connect.NewUnaryHandler(
		JobServiceSetJobHookEnabledProcedure,
		svc.SetJobHookEnabled,
		connect.WithSchema(jobServiceSetJobHookEnabledMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceGetActiveJobHooksByTimingHandler := connect.NewUnaryHandler(
		JobServiceGetActiveJobHooksByTimingProcedure,
		svc.GetActiveJobHooksByTiming,
		connect.WithSchema(jobServiceGetActiveJobHooksByTimingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/mgmt.v1alpha1.JobService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JobServiceGetJobsProcedure:
			jobServiceGetJobsHandler.ServeHTTP(w, r)
		case JobServiceGetJobProcedure:
			jobServiceGetJobHandler.ServeHTTP(w, r)
		case JobServiceCreateJobProcedure:
			jobServiceCreateJobHandler.ServeHTTP(w, r)
		case JobServiceDeleteJobProcedure:
			jobServiceDeleteJobHandler.ServeHTTP(w, r)
		case JobServiceIsJobNameAvailableProcedure:
			jobServiceIsJobNameAvailableHandler.ServeHTTP(w, r)
		case JobServiceUpdateJobScheduleProcedure:
			jobServiceUpdateJobScheduleHandler.ServeHTTP(w, r)
		case JobServiceUpdateJobSourceConnectionProcedure:
			jobServiceUpdateJobSourceConnectionHandler.ServeHTTP(w, r)
		case JobServiceSetJobSourceSqlConnectionSubsetsProcedure:
			jobServiceSetJobSourceSqlConnectionSubsetsHandler.ServeHTTP(w, r)
		case JobServiceUpdateJobDestinationConnectionProcedure:
			jobServiceUpdateJobDestinationConnectionHandler.ServeHTTP(w, r)
		case JobServiceDeleteJobDestinationConnectionProcedure:
			jobServiceDeleteJobDestinationConnectionHandler.ServeHTTP(w, r)
		case JobServiceCreateJobDestinationConnectionsProcedure:
			jobServiceCreateJobDestinationConnectionsHandler.ServeHTTP(w, r)
		case JobServicePauseJobProcedure:
			jobServicePauseJobHandler.ServeHTTP(w, r)
		case JobServiceGetJobRecentRunsProcedure:
			jobServiceGetJobRecentRunsHandler.ServeHTTP(w, r)
		case JobServiceGetJobNextRunsProcedure:
			jobServiceGetJobNextRunsHandler.ServeHTTP(w, r)
		case JobServiceGetJobStatusProcedure:
			jobServiceGetJobStatusHandler.ServeHTTP(w, r)
		case JobServiceGetJobStatusesProcedure:
			jobServiceGetJobStatusesHandler.ServeHTTP(w, r)
		case JobServiceGetJobRunsProcedure:
			jobServiceGetJobRunsHandler.ServeHTTP(w, r)
		case JobServiceGetJobRunEventsProcedure:
			jobServiceGetJobRunEventsHandler.ServeHTTP(w, r)
		case JobServiceGetJobRunProcedure:
			jobServiceGetJobRunHandler.ServeHTTP(w, r)
		case JobServiceDeleteJobRunProcedure:
			jobServiceDeleteJobRunHandler.ServeHTTP(w, r)
		case JobServiceCreateJobRunProcedure:
			jobServiceCreateJobRunHandler.ServeHTTP(w, r)
		case JobServiceCancelJobRunProcedure:
			jobServiceCancelJobRunHandler.ServeHTTP(w, r)
		case JobServiceTerminateJobRunProcedure:
			jobServiceTerminateJobRunHandler.ServeHTTP(w, r)
		case JobServiceGetJobRunLogsStreamProcedure:
			jobServiceGetJobRunLogsStreamHandler.ServeHTTP(w, r)
		case JobServiceSetJobWorkflowOptionsProcedure:
			jobServiceSetJobWorkflowOptionsHandler.ServeHTTP(w, r)
		case JobServiceSetJobSyncOptionsProcedure:
			jobServiceSetJobSyncOptionsHandler.ServeHTTP(w, r)
		case JobServiceValidateJobMappingsProcedure:
			jobServiceValidateJobMappingsHandler.ServeHTTP(w, r)
		case JobServiceGetRunContextProcedure:
			jobServiceGetRunContextHandler.ServeHTTP(w, r)
		case JobServiceSetRunContextProcedure:
			jobServiceSetRunContextHandler.ServeHTTP(w, r)
		case JobServiceSetRunContextsProcedure:
			jobServiceSetRunContextsHandler.ServeHTTP(w, r)
		case JobServiceGetJobHooksProcedure:
			jobServiceGetJobHooksHandler.ServeHTTP(w, r)
		case JobServiceGetJobHookProcedure:
			jobServiceGetJobHookHandler.ServeHTTP(w, r)
		case JobServiceCreateJobHookProcedure:
			jobServiceCreateJobHookHandler.ServeHTTP(w, r)
		case JobServiceDeleteJobHookProcedure:
			jobServiceDeleteJobHookHandler.ServeHTTP(w, r)
		case JobServiceIsJobHookNameAvailableProcedure:
			jobServiceIsJobHookNameAvailableHandler.ServeHTTP(w, r)
		case JobServiceUpdateJobHookProcedure:
			jobServiceUpdateJobHookHandler.ServeHTTP(w, r)
		case JobServiceSetJobHookEnabledProcedure:
			jobServiceSetJobHookEnabledHandler.ServeHTTP(w, r)
		case JobServiceGetActiveJobHooksByTimingProcedure:
			jobServiceGetActiveJobHooksByTimingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJobServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJobServiceHandler struct{}

func (UnimplementedJobServiceHandler) GetJobs(context.Context, *connect.Request[v1alpha1.GetJobsRequest]) (*connect.Response[v1alpha1.GetJobsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobs is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJob(context.Context, *connect.Request[v1alpha1.GetJobRequest]) (*connect.Response[v1alpha1.GetJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJob is not implemented"))
}

func (UnimplementedJobServiceHandler) CreateJob(context.Context, *connect.Request[v1alpha1.CreateJobRequest]) (*connect.Response[v1alpha1.CreateJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.CreateJob is not implemented"))
}

func (UnimplementedJobServiceHandler) DeleteJob(context.Context, *connect.Request[v1alpha1.DeleteJobRequest]) (*connect.Response[v1alpha1.DeleteJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.DeleteJob is not implemented"))
}

func (UnimplementedJobServiceHandler) IsJobNameAvailable(context.Context, *connect.Request[v1alpha1.IsJobNameAvailableRequest]) (*connect.Response[v1alpha1.IsJobNameAvailableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.IsJobNameAvailable is not implemented"))
}

func (UnimplementedJobServiceHandler) UpdateJobSchedule(context.Context, *connect.Request[v1alpha1.UpdateJobScheduleRequest]) (*connect.Response[v1alpha1.UpdateJobScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.UpdateJobSchedule is not implemented"))
}

func (UnimplementedJobServiceHandler) UpdateJobSourceConnection(context.Context, *connect.Request[v1alpha1.UpdateJobSourceConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobSourceConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.UpdateJobSourceConnection is not implemented"))
}

func (UnimplementedJobServiceHandler) SetJobSourceSqlConnectionSubsets(context.Context, *connect.Request[v1alpha1.SetJobSourceSqlConnectionSubsetsRequest]) (*connect.Response[v1alpha1.SetJobSourceSqlConnectionSubsetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.SetJobSourceSqlConnectionSubsets is not implemented"))
}

func (UnimplementedJobServiceHandler) UpdateJobDestinationConnection(context.Context, *connect.Request[v1alpha1.UpdateJobDestinationConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobDestinationConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.UpdateJobDestinationConnection is not implemented"))
}

func (UnimplementedJobServiceHandler) DeleteJobDestinationConnection(context.Context, *connect.Request[v1alpha1.DeleteJobDestinationConnectionRequest]) (*connect.Response[v1alpha1.DeleteJobDestinationConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.DeleteJobDestinationConnection is not implemented"))
}

func (UnimplementedJobServiceHandler) CreateJobDestinationConnections(context.Context, *connect.Request[v1alpha1.CreateJobDestinationConnectionsRequest]) (*connect.Response[v1alpha1.CreateJobDestinationConnectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.CreateJobDestinationConnections is not implemented"))
}

func (UnimplementedJobServiceHandler) PauseJob(context.Context, *connect.Request[v1alpha1.PauseJobRequest]) (*connect.Response[v1alpha1.PauseJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.PauseJob is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobRecentRuns(context.Context, *connect.Request[v1alpha1.GetJobRecentRunsRequest]) (*connect.Response[v1alpha1.GetJobRecentRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobRecentRuns is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobNextRuns(context.Context, *connect.Request[v1alpha1.GetJobNextRunsRequest]) (*connect.Response[v1alpha1.GetJobNextRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobNextRuns is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobStatus(context.Context, *connect.Request[v1alpha1.GetJobStatusRequest]) (*connect.Response[v1alpha1.GetJobStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobStatus is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobStatuses(context.Context, *connect.Request[v1alpha1.GetJobStatusesRequest]) (*connect.Response[v1alpha1.GetJobStatusesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobStatuses is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobRuns(context.Context, *connect.Request[v1alpha1.GetJobRunsRequest]) (*connect.Response[v1alpha1.GetJobRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobRuns is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobRunEvents(context.Context, *connect.Request[v1alpha1.GetJobRunEventsRequest]) (*connect.Response[v1alpha1.GetJobRunEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobRunEvents is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobRun(context.Context, *connect.Request[v1alpha1.GetJobRunRequest]) (*connect.Response[v1alpha1.GetJobRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobRun is not implemented"))
}

func (UnimplementedJobServiceHandler) DeleteJobRun(context.Context, *connect.Request[v1alpha1.DeleteJobRunRequest]) (*connect.Response[v1alpha1.DeleteJobRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.DeleteJobRun is not implemented"))
}

func (UnimplementedJobServiceHandler) CreateJobRun(context.Context, *connect.Request[v1alpha1.CreateJobRunRequest]) (*connect.Response[v1alpha1.CreateJobRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.CreateJobRun is not implemented"))
}

func (UnimplementedJobServiceHandler) CancelJobRun(context.Context, *connect.Request[v1alpha1.CancelJobRunRequest]) (*connect.Response[v1alpha1.CancelJobRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.CancelJobRun is not implemented"))
}

func (UnimplementedJobServiceHandler) TerminateJobRun(context.Context, *connect.Request[v1alpha1.TerminateJobRunRequest]) (*connect.Response[v1alpha1.TerminateJobRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.TerminateJobRun is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobRunLogsStream(context.Context, *connect.Request[v1alpha1.GetJobRunLogsStreamRequest], *connect.ServerStream[v1alpha1.GetJobRunLogsStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobRunLogsStream is not implemented"))
}

func (UnimplementedJobServiceHandler) SetJobWorkflowOptions(context.Context, *connect.Request[v1alpha1.SetJobWorkflowOptionsRequest]) (*connect.Response[v1alpha1.SetJobWorkflowOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.SetJobWorkflowOptions is not implemented"))
}

func (UnimplementedJobServiceHandler) SetJobSyncOptions(context.Context, *connect.Request[v1alpha1.SetJobSyncOptionsRequest]) (*connect.Response[v1alpha1.SetJobSyncOptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.SetJobSyncOptions is not implemented"))
}

func (UnimplementedJobServiceHandler) ValidateJobMappings(context.Context, *connect.Request[v1alpha1.ValidateJobMappingsRequest]) (*connect.Response[v1alpha1.ValidateJobMappingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.ValidateJobMappings is not implemented"))
}

func (UnimplementedJobServiceHandler) GetRunContext(context.Context, *connect.Request[v1alpha1.GetRunContextRequest]) (*connect.Response[v1alpha1.GetRunContextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetRunContext is not implemented"))
}

func (UnimplementedJobServiceHandler) SetRunContext(context.Context, *connect.Request[v1alpha1.SetRunContextRequest]) (*connect.Response[v1alpha1.SetRunContextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.SetRunContext is not implemented"))
}

func (UnimplementedJobServiceHandler) SetRunContexts(context.Context, *connect.ClientStream[v1alpha1.SetRunContextsRequest]) (*connect.Response[v1alpha1.SetRunContextsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.SetRunContexts is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobHooks(context.Context, *connect.Request[v1alpha1.GetJobHooksRequest]) (*connect.Response[v1alpha1.GetJobHooksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobHooks is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobHook(context.Context, *connect.Request[v1alpha1.GetJobHookRequest]) (*connect.Response[v1alpha1.GetJobHookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobHook is not implemented"))
}

func (UnimplementedJobServiceHandler) CreateJobHook(context.Context, *connect.Request[v1alpha1.CreateJobHookRequest]) (*connect.Response[v1alpha1.CreateJobHookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.CreateJobHook is not implemented"))
}

func (UnimplementedJobServiceHandler) DeleteJobHook(context.Context, *connect.Request[v1alpha1.DeleteJobHookRequest]) (*connect.Response[v1alpha1.DeleteJobHookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.DeleteJobHook is not implemented"))
}

func (UnimplementedJobServiceHandler) IsJobHookNameAvailable(context.Context, *connect.Request[v1alpha1.IsJobHookNameAvailableRequest]) (*connect.Response[v1alpha1.IsJobHookNameAvailableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.IsJobHookNameAvailable is not implemented"))
}

func (UnimplementedJobServiceHandler) UpdateJobHook(context.Context, *connect.Request[v1alpha1.UpdateJobHookRequest]) (*connect.Response[v1alpha1.UpdateJobHookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.UpdateJobHook is not implemented"))
}

func (UnimplementedJobServiceHandler) SetJobHookEnabled(context.Context, *connect.Request[v1alpha1.SetJobHookEnabledRequest]) (*connect.Response[v1alpha1.SetJobHookEnabledResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.SetJobHookEnabled is not implemented"))
}

func (UnimplementedJobServiceHandler) GetActiveJobHooksByTiming(context.Context, *connect.Request[v1alpha1.GetActiveJobHooksByTimingRequest]) (*connect.Response[v1alpha1.GetActiveJobHooksByTimingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetActiveJobHooksByTiming is not implemented"))
}
