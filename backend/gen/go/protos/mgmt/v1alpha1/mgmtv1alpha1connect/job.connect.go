// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mgmt/v1alpha1/job.proto

package mgmtv1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// JobServiceName is the fully-qualified name of the JobService service.
	JobServiceName = "mgmt.v1alpha1.JobService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JobServiceGetJobsProcedure is the fully-qualified name of the JobService's GetJobs RPC.
	JobServiceGetJobsProcedure = "/mgmt.v1alpha1.JobService/GetJobs"
	// JobServiceGetJobProcedure is the fully-qualified name of the JobService's GetJob RPC.
	JobServiceGetJobProcedure = "/mgmt.v1alpha1.JobService/GetJob"
	// JobServiceCreateJobProcedure is the fully-qualified name of the JobService's CreateJob RPC.
	JobServiceCreateJobProcedure = "/mgmt.v1alpha1.JobService/CreateJob"
	// JobServiceDeleteJobProcedure is the fully-qualified name of the JobService's DeleteJob RPC.
	JobServiceDeleteJobProcedure = "/mgmt.v1alpha1.JobService/DeleteJob"
	// JobServiceIsJobNameAvailableProcedure is the fully-qualified name of the JobService's
	// IsJobNameAvailable RPC.
	JobServiceIsJobNameAvailableProcedure = "/mgmt.v1alpha1.JobService/IsJobNameAvailable"
	// JobServiceUpdateJobScheduleProcedure is the fully-qualified name of the JobService's
	// UpdateJobSchedule RPC.
	JobServiceUpdateJobScheduleProcedure = "/mgmt.v1alpha1.JobService/UpdateJobSchedule"
	// JobServiceUpdateJobSourceConnectionProcedure is the fully-qualified name of the JobService's
	// UpdateJobSourceConnection RPC.
	JobServiceUpdateJobSourceConnectionProcedure = "/mgmt.v1alpha1.JobService/UpdateJobSourceConnection"
	// JobServiceUpdateJobDestinationConnectionProcedure is the fully-qualified name of the JobService's
	// UpdateJobDestinationConnection RPC.
	JobServiceUpdateJobDestinationConnectionProcedure = "/mgmt.v1alpha1.JobService/UpdateJobDestinationConnection"
	// JobServiceUpdateJobMappingsProcedure is the fully-qualified name of the JobService's
	// UpdateJobMappings RPC.
	JobServiceUpdateJobMappingsProcedure = "/mgmt.v1alpha1.JobService/UpdateJobMappings"
	// JobServiceGetJobRunsProcedure is the fully-qualified name of the JobService's GetJobRuns RPC.
	JobServiceGetJobRunsProcedure = "/mgmt.v1alpha1.JobService/GetJobRuns"
	// JobServiceGetJobRunEventsProcedure is the fully-qualified name of the JobService's
	// GetJobRunEvents RPC.
	JobServiceGetJobRunEventsProcedure = "/mgmt.v1alpha1.JobService/GetJobRunEvents"
	// JobServiceGetJobRunProcedure is the fully-qualified name of the JobService's GetJobRun RPC.
	JobServiceGetJobRunProcedure = "/mgmt.v1alpha1.JobService/GetJobRun"
	// JobServiceDeleteJobRunProcedure is the fully-qualified name of the JobService's DeleteJobRun RPC.
	JobServiceDeleteJobRunProcedure = "/mgmt.v1alpha1.JobService/DeleteJobRun"
	// JobServiceCreateJobRunProcedure is the fully-qualified name of the JobService's CreateJobRun RPC.
	JobServiceCreateJobRunProcedure = "/mgmt.v1alpha1.JobService/CreateJobRun"
	// JobServiceCancelJobRunProcedure is the fully-qualified name of the JobService's CancelJobRun RPC.
	JobServiceCancelJobRunProcedure = "/mgmt.v1alpha1.JobService/CancelJobRun"
	// JobServiceGetTransformersProcedure is the fully-qualified name of the JobService's
	// GetTransformers RPC.
	JobServiceGetTransformersProcedure = "/mgmt.v1alpha1.JobService/GetTransformers"
)

// JobServiceClient is a client for the mgmt.v1alpha1.JobService service.
type JobServiceClient interface {
	GetJobs(context.Context, *connect.Request[v1alpha1.GetJobsRequest]) (*connect.Response[v1alpha1.GetJobsResponse], error)
	GetJob(context.Context, *connect.Request[v1alpha1.GetJobRequest]) (*connect.Response[v1alpha1.GetJobResponse], error)
	CreateJob(context.Context, *connect.Request[v1alpha1.CreateJobRequest]) (*connect.Response[v1alpha1.CreateJobResponse], error)
	DeleteJob(context.Context, *connect.Request[v1alpha1.DeleteJobRequest]) (*connect.Response[v1alpha1.DeleteJobResponse], error)
	IsJobNameAvailable(context.Context, *connect.Request[v1alpha1.IsJobNameAvailableRequest]) (*connect.Response[v1alpha1.IsJobNameAvailableResponse], error)
	UpdateJobSchedule(context.Context, *connect.Request[v1alpha1.UpdateJobScheduleRequest]) (*connect.Response[v1alpha1.UpdateJobScheduleResponse], error)
	UpdateJobSourceConnection(context.Context, *connect.Request[v1alpha1.UpdateJobSourceConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobSourceConnectionResponse], error)
	UpdateJobDestinationConnection(context.Context, *connect.Request[v1alpha1.UpdateJobDestinationConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobDestinationConnectionResponse], error)
	UpdateJobMappings(context.Context, *connect.Request[v1alpha1.UpdateJobMappingsRequest]) (*connect.Response[v1alpha1.UpdateJobMappingsResponse], error)
	GetJobRuns(context.Context, *connect.Request[v1alpha1.GetJobRunsRequest]) (*connect.Response[v1alpha1.GetJobRunsResponse], error)
	GetJobRunEvents(context.Context, *connect.Request[v1alpha1.GetJobRunEventsRequest]) (*connect.Response[v1alpha1.GetJobRunEventsResponse], error)
	GetJobRun(context.Context, *connect.Request[v1alpha1.GetJobRunRequest]) (*connect.Response[v1alpha1.GetJobRunResponse], error)
	DeleteJobRun(context.Context, *connect.Request[v1alpha1.DeleteJobRunRequest]) (*connect.Response[v1alpha1.DeleteJobRunResponse], error)
	CreateJobRun(context.Context, *connect.Request[v1alpha1.CreateJobRunRequest]) (*connect.Response[v1alpha1.CreateJobRunResponse], error)
	CancelJobRun(context.Context, *connect.Request[v1alpha1.CancelJobRunRequest]) (*connect.Response[v1alpha1.CancelJobRunResponse], error)
	GetTransformers(context.Context, *connect.Request[v1alpha1.GetTransformersRequest]) (*connect.Response[v1alpha1.GetTransformersResponse], error)
}

// NewJobServiceClient constructs a client for the mgmt.v1alpha1.JobService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJobServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JobServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &jobServiceClient{
		getJobs: connect.NewClient[v1alpha1.GetJobsRequest, v1alpha1.GetJobsResponse](
			httpClient,
			baseURL+JobServiceGetJobsProcedure,
			opts...,
		),
		getJob: connect.NewClient[v1alpha1.GetJobRequest, v1alpha1.GetJobResponse](
			httpClient,
			baseURL+JobServiceGetJobProcedure,
			opts...,
		),
		createJob: connect.NewClient[v1alpha1.CreateJobRequest, v1alpha1.CreateJobResponse](
			httpClient,
			baseURL+JobServiceCreateJobProcedure,
			opts...,
		),
		deleteJob: connect.NewClient[v1alpha1.DeleteJobRequest, v1alpha1.DeleteJobResponse](
			httpClient,
			baseURL+JobServiceDeleteJobProcedure,
			opts...,
		),
		isJobNameAvailable: connect.NewClient[v1alpha1.IsJobNameAvailableRequest, v1alpha1.IsJobNameAvailableResponse](
			httpClient,
			baseURL+JobServiceIsJobNameAvailableProcedure,
			opts...,
		),
		updateJobSchedule: connect.NewClient[v1alpha1.UpdateJobScheduleRequest, v1alpha1.UpdateJobScheduleResponse](
			httpClient,
			baseURL+JobServiceUpdateJobScheduleProcedure,
			opts...,
		),
		updateJobSourceConnection: connect.NewClient[v1alpha1.UpdateJobSourceConnectionRequest, v1alpha1.UpdateJobSourceConnectionResponse](
			httpClient,
			baseURL+JobServiceUpdateJobSourceConnectionProcedure,
			opts...,
		),
		updateJobDestinationConnection: connect.NewClient[v1alpha1.UpdateJobDestinationConnectionRequest, v1alpha1.UpdateJobDestinationConnectionResponse](
			httpClient,
			baseURL+JobServiceUpdateJobDestinationConnectionProcedure,
			opts...,
		),
		updateJobMappings: connect.NewClient[v1alpha1.UpdateJobMappingsRequest, v1alpha1.UpdateJobMappingsResponse](
			httpClient,
			baseURL+JobServiceUpdateJobMappingsProcedure,
			opts...,
		),
		getJobRuns: connect.NewClient[v1alpha1.GetJobRunsRequest, v1alpha1.GetJobRunsResponse](
			httpClient,
			baseURL+JobServiceGetJobRunsProcedure,
			opts...,
		),
		getJobRunEvents: connect.NewClient[v1alpha1.GetJobRunEventsRequest, v1alpha1.GetJobRunEventsResponse](
			httpClient,
			baseURL+JobServiceGetJobRunEventsProcedure,
			opts...,
		),
		getJobRun: connect.NewClient[v1alpha1.GetJobRunRequest, v1alpha1.GetJobRunResponse](
			httpClient,
			baseURL+JobServiceGetJobRunProcedure,
			opts...,
		),
		deleteJobRun: connect.NewClient[v1alpha1.DeleteJobRunRequest, v1alpha1.DeleteJobRunResponse](
			httpClient,
			baseURL+JobServiceDeleteJobRunProcedure,
			opts...,
		),
		createJobRun: connect.NewClient[v1alpha1.CreateJobRunRequest, v1alpha1.CreateJobRunResponse](
			httpClient,
			baseURL+JobServiceCreateJobRunProcedure,
			opts...,
		),
		cancelJobRun: connect.NewClient[v1alpha1.CancelJobRunRequest, v1alpha1.CancelJobRunResponse](
			httpClient,
			baseURL+JobServiceCancelJobRunProcedure,
			opts...,
		),
		getTransformers: connect.NewClient[v1alpha1.GetTransformersRequest, v1alpha1.GetTransformersResponse](
			httpClient,
			baseURL+JobServiceGetTransformersProcedure,
			opts...,
		),
	}
}

// jobServiceClient implements JobServiceClient.
type jobServiceClient struct {
	getJobs                        *connect.Client[v1alpha1.GetJobsRequest, v1alpha1.GetJobsResponse]
	getJob                         *connect.Client[v1alpha1.GetJobRequest, v1alpha1.GetJobResponse]
	createJob                      *connect.Client[v1alpha1.CreateJobRequest, v1alpha1.CreateJobResponse]
	deleteJob                      *connect.Client[v1alpha1.DeleteJobRequest, v1alpha1.DeleteJobResponse]
	isJobNameAvailable             *connect.Client[v1alpha1.IsJobNameAvailableRequest, v1alpha1.IsJobNameAvailableResponse]
	updateJobSchedule              *connect.Client[v1alpha1.UpdateJobScheduleRequest, v1alpha1.UpdateJobScheduleResponse]
	updateJobSourceConnection      *connect.Client[v1alpha1.UpdateJobSourceConnectionRequest, v1alpha1.UpdateJobSourceConnectionResponse]
	updateJobDestinationConnection *connect.Client[v1alpha1.UpdateJobDestinationConnectionRequest, v1alpha1.UpdateJobDestinationConnectionResponse]
	updateJobMappings              *connect.Client[v1alpha1.UpdateJobMappingsRequest, v1alpha1.UpdateJobMappingsResponse]
	getJobRuns                     *connect.Client[v1alpha1.GetJobRunsRequest, v1alpha1.GetJobRunsResponse]
	getJobRunEvents                *connect.Client[v1alpha1.GetJobRunEventsRequest, v1alpha1.GetJobRunEventsResponse]
	getJobRun                      *connect.Client[v1alpha1.GetJobRunRequest, v1alpha1.GetJobRunResponse]
	deleteJobRun                   *connect.Client[v1alpha1.DeleteJobRunRequest, v1alpha1.DeleteJobRunResponse]
	createJobRun                   *connect.Client[v1alpha1.CreateJobRunRequest, v1alpha1.CreateJobRunResponse]
	cancelJobRun                   *connect.Client[v1alpha1.CancelJobRunRequest, v1alpha1.CancelJobRunResponse]
	getTransformers                *connect.Client[v1alpha1.GetTransformersRequest, v1alpha1.GetTransformersResponse]
}

// GetJobs calls mgmt.v1alpha1.JobService.GetJobs.
func (c *jobServiceClient) GetJobs(ctx context.Context, req *connect.Request[v1alpha1.GetJobsRequest]) (*connect.Response[v1alpha1.GetJobsResponse], error) {
	return c.getJobs.CallUnary(ctx, req)
}

// GetJob calls mgmt.v1alpha1.JobService.GetJob.
func (c *jobServiceClient) GetJob(ctx context.Context, req *connect.Request[v1alpha1.GetJobRequest]) (*connect.Response[v1alpha1.GetJobResponse], error) {
	return c.getJob.CallUnary(ctx, req)
}

// CreateJob calls mgmt.v1alpha1.JobService.CreateJob.
func (c *jobServiceClient) CreateJob(ctx context.Context, req *connect.Request[v1alpha1.CreateJobRequest]) (*connect.Response[v1alpha1.CreateJobResponse], error) {
	return c.createJob.CallUnary(ctx, req)
}

// DeleteJob calls mgmt.v1alpha1.JobService.DeleteJob.
func (c *jobServiceClient) DeleteJob(ctx context.Context, req *connect.Request[v1alpha1.DeleteJobRequest]) (*connect.Response[v1alpha1.DeleteJobResponse], error) {
	return c.deleteJob.CallUnary(ctx, req)
}

// IsJobNameAvailable calls mgmt.v1alpha1.JobService.IsJobNameAvailable.
func (c *jobServiceClient) IsJobNameAvailable(ctx context.Context, req *connect.Request[v1alpha1.IsJobNameAvailableRequest]) (*connect.Response[v1alpha1.IsJobNameAvailableResponse], error) {
	return c.isJobNameAvailable.CallUnary(ctx, req)
}

// UpdateJobSchedule calls mgmt.v1alpha1.JobService.UpdateJobSchedule.
func (c *jobServiceClient) UpdateJobSchedule(ctx context.Context, req *connect.Request[v1alpha1.UpdateJobScheduleRequest]) (*connect.Response[v1alpha1.UpdateJobScheduleResponse], error) {
	return c.updateJobSchedule.CallUnary(ctx, req)
}

// UpdateJobSourceConnection calls mgmt.v1alpha1.JobService.UpdateJobSourceConnection.
func (c *jobServiceClient) UpdateJobSourceConnection(ctx context.Context, req *connect.Request[v1alpha1.UpdateJobSourceConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobSourceConnectionResponse], error) {
	return c.updateJobSourceConnection.CallUnary(ctx, req)
}

// UpdateJobDestinationConnection calls mgmt.v1alpha1.JobService.UpdateJobDestinationConnection.
func (c *jobServiceClient) UpdateJobDestinationConnection(ctx context.Context, req *connect.Request[v1alpha1.UpdateJobDestinationConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobDestinationConnectionResponse], error) {
	return c.updateJobDestinationConnection.CallUnary(ctx, req)
}

// UpdateJobMappings calls mgmt.v1alpha1.JobService.UpdateJobMappings.
func (c *jobServiceClient) UpdateJobMappings(ctx context.Context, req *connect.Request[v1alpha1.UpdateJobMappingsRequest]) (*connect.Response[v1alpha1.UpdateJobMappingsResponse], error) {
	return c.updateJobMappings.CallUnary(ctx, req)
}

// GetJobRuns calls mgmt.v1alpha1.JobService.GetJobRuns.
func (c *jobServiceClient) GetJobRuns(ctx context.Context, req *connect.Request[v1alpha1.GetJobRunsRequest]) (*connect.Response[v1alpha1.GetJobRunsResponse], error) {
	return c.getJobRuns.CallUnary(ctx, req)
}

// GetJobRunEvents calls mgmt.v1alpha1.JobService.GetJobRunEvents.
func (c *jobServiceClient) GetJobRunEvents(ctx context.Context, req *connect.Request[v1alpha1.GetJobRunEventsRequest]) (*connect.Response[v1alpha1.GetJobRunEventsResponse], error) {
	return c.getJobRunEvents.CallUnary(ctx, req)
}

// GetJobRun calls mgmt.v1alpha1.JobService.GetJobRun.
func (c *jobServiceClient) GetJobRun(ctx context.Context, req *connect.Request[v1alpha1.GetJobRunRequest]) (*connect.Response[v1alpha1.GetJobRunResponse], error) {
	return c.getJobRun.CallUnary(ctx, req)
}

// DeleteJobRun calls mgmt.v1alpha1.JobService.DeleteJobRun.
func (c *jobServiceClient) DeleteJobRun(ctx context.Context, req *connect.Request[v1alpha1.DeleteJobRunRequest]) (*connect.Response[v1alpha1.DeleteJobRunResponse], error) {
	return c.deleteJobRun.CallUnary(ctx, req)
}

// CreateJobRun calls mgmt.v1alpha1.JobService.CreateJobRun.
func (c *jobServiceClient) CreateJobRun(ctx context.Context, req *connect.Request[v1alpha1.CreateJobRunRequest]) (*connect.Response[v1alpha1.CreateJobRunResponse], error) {
	return c.createJobRun.CallUnary(ctx, req)
}

// CancelJobRun calls mgmt.v1alpha1.JobService.CancelJobRun.
func (c *jobServiceClient) CancelJobRun(ctx context.Context, req *connect.Request[v1alpha1.CancelJobRunRequest]) (*connect.Response[v1alpha1.CancelJobRunResponse], error) {
	return c.cancelJobRun.CallUnary(ctx, req)
}

// GetTransformers calls mgmt.v1alpha1.JobService.GetTransformers.
func (c *jobServiceClient) GetTransformers(ctx context.Context, req *connect.Request[v1alpha1.GetTransformersRequest]) (*connect.Response[v1alpha1.GetTransformersResponse], error) {
	return c.getTransformers.CallUnary(ctx, req)
}

// JobServiceHandler is an implementation of the mgmt.v1alpha1.JobService service.
type JobServiceHandler interface {
	GetJobs(context.Context, *connect.Request[v1alpha1.GetJobsRequest]) (*connect.Response[v1alpha1.GetJobsResponse], error)
	GetJob(context.Context, *connect.Request[v1alpha1.GetJobRequest]) (*connect.Response[v1alpha1.GetJobResponse], error)
	CreateJob(context.Context, *connect.Request[v1alpha1.CreateJobRequest]) (*connect.Response[v1alpha1.CreateJobResponse], error)
	DeleteJob(context.Context, *connect.Request[v1alpha1.DeleteJobRequest]) (*connect.Response[v1alpha1.DeleteJobResponse], error)
	IsJobNameAvailable(context.Context, *connect.Request[v1alpha1.IsJobNameAvailableRequest]) (*connect.Response[v1alpha1.IsJobNameAvailableResponse], error)
	UpdateJobSchedule(context.Context, *connect.Request[v1alpha1.UpdateJobScheduleRequest]) (*connect.Response[v1alpha1.UpdateJobScheduleResponse], error)
	UpdateJobSourceConnection(context.Context, *connect.Request[v1alpha1.UpdateJobSourceConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobSourceConnectionResponse], error)
	UpdateJobDestinationConnection(context.Context, *connect.Request[v1alpha1.UpdateJobDestinationConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobDestinationConnectionResponse], error)
	UpdateJobMappings(context.Context, *connect.Request[v1alpha1.UpdateJobMappingsRequest]) (*connect.Response[v1alpha1.UpdateJobMappingsResponse], error)
	GetJobRuns(context.Context, *connect.Request[v1alpha1.GetJobRunsRequest]) (*connect.Response[v1alpha1.GetJobRunsResponse], error)
	GetJobRunEvents(context.Context, *connect.Request[v1alpha1.GetJobRunEventsRequest]) (*connect.Response[v1alpha1.GetJobRunEventsResponse], error)
	GetJobRun(context.Context, *connect.Request[v1alpha1.GetJobRunRequest]) (*connect.Response[v1alpha1.GetJobRunResponse], error)
	DeleteJobRun(context.Context, *connect.Request[v1alpha1.DeleteJobRunRequest]) (*connect.Response[v1alpha1.DeleteJobRunResponse], error)
	CreateJobRun(context.Context, *connect.Request[v1alpha1.CreateJobRunRequest]) (*connect.Response[v1alpha1.CreateJobRunResponse], error)
	CancelJobRun(context.Context, *connect.Request[v1alpha1.CancelJobRunRequest]) (*connect.Response[v1alpha1.CancelJobRunResponse], error)
	GetTransformers(context.Context, *connect.Request[v1alpha1.GetTransformersRequest]) (*connect.Response[v1alpha1.GetTransformersResponse], error)
}

// NewJobServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJobServiceHandler(svc JobServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jobServiceGetJobsHandler := connect.NewUnaryHandler(
		JobServiceGetJobsProcedure,
		svc.GetJobs,
		opts...,
	)
	jobServiceGetJobHandler := connect.NewUnaryHandler(
		JobServiceGetJobProcedure,
		svc.GetJob,
		opts...,
	)
	jobServiceCreateJobHandler := connect.NewUnaryHandler(
		JobServiceCreateJobProcedure,
		svc.CreateJob,
		opts...,
	)
	jobServiceDeleteJobHandler := connect.NewUnaryHandler(
		JobServiceDeleteJobProcedure,
		svc.DeleteJob,
		opts...,
	)
	jobServiceIsJobNameAvailableHandler := connect.NewUnaryHandler(
		JobServiceIsJobNameAvailableProcedure,
		svc.IsJobNameAvailable,
		opts...,
	)
	jobServiceUpdateJobScheduleHandler := connect.NewUnaryHandler(
		JobServiceUpdateJobScheduleProcedure,
		svc.UpdateJobSchedule,
		opts...,
	)
	jobServiceUpdateJobSourceConnectionHandler := connect.NewUnaryHandler(
		JobServiceUpdateJobSourceConnectionProcedure,
		svc.UpdateJobSourceConnection,
		opts...,
	)
	jobServiceUpdateJobDestinationConnectionHandler := connect.NewUnaryHandler(
		JobServiceUpdateJobDestinationConnectionProcedure,
		svc.UpdateJobDestinationConnection,
		opts...,
	)
	jobServiceUpdateJobMappingsHandler := connect.NewUnaryHandler(
		JobServiceUpdateJobMappingsProcedure,
		svc.UpdateJobMappings,
		opts...,
	)
	jobServiceGetJobRunsHandler := connect.NewUnaryHandler(
		JobServiceGetJobRunsProcedure,
		svc.GetJobRuns,
		opts...,
	)
	jobServiceGetJobRunEventsHandler := connect.NewUnaryHandler(
		JobServiceGetJobRunEventsProcedure,
		svc.GetJobRunEvents,
		opts...,
	)
	jobServiceGetJobRunHandler := connect.NewUnaryHandler(
		JobServiceGetJobRunProcedure,
		svc.GetJobRun,
		opts...,
	)
	jobServiceDeleteJobRunHandler := connect.NewUnaryHandler(
		JobServiceDeleteJobRunProcedure,
		svc.DeleteJobRun,
		opts...,
	)
	jobServiceCreateJobRunHandler := connect.NewUnaryHandler(
		JobServiceCreateJobRunProcedure,
		svc.CreateJobRun,
		opts...,
	)
	jobServiceCancelJobRunHandler := connect.NewUnaryHandler(
		JobServiceCancelJobRunProcedure,
		svc.CancelJobRun,
		opts...,
	)
	jobServiceGetTransformersHandler := connect.NewUnaryHandler(
		JobServiceGetTransformersProcedure,
		svc.GetTransformers,
		opts...,
	)
	return "/mgmt.v1alpha1.JobService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JobServiceGetJobsProcedure:
			jobServiceGetJobsHandler.ServeHTTP(w, r)
		case JobServiceGetJobProcedure:
			jobServiceGetJobHandler.ServeHTTP(w, r)
		case JobServiceCreateJobProcedure:
			jobServiceCreateJobHandler.ServeHTTP(w, r)
		case JobServiceDeleteJobProcedure:
			jobServiceDeleteJobHandler.ServeHTTP(w, r)
		case JobServiceIsJobNameAvailableProcedure:
			jobServiceIsJobNameAvailableHandler.ServeHTTP(w, r)
		case JobServiceUpdateJobScheduleProcedure:
			jobServiceUpdateJobScheduleHandler.ServeHTTP(w, r)
		case JobServiceUpdateJobSourceConnectionProcedure:
			jobServiceUpdateJobSourceConnectionHandler.ServeHTTP(w, r)
		case JobServiceUpdateJobDestinationConnectionProcedure:
			jobServiceUpdateJobDestinationConnectionHandler.ServeHTTP(w, r)
		case JobServiceUpdateJobMappingsProcedure:
			jobServiceUpdateJobMappingsHandler.ServeHTTP(w, r)
		case JobServiceGetJobRunsProcedure:
			jobServiceGetJobRunsHandler.ServeHTTP(w, r)
		case JobServiceGetJobRunEventsProcedure:
			jobServiceGetJobRunEventsHandler.ServeHTTP(w, r)
		case JobServiceGetJobRunProcedure:
			jobServiceGetJobRunHandler.ServeHTTP(w, r)
		case JobServiceDeleteJobRunProcedure:
			jobServiceDeleteJobRunHandler.ServeHTTP(w, r)
		case JobServiceCreateJobRunProcedure:
			jobServiceCreateJobRunHandler.ServeHTTP(w, r)
		case JobServiceCancelJobRunProcedure:
			jobServiceCancelJobRunHandler.ServeHTTP(w, r)
		case JobServiceGetTransformersProcedure:
			jobServiceGetTransformersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJobServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJobServiceHandler struct{}

func (UnimplementedJobServiceHandler) GetJobs(context.Context, *connect.Request[v1alpha1.GetJobsRequest]) (*connect.Response[v1alpha1.GetJobsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobs is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJob(context.Context, *connect.Request[v1alpha1.GetJobRequest]) (*connect.Response[v1alpha1.GetJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJob is not implemented"))
}

func (UnimplementedJobServiceHandler) CreateJob(context.Context, *connect.Request[v1alpha1.CreateJobRequest]) (*connect.Response[v1alpha1.CreateJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.CreateJob is not implemented"))
}

func (UnimplementedJobServiceHandler) DeleteJob(context.Context, *connect.Request[v1alpha1.DeleteJobRequest]) (*connect.Response[v1alpha1.DeleteJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.DeleteJob is not implemented"))
}

func (UnimplementedJobServiceHandler) IsJobNameAvailable(context.Context, *connect.Request[v1alpha1.IsJobNameAvailableRequest]) (*connect.Response[v1alpha1.IsJobNameAvailableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.IsJobNameAvailable is not implemented"))
}

func (UnimplementedJobServiceHandler) UpdateJobSchedule(context.Context, *connect.Request[v1alpha1.UpdateJobScheduleRequest]) (*connect.Response[v1alpha1.UpdateJobScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.UpdateJobSchedule is not implemented"))
}

func (UnimplementedJobServiceHandler) UpdateJobSourceConnection(context.Context, *connect.Request[v1alpha1.UpdateJobSourceConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobSourceConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.UpdateJobSourceConnection is not implemented"))
}

func (UnimplementedJobServiceHandler) UpdateJobDestinationConnection(context.Context, *connect.Request[v1alpha1.UpdateJobDestinationConnectionRequest]) (*connect.Response[v1alpha1.UpdateJobDestinationConnectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.UpdateJobDestinationConnection is not implemented"))
}

func (UnimplementedJobServiceHandler) UpdateJobMappings(context.Context, *connect.Request[v1alpha1.UpdateJobMappingsRequest]) (*connect.Response[v1alpha1.UpdateJobMappingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.UpdateJobMappings is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobRuns(context.Context, *connect.Request[v1alpha1.GetJobRunsRequest]) (*connect.Response[v1alpha1.GetJobRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobRuns is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobRunEvents(context.Context, *connect.Request[v1alpha1.GetJobRunEventsRequest]) (*connect.Response[v1alpha1.GetJobRunEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobRunEvents is not implemented"))
}

func (UnimplementedJobServiceHandler) GetJobRun(context.Context, *connect.Request[v1alpha1.GetJobRunRequest]) (*connect.Response[v1alpha1.GetJobRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetJobRun is not implemented"))
}

func (UnimplementedJobServiceHandler) DeleteJobRun(context.Context, *connect.Request[v1alpha1.DeleteJobRunRequest]) (*connect.Response[v1alpha1.DeleteJobRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.DeleteJobRun is not implemented"))
}

func (UnimplementedJobServiceHandler) CreateJobRun(context.Context, *connect.Request[v1alpha1.CreateJobRunRequest]) (*connect.Response[v1alpha1.CreateJobRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.CreateJobRun is not implemented"))
}

func (UnimplementedJobServiceHandler) CancelJobRun(context.Context, *connect.Request[v1alpha1.CancelJobRunRequest]) (*connect.Response[v1alpha1.CancelJobRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.CancelJobRun is not implemented"))
}

func (UnimplementedJobServiceHandler) GetTransformers(context.Context, *connect.Request[v1alpha1.GetTransformersRequest]) (*connect.Response[v1alpha1.GetTransformersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("mgmt.v1alpha1.JobService.GetTransformers is not implemented"))
}
