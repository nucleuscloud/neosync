// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: mgmt/v1alpha1/metrics.proto

package mgmtv1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RangedMetricName int32

const (
	// If unspecified, an error will be thrown
	RangedMetricName_RANGED_METRIC_NAME_UNSPECIFIED RangedMetricName = 0
	// The input_received metric
	RangedMetricName_RANGED_METRIC_NAME_INPUT_RECEIVED RangedMetricName = 1
)

// Enum value maps for RangedMetricName.
var (
	RangedMetricName_name = map[int32]string{
		0: "RANGED_METRIC_NAME_UNSPECIFIED",
		1: "RANGED_METRIC_NAME_INPUT_RECEIVED",
	}
	RangedMetricName_value = map[string]int32{
		"RANGED_METRIC_NAME_UNSPECIFIED":    0,
		"RANGED_METRIC_NAME_INPUT_RECEIVED": 1,
	}
)

func (x RangedMetricName) Enum() *RangedMetricName {
	p := new(RangedMetricName)
	*p = x
	return p
}

func (x RangedMetricName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangedMetricName) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_v1alpha1_metrics_proto_enumTypes[0].Descriptor()
}

func (RangedMetricName) Type() protoreflect.EnumType {
	return &file_mgmt_v1alpha1_metrics_proto_enumTypes[0]
}

func (x RangedMetricName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RangedMetricName.Descriptor instead.
func (RangedMetricName) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_metrics_proto_rawDescGZIP(), []int{0}
}

// Represents a whole or partial calendar date, such as a birthday. The time of
// day and time zone are either specified elsewhere or are insignificant. The
// date is relative to the Gregorian Calendar. This can represent one of the
// following:
//
// * A full date, with non-zero year, month, and day values
// * A month and day value, with a zero year, such as an anniversary
// * A year on its own, with zero month and day values
// * A year and month value, with a zero day, such as a credit card expiration
// date
//
// Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and
// `google.protobuf.Timestamp`.
type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without
	// a year.
	Year uint32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a
	// month and day.
	Month uint32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
	// to specify a year by itself or a year and month where the day isn't
	// significant.
	Day uint32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	mi := &file_mgmt_v1alpha1_metrics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_metrics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *Date) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Date) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Date) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type GetDailyMetricCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start day
	Start *Date `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// The end day
	End *Date `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	// The metric to return
	Metric RangedMetricName `protobuf:"varint,3,opt,name=metric,proto3,enum=mgmt.v1alpha1.RangedMetricName" json:"metric,omitempty"`
	// Types that are assignable to Identifier:
	//
	//	*GetDailyMetricCountRequest_AccountId
	//	*GetDailyMetricCountRequest_JobId
	//	*GetDailyMetricCountRequest_RunId
	Identifier isGetDailyMetricCountRequest_Identifier `protobuf_oneof:"identifier"`
}

func (x *GetDailyMetricCountRequest) Reset() {
	*x = GetDailyMetricCountRequest{}
	mi := &file_mgmt_v1alpha1_metrics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDailyMetricCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyMetricCountRequest) ProtoMessage() {}

func (x *GetDailyMetricCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_metrics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyMetricCountRequest.ProtoReflect.Descriptor instead.
func (*GetDailyMetricCountRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *GetDailyMetricCountRequest) GetStart() *Date {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetDailyMetricCountRequest) GetEnd() *Date {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *GetDailyMetricCountRequest) GetMetric() RangedMetricName {
	if x != nil {
		return x.Metric
	}
	return RangedMetricName_RANGED_METRIC_NAME_UNSPECIFIED
}

func (m *GetDailyMetricCountRequest) GetIdentifier() isGetDailyMetricCountRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *GetDailyMetricCountRequest) GetAccountId() string {
	if x, ok := x.GetIdentifier().(*GetDailyMetricCountRequest_AccountId); ok {
		return x.AccountId
	}
	return ""
}

func (x *GetDailyMetricCountRequest) GetJobId() string {
	if x, ok := x.GetIdentifier().(*GetDailyMetricCountRequest_JobId); ok {
		return x.JobId
	}
	return ""
}

func (x *GetDailyMetricCountRequest) GetRunId() string {
	if x, ok := x.GetIdentifier().(*GetDailyMetricCountRequest_RunId); ok {
		return x.RunId
	}
	return ""
}

type isGetDailyMetricCountRequest_Identifier interface {
	isGetDailyMetricCountRequest_Identifier()
}

type GetDailyMetricCountRequest_AccountId struct {
	// The account identifier that will be used to filter by
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3,oneof"`
}

type GetDailyMetricCountRequest_JobId struct {
	// The job identifier that will be used to filter by
	JobId string `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3,oneof"`
}

type GetDailyMetricCountRequest_RunId struct {
	// The run identifier that will be used to filter by
	RunId string `protobuf:"bytes,6,opt,name=run_id,json=runId,proto3,oneof"`
}

func (*GetDailyMetricCountRequest_AccountId) isGetDailyMetricCountRequest_Identifier() {}

func (*GetDailyMetricCountRequest_JobId) isGetDailyMetricCountRequest_Identifier() {}

func (*GetDailyMetricCountRequest_RunId) isGetDailyMetricCountRequest_Identifier() {}

type GetDailyMetricCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*DayResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetDailyMetricCountResponse) Reset() {
	*x = GetDailyMetricCountResponse{}
	mi := &file_mgmt_v1alpha1_metrics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDailyMetricCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyMetricCountResponse) ProtoMessage() {}

func (x *GetDailyMetricCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_metrics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyMetricCountResponse.ProtoReflect.Descriptor instead.
func (*GetDailyMetricCountResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *GetDailyMetricCountResponse) GetResults() []*DayResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type DayResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  *Date  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DayResult) Reset() {
	*x = DayResult{}
	mi := &file_mgmt_v1alpha1_metrics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DayResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayResult) ProtoMessage() {}

func (x *DayResult) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_metrics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayResult.ProtoReflect.Descriptor instead.
func (*DayResult) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *DayResult) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DayResult) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetMetricCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @deprecated - use start_day
	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// @deprecated - use end_day
	End *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	// The metric to return
	Metric RangedMetricName `protobuf:"varint,3,opt,name=metric,proto3,enum=mgmt.v1alpha1.RangedMetricName" json:"metric,omitempty"`
	// Types that are assignable to Identifier:
	//
	//	*GetMetricCountRequest_AccountId
	//	*GetMetricCountRequest_JobId
	//	*GetMetricCountRequest_RunId
	Identifier isGetMetricCountRequest_Identifier `protobuf_oneof:"identifier"`
	StartDay   *Date                              `protobuf:"bytes,7,opt,name=start_day,json=startDay,proto3" json:"start_day,omitempty"`
	EndDay     *Date                              `protobuf:"bytes,8,opt,name=end_day,json=endDay,proto3" json:"end_day,omitempty"`
}

func (x *GetMetricCountRequest) Reset() {
	*x = GetMetricCountRequest{}
	mi := &file_mgmt_v1alpha1_metrics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetricCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricCountRequest) ProtoMessage() {}

func (x *GetMetricCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_metrics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricCountRequest.ProtoReflect.Descriptor instead.
func (*GetMetricCountRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *GetMetricCountRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetMetricCountRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *GetMetricCountRequest) GetMetric() RangedMetricName {
	if x != nil {
		return x.Metric
	}
	return RangedMetricName_RANGED_METRIC_NAME_UNSPECIFIED
}

func (m *GetMetricCountRequest) GetIdentifier() isGetMetricCountRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *GetMetricCountRequest) GetAccountId() string {
	if x, ok := x.GetIdentifier().(*GetMetricCountRequest_AccountId); ok {
		return x.AccountId
	}
	return ""
}

func (x *GetMetricCountRequest) GetJobId() string {
	if x, ok := x.GetIdentifier().(*GetMetricCountRequest_JobId); ok {
		return x.JobId
	}
	return ""
}

func (x *GetMetricCountRequest) GetRunId() string {
	if x, ok := x.GetIdentifier().(*GetMetricCountRequest_RunId); ok {
		return x.RunId
	}
	return ""
}

func (x *GetMetricCountRequest) GetStartDay() *Date {
	if x != nil {
		return x.StartDay
	}
	return nil
}

func (x *GetMetricCountRequest) GetEndDay() *Date {
	if x != nil {
		return x.EndDay
	}
	return nil
}

type isGetMetricCountRequest_Identifier interface {
	isGetMetricCountRequest_Identifier()
}

type GetMetricCountRequest_AccountId struct {
	// The account identifier that will be used to filter by
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3,oneof"`
}

type GetMetricCountRequest_JobId struct {
	// The job identifier that will be used to filter by
	JobId string `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3,oneof"`
}

type GetMetricCountRequest_RunId struct {
	// The run identifier that will be used to filter by
	RunId string `protobuf:"bytes,6,opt,name=run_id,json=runId,proto3,oneof"`
}

func (*GetMetricCountRequest_AccountId) isGetMetricCountRequest_Identifier() {}

func (*GetMetricCountRequest_JobId) isGetMetricCountRequest_Identifier() {}

func (*GetMetricCountRequest_RunId) isGetMetricCountRequest_Identifier() {}

type GetMetricCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The summed up count of the metric based on the input query and timerange specified
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetMetricCountResponse) Reset() {
	*x = GetMetricCountResponse{}
	mi := &file_mgmt_v1alpha1_metrics_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetricCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricCountResponse) ProtoMessage() {}

func (x *GetMetricCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_metrics_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricCountResponse.ProtoReflect.Descriptor instead.
func (*GetMetricCountResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *GetMetricCountResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_mgmt_v1alpha1_metrics_proto protoreflect.FileDescriptor

var file_mgmt_v1alpha1_metrics_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0xba, 0x48, 0x07, 0x2a, 0x05, 0x18, 0x8f, 0x4e, 0x28, 0x00, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x09, 0xba, 0x48, 0x06, 0x2a, 0x04, 0x18, 0x1f, 0x28, 0x00, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x09, 0xba, 0x48, 0x06, 0x2a, 0x04, 0x18, 0x1f, 0x28, 0x00, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x22, 0xa6, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x12, 0x37, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48,
	0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x48, 0x00, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x51, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x09,
	0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x48, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x79, 0x12, 0x2c,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x79, 0x42, 0x0c, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x5d, 0x0a, 0x10, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x01, 0x32, 0xe1, 0x01, 0x0a, 0x0e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xc8, 0x01,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6e, 0x75, 0x63, 0x6c, 0x65, 0x75, 0x73, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6e, 0x65, 0x6f,
	0x73, 0x79, 0x6e, 0x63, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6d, 0x67, 0x6d, 0x74, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x4d, 0x67,
	0x6d, 0x74, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x0d, 0x4d, 0x67,
	0x6d, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x19, 0x4d, 0x67,
	0x6d, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x4d, 0x67, 0x6d, 0x74, 0x3a, 0x3a,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mgmt_v1alpha1_metrics_proto_rawDescOnce sync.Once
	file_mgmt_v1alpha1_metrics_proto_rawDescData = file_mgmt_v1alpha1_metrics_proto_rawDesc
)

func file_mgmt_v1alpha1_metrics_proto_rawDescGZIP() []byte {
	file_mgmt_v1alpha1_metrics_proto_rawDescOnce.Do(func() {
		file_mgmt_v1alpha1_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_mgmt_v1alpha1_metrics_proto_rawDescData)
	})
	return file_mgmt_v1alpha1_metrics_proto_rawDescData
}

var file_mgmt_v1alpha1_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mgmt_v1alpha1_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_mgmt_v1alpha1_metrics_proto_goTypes = []any{
	(RangedMetricName)(0),               // 0: mgmt.v1alpha1.RangedMetricName
	(*Date)(nil),                        // 1: mgmt.v1alpha1.Date
	(*GetDailyMetricCountRequest)(nil),  // 2: mgmt.v1alpha1.GetDailyMetricCountRequest
	(*GetDailyMetricCountResponse)(nil), // 3: mgmt.v1alpha1.GetDailyMetricCountResponse
	(*DayResult)(nil),                   // 4: mgmt.v1alpha1.DayResult
	(*GetMetricCountRequest)(nil),       // 5: mgmt.v1alpha1.GetMetricCountRequest
	(*GetMetricCountResponse)(nil),      // 6: mgmt.v1alpha1.GetMetricCountResponse
	(*timestamppb.Timestamp)(nil),       // 7: google.protobuf.Timestamp
}
var file_mgmt_v1alpha1_metrics_proto_depIdxs = []int32{
	1,  // 0: mgmt.v1alpha1.GetDailyMetricCountRequest.start:type_name -> mgmt.v1alpha1.Date
	1,  // 1: mgmt.v1alpha1.GetDailyMetricCountRequest.end:type_name -> mgmt.v1alpha1.Date
	0,  // 2: mgmt.v1alpha1.GetDailyMetricCountRequest.metric:type_name -> mgmt.v1alpha1.RangedMetricName
	4,  // 3: mgmt.v1alpha1.GetDailyMetricCountResponse.results:type_name -> mgmt.v1alpha1.DayResult
	1,  // 4: mgmt.v1alpha1.DayResult.date:type_name -> mgmt.v1alpha1.Date
	7,  // 5: mgmt.v1alpha1.GetMetricCountRequest.start:type_name -> google.protobuf.Timestamp
	7,  // 6: mgmt.v1alpha1.GetMetricCountRequest.end:type_name -> google.protobuf.Timestamp
	0,  // 7: mgmt.v1alpha1.GetMetricCountRequest.metric:type_name -> mgmt.v1alpha1.RangedMetricName
	1,  // 8: mgmt.v1alpha1.GetMetricCountRequest.start_day:type_name -> mgmt.v1alpha1.Date
	1,  // 9: mgmt.v1alpha1.GetMetricCountRequest.end_day:type_name -> mgmt.v1alpha1.Date
	2,  // 10: mgmt.v1alpha1.MetricsService.GetDailyMetricCount:input_type -> mgmt.v1alpha1.GetDailyMetricCountRequest
	5,  // 11: mgmt.v1alpha1.MetricsService.GetMetricCount:input_type -> mgmt.v1alpha1.GetMetricCountRequest
	3,  // 12: mgmt.v1alpha1.MetricsService.GetDailyMetricCount:output_type -> mgmt.v1alpha1.GetDailyMetricCountResponse
	6,  // 13: mgmt.v1alpha1.MetricsService.GetMetricCount:output_type -> mgmt.v1alpha1.GetMetricCountResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_mgmt_v1alpha1_metrics_proto_init() }
func file_mgmt_v1alpha1_metrics_proto_init() {
	if File_mgmt_v1alpha1_metrics_proto != nil {
		return
	}
	file_mgmt_v1alpha1_metrics_proto_msgTypes[1].OneofWrappers = []any{
		(*GetDailyMetricCountRequest_AccountId)(nil),
		(*GetDailyMetricCountRequest_JobId)(nil),
		(*GetDailyMetricCountRequest_RunId)(nil),
	}
	file_mgmt_v1alpha1_metrics_proto_msgTypes[4].OneofWrappers = []any{
		(*GetMetricCountRequest_AccountId)(nil),
		(*GetMetricCountRequest_JobId)(nil),
		(*GetMetricCountRequest_RunId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mgmt_v1alpha1_metrics_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mgmt_v1alpha1_metrics_proto_goTypes,
		DependencyIndexes: file_mgmt_v1alpha1_metrics_proto_depIdxs,
		EnumInfos:         file_mgmt_v1alpha1_metrics_proto_enumTypes,
		MessageInfos:      file_mgmt_v1alpha1_metrics_proto_msgTypes,
	}.Build()
	File_mgmt_v1alpha1_metrics_proto = out.File
	file_mgmt_v1alpha1_metrics_proto_rawDesc = nil
	file_mgmt_v1alpha1_metrics_proto_goTypes = nil
	file_mgmt_v1alpha1_metrics_proto_depIdxs = nil
}
