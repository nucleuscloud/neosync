// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mgmt/v1alpha1/user_account.proto

package mgmtv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on SetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetUserRequestMultiError,
// or nil if none found.
func (m *SetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetUserRequestMultiError(errors)
	}

	return nil
}

// SetUserRequestMultiError is an error wrapping multiple validation errors
// returned by SetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type SetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserRequestMultiError) AllErrors() []error { return m }

// SetUserRequestValidationError is the validation error returned by
// SetUserRequest.Validate if the designated constraints aren't met.
type SetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserRequestValidationError) ErrorName() string { return "SetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserRequestValidationError{}

// Validate checks the field values on SetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserResponseMultiError, or nil if none found.
func (m *SetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return SetUserResponseMultiError(errors)
	}

	return nil
}

// SetUserResponseMultiError is an error wrapping multiple validation errors
// returned by SetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type SetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserResponseMultiError) AllErrors() []error { return m }

// SetUserResponseValidationError is the validation error returned by
// SetUserResponse.Validate if the designated constraints aren't met.
type SetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserResponseValidationError) ErrorName() string { return "SetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserResponseValidationError{}

// Validate checks the field values on GetUserAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAccountsRequestMultiError, or nil if none found.
func (m *GetUserAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserAccountsRequestMultiError(errors)
	}

	return nil
}

// GetUserAccountsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserAccountsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAccountsRequestMultiError) AllErrors() []error { return m }

// GetUserAccountsRequestValidationError is the validation error returned by
// GetUserAccountsRequest.Validate if the designated constraints aren't met.
type GetUserAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAccountsRequestValidationError) ErrorName() string {
	return "GetUserAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAccountsRequestValidationError{}

// Validate checks the field values on GetUserAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAccountsResponseMultiError, or nil if none found.
func (m *GetUserAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserAccountsResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserAccountsResponseMultiError(errors)
	}

	return nil
}

// GetUserAccountsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserAccountsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAccountsResponseMultiError) AllErrors() []error { return m }

// GetUserAccountsResponseValidationError is the validation error returned by
// GetUserAccountsResponse.Validate if the designated constraints aren't met.
type GetUserAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAccountsResponseValidationError) ErrorName() string {
	return "GetUserAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAccountsResponseValidationError{}

// Validate checks the field values on UserAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserAccountMultiError, or
// nil if none found.
func (m *UserAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	if len(errors) > 0 {
		return UserAccountMultiError(errors)
	}

	return nil
}

// UserAccountMultiError is an error wrapping multiple validation errors
// returned by UserAccount.ValidateAll() if the designated constraints aren't met.
type UserAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAccountMultiError) AllErrors() []error { return m }

// UserAccountValidationError is the validation error returned by
// UserAccount.Validate if the designated constraints aren't met.
type UserAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAccountValidationError) ErrorName() string { return "UserAccountValidationError" }

// Error satisfies the builtin error interface
func (e UserAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAccountValidationError{}

// Validate checks the field values on ConvertPersonalToTeamAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ConvertPersonalToTeamAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConvertPersonalToTeamAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ConvertPersonalToTeamAccountRequestMultiError, or nil if none found.
func (m *ConvertPersonalToTeamAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConvertPersonalToTeamAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConvertPersonalToTeamAccountRequestMultiError(errors)
	}

	return nil
}

// ConvertPersonalToTeamAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// ConvertPersonalToTeamAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type ConvertPersonalToTeamAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConvertPersonalToTeamAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConvertPersonalToTeamAccountRequestMultiError) AllErrors() []error { return m }

// ConvertPersonalToTeamAccountRequestValidationError is the validation error
// returned by ConvertPersonalToTeamAccountRequest.Validate if the designated
// constraints aren't met.
type ConvertPersonalToTeamAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConvertPersonalToTeamAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConvertPersonalToTeamAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConvertPersonalToTeamAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConvertPersonalToTeamAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConvertPersonalToTeamAccountRequestValidationError) ErrorName() string {
	return "ConvertPersonalToTeamAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConvertPersonalToTeamAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConvertPersonalToTeamAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConvertPersonalToTeamAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConvertPersonalToTeamAccountRequestValidationError{}

// Validate checks the field values on ConvertPersonalToTeamAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ConvertPersonalToTeamAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConvertPersonalToTeamAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ConvertPersonalToTeamAccountResponseMultiError, or nil if none found.
func (m *ConvertPersonalToTeamAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConvertPersonalToTeamAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConvertPersonalToTeamAccountResponseMultiError(errors)
	}

	return nil
}

// ConvertPersonalToTeamAccountResponseMultiError is an error wrapping multiple
// validation errors returned by
// ConvertPersonalToTeamAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type ConvertPersonalToTeamAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConvertPersonalToTeamAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConvertPersonalToTeamAccountResponseMultiError) AllErrors() []error { return m }

// ConvertPersonalToTeamAccountResponseValidationError is the validation error
// returned by ConvertPersonalToTeamAccountResponse.Validate if the designated
// constraints aren't met.
type ConvertPersonalToTeamAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConvertPersonalToTeamAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConvertPersonalToTeamAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConvertPersonalToTeamAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConvertPersonalToTeamAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConvertPersonalToTeamAccountResponseValidationError) ErrorName() string {
	return "ConvertPersonalToTeamAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConvertPersonalToTeamAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConvertPersonalToTeamAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConvertPersonalToTeamAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConvertPersonalToTeamAccountResponseValidationError{}

// Validate checks the field values on SetPersonalAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetPersonalAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetPersonalAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetPersonalAccountRequestMultiError, or nil if none found.
func (m *SetPersonalAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetPersonalAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetPersonalAccountRequestMultiError(errors)
	}

	return nil
}

// SetPersonalAccountRequestMultiError is an error wrapping multiple validation
// errors returned by SetPersonalAccountRequest.ValidateAll() if the
// designated constraints aren't met.
type SetPersonalAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetPersonalAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetPersonalAccountRequestMultiError) AllErrors() []error { return m }

// SetPersonalAccountRequestValidationError is the validation error returned by
// SetPersonalAccountRequest.Validate if the designated constraints aren't met.
type SetPersonalAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPersonalAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPersonalAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPersonalAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPersonalAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPersonalAccountRequestValidationError) ErrorName() string {
	return "SetPersonalAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetPersonalAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPersonalAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPersonalAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPersonalAccountRequestValidationError{}

// Validate checks the field values on SetPersonalAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetPersonalAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetPersonalAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetPersonalAccountResponseMultiError, or nil if none found.
func (m *SetPersonalAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetPersonalAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return SetPersonalAccountResponseMultiError(errors)
	}

	return nil
}

// SetPersonalAccountResponseMultiError is an error wrapping multiple
// validation errors returned by SetPersonalAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type SetPersonalAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetPersonalAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetPersonalAccountResponseMultiError) AllErrors() []error { return m }

// SetPersonalAccountResponseValidationError is the validation error returned
// by SetPersonalAccountResponse.Validate if the designated constraints aren't met.
type SetPersonalAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPersonalAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPersonalAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPersonalAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPersonalAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPersonalAccountResponseValidationError) ErrorName() string {
	return "SetPersonalAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetPersonalAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPersonalAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPersonalAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPersonalAccountResponseValidationError{}

// Validate checks the field values on IsUserInAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsUserInAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsUserInAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsUserInAccountRequestMultiError, or nil if none found.
func (m *IsUserInAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsUserInAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return IsUserInAccountRequestMultiError(errors)
	}

	return nil
}

// IsUserInAccountRequestMultiError is an error wrapping multiple validation
// errors returned by IsUserInAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type IsUserInAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsUserInAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsUserInAccountRequestMultiError) AllErrors() []error { return m }

// IsUserInAccountRequestValidationError is the validation error returned by
// IsUserInAccountRequest.Validate if the designated constraints aren't met.
type IsUserInAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsUserInAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsUserInAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsUserInAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsUserInAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsUserInAccountRequestValidationError) ErrorName() string {
	return "IsUserInAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsUserInAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsUserInAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsUserInAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsUserInAccountRequestValidationError{}

// Validate checks the field values on IsUserInAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsUserInAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsUserInAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsUserInAccountResponseMultiError, or nil if none found.
func (m *IsUserInAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsUserInAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return IsUserInAccountResponseMultiError(errors)
	}

	return nil
}

// IsUserInAccountResponseMultiError is an error wrapping multiple validation
// errors returned by IsUserInAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type IsUserInAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsUserInAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsUserInAccountResponseMultiError) AllErrors() []error { return m }

// IsUserInAccountResponseValidationError is the validation error returned by
// IsUserInAccountResponse.Validate if the designated constraints aren't met.
type IsUserInAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsUserInAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsUserInAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsUserInAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsUserInAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsUserInAccountResponseValidationError) ErrorName() string {
	return "IsUserInAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsUserInAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsUserInAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsUserInAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsUserInAccountResponseValidationError{}

// Validate checks the field values on GetAccountTemporalConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountTemporalConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountTemporalConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAccountTemporalConfigRequestMultiError, or nil if none found.
func (m *GetAccountTemporalConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountTemporalConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetAccountTemporalConfigRequestMultiError(errors)
	}

	return nil
}

// GetAccountTemporalConfigRequestMultiError is an error wrapping multiple
// validation errors returned by GetAccountTemporalConfigRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAccountTemporalConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountTemporalConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountTemporalConfigRequestMultiError) AllErrors() []error { return m }

// GetAccountTemporalConfigRequestValidationError is the validation error
// returned by GetAccountTemporalConfigRequest.Validate if the designated
// constraints aren't met.
type GetAccountTemporalConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountTemporalConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountTemporalConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountTemporalConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountTemporalConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountTemporalConfigRequestValidationError) ErrorName() string {
	return "GetAccountTemporalConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountTemporalConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountTemporalConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountTemporalConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountTemporalConfigRequestValidationError{}

// Validate checks the field values on GetAccountTemporalConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetAccountTemporalConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountTemporalConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAccountTemporalConfigResponseMultiError, or nil if none found.
func (m *GetAccountTemporalConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountTemporalConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountTemporalConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountTemporalConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountTemporalConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountTemporalConfigResponseMultiError(errors)
	}

	return nil
}

// GetAccountTemporalConfigResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetAccountTemporalConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccountTemporalConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountTemporalConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountTemporalConfigResponseMultiError) AllErrors() []error { return m }

// GetAccountTemporalConfigResponseValidationError is the validation error
// returned by GetAccountTemporalConfigResponse.Validate if the designated
// constraints aren't met.
type GetAccountTemporalConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountTemporalConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountTemporalConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountTemporalConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountTemporalConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountTemporalConfigResponseValidationError) ErrorName() string {
	return "GetAccountTemporalConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountTemporalConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountTemporalConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountTemporalConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountTemporalConfigResponseValidationError{}

// Validate checks the field values on SetAccountTemporalConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetAccountTemporalConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAccountTemporalConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetAccountTemporalConfigRequestMultiError, or nil if none found.
func (m *SetAccountTemporalConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAccountTemporalConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetAccountTemporalConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetAccountTemporalConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetAccountTemporalConfigRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetAccountTemporalConfigRequestMultiError(errors)
	}

	return nil
}

// SetAccountTemporalConfigRequestMultiError is an error wrapping multiple
// validation errors returned by SetAccountTemporalConfigRequest.ValidateAll()
// if the designated constraints aren't met.
type SetAccountTemporalConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAccountTemporalConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAccountTemporalConfigRequestMultiError) AllErrors() []error { return m }

// SetAccountTemporalConfigRequestValidationError is the validation error
// returned by SetAccountTemporalConfigRequest.Validate if the designated
// constraints aren't met.
type SetAccountTemporalConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAccountTemporalConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAccountTemporalConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAccountTemporalConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAccountTemporalConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAccountTemporalConfigRequestValidationError) ErrorName() string {
	return "SetAccountTemporalConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetAccountTemporalConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAccountTemporalConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAccountTemporalConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAccountTemporalConfigRequestValidationError{}

// Validate checks the field values on SetAccountTemporalConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SetAccountTemporalConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAccountTemporalConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetAccountTemporalConfigResponseMultiError, or nil if none found.
func (m *SetAccountTemporalConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAccountTemporalConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetAccountTemporalConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetAccountTemporalConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetAccountTemporalConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetAccountTemporalConfigResponseMultiError(errors)
	}

	return nil
}

// SetAccountTemporalConfigResponseMultiError is an error wrapping multiple
// validation errors returned by
// SetAccountTemporalConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type SetAccountTemporalConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAccountTemporalConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAccountTemporalConfigResponseMultiError) AllErrors() []error { return m }

// SetAccountTemporalConfigResponseValidationError is the validation error
// returned by SetAccountTemporalConfigResponse.Validate if the designated
// constraints aren't met.
type SetAccountTemporalConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAccountTemporalConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAccountTemporalConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAccountTemporalConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAccountTemporalConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAccountTemporalConfigResponseValidationError) ErrorName() string {
	return "SetAccountTemporalConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetAccountTemporalConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAccountTemporalConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAccountTemporalConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAccountTemporalConfigResponseValidationError{}

// Validate checks the field values on AccountTemporalConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountTemporalConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountTemporalConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountTemporalConfigMultiError, or nil if none found.
func (m *AccountTemporalConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountTemporalConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Namespace

	// no validation rules for SyncJobQueueName

	if len(errors) > 0 {
		return AccountTemporalConfigMultiError(errors)
	}

	return nil
}

// AccountTemporalConfigMultiError is an error wrapping multiple validation
// errors returned by AccountTemporalConfig.ValidateAll() if the designated
// constraints aren't met.
type AccountTemporalConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountTemporalConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountTemporalConfigMultiError) AllErrors() []error { return m }

// AccountTemporalConfigValidationError is the validation error returned by
// AccountTemporalConfig.Validate if the designated constraints aren't met.
type AccountTemporalConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountTemporalConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountTemporalConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountTemporalConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountTemporalConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountTemporalConfigValidationError) ErrorName() string {
	return "AccountTemporalConfigValidationError"
}

// Error satisfies the builtin error interface
func (e AccountTemporalConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountTemporalConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountTemporalConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountTemporalConfigValidationError{}

// Validate checks the field values on CreateTeamAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamAccountRequestMultiError, or nil if none found.
func (m *CreateTeamAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateTeamAccountRequestMultiError(errors)
	}

	return nil
}

// CreateTeamAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTeamAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTeamAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamAccountRequestMultiError) AllErrors() []error { return m }

// CreateTeamAccountRequestValidationError is the validation error returned by
// CreateTeamAccountRequest.Validate if the designated constraints aren't met.
type CreateTeamAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamAccountRequestValidationError) ErrorName() string {
	return "CreateTeamAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamAccountRequestValidationError{}

// Validate checks the field values on CreateTeamAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamAccountResponseMultiError, or nil if none found.
func (m *CreateTeamAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return CreateTeamAccountResponseMultiError(errors)
	}

	return nil
}

// CreateTeamAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTeamAccountResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateTeamAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamAccountResponseMultiError) AllErrors() []error { return m }

// CreateTeamAccountResponseValidationError is the validation error returned by
// CreateTeamAccountResponse.Validate if the designated constraints aren't met.
type CreateTeamAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamAccountResponseValidationError) ErrorName() string {
	return "CreateTeamAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamAccountResponseValidationError{}

// Validate checks the field values on AccountUser with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountUserMultiError, or
// nil if none found.
func (m *AccountUser) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for Email

	if len(errors) > 0 {
		return AccountUserMultiError(errors)
	}

	return nil
}

// AccountUserMultiError is an error wrapping multiple validation errors
// returned by AccountUser.ValidateAll() if the designated constraints aren't met.
type AccountUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountUserMultiError) AllErrors() []error { return m }

// AccountUserValidationError is the validation error returned by
// AccountUser.Validate if the designated constraints aren't met.
type AccountUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUserValidationError) ErrorName() string { return "AccountUserValidationError" }

// Error satisfies the builtin error interface
func (e AccountUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUserValidationError{}

// Validate checks the field values on GetTeamAccountMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeamAccountMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamAccountMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeamAccountMembersRequestMultiError, or nil if none found.
func (m *GetTeamAccountMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamAccountMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetTeamAccountMembersRequestMultiError(errors)
	}

	return nil
}

// GetTeamAccountMembersRequestMultiError is an error wrapping multiple
// validation errors returned by GetTeamAccountMembersRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTeamAccountMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamAccountMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamAccountMembersRequestMultiError) AllErrors() []error { return m }

// GetTeamAccountMembersRequestValidationError is the validation error returned
// by GetTeamAccountMembersRequest.Validate if the designated constraints
// aren't met.
type GetTeamAccountMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamAccountMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamAccountMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamAccountMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamAccountMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamAccountMembersRequestValidationError) ErrorName() string {
	return "GetTeamAccountMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeamAccountMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamAccountMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamAccountMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamAccountMembersRequestValidationError{}

// Validate checks the field values on GetTeamAccountMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeamAccountMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamAccountMembersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTeamAccountMembersResponseMultiError, or nil if none found.
func (m *GetTeamAccountMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamAccountMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTeamAccountMembersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTeamAccountMembersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTeamAccountMembersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTeamAccountMembersResponseMultiError(errors)
	}

	return nil
}

// GetTeamAccountMembersResponseMultiError is an error wrapping multiple
// validation errors returned by GetTeamAccountMembersResponse.ValidateAll()
// if the designated constraints aren't met.
type GetTeamAccountMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamAccountMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamAccountMembersResponseMultiError) AllErrors() []error { return m }

// GetTeamAccountMembersResponseValidationError is the validation error
// returned by GetTeamAccountMembersResponse.Validate if the designated
// constraints aren't met.
type GetTeamAccountMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamAccountMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamAccountMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamAccountMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamAccountMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamAccountMembersResponseValidationError) ErrorName() string {
	return "GetTeamAccountMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeamAccountMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamAccountMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamAccountMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamAccountMembersResponseValidationError{}

// Validate checks the field values on RemoveTeamAccountMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveTeamAccountMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTeamAccountMemberRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveTeamAccountMemberRequestMultiError, or nil if none found.
func (m *RemoveTeamAccountMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTeamAccountMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AccountId

	if len(errors) > 0 {
		return RemoveTeamAccountMemberRequestMultiError(errors)
	}

	return nil
}

// RemoveTeamAccountMemberRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveTeamAccountMemberRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveTeamAccountMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTeamAccountMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTeamAccountMemberRequestMultiError) AllErrors() []error { return m }

// RemoveTeamAccountMemberRequestValidationError is the validation error
// returned by RemoveTeamAccountMemberRequest.Validate if the designated
// constraints aren't met.
type RemoveTeamAccountMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTeamAccountMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTeamAccountMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTeamAccountMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTeamAccountMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTeamAccountMemberRequestValidationError) ErrorName() string {
	return "RemoveTeamAccountMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTeamAccountMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTeamAccountMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTeamAccountMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTeamAccountMemberRequestValidationError{}

// Validate checks the field values on RemoveTeamAccountMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveTeamAccountMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTeamAccountMemberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveTeamAccountMemberResponseMultiError, or nil if none found.
func (m *RemoveTeamAccountMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTeamAccountMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveTeamAccountMemberResponseMultiError(errors)
	}

	return nil
}

// RemoveTeamAccountMemberResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveTeamAccountMemberResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveTeamAccountMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTeamAccountMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTeamAccountMemberResponseMultiError) AllErrors() []error { return m }

// RemoveTeamAccountMemberResponseValidationError is the validation error
// returned by RemoveTeamAccountMemberResponse.Validate if the designated
// constraints aren't met.
type RemoveTeamAccountMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTeamAccountMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTeamAccountMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTeamAccountMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTeamAccountMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTeamAccountMemberResponseValidationError) ErrorName() string {
	return "RemoveTeamAccountMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTeamAccountMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTeamAccountMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTeamAccountMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTeamAccountMemberResponseValidationError{}

// Validate checks the field values on InviteUserToTeamAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteUserToTeamAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteUserToTeamAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InviteUserToTeamAccountRequestMultiError, or nil if none found.
func (m *InviteUserToTeamAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteUserToTeamAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Email

	if len(errors) > 0 {
		return InviteUserToTeamAccountRequestMultiError(errors)
	}

	return nil
}

// InviteUserToTeamAccountRequestMultiError is an error wrapping multiple
// validation errors returned by InviteUserToTeamAccountRequest.ValidateAll()
// if the designated constraints aren't met.
type InviteUserToTeamAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteUserToTeamAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteUserToTeamAccountRequestMultiError) AllErrors() []error { return m }

// InviteUserToTeamAccountRequestValidationError is the validation error
// returned by InviteUserToTeamAccountRequest.Validate if the designated
// constraints aren't met.
type InviteUserToTeamAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUserToTeamAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUserToTeamAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUserToTeamAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUserToTeamAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUserToTeamAccountRequestValidationError) ErrorName() string {
	return "InviteUserToTeamAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InviteUserToTeamAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUserToTeamAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUserToTeamAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUserToTeamAccountRequestValidationError{}

// Validate checks the field values on AccountInvite with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountInvite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountInvite with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountInviteMultiError, or
// nil if none found.
func (m *AccountInvite) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountInvite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AccountId

	// no validation rules for SenderUserId

	// no validation rules for Email

	// no validation rules for Token

	// no validation rules for Accepted

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccountInviteValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccountInviteValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountInviteValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccountInviteValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccountInviteValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountInviteValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccountInviteValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccountInviteValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountInviteValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AccountInviteMultiError(errors)
	}

	return nil
}

// AccountInviteMultiError is an error wrapping multiple validation errors
// returned by AccountInvite.ValidateAll() if the designated constraints
// aren't met.
type AccountInviteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountInviteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountInviteMultiError) AllErrors() []error { return m }

// AccountInviteValidationError is the validation error returned by
// AccountInvite.Validate if the designated constraints aren't met.
type AccountInviteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountInviteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountInviteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountInviteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountInviteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountInviteValidationError) ErrorName() string { return "AccountInviteValidationError" }

// Error satisfies the builtin error interface
func (e AccountInviteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountInvite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountInviteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountInviteValidationError{}

// Validate checks the field values on InviteUserToTeamAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteUserToTeamAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteUserToTeamAccountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InviteUserToTeamAccountResponseMultiError, or nil if none found.
func (m *InviteUserToTeamAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteUserToTeamAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInvite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InviteUserToTeamAccountResponseValidationError{
					field:  "Invite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InviteUserToTeamAccountResponseValidationError{
					field:  "Invite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InviteUserToTeamAccountResponseValidationError{
				field:  "Invite",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InviteUserToTeamAccountResponseMultiError(errors)
	}

	return nil
}

// InviteUserToTeamAccountResponseMultiError is an error wrapping multiple
// validation errors returned by InviteUserToTeamAccountResponse.ValidateAll()
// if the designated constraints aren't met.
type InviteUserToTeamAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteUserToTeamAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteUserToTeamAccountResponseMultiError) AllErrors() []error { return m }

// InviteUserToTeamAccountResponseValidationError is the validation error
// returned by InviteUserToTeamAccountResponse.Validate if the designated
// constraints aren't met.
type InviteUserToTeamAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUserToTeamAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUserToTeamAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUserToTeamAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUserToTeamAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUserToTeamAccountResponseValidationError) ErrorName() string {
	return "InviteUserToTeamAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InviteUserToTeamAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUserToTeamAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUserToTeamAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUserToTeamAccountResponseValidationError{}

// Validate checks the field values on GetTeamAccountInvitesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeamAccountInvitesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamAccountInvitesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeamAccountInvitesRequestMultiError, or nil if none found.
func (m *GetTeamAccountInvitesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamAccountInvitesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetTeamAccountInvitesRequestMultiError(errors)
	}

	return nil
}

// GetTeamAccountInvitesRequestMultiError is an error wrapping multiple
// validation errors returned by GetTeamAccountInvitesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTeamAccountInvitesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamAccountInvitesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamAccountInvitesRequestMultiError) AllErrors() []error { return m }

// GetTeamAccountInvitesRequestValidationError is the validation error returned
// by GetTeamAccountInvitesRequest.Validate if the designated constraints
// aren't met.
type GetTeamAccountInvitesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamAccountInvitesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamAccountInvitesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamAccountInvitesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamAccountInvitesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamAccountInvitesRequestValidationError) ErrorName() string {
	return "GetTeamAccountInvitesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeamAccountInvitesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamAccountInvitesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamAccountInvitesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamAccountInvitesRequestValidationError{}

// Validate checks the field values on GetTeamAccountInvitesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeamAccountInvitesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamAccountInvitesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTeamAccountInvitesResponseMultiError, or nil if none found.
func (m *GetTeamAccountInvitesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamAccountInvitesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTeamAccountInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTeamAccountInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTeamAccountInvitesResponseValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTeamAccountInvitesResponseMultiError(errors)
	}

	return nil
}

// GetTeamAccountInvitesResponseMultiError is an error wrapping multiple
// validation errors returned by GetTeamAccountInvitesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetTeamAccountInvitesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamAccountInvitesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamAccountInvitesResponseMultiError) AllErrors() []error { return m }

// GetTeamAccountInvitesResponseValidationError is the validation error
// returned by GetTeamAccountInvitesResponse.Validate if the designated
// constraints aren't met.
type GetTeamAccountInvitesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamAccountInvitesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamAccountInvitesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamAccountInvitesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamAccountInvitesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamAccountInvitesResponseValidationError) ErrorName() string {
	return "GetTeamAccountInvitesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeamAccountInvitesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamAccountInvitesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamAccountInvitesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamAccountInvitesResponseValidationError{}

// Validate checks the field values on RemoveTeamAccountInviteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveTeamAccountInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTeamAccountInviteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveTeamAccountInviteRequestMultiError, or nil if none found.
func (m *RemoveTeamAccountInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTeamAccountInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveTeamAccountInviteRequestMultiError(errors)
	}

	return nil
}

// RemoveTeamAccountInviteRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveTeamAccountInviteRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveTeamAccountInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTeamAccountInviteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTeamAccountInviteRequestMultiError) AllErrors() []error { return m }

// RemoveTeamAccountInviteRequestValidationError is the validation error
// returned by RemoveTeamAccountInviteRequest.Validate if the designated
// constraints aren't met.
type RemoveTeamAccountInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTeamAccountInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTeamAccountInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTeamAccountInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTeamAccountInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTeamAccountInviteRequestValidationError) ErrorName() string {
	return "RemoveTeamAccountInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTeamAccountInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTeamAccountInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTeamAccountInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTeamAccountInviteRequestValidationError{}

// Validate checks the field values on RemoveTeamAccountInviteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveTeamAccountInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTeamAccountInviteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveTeamAccountInviteResponseMultiError, or nil if none found.
func (m *RemoveTeamAccountInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTeamAccountInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveTeamAccountInviteResponseMultiError(errors)
	}

	return nil
}

// RemoveTeamAccountInviteResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveTeamAccountInviteResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveTeamAccountInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTeamAccountInviteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTeamAccountInviteResponseMultiError) AllErrors() []error { return m }

// RemoveTeamAccountInviteResponseValidationError is the validation error
// returned by RemoveTeamAccountInviteResponse.Validate if the designated
// constraints aren't met.
type RemoveTeamAccountInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTeamAccountInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTeamAccountInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTeamAccountInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTeamAccountInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTeamAccountInviteResponseValidationError) ErrorName() string {
	return "RemoveTeamAccountInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTeamAccountInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTeamAccountInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTeamAccountInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTeamAccountInviteResponseValidationError{}

// Validate checks the field values on AcceptTeamAccountInviteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptTeamAccountInviteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptTeamAccountInviteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AcceptTeamAccountInviteRequestMultiError, or nil if none found.
func (m *AcceptTeamAccountInviteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptTeamAccountInviteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return AcceptTeamAccountInviteRequestMultiError(errors)
	}

	return nil
}

// AcceptTeamAccountInviteRequestMultiError is an error wrapping multiple
// validation errors returned by AcceptTeamAccountInviteRequest.ValidateAll()
// if the designated constraints aren't met.
type AcceptTeamAccountInviteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptTeamAccountInviteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptTeamAccountInviteRequestMultiError) AllErrors() []error { return m }

// AcceptTeamAccountInviteRequestValidationError is the validation error
// returned by AcceptTeamAccountInviteRequest.Validate if the designated
// constraints aren't met.
type AcceptTeamAccountInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptTeamAccountInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptTeamAccountInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptTeamAccountInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptTeamAccountInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptTeamAccountInviteRequestValidationError) ErrorName() string {
	return "AcceptTeamAccountInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptTeamAccountInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptTeamAccountInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptTeamAccountInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptTeamAccountInviteRequestValidationError{}

// Validate checks the field values on AcceptTeamAccountInviteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptTeamAccountInviteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptTeamAccountInviteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AcceptTeamAccountInviteResponseMultiError, or nil if none found.
func (m *AcceptTeamAccountInviteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptTeamAccountInviteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptTeamAccountInviteResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptTeamAccountInviteResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptTeamAccountInviteResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AcceptTeamAccountInviteResponseMultiError(errors)
	}

	return nil
}

// AcceptTeamAccountInviteResponseMultiError is an error wrapping multiple
// validation errors returned by AcceptTeamAccountInviteResponse.ValidateAll()
// if the designated constraints aren't met.
type AcceptTeamAccountInviteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptTeamAccountInviteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptTeamAccountInviteResponseMultiError) AllErrors() []error { return m }

// AcceptTeamAccountInviteResponseValidationError is the validation error
// returned by AcceptTeamAccountInviteResponse.Validate if the designated
// constraints aren't met.
type AcceptTeamAccountInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptTeamAccountInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptTeamAccountInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptTeamAccountInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptTeamAccountInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptTeamAccountInviteResponseValidationError) ErrorName() string {
	return "AcceptTeamAccountInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptTeamAccountInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptTeamAccountInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptTeamAccountInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptTeamAccountInviteResponseValidationError{}

// Validate checks the field values on GetSystemInformationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInformationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInformationRequestMultiError, or nil if none found.
func (m *GetSystemInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSystemInformationRequestMultiError(errors)
	}

	return nil
}

// GetSystemInformationRequestMultiError is an error wrapping multiple
// validation errors returned by GetSystemInformationRequest.ValidateAll() if
// the designated constraints aren't met.
type GetSystemInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInformationRequestMultiError) AllErrors() []error { return m }

// GetSystemInformationRequestValidationError is the validation error returned
// by GetSystemInformationRequest.Validate if the designated constraints
// aren't met.
type GetSystemInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInformationRequestValidationError) ErrorName() string {
	return "GetSystemInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInformationRequestValidationError{}

// Validate checks the field values on GetSystemInformationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInformationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInformationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInformationResponseMultiError, or nil if none found.
func (m *GetSystemInformationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInformationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Commit

	// no validation rules for Compiler

	// no validation rules for Platform

	if all {
		switch v := interface{}(m.GetBuildDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemInformationResponseValidationError{
					field:  "BuildDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemInformationResponseValidationError{
					field:  "BuildDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBuildDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemInformationResponseValidationError{
				field:  "BuildDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSystemInformationResponseMultiError(errors)
	}

	return nil
}

// GetSystemInformationResponseMultiError is an error wrapping multiple
// validation errors returned by GetSystemInformationResponse.ValidateAll() if
// the designated constraints aren't met.
type GetSystemInformationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInformationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInformationResponseMultiError) AllErrors() []error { return m }

// GetSystemInformationResponseValidationError is the validation error returned
// by GetSystemInformationResponse.Validate if the designated constraints
// aren't met.
type GetSystemInformationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInformationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInformationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInformationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInformationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInformationResponseValidationError) ErrorName() string {
	return "GetSystemInformationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInformationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInformationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInformationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInformationResponseValidationError{}

// Validate checks the field values on GetAccountOnboardingConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetAccountOnboardingConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountOnboardingConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetAccountOnboardingConfigRequestMultiError, or nil if none found.
func (m *GetAccountOnboardingConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountOnboardingConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetAccountOnboardingConfigRequestMultiError(errors)
	}

	return nil
}

// GetAccountOnboardingConfigRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetAccountOnboardingConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccountOnboardingConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountOnboardingConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountOnboardingConfigRequestMultiError) AllErrors() []error { return m }

// GetAccountOnboardingConfigRequestValidationError is the validation error
// returned by GetAccountOnboardingConfigRequest.Validate if the designated
// constraints aren't met.
type GetAccountOnboardingConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountOnboardingConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountOnboardingConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountOnboardingConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountOnboardingConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountOnboardingConfigRequestValidationError) ErrorName() string {
	return "GetAccountOnboardingConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountOnboardingConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountOnboardingConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountOnboardingConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountOnboardingConfigRequestValidationError{}

// Validate checks the field values on GetAccountOnboardingConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetAccountOnboardingConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountOnboardingConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetAccountOnboardingConfigResponseMultiError, or nil if none found.
func (m *GetAccountOnboardingConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountOnboardingConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountOnboardingConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountOnboardingConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountOnboardingConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountOnboardingConfigResponseMultiError(errors)
	}

	return nil
}

// GetAccountOnboardingConfigResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetAccountOnboardingConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccountOnboardingConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountOnboardingConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountOnboardingConfigResponseMultiError) AllErrors() []error { return m }

// GetAccountOnboardingConfigResponseValidationError is the validation error
// returned by GetAccountOnboardingConfigResponse.Validate if the designated
// constraints aren't met.
type GetAccountOnboardingConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountOnboardingConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountOnboardingConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountOnboardingConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountOnboardingConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountOnboardingConfigResponseValidationError) ErrorName() string {
	return "GetAccountOnboardingConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountOnboardingConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountOnboardingConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountOnboardingConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountOnboardingConfigResponseValidationError{}

// Validate checks the field values on SetAccountOnboardingConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SetAccountOnboardingConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAccountOnboardingConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetAccountOnboardingConfigRequestMultiError, or nil if none found.
func (m *SetAccountOnboardingConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAccountOnboardingConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetAccountOnboardingConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetAccountOnboardingConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetAccountOnboardingConfigRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetAccountOnboardingConfigRequestMultiError(errors)
	}

	return nil
}

// SetAccountOnboardingConfigRequestMultiError is an error wrapping multiple
// validation errors returned by
// SetAccountOnboardingConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type SetAccountOnboardingConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAccountOnboardingConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAccountOnboardingConfigRequestMultiError) AllErrors() []error { return m }

// SetAccountOnboardingConfigRequestValidationError is the validation error
// returned by SetAccountOnboardingConfigRequest.Validate if the designated
// constraints aren't met.
type SetAccountOnboardingConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAccountOnboardingConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAccountOnboardingConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAccountOnboardingConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAccountOnboardingConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAccountOnboardingConfigRequestValidationError) ErrorName() string {
	return "SetAccountOnboardingConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetAccountOnboardingConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAccountOnboardingConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAccountOnboardingConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAccountOnboardingConfigRequestValidationError{}

// Validate checks the field values on SetAccountOnboardingConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SetAccountOnboardingConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAccountOnboardingConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetAccountOnboardingConfigResponseMultiError, or nil if none found.
func (m *SetAccountOnboardingConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAccountOnboardingConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetAccountOnboardingConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetAccountOnboardingConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetAccountOnboardingConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetAccountOnboardingConfigResponseMultiError(errors)
	}

	return nil
}

// SetAccountOnboardingConfigResponseMultiError is an error wrapping multiple
// validation errors returned by
// SetAccountOnboardingConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type SetAccountOnboardingConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAccountOnboardingConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAccountOnboardingConfigResponseMultiError) AllErrors() []error { return m }

// SetAccountOnboardingConfigResponseValidationError is the validation error
// returned by SetAccountOnboardingConfigResponse.Validate if the designated
// constraints aren't met.
type SetAccountOnboardingConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAccountOnboardingConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAccountOnboardingConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAccountOnboardingConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAccountOnboardingConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAccountOnboardingConfigResponseValidationError) ErrorName() string {
	return "SetAccountOnboardingConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetAccountOnboardingConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAccountOnboardingConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAccountOnboardingConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAccountOnboardingConfigResponseValidationError{}

// Validate checks the field values on AccountOnboardingConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountOnboardingConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountOnboardingConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountOnboardingConfigMultiError, or nil if none found.
func (m *AccountOnboardingConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountOnboardingConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasCreatedSourceConnection

	// no validation rules for HasCreatedDestinationConnection

	// no validation rules for HasCreatedJob

	// no validation rules for HasInvitedMembers

	if len(errors) > 0 {
		return AccountOnboardingConfigMultiError(errors)
	}

	return nil
}

// AccountOnboardingConfigMultiError is an error wrapping multiple validation
// errors returned by AccountOnboardingConfig.ValidateAll() if the designated
// constraints aren't met.
type AccountOnboardingConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountOnboardingConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountOnboardingConfigMultiError) AllErrors() []error { return m }

// AccountOnboardingConfigValidationError is the validation error returned by
// AccountOnboardingConfig.Validate if the designated constraints aren't met.
type AccountOnboardingConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountOnboardingConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountOnboardingConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountOnboardingConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountOnboardingConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountOnboardingConfigValidationError) ErrorName() string {
	return "AccountOnboardingConfigValidationError"
}

// Error satisfies the builtin error interface
func (e AccountOnboardingConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountOnboardingConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountOnboardingConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountOnboardingConfigValidationError{}
