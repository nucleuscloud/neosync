// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mgmt/v1alpha1/user_account.proto

package mgmtv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on SetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetUserRequestMultiError,
// or nil if none found.
func (m *SetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetUserRequestMultiError(errors)
	}

	return nil
}

// SetUserRequestMultiError is an error wrapping multiple validation errors
// returned by SetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type SetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserRequestMultiError) AllErrors() []error { return m }

// SetUserRequestValidationError is the validation error returned by
// SetUserRequest.Validate if the designated constraints aren't met.
type SetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserRequestValidationError) ErrorName() string { return "SetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserRequestValidationError{}

// Validate checks the field values on SetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserResponseMultiError, or nil if none found.
func (m *SetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return SetUserResponseMultiError(errors)
	}

	return nil
}

// SetUserResponseMultiError is an error wrapping multiple validation errors
// returned by SetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type SetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserResponseMultiError) AllErrors() []error { return m }

// SetUserResponseValidationError is the validation error returned by
// SetUserResponse.Validate if the designated constraints aren't met.
type SetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserResponseValidationError) ErrorName() string { return "SetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserResponseValidationError{}

// Validate checks the field values on GetUserAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAccountsRequestMultiError, or nil if none found.
func (m *GetUserAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserAccountsRequestMultiError(errors)
	}

	return nil
}

// GetUserAccountsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserAccountsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAccountsRequestMultiError) AllErrors() []error { return m }

// GetUserAccountsRequestValidationError is the validation error returned by
// GetUserAccountsRequest.Validate if the designated constraints aren't met.
type GetUserAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAccountsRequestValidationError) ErrorName() string {
	return "GetUserAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAccountsRequestValidationError{}

// Validate checks the field values on GetUserAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAccountsResponseMultiError, or nil if none found.
func (m *GetUserAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserAccountsResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserAccountsResponseMultiError(errors)
	}

	return nil
}

// GetUserAccountsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserAccountsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAccountsResponseMultiError) AllErrors() []error { return m }

// GetUserAccountsResponseValidationError is the validation error returned by
// GetUserAccountsResponse.Validate if the designated constraints aren't met.
type GetUserAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAccountsResponseValidationError) ErrorName() string {
	return "GetUserAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAccountsResponseValidationError{}

// Validate checks the field values on UserAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserAccount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAccount with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserAccountMultiError, or
// nil if none found.
func (m *UserAccount) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAccount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	if len(errors) > 0 {
		return UserAccountMultiError(errors)
	}

	return nil
}

// UserAccountMultiError is an error wrapping multiple validation errors
// returned by UserAccount.ValidateAll() if the designated constraints aren't met.
type UserAccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAccountMultiError) AllErrors() []error { return m }

// UserAccountValidationError is the validation error returned by
// UserAccount.Validate if the designated constraints aren't met.
type UserAccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAccountValidationError) ErrorName() string { return "UserAccountValidationError" }

// Error satisfies the builtin error interface
func (e UserAccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAccountValidationError{}

// Validate checks the field values on ConvertPersonalToTeamAccountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ConvertPersonalToTeamAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConvertPersonalToTeamAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ConvertPersonalToTeamAccountRequestMultiError, or nil if none found.
func (m *ConvertPersonalToTeamAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConvertPersonalToTeamAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConvertPersonalToTeamAccountRequestMultiError(errors)
	}

	return nil
}

// ConvertPersonalToTeamAccountRequestMultiError is an error wrapping multiple
// validation errors returned by
// ConvertPersonalToTeamAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type ConvertPersonalToTeamAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConvertPersonalToTeamAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConvertPersonalToTeamAccountRequestMultiError) AllErrors() []error { return m }

// ConvertPersonalToTeamAccountRequestValidationError is the validation error
// returned by ConvertPersonalToTeamAccountRequest.Validate if the designated
// constraints aren't met.
type ConvertPersonalToTeamAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConvertPersonalToTeamAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConvertPersonalToTeamAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConvertPersonalToTeamAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConvertPersonalToTeamAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConvertPersonalToTeamAccountRequestValidationError) ErrorName() string {
	return "ConvertPersonalToTeamAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConvertPersonalToTeamAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConvertPersonalToTeamAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConvertPersonalToTeamAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConvertPersonalToTeamAccountRequestValidationError{}

// Validate checks the field values on ConvertPersonalToTeamAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ConvertPersonalToTeamAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConvertPersonalToTeamAccountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ConvertPersonalToTeamAccountResponseMultiError, or nil if none found.
func (m *ConvertPersonalToTeamAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConvertPersonalToTeamAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConvertPersonalToTeamAccountResponseMultiError(errors)
	}

	return nil
}

// ConvertPersonalToTeamAccountResponseMultiError is an error wrapping multiple
// validation errors returned by
// ConvertPersonalToTeamAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type ConvertPersonalToTeamAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConvertPersonalToTeamAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConvertPersonalToTeamAccountResponseMultiError) AllErrors() []error { return m }

// ConvertPersonalToTeamAccountResponseValidationError is the validation error
// returned by ConvertPersonalToTeamAccountResponse.Validate if the designated
// constraints aren't met.
type ConvertPersonalToTeamAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConvertPersonalToTeamAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConvertPersonalToTeamAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConvertPersonalToTeamAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConvertPersonalToTeamAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConvertPersonalToTeamAccountResponseValidationError) ErrorName() string {
	return "ConvertPersonalToTeamAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConvertPersonalToTeamAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConvertPersonalToTeamAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConvertPersonalToTeamAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConvertPersonalToTeamAccountResponseValidationError{}

// Validate checks the field values on SetPersonalAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetPersonalAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetPersonalAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetPersonalAccountRequestMultiError, or nil if none found.
func (m *SetPersonalAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetPersonalAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetPersonalAccountRequestMultiError(errors)
	}

	return nil
}

// SetPersonalAccountRequestMultiError is an error wrapping multiple validation
// errors returned by SetPersonalAccountRequest.ValidateAll() if the
// designated constraints aren't met.
type SetPersonalAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetPersonalAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetPersonalAccountRequestMultiError) AllErrors() []error { return m }

// SetPersonalAccountRequestValidationError is the validation error returned by
// SetPersonalAccountRequest.Validate if the designated constraints aren't met.
type SetPersonalAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPersonalAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPersonalAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPersonalAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPersonalAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPersonalAccountRequestValidationError) ErrorName() string {
	return "SetPersonalAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetPersonalAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPersonalAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPersonalAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPersonalAccountRequestValidationError{}

// Validate checks the field values on SetPersonalAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetPersonalAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetPersonalAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetPersonalAccountResponseMultiError, or nil if none found.
func (m *SetPersonalAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetPersonalAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return SetPersonalAccountResponseMultiError(errors)
	}

	return nil
}

// SetPersonalAccountResponseMultiError is an error wrapping multiple
// validation errors returned by SetPersonalAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type SetPersonalAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetPersonalAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetPersonalAccountResponseMultiError) AllErrors() []error { return m }

// SetPersonalAccountResponseValidationError is the validation error returned
// by SetPersonalAccountResponse.Validate if the designated constraints aren't met.
type SetPersonalAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPersonalAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPersonalAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPersonalAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPersonalAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPersonalAccountResponseValidationError) ErrorName() string {
	return "SetPersonalAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetPersonalAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPersonalAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPersonalAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPersonalAccountResponseValidationError{}

// Validate checks the field values on IsUserInAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsUserInAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsUserInAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsUserInAccountRequestMultiError, or nil if none found.
func (m *IsUserInAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsUserInAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return IsUserInAccountRequestMultiError(errors)
	}

	return nil
}

// IsUserInAccountRequestMultiError is an error wrapping multiple validation
// errors returned by IsUserInAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type IsUserInAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsUserInAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsUserInAccountRequestMultiError) AllErrors() []error { return m }

// IsUserInAccountRequestValidationError is the validation error returned by
// IsUserInAccountRequest.Validate if the designated constraints aren't met.
type IsUserInAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsUserInAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsUserInAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsUserInAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsUserInAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsUserInAccountRequestValidationError) ErrorName() string {
	return "IsUserInAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsUserInAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsUserInAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsUserInAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsUserInAccountRequestValidationError{}

// Validate checks the field values on IsUserInAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsUserInAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsUserInAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsUserInAccountResponseMultiError, or nil if none found.
func (m *IsUserInAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsUserInAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return IsUserInAccountResponseMultiError(errors)
	}

	return nil
}

// IsUserInAccountResponseMultiError is an error wrapping multiple validation
// errors returned by IsUserInAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type IsUserInAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsUserInAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsUserInAccountResponseMultiError) AllErrors() []error { return m }

// IsUserInAccountResponseValidationError is the validation error returned by
// IsUserInAccountResponse.Validate if the designated constraints aren't met.
type IsUserInAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsUserInAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsUserInAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsUserInAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsUserInAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsUserInAccountResponseValidationError) ErrorName() string {
	return "IsUserInAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsUserInAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsUserInAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsUserInAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsUserInAccountResponseValidationError{}
