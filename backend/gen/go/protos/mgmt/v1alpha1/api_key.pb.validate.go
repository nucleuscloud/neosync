// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mgmt/v1alpha1/api_key.proto

package mgmtv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAccountApiKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountApiKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountApiKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountApiKeyRequestMultiError, or nil if none found.
func (m *CreateAccountApiKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountApiKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccountApiKeyRequestValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccountApiKeyRequestValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountApiKeyRequestValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAccountApiKeyRequestMultiError(errors)
	}

	return nil
}

// CreateAccountApiKeyRequestMultiError is an error wrapping multiple
// validation errors returned by CreateAccountApiKeyRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateAccountApiKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountApiKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountApiKeyRequestMultiError) AllErrors() []error { return m }

// CreateAccountApiKeyRequestValidationError is the validation error returned
// by CreateAccountApiKeyRequest.Validate if the designated constraints aren't met.
type CreateAccountApiKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountApiKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountApiKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountApiKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountApiKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountApiKeyRequestValidationError) ErrorName() string {
	return "CreateAccountApiKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountApiKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountApiKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountApiKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountApiKeyRequestValidationError{}

// Validate checks the field values on CreateAccountApiKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountApiKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountApiKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountApiKeyResponseMultiError, or nil if none found.
func (m *CreateAccountApiKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountApiKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApiKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccountApiKeyResponseValidationError{
					field:  "ApiKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccountApiKeyResponseValidationError{
					field:  "ApiKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApiKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountApiKeyResponseValidationError{
				field:  "ApiKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAccountApiKeyResponseMultiError(errors)
	}

	return nil
}

// CreateAccountApiKeyResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAccountApiKeyResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateAccountApiKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountApiKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountApiKeyResponseMultiError) AllErrors() []error { return m }

// CreateAccountApiKeyResponseValidationError is the validation error returned
// by CreateAccountApiKeyResponse.Validate if the designated constraints
// aren't met.
type CreateAccountApiKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountApiKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountApiKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountApiKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountApiKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountApiKeyResponseValidationError) ErrorName() string {
	return "CreateAccountApiKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountApiKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountApiKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountApiKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountApiKeyResponseValidationError{}

// Validate checks the field values on AccountApiKey with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountApiKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountApiKey with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountApiKeyMultiError, or
// nil if none found.
func (m *AccountApiKey) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountApiKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for AccountId

	// no validation rules for CreatedById

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccountApiKeyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccountApiKeyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountApiKeyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedById

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccountApiKeyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccountApiKeyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountApiKeyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccountApiKeyValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccountApiKeyValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountApiKeyValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.KeyValue != nil {
		// no validation rules for KeyValue
	}

	if len(errors) > 0 {
		return AccountApiKeyMultiError(errors)
	}

	return nil
}

// AccountApiKeyMultiError is an error wrapping multiple validation errors
// returned by AccountApiKey.ValidateAll() if the designated constraints
// aren't met.
type AccountApiKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountApiKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountApiKeyMultiError) AllErrors() []error { return m }

// AccountApiKeyValidationError is the validation error returned by
// AccountApiKey.Validate if the designated constraints aren't met.
type AccountApiKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountApiKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountApiKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountApiKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountApiKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountApiKeyValidationError) ErrorName() string { return "AccountApiKeyValidationError" }

// Error satisfies the builtin error interface
func (e AccountApiKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountApiKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountApiKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountApiKeyValidationError{}

// Validate checks the field values on GetAccountApiKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountApiKeysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountApiKeysRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountApiKeysRequestMultiError, or nil if none found.
func (m *GetAccountApiKeysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountApiKeysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetAccountApiKeysRequestMultiError(errors)
	}

	return nil
}

// GetAccountApiKeysRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccountApiKeysRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccountApiKeysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountApiKeysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountApiKeysRequestMultiError) AllErrors() []error { return m }

// GetAccountApiKeysRequestValidationError is the validation error returned by
// GetAccountApiKeysRequest.Validate if the designated constraints aren't met.
type GetAccountApiKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountApiKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountApiKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountApiKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountApiKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountApiKeysRequestValidationError) ErrorName() string {
	return "GetAccountApiKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountApiKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountApiKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountApiKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountApiKeysRequestValidationError{}

// Validate checks the field values on GetAccountApiKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountApiKeysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountApiKeysResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountApiKeysResponseMultiError, or nil if none found.
func (m *GetAccountApiKeysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountApiKeysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApiKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountApiKeysResponseValidationError{
						field:  fmt.Sprintf("ApiKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountApiKeysResponseValidationError{
						field:  fmt.Sprintf("ApiKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountApiKeysResponseValidationError{
					field:  fmt.Sprintf("ApiKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccountApiKeysResponseMultiError(errors)
	}

	return nil
}

// GetAccountApiKeysResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccountApiKeysResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAccountApiKeysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountApiKeysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountApiKeysResponseMultiError) AllErrors() []error { return m }

// GetAccountApiKeysResponseValidationError is the validation error returned by
// GetAccountApiKeysResponse.Validate if the designated constraints aren't met.
type GetAccountApiKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountApiKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountApiKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountApiKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountApiKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountApiKeysResponseValidationError) ErrorName() string {
	return "GetAccountApiKeysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountApiKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountApiKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountApiKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountApiKeysResponseValidationError{}

// Validate checks the field values on GetAccountApiKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountApiKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountApiKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountApiKeyRequestMultiError, or nil if none found.
func (m *GetAccountApiKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountApiKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAccountApiKeyRequestMultiError(errors)
	}

	return nil
}

// GetAccountApiKeyRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccountApiKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccountApiKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountApiKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountApiKeyRequestMultiError) AllErrors() []error { return m }

// GetAccountApiKeyRequestValidationError is the validation error returned by
// GetAccountApiKeyRequest.Validate if the designated constraints aren't met.
type GetAccountApiKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountApiKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountApiKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountApiKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountApiKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountApiKeyRequestValidationError) ErrorName() string {
	return "GetAccountApiKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountApiKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountApiKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountApiKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountApiKeyRequestValidationError{}

// Validate checks the field values on GetAccountApiKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountApiKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountApiKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountApiKeyResponseMultiError, or nil if none found.
func (m *GetAccountApiKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountApiKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApiKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountApiKeyResponseValidationError{
					field:  "ApiKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountApiKeyResponseValidationError{
					field:  "ApiKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApiKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountApiKeyResponseValidationError{
				field:  "ApiKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountApiKeyResponseMultiError(errors)
	}

	return nil
}

// GetAccountApiKeyResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccountApiKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccountApiKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountApiKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountApiKeyResponseMultiError) AllErrors() []error { return m }

// GetAccountApiKeyResponseValidationError is the validation error returned by
// GetAccountApiKeyResponse.Validate if the designated constraints aren't met.
type GetAccountApiKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountApiKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountApiKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountApiKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountApiKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountApiKeyResponseValidationError) ErrorName() string {
	return "GetAccountApiKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountApiKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountApiKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountApiKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountApiKeyResponseValidationError{}

// Validate checks the field values on RegenerateAccountApiKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegenerateAccountApiKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegenerateAccountApiKeyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegenerateAccountApiKeyRequestMultiError, or nil if none found.
func (m *RegenerateAccountApiKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegenerateAccountApiKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegenerateAccountApiKeyRequestValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegenerateAccountApiKeyRequestValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegenerateAccountApiKeyRequestValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegenerateAccountApiKeyRequestMultiError(errors)
	}

	return nil
}

// RegenerateAccountApiKeyRequestMultiError is an error wrapping multiple
// validation errors returned by RegenerateAccountApiKeyRequest.ValidateAll()
// if the designated constraints aren't met.
type RegenerateAccountApiKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegenerateAccountApiKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegenerateAccountApiKeyRequestMultiError) AllErrors() []error { return m }

// RegenerateAccountApiKeyRequestValidationError is the validation error
// returned by RegenerateAccountApiKeyRequest.Validate if the designated
// constraints aren't met.
type RegenerateAccountApiKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegenerateAccountApiKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegenerateAccountApiKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegenerateAccountApiKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegenerateAccountApiKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegenerateAccountApiKeyRequestValidationError) ErrorName() string {
	return "RegenerateAccountApiKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegenerateAccountApiKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegenerateAccountApiKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegenerateAccountApiKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegenerateAccountApiKeyRequestValidationError{}

// Validate checks the field values on RegenerateAccountApiKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegenerateAccountApiKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegenerateAccountApiKeyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegenerateAccountApiKeyResponseMultiError, or nil if none found.
func (m *RegenerateAccountApiKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegenerateAccountApiKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApiKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegenerateAccountApiKeyResponseValidationError{
					field:  "ApiKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegenerateAccountApiKeyResponseValidationError{
					field:  "ApiKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApiKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegenerateAccountApiKeyResponseValidationError{
				field:  "ApiKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegenerateAccountApiKeyResponseMultiError(errors)
	}

	return nil
}

// RegenerateAccountApiKeyResponseMultiError is an error wrapping multiple
// validation errors returned by RegenerateAccountApiKeyResponse.ValidateAll()
// if the designated constraints aren't met.
type RegenerateAccountApiKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegenerateAccountApiKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegenerateAccountApiKeyResponseMultiError) AllErrors() []error { return m }

// RegenerateAccountApiKeyResponseValidationError is the validation error
// returned by RegenerateAccountApiKeyResponse.Validate if the designated
// constraints aren't met.
type RegenerateAccountApiKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegenerateAccountApiKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegenerateAccountApiKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegenerateAccountApiKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegenerateAccountApiKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegenerateAccountApiKeyResponseValidationError) ErrorName() string {
	return "RegenerateAccountApiKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegenerateAccountApiKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegenerateAccountApiKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegenerateAccountApiKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegenerateAccountApiKeyResponseValidationError{}

// Validate checks the field values on DeleteAccountApiKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountApiKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountApiKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountApiKeyRequestMultiError, or nil if none found.
func (m *DeleteAccountApiKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountApiKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAccountApiKeyRequestMultiError(errors)
	}

	return nil
}

// DeleteAccountApiKeyRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteAccountApiKeyRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteAccountApiKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountApiKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountApiKeyRequestMultiError) AllErrors() []error { return m }

// DeleteAccountApiKeyRequestValidationError is the validation error returned
// by DeleteAccountApiKeyRequest.Validate if the designated constraints aren't met.
type DeleteAccountApiKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountApiKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountApiKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountApiKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountApiKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountApiKeyRequestValidationError) ErrorName() string {
	return "DeleteAccountApiKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountApiKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountApiKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountApiKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountApiKeyRequestValidationError{}

// Validate checks the field values on DeleteAccountApiKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountApiKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountApiKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountApiKeyResponseMultiError, or nil if none found.
func (m *DeleteAccountApiKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountApiKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAccountApiKeyResponseMultiError(errors)
	}

	return nil
}

// DeleteAccountApiKeyResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteAccountApiKeyResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteAccountApiKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountApiKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountApiKeyResponseMultiError) AllErrors() []error { return m }

// DeleteAccountApiKeyResponseValidationError is the validation error returned
// by DeleteAccountApiKeyResponse.Validate if the designated constraints
// aren't met.
type DeleteAccountApiKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountApiKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountApiKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountApiKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountApiKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountApiKeyResponseValidationError) ErrorName() string {
	return "DeleteAccountApiKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountApiKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountApiKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountApiKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountApiKeyResponseValidationError{}
