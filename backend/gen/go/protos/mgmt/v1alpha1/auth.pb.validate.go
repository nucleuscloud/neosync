// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mgmt/v1alpha1/auth.proto

package mgmtv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginCliRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginCliRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginCliRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginCliRequestMultiError, or nil if none found.
func (m *LoginCliRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginCliRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for RedirectUri

	if len(errors) > 0 {
		return LoginCliRequestMultiError(errors)
	}

	return nil
}

// LoginCliRequestMultiError is an error wrapping multiple validation errors
// returned by LoginCliRequest.ValidateAll() if the designated constraints
// aren't met.
type LoginCliRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginCliRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginCliRequestMultiError) AllErrors() []error { return m }

// LoginCliRequestValidationError is the validation error returned by
// LoginCliRequest.Validate if the designated constraints aren't met.
type LoginCliRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginCliRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginCliRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginCliRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginCliRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginCliRequestValidationError) ErrorName() string { return "LoginCliRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginCliRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginCliRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginCliRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginCliRequestValidationError{}

// Validate checks the field values on LoginCliResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginCliResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginCliResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginCliResponseMultiError, or nil if none found.
func (m *LoginCliResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginCliResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccessToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginCliResponseValidationError{
					field:  "AccessToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginCliResponseValidationError{
					field:  "AccessToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginCliResponseValidationError{
				field:  "AccessToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginCliResponseMultiError(errors)
	}

	return nil
}

// LoginCliResponseMultiError is an error wrapping multiple validation errors
// returned by LoginCliResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginCliResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginCliResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginCliResponseMultiError) AllErrors() []error { return m }

// LoginCliResponseValidationError is the validation error returned by
// LoginCliResponse.Validate if the designated constraints aren't met.
type LoginCliResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginCliResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginCliResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginCliResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginCliResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginCliResponseValidationError) ErrorName() string { return "LoginCliResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginCliResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginCliResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginCliResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginCliResponseValidationError{}

// Validate checks the field values on GetAuthStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthStatusRequestMultiError, or nil if none found.
func (m *GetAuthStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAuthStatusRequestMultiError(errors)
	}

	return nil
}

// GetAuthStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetAuthStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAuthStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthStatusRequestMultiError) AllErrors() []error { return m }

// GetAuthStatusRequestValidationError is the validation error returned by
// GetAuthStatusRequest.Validate if the designated constraints aren't met.
type GetAuthStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthStatusRequestValidationError) ErrorName() string {
	return "GetAuthStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthStatusRequestValidationError{}

// Validate checks the field values on GetAuthStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthStatusResponseMultiError, or nil if none found.
func (m *GetAuthStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsEnabled

	if len(errors) > 0 {
		return GetAuthStatusResponseMultiError(errors)
	}

	return nil
}

// GetAuthStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetAuthStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAuthStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthStatusResponseMultiError) AllErrors() []error { return m }

// GetAuthStatusResponseValidationError is the validation error returned by
// GetAuthStatusResponse.Validate if the designated constraints aren't met.
type GetAuthStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthStatusResponseValidationError) ErrorName() string {
	return "GetAuthStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthStatusResponseValidationError{}

// Validate checks the field values on AccessToken with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccessToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessToken with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccessTokenMultiError, or
// nil if none found.
func (m *AccessToken) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for ExpiresIn

	// no validation rules for Scope

	// no validation rules for TokenType

	if m.RefreshToken != nil {
		// no validation rules for RefreshToken
	}

	if m.IdToken != nil {
		// no validation rules for IdToken
	}

	if len(errors) > 0 {
		return AccessTokenMultiError(errors)
	}

	return nil
}

// AccessTokenMultiError is an error wrapping multiple validation errors
// returned by AccessToken.ValidateAll() if the designated constraints aren't met.
type AccessTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessTokenMultiError) AllErrors() []error { return m }

// AccessTokenValidationError is the validation error returned by
// AccessToken.Validate if the designated constraints aren't met.
type AccessTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessTokenValidationError) ErrorName() string { return "AccessTokenValidationError" }

// Error satisfies the builtin error interface
func (e AccessTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessTokenValidationError{}

// Validate checks the field values on GetAuthorizeUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorizeUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorizeUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorizeUrlRequestMultiError, or nil if none found.
func (m *GetAuthorizeUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorizeUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for RedirectUri

	// no validation rules for Scope

	if len(errors) > 0 {
		return GetAuthorizeUrlRequestMultiError(errors)
	}

	return nil
}

// GetAuthorizeUrlRequestMultiError is an error wrapping multiple validation
// errors returned by GetAuthorizeUrlRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAuthorizeUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorizeUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorizeUrlRequestMultiError) AllErrors() []error { return m }

// GetAuthorizeUrlRequestValidationError is the validation error returned by
// GetAuthorizeUrlRequest.Validate if the designated constraints aren't met.
type GetAuthorizeUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorizeUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorizeUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorizeUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorizeUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorizeUrlRequestValidationError) ErrorName() string {
	return "GetAuthorizeUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorizeUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorizeUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorizeUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorizeUrlRequestValidationError{}

// Validate checks the field values on GetAuthorizeUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorizeUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorizeUrlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthorizeUrlResponseMultiError, or nil if none found.
func (m *GetAuthorizeUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorizeUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetAuthorizeUrlResponseMultiError(errors)
	}

	return nil
}

// GetAuthorizeUrlResponseMultiError is an error wrapping multiple validation
// errors returned by GetAuthorizeUrlResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAuthorizeUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorizeUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorizeUrlResponseMultiError) AllErrors() []error { return m }

// GetAuthorizeUrlResponseValidationError is the validation error returned by
// GetAuthorizeUrlResponse.Validate if the designated constraints aren't met.
type GetAuthorizeUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorizeUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorizeUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorizeUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorizeUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorizeUrlResponseValidationError) ErrorName() string {
	return "GetAuthorizeUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorizeUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorizeUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorizeUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorizeUrlResponseValidationError{}

// Validate checks the field values on GetCliIssuerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCliIssuerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCliIssuerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCliIssuerRequestMultiError, or nil if none found.
func (m *GetCliIssuerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCliIssuerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCliIssuerRequestMultiError(errors)
	}

	return nil
}

// GetCliIssuerRequestMultiError is an error wrapping multiple validation
// errors returned by GetCliIssuerRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCliIssuerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCliIssuerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCliIssuerRequestMultiError) AllErrors() []error { return m }

// GetCliIssuerRequestValidationError is the validation error returned by
// GetCliIssuerRequest.Validate if the designated constraints aren't met.
type GetCliIssuerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCliIssuerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCliIssuerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCliIssuerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCliIssuerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCliIssuerRequestValidationError) ErrorName() string {
	return "GetCliIssuerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCliIssuerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCliIssuerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCliIssuerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCliIssuerRequestValidationError{}

// Validate checks the field values on GetCliIssuerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCliIssuerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCliIssuerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCliIssuerResponseMultiError, or nil if none found.
func (m *GetCliIssuerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCliIssuerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IssuerUrl

	// no validation rules for Audience

	if len(errors) > 0 {
		return GetCliIssuerResponseMultiError(errors)
	}

	return nil
}

// GetCliIssuerResponseMultiError is an error wrapping multiple validation
// errors returned by GetCliIssuerResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCliIssuerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCliIssuerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCliIssuerResponseMultiError) AllErrors() []error { return m }

// GetCliIssuerResponseValidationError is the validation error returned by
// GetCliIssuerResponse.Validate if the designated constraints aren't met.
type GetCliIssuerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCliIssuerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCliIssuerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCliIssuerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCliIssuerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCliIssuerResponseValidationError) ErrorName() string {
	return "GetCliIssuerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCliIssuerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCliIssuerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCliIssuerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCliIssuerResponseValidationError{}

// Validate checks the field values on RefreshCliRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshCliRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshCliRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshCliRequestMultiError, or nil if none found.
func (m *RefreshCliRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshCliRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshCliRequestMultiError(errors)
	}

	return nil
}

// RefreshCliRequestMultiError is an error wrapping multiple validation errors
// returned by RefreshCliRequest.ValidateAll() if the designated constraints
// aren't met.
type RefreshCliRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshCliRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshCliRequestMultiError) AllErrors() []error { return m }

// RefreshCliRequestValidationError is the validation error returned by
// RefreshCliRequest.Validate if the designated constraints aren't met.
type RefreshCliRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshCliRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshCliRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshCliRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshCliRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshCliRequestValidationError) ErrorName() string {
	return "RefreshCliRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshCliRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshCliRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshCliRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshCliRequestValidationError{}

// Validate checks the field values on RefreshCliResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshCliResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshCliResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshCliResponseMultiError, or nil if none found.
func (m *RefreshCliResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshCliResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccessToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshCliResponseValidationError{
					field:  "AccessToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshCliResponseValidationError{
					field:  "AccessToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshCliResponseValidationError{
				field:  "AccessToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefreshCliResponseMultiError(errors)
	}

	return nil
}

// RefreshCliResponseMultiError is an error wrapping multiple validation errors
// returned by RefreshCliResponse.ValidateAll() if the designated constraints
// aren't met.
type RefreshCliResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshCliResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshCliResponseMultiError) AllErrors() []error { return m }

// RefreshCliResponseValidationError is the validation error returned by
// RefreshCliResponse.Validate if the designated constraints aren't met.
type RefreshCliResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshCliResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshCliResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshCliResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshCliResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshCliResponseValidationError) ErrorName() string {
	return "RefreshCliResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshCliResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshCliResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshCliResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshCliResponseValidationError{}

// Validate checks the field values on CheckTokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckTokenRequestMultiError, or nil if none found.
func (m *CheckTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckTokenRequestMultiError(errors)
	}

	return nil
}

// CheckTokenRequestMultiError is an error wrapping multiple validation errors
// returned by CheckTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckTokenRequestMultiError) AllErrors() []error { return m }

// CheckTokenRequestValidationError is the validation error returned by
// CheckTokenRequest.Validate if the designated constraints aren't met.
type CheckTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckTokenRequestValidationError) ErrorName() string {
	return "CheckTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckTokenRequestValidationError{}

// Validate checks the field values on CheckTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckTokenResponseMultiError, or nil if none found.
func (m *CheckTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckTokenResponseMultiError(errors)
	}

	return nil
}

// CheckTokenResponseMultiError is an error wrapping multiple validation errors
// returned by CheckTokenResponse.ValidateAll() if the designated constraints
// aren't met.
type CheckTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckTokenResponseMultiError) AllErrors() []error { return m }

// CheckTokenResponseValidationError is the validation error returned by
// CheckTokenResponse.Validate if the designated constraints aren't met.
type CheckTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckTokenResponseValidationError) ErrorName() string {
	return "CheckTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckTokenResponseValidationError{}
