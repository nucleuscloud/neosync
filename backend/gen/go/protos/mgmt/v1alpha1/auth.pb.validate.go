// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mgmt/v1alpha1/auth.proto

package mgmtv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RefreshAccessTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshAccessTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshAccessTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshAccessTokenRequestMultiError, or nil if none found.
func (m *RefreshAccessTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshAccessTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshAccessTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshAccessTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshAccessTokenRequest.ValidateAll() if the
// designated constraints aren't met.
type RefreshAccessTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshAccessTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshAccessTokenRequestMultiError) AllErrors() []error { return m }

// RefreshAccessTokenRequestValidationError is the validation error returned by
// RefreshAccessTokenRequest.Validate if the designated constraints aren't met.
type RefreshAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshAccessTokenRequestValidationError) ErrorName() string {
	return "RefreshAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshAccessTokenRequestValidationError{}

// Validate checks the field values on RefreshAccessTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshAccessTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshAccessTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshAccessTokenResponseMultiError, or nil if none found.
func (m *RefreshAccessTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshAccessTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiresIn

	// no validation rules for Scope

	// no validation rules for IdToken

	// no validation rules for TokenType

	if len(errors) > 0 {
		return RefreshAccessTokenResponseMultiError(errors)
	}

	return nil
}

// RefreshAccessTokenResponseMultiError is an error wrapping multiple
// validation errors returned by RefreshAccessTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type RefreshAccessTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshAccessTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshAccessTokenResponseMultiError) AllErrors() []error { return m }

// RefreshAccessTokenResponseValidationError is the validation error returned
// by RefreshAccessTokenResponse.Validate if the designated constraints aren't met.
type RefreshAccessTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshAccessTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshAccessTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshAccessTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshAccessTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshAccessTokenResponseValidationError) ErrorName() string {
	return "RefreshAccessTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshAccessTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshAccessTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshAccessTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshAccessTokenResponseValidationError{}

// Validate checks the field values on GetAccessTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessTokenRequestMultiError, or nil if none found.
func (m *GetAccessTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for Code

	// no validation rules for RedirectUri

	if len(errors) > 0 {
		return GetAccessTokenRequestMultiError(errors)
	}

	return nil
}

// GetAccessTokenRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccessTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccessTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessTokenRequestMultiError) AllErrors() []error { return m }

// GetAccessTokenRequestValidationError is the validation error returned by
// GetAccessTokenRequest.Validate if the designated constraints aren't met.
type GetAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessTokenRequestValidationError) ErrorName() string {
	return "GetAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessTokenRequestValidationError{}

// Validate checks the field values on GetAccessTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessTokenResponseMultiError, or nil if none found.
func (m *GetAccessTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiresIn

	// no validation rules for Scope

	// no validation rules for IdToken

	// no validation rules for TokenType

	if len(errors) > 0 {
		return GetAccessTokenResponseMultiError(errors)
	}

	return nil
}

// GetAccessTokenResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccessTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccessTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessTokenResponseMultiError) AllErrors() []error { return m }

// GetAccessTokenResponseValidationError is the validation error returned by
// GetAccessTokenResponse.Validate if the designated constraints aren't met.
type GetAccessTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessTokenResponseValidationError) ErrorName() string {
	return "GetAccessTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessTokenResponseValidationError{}

// Validate checks the field values on GetAuthStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthStatusRequestMultiError, or nil if none found.
func (m *GetAuthStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAuthStatusRequestMultiError(errors)
	}

	return nil
}

// GetAuthStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetAuthStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAuthStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthStatusRequestMultiError) AllErrors() []error { return m }

// GetAuthStatusRequestValidationError is the validation error returned by
// GetAuthStatusRequest.Validate if the designated constraints aren't met.
type GetAuthStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthStatusRequestValidationError) ErrorName() string {
	return "GetAuthStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthStatusRequestValidationError{}

// Validate checks the field values on GetAuthStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthStatusResponseMultiError, or nil if none found.
func (m *GetAuthStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsEnabled

	if len(errors) > 0 {
		return GetAuthStatusResponseMultiError(errors)
	}

	return nil
}

// GetAuthStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetAuthStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAuthStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthStatusResponseMultiError) AllErrors() []error { return m }

// GetAuthStatusResponseValidationError is the validation error returned by
// GetAuthStatusResponse.Validate if the designated constraints aren't met.
type GetAuthStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthStatusResponseValidationError) ErrorName() string {
	return "GetAuthStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthStatusResponseValidationError{}
