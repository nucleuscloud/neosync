// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: mgmt/v1alpha1/connection_data.proto

package mgmtv1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PostgresStreamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostgresStreamConfig) Reset() {
	*x = PostgresStreamConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresStreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresStreamConfig) ProtoMessage() {}

func (x *PostgresStreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresStreamConfig.ProtoReflect.Descriptor instead.
func (*PostgresStreamConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{0}
}

type MysqlStreamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MysqlStreamConfig) Reset() {
	*x = MysqlStreamConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlStreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlStreamConfig) ProtoMessage() {}

func (x *MysqlStreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlStreamConfig.ProtoReflect.Descriptor instead.
func (*MysqlStreamConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{1}
}

type AwsDynamoDBStreamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AwsDynamoDBStreamConfig) Reset() {
	*x = AwsDynamoDBStreamConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamoDBStreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamoDBStreamConfig) ProtoMessage() {}

func (x *AwsDynamoDBStreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamoDBStreamConfig.ProtoReflect.Descriptor instead.
func (*AwsDynamoDBStreamConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{2}
}

type AwsS3StreamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*AwsS3StreamConfig_JobId
	//	*AwsS3StreamConfig_JobRunId
	Id isAwsS3StreamConfig_Id `protobuf_oneof:"id"`
}

func (x *AwsS3StreamConfig) Reset() {
	*x = AwsS3StreamConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsS3StreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsS3StreamConfig) ProtoMessage() {}

func (x *AwsS3StreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsS3StreamConfig.ProtoReflect.Descriptor instead.
func (*AwsS3StreamConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{3}
}

func (m *AwsS3StreamConfig) GetId() isAwsS3StreamConfig_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *AwsS3StreamConfig) GetJobId() string {
	if x, ok := x.GetId().(*AwsS3StreamConfig_JobId); ok {
		return x.JobId
	}
	return ""
}

func (x *AwsS3StreamConfig) GetJobRunId() string {
	if x, ok := x.GetId().(*AwsS3StreamConfig_JobRunId); ok {
		return x.JobRunId
	}
	return ""
}

type isAwsS3StreamConfig_Id interface {
	isAwsS3StreamConfig_Id()
}

type AwsS3StreamConfig_JobId struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3,oneof"`
}

type AwsS3StreamConfig_JobRunId struct {
	JobRunId string `protobuf:"bytes,2,opt,name=job_run_id,json=jobRunId,proto3,oneof"`
}

func (*AwsS3StreamConfig_JobId) isAwsS3StreamConfig_Id() {}

func (*AwsS3StreamConfig_JobRunId) isAwsS3StreamConfig_Id() {}

type GcpCloudStorageStreamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*GcpCloudStorageStreamConfig_JobId
	//	*GcpCloudStorageStreamConfig_JobRunId
	Id isGcpCloudStorageStreamConfig_Id `protobuf_oneof:"id"`
}

func (x *GcpCloudStorageStreamConfig) Reset() {
	*x = GcpCloudStorageStreamConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpCloudStorageStreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpCloudStorageStreamConfig) ProtoMessage() {}

func (x *GcpCloudStorageStreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpCloudStorageStreamConfig.ProtoReflect.Descriptor instead.
func (*GcpCloudStorageStreamConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{4}
}

func (m *GcpCloudStorageStreamConfig) GetId() isGcpCloudStorageStreamConfig_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *GcpCloudStorageStreamConfig) GetJobId() string {
	if x, ok := x.GetId().(*GcpCloudStorageStreamConfig_JobId); ok {
		return x.JobId
	}
	return ""
}

func (x *GcpCloudStorageStreamConfig) GetJobRunId() string {
	if x, ok := x.GetId().(*GcpCloudStorageStreamConfig_JobRunId); ok {
		return x.JobRunId
	}
	return ""
}

type isGcpCloudStorageStreamConfig_Id interface {
	isGcpCloudStorageStreamConfig_Id()
}

type GcpCloudStorageStreamConfig_JobId struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3,oneof"`
}

type GcpCloudStorageStreamConfig_JobRunId struct {
	JobRunId string `protobuf:"bytes,2,opt,name=job_run_id,json=jobRunId,proto3,oneof"`
}

func (*GcpCloudStorageStreamConfig_JobId) isGcpCloudStorageStreamConfig_Id() {}

func (*GcpCloudStorageStreamConfig_JobRunId) isGcpCloudStorageStreamConfig_Id() {}

type ConnectionStreamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*ConnectionStreamConfig_PgConfig
	//	*ConnectionStreamConfig_AwsS3Config
	//	*ConnectionStreamConfig_MysqlConfig
	//	*ConnectionStreamConfig_GcpCloudstorageConfig
	//	*ConnectionStreamConfig_DynamodbConfig
	Config isConnectionStreamConfig_Config `protobuf_oneof:"config"`
}

func (x *ConnectionStreamConfig) Reset() {
	*x = ConnectionStreamConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionStreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionStreamConfig) ProtoMessage() {}

func (x *ConnectionStreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionStreamConfig.ProtoReflect.Descriptor instead.
func (*ConnectionStreamConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{5}
}

func (m *ConnectionStreamConfig) GetConfig() isConnectionStreamConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ConnectionStreamConfig) GetPgConfig() *PostgresStreamConfig {
	if x, ok := x.GetConfig().(*ConnectionStreamConfig_PgConfig); ok {
		return x.PgConfig
	}
	return nil
}

func (x *ConnectionStreamConfig) GetAwsS3Config() *AwsS3StreamConfig {
	if x, ok := x.GetConfig().(*ConnectionStreamConfig_AwsS3Config); ok {
		return x.AwsS3Config
	}
	return nil
}

func (x *ConnectionStreamConfig) GetMysqlConfig() *MysqlStreamConfig {
	if x, ok := x.GetConfig().(*ConnectionStreamConfig_MysqlConfig); ok {
		return x.MysqlConfig
	}
	return nil
}

func (x *ConnectionStreamConfig) GetGcpCloudstorageConfig() *GcpCloudStorageStreamConfig {
	if x, ok := x.GetConfig().(*ConnectionStreamConfig_GcpCloudstorageConfig); ok {
		return x.GcpCloudstorageConfig
	}
	return nil
}

func (x *ConnectionStreamConfig) GetDynamodbConfig() *AwsDynamoDBStreamConfig {
	if x, ok := x.GetConfig().(*ConnectionStreamConfig_DynamodbConfig); ok {
		return x.DynamodbConfig
	}
	return nil
}

type isConnectionStreamConfig_Config interface {
	isConnectionStreamConfig_Config()
}

type ConnectionStreamConfig_PgConfig struct {
	PgConfig *PostgresStreamConfig `protobuf:"bytes,1,opt,name=pg_config,json=pgConfig,proto3,oneof"`
}

type ConnectionStreamConfig_AwsS3Config struct {
	AwsS3Config *AwsS3StreamConfig `protobuf:"bytes,2,opt,name=aws_s3_config,json=awsS3Config,proto3,oneof"`
}

type ConnectionStreamConfig_MysqlConfig struct {
	MysqlConfig *MysqlStreamConfig `protobuf:"bytes,3,opt,name=mysql_config,json=mysqlConfig,proto3,oneof"`
}

type ConnectionStreamConfig_GcpCloudstorageConfig struct {
	GcpCloudstorageConfig *GcpCloudStorageStreamConfig `protobuf:"bytes,4,opt,name=gcp_cloudstorage_config,json=gcpCloudstorageConfig,proto3,oneof"`
}

type ConnectionStreamConfig_DynamodbConfig struct {
	DynamodbConfig *AwsDynamoDBStreamConfig `protobuf:"bytes,5,opt,name=dynamodb_config,json=dynamodbConfig,proto3,oneof"`
}

func (*ConnectionStreamConfig_PgConfig) isConnectionStreamConfig_Config() {}

func (*ConnectionStreamConfig_AwsS3Config) isConnectionStreamConfig_Config() {}

func (*ConnectionStreamConfig_MysqlConfig) isConnectionStreamConfig_Config() {}

func (*ConnectionStreamConfig_GcpCloudstorageConfig) isConnectionStreamConfig_Config() {}

func (*ConnectionStreamConfig_DynamodbConfig) isConnectionStreamConfig_Config() {}

type GetConnectionDataStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string                  `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	StreamConfig *ConnectionStreamConfig `protobuf:"bytes,2,opt,name=stream_config,json=streamConfig,proto3" json:"stream_config,omitempty"`
	Schema       string                  `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Table        string                  `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *GetConnectionDataStreamRequest) Reset() {
	*x = GetConnectionDataStreamRequest{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionDataStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionDataStreamRequest) ProtoMessage() {}

func (x *GetConnectionDataStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionDataStreamRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionDataStreamRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{6}
}

func (x *GetConnectionDataStreamRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *GetConnectionDataStreamRequest) GetStreamConfig() *ConnectionStreamConfig {
	if x != nil {
		return x.StreamConfig
	}
	return nil
}

func (x *GetConnectionDataStreamRequest) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *GetConnectionDataStreamRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

// Each stream response is a single row in the requested schema and table
type GetConnectionDataStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of column name to the bytes value of the data that was found for that column and row
	Row map[string][]byte `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetConnectionDataStreamResponse) Reset() {
	*x = GetConnectionDataStreamResponse{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionDataStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionDataStreamResponse) ProtoMessage() {}

func (x *GetConnectionDataStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionDataStreamResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionDataStreamResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{7}
}

func (x *GetConnectionDataStreamResponse) GetRow() map[string][]byte {
	if x != nil {
		return x.Row
	}
	return nil
}

type PostgresSchemaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostgresSchemaConfig) Reset() {
	*x = PostgresSchemaConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresSchemaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresSchemaConfig) ProtoMessage() {}

func (x *PostgresSchemaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresSchemaConfig.ProtoReflect.Descriptor instead.
func (*PostgresSchemaConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{8}
}

type MysqlSchemaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MysqlSchemaConfig) Reset() {
	*x = MysqlSchemaConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlSchemaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlSchemaConfig) ProtoMessage() {}

func (x *MysqlSchemaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlSchemaConfig.ProtoReflect.Descriptor instead.
func (*MysqlSchemaConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{9}
}

type MssqlSchemaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MssqlSchemaConfig) Reset() {
	*x = MssqlSchemaConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MssqlSchemaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MssqlSchemaConfig) ProtoMessage() {}

func (x *MssqlSchemaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MssqlSchemaConfig.ProtoReflect.Descriptor instead.
func (*MssqlSchemaConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{10}
}

type AwsS3SchemaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*AwsS3SchemaConfig_JobId
	//	*AwsS3SchemaConfig_JobRunId
	Id isAwsS3SchemaConfig_Id `protobuf_oneof:"id"`
}

func (x *AwsS3SchemaConfig) Reset() {
	*x = AwsS3SchemaConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsS3SchemaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsS3SchemaConfig) ProtoMessage() {}

func (x *AwsS3SchemaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsS3SchemaConfig.ProtoReflect.Descriptor instead.
func (*AwsS3SchemaConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{11}
}

func (m *AwsS3SchemaConfig) GetId() isAwsS3SchemaConfig_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *AwsS3SchemaConfig) GetJobId() string {
	if x, ok := x.GetId().(*AwsS3SchemaConfig_JobId); ok {
		return x.JobId
	}
	return ""
}

func (x *AwsS3SchemaConfig) GetJobRunId() string {
	if x, ok := x.GetId().(*AwsS3SchemaConfig_JobRunId); ok {
		return x.JobRunId
	}
	return ""
}

type isAwsS3SchemaConfig_Id interface {
	isAwsS3SchemaConfig_Id()
}

type AwsS3SchemaConfig_JobId struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3,oneof"`
}

type AwsS3SchemaConfig_JobRunId struct {
	JobRunId string `protobuf:"bytes,2,opt,name=job_run_id,json=jobRunId,proto3,oneof"`
}

func (*AwsS3SchemaConfig_JobId) isAwsS3SchemaConfig_Id() {}

func (*AwsS3SchemaConfig_JobRunId) isAwsS3SchemaConfig_Id() {}

type MongoSchemaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MongoSchemaConfig) Reset() {
	*x = MongoSchemaConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongoSchemaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoSchemaConfig) ProtoMessage() {}

func (x *MongoSchemaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoSchemaConfig.ProtoReflect.Descriptor instead.
func (*MongoSchemaConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{12}
}

type DynamoDBSchemaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DynamoDBSchemaConfig) Reset() {
	*x = DynamoDBSchemaConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamoDBSchemaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDBSchemaConfig) ProtoMessage() {}

func (x *DynamoDBSchemaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDBSchemaConfig.ProtoReflect.Descriptor instead.
func (*DynamoDBSchemaConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{13}
}

type GcpCloudStorageSchemaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*GcpCloudStorageSchemaConfig_JobId
	//	*GcpCloudStorageSchemaConfig_JobRunId
	Id isGcpCloudStorageSchemaConfig_Id `protobuf_oneof:"id"`
}

func (x *GcpCloudStorageSchemaConfig) Reset() {
	*x = GcpCloudStorageSchemaConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpCloudStorageSchemaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpCloudStorageSchemaConfig) ProtoMessage() {}

func (x *GcpCloudStorageSchemaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpCloudStorageSchemaConfig.ProtoReflect.Descriptor instead.
func (*GcpCloudStorageSchemaConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{14}
}

func (m *GcpCloudStorageSchemaConfig) GetId() isGcpCloudStorageSchemaConfig_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *GcpCloudStorageSchemaConfig) GetJobId() string {
	if x, ok := x.GetId().(*GcpCloudStorageSchemaConfig_JobId); ok {
		return x.JobId
	}
	return ""
}

func (x *GcpCloudStorageSchemaConfig) GetJobRunId() string {
	if x, ok := x.GetId().(*GcpCloudStorageSchemaConfig_JobRunId); ok {
		return x.JobRunId
	}
	return ""
}

type isGcpCloudStorageSchemaConfig_Id interface {
	isGcpCloudStorageSchemaConfig_Id()
}

type GcpCloudStorageSchemaConfig_JobId struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3,oneof"`
}

type GcpCloudStorageSchemaConfig_JobRunId struct {
	JobRunId string `protobuf:"bytes,2,opt,name=job_run_id,json=jobRunId,proto3,oneof"`
}

func (*GcpCloudStorageSchemaConfig_JobId) isGcpCloudStorageSchemaConfig_Id() {}

func (*GcpCloudStorageSchemaConfig_JobRunId) isGcpCloudStorageSchemaConfig_Id() {}

type ConnectionSchemaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*ConnectionSchemaConfig_PgConfig
	//	*ConnectionSchemaConfig_AwsS3Config
	//	*ConnectionSchemaConfig_MysqlConfig
	//	*ConnectionSchemaConfig_MongoConfig
	//	*ConnectionSchemaConfig_GcpCloudstorageConfig
	//	*ConnectionSchemaConfig_DynamodbConfig
	//	*ConnectionSchemaConfig_MssqlConfig
	Config isConnectionSchemaConfig_Config `protobuf_oneof:"config"`
}

func (x *ConnectionSchemaConfig) Reset() {
	*x = ConnectionSchemaConfig{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionSchemaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionSchemaConfig) ProtoMessage() {}

func (x *ConnectionSchemaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionSchemaConfig.ProtoReflect.Descriptor instead.
func (*ConnectionSchemaConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{15}
}

func (m *ConnectionSchemaConfig) GetConfig() isConnectionSchemaConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ConnectionSchemaConfig) GetPgConfig() *PostgresSchemaConfig {
	if x, ok := x.GetConfig().(*ConnectionSchemaConfig_PgConfig); ok {
		return x.PgConfig
	}
	return nil
}

func (x *ConnectionSchemaConfig) GetAwsS3Config() *AwsS3SchemaConfig {
	if x, ok := x.GetConfig().(*ConnectionSchemaConfig_AwsS3Config); ok {
		return x.AwsS3Config
	}
	return nil
}

func (x *ConnectionSchemaConfig) GetMysqlConfig() *MysqlSchemaConfig {
	if x, ok := x.GetConfig().(*ConnectionSchemaConfig_MysqlConfig); ok {
		return x.MysqlConfig
	}
	return nil
}

func (x *ConnectionSchemaConfig) GetMongoConfig() *MongoSchemaConfig {
	if x, ok := x.GetConfig().(*ConnectionSchemaConfig_MongoConfig); ok {
		return x.MongoConfig
	}
	return nil
}

func (x *ConnectionSchemaConfig) GetGcpCloudstorageConfig() *GcpCloudStorageSchemaConfig {
	if x, ok := x.GetConfig().(*ConnectionSchemaConfig_GcpCloudstorageConfig); ok {
		return x.GcpCloudstorageConfig
	}
	return nil
}

func (x *ConnectionSchemaConfig) GetDynamodbConfig() *DynamoDBSchemaConfig {
	if x, ok := x.GetConfig().(*ConnectionSchemaConfig_DynamodbConfig); ok {
		return x.DynamodbConfig
	}
	return nil
}

func (x *ConnectionSchemaConfig) GetMssqlConfig() *MssqlSchemaConfig {
	if x, ok := x.GetConfig().(*ConnectionSchemaConfig_MssqlConfig); ok {
		return x.MssqlConfig
	}
	return nil
}

type isConnectionSchemaConfig_Config interface {
	isConnectionSchemaConfig_Config()
}

type ConnectionSchemaConfig_PgConfig struct {
	PgConfig *PostgresSchemaConfig `protobuf:"bytes,1,opt,name=pg_config,json=pgConfig,proto3,oneof"`
}

type ConnectionSchemaConfig_AwsS3Config struct {
	AwsS3Config *AwsS3SchemaConfig `protobuf:"bytes,2,opt,name=aws_s3_config,json=awsS3Config,proto3,oneof"`
}

type ConnectionSchemaConfig_MysqlConfig struct {
	MysqlConfig *MysqlSchemaConfig `protobuf:"bytes,3,opt,name=mysql_config,json=mysqlConfig,proto3,oneof"`
}

type ConnectionSchemaConfig_MongoConfig struct {
	MongoConfig *MongoSchemaConfig `protobuf:"bytes,4,opt,name=mongo_config,json=mongoConfig,proto3,oneof"`
}

type ConnectionSchemaConfig_GcpCloudstorageConfig struct {
	GcpCloudstorageConfig *GcpCloudStorageSchemaConfig `protobuf:"bytes,5,opt,name=gcp_cloudstorage_config,json=gcpCloudstorageConfig,proto3,oneof"`
}

type ConnectionSchemaConfig_DynamodbConfig struct {
	DynamodbConfig *DynamoDBSchemaConfig `protobuf:"bytes,6,opt,name=dynamodb_config,json=dynamodbConfig,proto3,oneof"`
}

type ConnectionSchemaConfig_MssqlConfig struct {
	MssqlConfig *MssqlSchemaConfig `protobuf:"bytes,7,opt,name=mssql_config,json=mssqlConfig,proto3,oneof"`
}

func (*ConnectionSchemaConfig_PgConfig) isConnectionSchemaConfig_Config() {}

func (*ConnectionSchemaConfig_AwsS3Config) isConnectionSchemaConfig_Config() {}

func (*ConnectionSchemaConfig_MysqlConfig) isConnectionSchemaConfig_Config() {}

func (*ConnectionSchemaConfig_MongoConfig) isConnectionSchemaConfig_Config() {}

func (*ConnectionSchemaConfig_GcpCloudstorageConfig) isConnectionSchemaConfig_Config() {}

func (*ConnectionSchemaConfig_DynamodbConfig) isConnectionSchemaConfig_Config() {}

func (*ConnectionSchemaConfig_MssqlConfig) isConnectionSchemaConfig_Config() {}

type DatabaseColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The database schema. Ex: public
	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	// The name of the table in the schema
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// The name of the column
	Column string `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
	// The datatype of the column
	DataType string `protobuf:"bytes,4,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// The isNullable Flag of the column
	IsNullable string `protobuf:"bytes,5,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	// The default value of the column if available
	ColumnDefault *string `protobuf:"bytes,6,opt,name=column_default,json=columnDefault,proto3,oneof" json:"column_default,omitempty"`
	// Populated if the column is generated. The value is the type of generated column it is. For example, postgres is 's' for stored
	// May be other values in the future, or other DB providers may use a different value types.
	GeneratedType *string `protobuf:"bytes,7,opt,name=generated_type,json=generatedType,proto3,oneof" json:"generated_type,omitempty"`
	// Populated if the column is an identity. The value is the type of the identity column it is. For example, postgres is 'd' for generated by default, or 'a' for generated always.
	IdentityGeneration *string `protobuf:"bytes,8,opt,name=identity_generation,json=identityGeneration,proto3,oneof" json:"identity_generation,omitempty"`
}

func (x *DatabaseColumn) Reset() {
	*x = DatabaseColumn{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseColumn) ProtoMessage() {}

func (x *DatabaseColumn) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseColumn.ProtoReflect.Descriptor instead.
func (*DatabaseColumn) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{16}
}

func (x *DatabaseColumn) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *DatabaseColumn) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *DatabaseColumn) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *DatabaseColumn) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *DatabaseColumn) GetIsNullable() string {
	if x != nil {
		return x.IsNullable
	}
	return ""
}

func (x *DatabaseColumn) GetColumnDefault() string {
	if x != nil && x.ColumnDefault != nil {
		return *x.ColumnDefault
	}
	return ""
}

func (x *DatabaseColumn) GetGeneratedType() string {
	if x != nil && x.GeneratedType != nil {
		return *x.GeneratedType
	}
	return ""
}

func (x *DatabaseColumn) GetIdentityGeneration() string {
	if x != nil && x.IdentityGeneration != nil {
		return *x.IdentityGeneration
	}
	return ""
}

type GetConnectionSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string                  `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	SchemaConfig *ConnectionSchemaConfig `protobuf:"bytes,2,opt,name=schema_config,json=schemaConfig,proto3" json:"schema_config,omitempty"`
}

func (x *GetConnectionSchemaRequest) Reset() {
	*x = GetConnectionSchemaRequest{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionSchemaRequest) ProtoMessage() {}

func (x *GetConnectionSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionSchemaRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{17}
}

func (x *GetConnectionSchemaRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *GetConnectionSchemaRequest) GetSchemaConfig() *ConnectionSchemaConfig {
	if x != nil {
		return x.SchemaConfig
	}
	return nil
}

type GetConnectionSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schemas []*DatabaseColumn `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
}

func (x *GetConnectionSchemaResponse) Reset() {
	*x = GetConnectionSchemaResponse{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionSchemaResponse) ProtoMessage() {}

func (x *GetConnectionSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionSchemaResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{18}
}

func (x *GetConnectionSchemaResponse) GetSchemas() []*DatabaseColumn {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type GetConnectionSchemaMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string                  `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	SchemaConfig *ConnectionSchemaConfig `protobuf:"bytes,2,opt,name=schema_config,json=schemaConfig,proto3" json:"schema_config,omitempty"`
}

func (x *GetConnectionSchemaMapRequest) Reset() {
	*x = GetConnectionSchemaMapRequest{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionSchemaMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionSchemaMapRequest) ProtoMessage() {}

func (x *GetConnectionSchemaMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionSchemaMapRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionSchemaMapRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{19}
}

func (x *GetConnectionSchemaMapRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *GetConnectionSchemaMapRequest) GetSchemaConfig() *ConnectionSchemaConfig {
	if x != nil {
		return x.SchemaConfig
	}
	return nil
}

type GetConnectionSchemaMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Returns the database columns separated by the fully qualified <schema>.<table>
	SchemaMap map[string]*GetConnectionSchemaResponse `protobuf:"bytes,1,rep,name=schema_map,json=schemaMap,proto3" json:"schema_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetConnectionSchemaMapResponse) Reset() {
	*x = GetConnectionSchemaMapResponse{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionSchemaMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionSchemaMapResponse) ProtoMessage() {}

func (x *GetConnectionSchemaMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionSchemaMapResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionSchemaMapResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{20}
}

func (x *GetConnectionSchemaMapResponse) GetSchemaMap() map[string]*GetConnectionSchemaResponse {
	if x != nil {
		return x.SchemaMap
	}
	return nil
}

type GetConnectionSchemaMapsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of connection schema maps to request
	Requests []*GetConnectionSchemaMapRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *GetConnectionSchemaMapsRequest) Reset() {
	*x = GetConnectionSchemaMapsRequest{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionSchemaMapsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionSchemaMapsRequest) ProtoMessage() {}

func (x *GetConnectionSchemaMapsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionSchemaMapsRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionSchemaMapsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{21}
}

func (x *GetConnectionSchemaMapsRequest) GetRequests() []*GetConnectionSchemaMapRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type GetConnectionSchemaMapsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of responses in the same order as the input
	Responses []*GetConnectionSchemaMapResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	// Parallel array of each connection id that matches with the response
	ConnectionIds []string `protobuf:"bytes,2,rep,name=connection_ids,json=connectionIds,proto3" json:"connection_ids,omitempty"`
}

func (x *GetConnectionSchemaMapsResponse) Reset() {
	*x = GetConnectionSchemaMapsResponse{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionSchemaMapsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionSchemaMapsResponse) ProtoMessage() {}

func (x *GetConnectionSchemaMapsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionSchemaMapsResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionSchemaMapsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{22}
}

func (x *GetConnectionSchemaMapsResponse) GetResponses() []*GetConnectionSchemaMapResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *GetConnectionSchemaMapsResponse) GetConnectionIds() []string {
	if x != nil {
		return x.ConnectionIds
	}
	return nil
}

type GetConnectionForeignConstraintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *GetConnectionForeignConstraintsRequest) Reset() {
	*x = GetConnectionForeignConstraintsRequest{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionForeignConstraintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionForeignConstraintsRequest) ProtoMessage() {}

func (x *GetConnectionForeignConstraintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionForeignConstraintsRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionForeignConstraintsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{23}
}

func (x *GetConnectionForeignConstraintsRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type ForeignKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// @deprecated - use columns
	Column  string   `protobuf:"bytes,2,opt,name=column,proto3" json:"column,omitempty"`
	Columns []string `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *ForeignKey) Reset() {
	*x = ForeignKey{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForeignKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForeignKey) ProtoMessage() {}

func (x *ForeignKey) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForeignKey.ProtoReflect.Descriptor instead.
func (*ForeignKey) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{24}
}

func (x *ForeignKey) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ForeignKey) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *ForeignKey) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

type ForeignConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @deprecated - use columns
	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	// @deprecated - use not_nullable
	IsNullable  bool        `protobuf:"varint,2,opt,name=is_nullable,json=isNullable,proto3" json:"is_nullable,omitempty"`
	ForeignKey  *ForeignKey `protobuf:"bytes,3,opt,name=foreign_key,json=foreignKey,proto3" json:"foreign_key,omitempty"`
	Columns     []string    `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	NotNullable []bool      `protobuf:"varint,5,rep,packed,name=not_nullable,json=notNullable,proto3" json:"not_nullable,omitempty"`
}

func (x *ForeignConstraint) Reset() {
	*x = ForeignConstraint{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForeignConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForeignConstraint) ProtoMessage() {}

func (x *ForeignConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForeignConstraint.ProtoReflect.Descriptor instead.
func (*ForeignConstraint) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{25}
}

func (x *ForeignConstraint) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *ForeignConstraint) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *ForeignConstraint) GetForeignKey() *ForeignKey {
	if x != nil {
		return x.ForeignKey
	}
	return nil
}

func (x *ForeignConstraint) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ForeignConstraint) GetNotNullable() []bool {
	if x != nil {
		return x.NotNullable
	}
	return nil
}

type ForeignConstraintTables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constraints []*ForeignConstraint `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *ForeignConstraintTables) Reset() {
	*x = ForeignConstraintTables{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForeignConstraintTables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForeignConstraintTables) ProtoMessage() {}

func (x *ForeignConstraintTables) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForeignConstraintTables.ProtoReflect.Descriptor instead.
func (*ForeignConstraintTables) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{26}
}

func (x *ForeignConstraintTables) GetConstraints() []*ForeignConstraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

// Dependency constraints for a specific table
type GetConnectionForeignConstraintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the key here is <schema>.<table> and the list of tables that it depends on, also `<schema>.<table>` format.
	TableConstraints map[string]*ForeignConstraintTables `protobuf:"bytes,1,rep,name=table_constraints,json=tableConstraints,proto3" json:"table_constraints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetConnectionForeignConstraintsResponse) Reset() {
	*x = GetConnectionForeignConstraintsResponse{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionForeignConstraintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionForeignConstraintsResponse) ProtoMessage() {}

func (x *GetConnectionForeignConstraintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionForeignConstraintsResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionForeignConstraintsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{27}
}

func (x *GetConnectionForeignConstraintsResponse) GetTableConstraints() map[string]*ForeignConstraintTables {
	if x != nil {
		return x.TableConstraints
	}
	return nil
}

type InitStatementOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitSchema           bool `protobuf:"varint,1,opt,name=init_schema,json=initSchema,proto3" json:"init_schema,omitempty"`
	TruncateBeforeInsert bool `protobuf:"varint,2,opt,name=truncate_before_insert,json=truncateBeforeInsert,proto3" json:"truncate_before_insert,omitempty"`
	TruncateCascade      bool `protobuf:"varint,3,opt,name=truncate_cascade,json=truncateCascade,proto3" json:"truncate_cascade,omitempty"`
}

func (x *InitStatementOptions) Reset() {
	*x = InitStatementOptions{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitStatementOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitStatementOptions) ProtoMessage() {}

func (x *InitStatementOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitStatementOptions.ProtoReflect.Descriptor instead.
func (*InitStatementOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{28}
}

func (x *InitStatementOptions) GetInitSchema() bool {
	if x != nil {
		return x.InitSchema
	}
	return false
}

func (x *InitStatementOptions) GetTruncateBeforeInsert() bool {
	if x != nil {
		return x.TruncateBeforeInsert
	}
	return false
}

func (x *InitStatementOptions) GetTruncateCascade() bool {
	if x != nil {
		return x.TruncateCascade
	}
	return false
}

type GetConnectionInitStatementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string                `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Options      *InitStatementOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *GetConnectionInitStatementsRequest) Reset() {
	*x = GetConnectionInitStatementsRequest{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionInitStatementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionInitStatementsRequest) ProtoMessage() {}

func (x *GetConnectionInitStatementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionInitStatementsRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionInitStatementsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{29}
}

func (x *GetConnectionInitStatementsRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *GetConnectionInitStatementsRequest) GetOptions() *InitStatementOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type SchemaInitStatements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label      string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Statements []string `protobuf:"bytes,2,rep,name=statements,proto3" json:"statements,omitempty"`
}

func (x *SchemaInitStatements) Reset() {
	*x = SchemaInitStatements{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaInitStatements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaInitStatements) ProtoMessage() {}

func (x *SchemaInitStatements) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaInitStatements.ProtoReflect.Descriptor instead.
func (*SchemaInitStatements) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{30}
}

func (x *SchemaInitStatements) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SchemaInitStatements) GetStatements() []string {
	if x != nil {
		return x.Statements
	}
	return nil
}

// Init statement for a specific table
type GetConnectionInitStatementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the key here is <schema>.<table> and value is the table init statement.
	TableInitStatements map[string]string `protobuf:"bytes,1,rep,name=table_init_statements,json=tableInitStatements,proto3" json:"table_init_statements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the key here is <schema>.<table> and value is the table truncate statement.
	TableTruncateStatements map[string]string       `protobuf:"bytes,2,rep,name=table_truncate_statements,json=tableTruncateStatements,proto3" json:"table_truncate_statements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SchemaInitStatements    []*SchemaInitStatements `protobuf:"bytes,3,rep,name=schema_init_statements,json=schemaInitStatements,proto3" json:"schema_init_statements,omitempty"`
}

func (x *GetConnectionInitStatementsResponse) Reset() {
	*x = GetConnectionInitStatementsResponse{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionInitStatementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionInitStatementsResponse) ProtoMessage() {}

func (x *GetConnectionInitStatementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionInitStatementsResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionInitStatementsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{31}
}

func (x *GetConnectionInitStatementsResponse) GetTableInitStatements() map[string]string {
	if x != nil {
		return x.TableInitStatements
	}
	return nil
}

func (x *GetConnectionInitStatementsResponse) GetTableTruncateStatements() map[string]string {
	if x != nil {
		return x.TableTruncateStatements
	}
	return nil
}

func (x *GetConnectionInitStatementsResponse) GetSchemaInitStatements() []*SchemaInitStatements {
	if x != nil {
		return x.SchemaInitStatements
	}
	return nil
}

type PrimaryConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *PrimaryConstraint) Reset() {
	*x = PrimaryConstraint{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryConstraint) ProtoMessage() {}

func (x *PrimaryConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryConstraint.ProtoReflect.Descriptor instead.
func (*PrimaryConstraint) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{32}
}

func (x *PrimaryConstraint) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

// Primary constraints for a specific table
type GetConnectionPrimaryConstraintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *GetConnectionPrimaryConstraintsRequest) Reset() {
	*x = GetConnectionPrimaryConstraintsRequest{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionPrimaryConstraintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionPrimaryConstraintsRequest) ProtoMessage() {}

func (x *GetConnectionPrimaryConstraintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionPrimaryConstraintsRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionPrimaryConstraintsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{33}
}

func (x *GetConnectionPrimaryConstraintsRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type GetConnectionPrimaryConstraintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the key here is <schema>.<table> and value is the primary constraint
	TableConstraints map[string]*PrimaryConstraint `protobuf:"bytes,1,rep,name=table_constraints,json=tableConstraints,proto3" json:"table_constraints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetConnectionPrimaryConstraintsResponse) Reset() {
	*x = GetConnectionPrimaryConstraintsResponse{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionPrimaryConstraintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionPrimaryConstraintsResponse) ProtoMessage() {}

func (x *GetConnectionPrimaryConstraintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionPrimaryConstraintsResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionPrimaryConstraintsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{34}
}

func (x *GetConnectionPrimaryConstraintsResponse) GetTableConstraints() map[string]*PrimaryConstraint {
	if x != nil {
		return x.TableConstraints
	}
	return nil
}

// Unique constraints for a specific table
type GetConnectionUniqueConstraintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *GetConnectionUniqueConstraintsRequest) Reset() {
	*x = GetConnectionUniqueConstraintsRequest{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionUniqueConstraintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionUniqueConstraintsRequest) ProtoMessage() {}

func (x *GetConnectionUniqueConstraintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionUniqueConstraintsRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionUniqueConstraintsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{35}
}

func (x *GetConnectionUniqueConstraintsRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type GetConnectionUniqueConstraintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the key here is <schema>.<table> and value is the unique constraint
	TableConstraints map[string]*UniqueConstraint `protobuf:"bytes,1,rep,name=table_constraints,json=tableConstraints,proto3" json:"table_constraints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetConnectionUniqueConstraintsResponse) Reset() {
	*x = GetConnectionUniqueConstraintsResponse{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionUniqueConstraintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionUniqueConstraintsResponse) ProtoMessage() {}

func (x *GetConnectionUniqueConstraintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionUniqueConstraintsResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionUniqueConstraintsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{36}
}

func (x *GetConnectionUniqueConstraintsResponse) GetTableConstraints() map[string]*UniqueConstraint {
	if x != nil {
		return x.TableConstraints
	}
	return nil
}

type UniqueConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *UniqueConstraint) Reset() {
	*x = UniqueConstraint{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UniqueConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueConstraint) ProtoMessage() {}

func (x *UniqueConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueConstraint.ProtoReflect.Descriptor instead.
func (*UniqueConstraint) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{37}
}

func (x *UniqueConstraint) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

type GetAiGeneratedDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AiConnectionId   string         `protobuf:"bytes,1,opt,name=ai_connection_id,json=aiConnectionId,proto3" json:"ai_connection_id,omitempty"`
	Count            int64          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	ModelName        string         `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	UserPrompt       *string        `protobuf:"bytes,4,opt,name=user_prompt,json=userPrompt,proto3,oneof" json:"user_prompt,omitempty"`
	DataConnectionId string         `protobuf:"bytes,5,opt,name=data_connection_id,json=dataConnectionId,proto3" json:"data_connection_id,omitempty"`
	Table            *DatabaseTable `protobuf:"bytes,6,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *GetAiGeneratedDataRequest) Reset() {
	*x = GetAiGeneratedDataRequest{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAiGeneratedDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAiGeneratedDataRequest) ProtoMessage() {}

func (x *GetAiGeneratedDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAiGeneratedDataRequest.ProtoReflect.Descriptor instead.
func (*GetAiGeneratedDataRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{38}
}

func (x *GetAiGeneratedDataRequest) GetAiConnectionId() string {
	if x != nil {
		return x.AiConnectionId
	}
	return ""
}

func (x *GetAiGeneratedDataRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetAiGeneratedDataRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *GetAiGeneratedDataRequest) GetUserPrompt() string {
	if x != nil && x.UserPrompt != nil {
		return *x.UserPrompt
	}
	return ""
}

func (x *GetAiGeneratedDataRequest) GetDataConnectionId() string {
	if x != nil {
		return x.DataConnectionId
	}
	return ""
}

func (x *GetAiGeneratedDataRequest) GetTable() *DatabaseTable {
	if x != nil {
		return x.Table
	}
	return nil
}

type DatabaseTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table  string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *DatabaseTable) Reset() {
	*x = DatabaseTable{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseTable) ProtoMessage() {}

func (x *DatabaseTable) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseTable.ProtoReflect.Descriptor instead.
func (*DatabaseTable) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{39}
}

func (x *DatabaseTable) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *DatabaseTable) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type GetAiGeneratedDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of generated records
	Records []*structpb.Struct `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetAiGeneratedDataResponse) Reset() {
	*x = GetAiGeneratedDataResponse{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAiGeneratedDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAiGeneratedDataResponse) ProtoMessage() {}

func (x *GetAiGeneratedDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAiGeneratedDataResponse.ProtoReflect.Descriptor instead.
func (*GetAiGeneratedDataResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{40}
}

func (x *GetAiGeneratedDataResponse) GetRecords() []*structpb.Struct {
	if x != nil {
		return x.Records
	}
	return nil
}

type GetConnectionTableConstraintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *GetConnectionTableConstraintsRequest) Reset() {
	*x = GetConnectionTableConstraintsRequest{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionTableConstraintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionTableConstraintsRequest) ProtoMessage() {}

func (x *GetConnectionTableConstraintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionTableConstraintsRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionTableConstraintsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{41}
}

func (x *GetConnectionTableConstraintsRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type UniqueConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constraints []*UniqueConstraint `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *UniqueConstraints) Reset() {
	*x = UniqueConstraints{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UniqueConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueConstraints) ProtoMessage() {}

func (x *UniqueConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueConstraints.ProtoReflect.Descriptor instead.
func (*UniqueConstraints) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{42}
}

func (x *UniqueConstraints) GetConstraints() []*UniqueConstraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type GetConnectionTableConstraintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the key here is <schema>.<table> and the list of tables that it depends on, also `<schema>.<table>` format.
	ForeignKeyConstraints map[string]*ForeignConstraintTables `protobuf:"bytes,1,rep,name=foreign_key_constraints,json=foreignKeyConstraints,proto3" json:"foreign_key_constraints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the key here is <schema>.<table> and value is the primary constraint
	PrimaryKeyConstraints map[string]*PrimaryConstraint `protobuf:"bytes,2,rep,name=primary_key_constraints,json=primaryKeyConstraints,proto3" json:"primary_key_constraints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// the key here is <schema>.<table> and value is the unique constraint
	UniqueConstraints map[string]*UniqueConstraints `protobuf:"bytes,3,rep,name=unique_constraints,json=uniqueConstraints,proto3" json:"unique_constraints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetConnectionTableConstraintsResponse) Reset() {
	*x = GetConnectionTableConstraintsResponse{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionTableConstraintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionTableConstraintsResponse) ProtoMessage() {}

func (x *GetConnectionTableConstraintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionTableConstraintsResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionTableConstraintsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{43}
}

func (x *GetConnectionTableConstraintsResponse) GetForeignKeyConstraints() map[string]*ForeignConstraintTables {
	if x != nil {
		return x.ForeignKeyConstraints
	}
	return nil
}

func (x *GetConnectionTableConstraintsResponse) GetPrimaryKeyConstraints() map[string]*PrimaryConstraint {
	if x != nil {
		return x.PrimaryKeyConstraints
	}
	return nil
}

func (x *GetConnectionTableConstraintsResponse) GetUniqueConstraints() map[string]*UniqueConstraints {
	if x != nil {
		return x.UniqueConstraints
	}
	return nil
}

type GetTableRowCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string  `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Schema       string  `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Table        string  `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	WhereClause  *string `protobuf:"bytes,4,opt,name=where_clause,json=whereClause,proto3,oneof" json:"where_clause,omitempty"`
}

func (x *GetTableRowCountRequest) Reset() {
	*x = GetTableRowCountRequest{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableRowCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRowCountRequest) ProtoMessage() {}

func (x *GetTableRowCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRowCountRequest.ProtoReflect.Descriptor instead.
func (*GetTableRowCountRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{44}
}

func (x *GetTableRowCountRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *GetTableRowCountRequest) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *GetTableRowCountRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *GetTableRowCountRequest) GetWhereClause() string {
	if x != nil && x.WhereClause != nil {
		return *x.WhereClause
	}
	return ""
}

type GetTableRowCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetTableRowCountResponse) Reset() {
	*x = GetTableRowCountResponse{}
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableRowCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRowCountResponse) ProtoMessage() {}

func (x *GetTableRowCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_data_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRowCountResponse.ProtoReflect.Descriptor instead.
func (*GetTableRowCountResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP(), []int{45}
}

func (x *GetTableRowCountResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_mgmt_v1alpha1_connection_data_proto protoreflect.FileDescriptor

var file_mgmt_v1alpha1_connection_data_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x16, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x13, 0x0a, 0x11, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x19, 0x0a, 0x17,
	0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x65, 0x0a, 0x11, 0x41, 0x77, 0x73, 0x53, 0x33,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x08,
	0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x6f,
	0x0a, 0x1b, 0x47, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52,
	0x08, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22,
	0xb5, 0x03, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x70, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46,
	0x0a, 0x0d, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x33, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x33, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x77, 0x73, 0x53, 0x33,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0c, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x79, 0x73,
	0x71, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64, 0x0a,
	0x17, 0x67, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x63, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x15, 0x67, 0x63,
	0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x77, 0x73,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x72,
	0x6f, 0x77, 0x1a, 0x36, 0x0a, 0x08, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x13, 0x0a, 0x11, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x13, 0x0a, 0x11, 0x4d, 0x73, 0x73, 0x71, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x65, 0x0a, 0x11,
	0x41, 0x77, 0x73, 0x53, 0x33, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x21, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x42, 0x04, 0x0a,
	0x02, 0x69, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x6f, 0x44, 0x42, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x6f, 0x0a, 0x1b, 0x47, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x21, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48,
	0x00, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x42, 0x04, 0x0a, 0x02, 0x69,
	0x64, 0x22, 0xc0, 0x04, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x09,
	0x70, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x70, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x46, 0x0a, 0x0d, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x33, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x33, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x77, 0x73,
	0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0c, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d,
	0x79, 0x73, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x45, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x17, 0x67, 0x63, 0x70, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x15, 0x67, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x0f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0c,
	0x6d, 0x73, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x73, 0x73, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x0f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x05, 0xba,
	0x48, 0x02, 0x08, 0x01, 0x22, 0xe0, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x56, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xe7, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x1a, 0x68, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x6a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x95, 0x01, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x54, 0x0a,
	0x0a, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0b,
	0x6e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x27, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x1a, 0x6b, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98,
	0x01, 0x0a, 0x14, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e,
	0x69, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x63, 0x61,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4c,
	0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa3, 0x04, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x19, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x46,
	0x0a, 0x18, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x2d, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x22, 0x57, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x27, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x1a, 0x65, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x88, 0x02, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x11, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x64, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x10, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x41, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x10, 0x61, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0e, 0x61, 0x69, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xba, 0x48, 0x06, 0x22,
	0x04, 0x18, 0x0a, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22, 0x4f, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1d, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x4f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x69,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x55, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x56, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xfd, 0x05, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x87, 0x01, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x17,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x7a, 0x0a, 0x12, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x1a, 0x70, 0x0a, 0x1a, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x1a, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x66, 0x0a, 0x16, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22,
	0x30, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x32, 0xa2, 0x0b, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2d, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6e, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x29, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4d, 0x61, 0x70, 0x12, 0x2c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x2d, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c,
	0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x33, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x35, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8f, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x69, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xcf, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x13, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6e, 0x75, 0x63, 0x6c, 0x65, 0x75, 0x73, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6e, 0x65, 0x6f,
	0x73, 0x79, 0x6e, 0x63, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6d, 0x67, 0x6d, 0x74, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x4d, 0x67,
	0x6d, 0x74, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x0d, 0x4d, 0x67,
	0x6d, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x19, 0x4d, 0x67,
	0x6d, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x4d, 0x67, 0x6d, 0x74, 0x3a, 0x3a,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mgmt_v1alpha1_connection_data_proto_rawDescOnce sync.Once
	file_mgmt_v1alpha1_connection_data_proto_rawDescData = file_mgmt_v1alpha1_connection_data_proto_rawDesc
)

func file_mgmt_v1alpha1_connection_data_proto_rawDescGZIP() []byte {
	file_mgmt_v1alpha1_connection_data_proto_rawDescOnce.Do(func() {
		file_mgmt_v1alpha1_connection_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_mgmt_v1alpha1_connection_data_proto_rawDescData)
	})
	return file_mgmt_v1alpha1_connection_data_proto_rawDescData
}

var file_mgmt_v1alpha1_connection_data_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_mgmt_v1alpha1_connection_data_proto_goTypes = []any{
	(*PostgresStreamConfig)(nil),                    // 0: mgmt.v1alpha1.PostgresStreamConfig
	(*MysqlStreamConfig)(nil),                       // 1: mgmt.v1alpha1.MysqlStreamConfig
	(*AwsDynamoDBStreamConfig)(nil),                 // 2: mgmt.v1alpha1.AwsDynamoDBStreamConfig
	(*AwsS3StreamConfig)(nil),                       // 3: mgmt.v1alpha1.AwsS3StreamConfig
	(*GcpCloudStorageStreamConfig)(nil),             // 4: mgmt.v1alpha1.GcpCloudStorageStreamConfig
	(*ConnectionStreamConfig)(nil),                  // 5: mgmt.v1alpha1.ConnectionStreamConfig
	(*GetConnectionDataStreamRequest)(nil),          // 6: mgmt.v1alpha1.GetConnectionDataStreamRequest
	(*GetConnectionDataStreamResponse)(nil),         // 7: mgmt.v1alpha1.GetConnectionDataStreamResponse
	(*PostgresSchemaConfig)(nil),                    // 8: mgmt.v1alpha1.PostgresSchemaConfig
	(*MysqlSchemaConfig)(nil),                       // 9: mgmt.v1alpha1.MysqlSchemaConfig
	(*MssqlSchemaConfig)(nil),                       // 10: mgmt.v1alpha1.MssqlSchemaConfig
	(*AwsS3SchemaConfig)(nil),                       // 11: mgmt.v1alpha1.AwsS3SchemaConfig
	(*MongoSchemaConfig)(nil),                       // 12: mgmt.v1alpha1.MongoSchemaConfig
	(*DynamoDBSchemaConfig)(nil),                    // 13: mgmt.v1alpha1.DynamoDBSchemaConfig
	(*GcpCloudStorageSchemaConfig)(nil),             // 14: mgmt.v1alpha1.GcpCloudStorageSchemaConfig
	(*ConnectionSchemaConfig)(nil),                  // 15: mgmt.v1alpha1.ConnectionSchemaConfig
	(*DatabaseColumn)(nil),                          // 16: mgmt.v1alpha1.DatabaseColumn
	(*GetConnectionSchemaRequest)(nil),              // 17: mgmt.v1alpha1.GetConnectionSchemaRequest
	(*GetConnectionSchemaResponse)(nil),             // 18: mgmt.v1alpha1.GetConnectionSchemaResponse
	(*GetConnectionSchemaMapRequest)(nil),           // 19: mgmt.v1alpha1.GetConnectionSchemaMapRequest
	(*GetConnectionSchemaMapResponse)(nil),          // 20: mgmt.v1alpha1.GetConnectionSchemaMapResponse
	(*GetConnectionSchemaMapsRequest)(nil),          // 21: mgmt.v1alpha1.GetConnectionSchemaMapsRequest
	(*GetConnectionSchemaMapsResponse)(nil),         // 22: mgmt.v1alpha1.GetConnectionSchemaMapsResponse
	(*GetConnectionForeignConstraintsRequest)(nil),  // 23: mgmt.v1alpha1.GetConnectionForeignConstraintsRequest
	(*ForeignKey)(nil),                              // 24: mgmt.v1alpha1.ForeignKey
	(*ForeignConstraint)(nil),                       // 25: mgmt.v1alpha1.ForeignConstraint
	(*ForeignConstraintTables)(nil),                 // 26: mgmt.v1alpha1.ForeignConstraintTables
	(*GetConnectionForeignConstraintsResponse)(nil), // 27: mgmt.v1alpha1.GetConnectionForeignConstraintsResponse
	(*InitStatementOptions)(nil),                    // 28: mgmt.v1alpha1.InitStatementOptions
	(*GetConnectionInitStatementsRequest)(nil),      // 29: mgmt.v1alpha1.GetConnectionInitStatementsRequest
	(*SchemaInitStatements)(nil),                    // 30: mgmt.v1alpha1.SchemaInitStatements
	(*GetConnectionInitStatementsResponse)(nil),     // 31: mgmt.v1alpha1.GetConnectionInitStatementsResponse
	(*PrimaryConstraint)(nil),                       // 32: mgmt.v1alpha1.PrimaryConstraint
	(*GetConnectionPrimaryConstraintsRequest)(nil),  // 33: mgmt.v1alpha1.GetConnectionPrimaryConstraintsRequest
	(*GetConnectionPrimaryConstraintsResponse)(nil), // 34: mgmt.v1alpha1.GetConnectionPrimaryConstraintsResponse
	(*GetConnectionUniqueConstraintsRequest)(nil),   // 35: mgmt.v1alpha1.GetConnectionUniqueConstraintsRequest
	(*GetConnectionUniqueConstraintsResponse)(nil),  // 36: mgmt.v1alpha1.GetConnectionUniqueConstraintsResponse
	(*UniqueConstraint)(nil),                        // 37: mgmt.v1alpha1.UniqueConstraint
	(*GetAiGeneratedDataRequest)(nil),               // 38: mgmt.v1alpha1.GetAiGeneratedDataRequest
	(*DatabaseTable)(nil),                           // 39: mgmt.v1alpha1.DatabaseTable
	(*GetAiGeneratedDataResponse)(nil),              // 40: mgmt.v1alpha1.GetAiGeneratedDataResponse
	(*GetConnectionTableConstraintsRequest)(nil),    // 41: mgmt.v1alpha1.GetConnectionTableConstraintsRequest
	(*UniqueConstraints)(nil),                       // 42: mgmt.v1alpha1.UniqueConstraints
	(*GetConnectionTableConstraintsResponse)(nil),   // 43: mgmt.v1alpha1.GetConnectionTableConstraintsResponse
	(*GetTableRowCountRequest)(nil),                 // 44: mgmt.v1alpha1.GetTableRowCountRequest
	(*GetTableRowCountResponse)(nil),                // 45: mgmt.v1alpha1.GetTableRowCountResponse
	nil,                                             // 46: mgmt.v1alpha1.GetConnectionDataStreamResponse.RowEntry
	nil,                                             // 47: mgmt.v1alpha1.GetConnectionSchemaMapResponse.SchemaMapEntry
	nil,                                             // 48: mgmt.v1alpha1.GetConnectionForeignConstraintsResponse.TableConstraintsEntry
	nil,                                             // 49: mgmt.v1alpha1.GetConnectionInitStatementsResponse.TableInitStatementsEntry
	nil,                                             // 50: mgmt.v1alpha1.GetConnectionInitStatementsResponse.TableTruncateStatementsEntry
	nil,                                             // 51: mgmt.v1alpha1.GetConnectionPrimaryConstraintsResponse.TableConstraintsEntry
	nil,                                             // 52: mgmt.v1alpha1.GetConnectionUniqueConstraintsResponse.TableConstraintsEntry
	nil,                                             // 53: mgmt.v1alpha1.GetConnectionTableConstraintsResponse.ForeignKeyConstraintsEntry
	nil,                                             // 54: mgmt.v1alpha1.GetConnectionTableConstraintsResponse.PrimaryKeyConstraintsEntry
	nil,                                             // 55: mgmt.v1alpha1.GetConnectionTableConstraintsResponse.UniqueConstraintsEntry
	(*structpb.Struct)(nil),                         // 56: google.protobuf.Struct
}
var file_mgmt_v1alpha1_connection_data_proto_depIdxs = []int32{
	0,  // 0: mgmt.v1alpha1.ConnectionStreamConfig.pg_config:type_name -> mgmt.v1alpha1.PostgresStreamConfig
	3,  // 1: mgmt.v1alpha1.ConnectionStreamConfig.aws_s3_config:type_name -> mgmt.v1alpha1.AwsS3StreamConfig
	1,  // 2: mgmt.v1alpha1.ConnectionStreamConfig.mysql_config:type_name -> mgmt.v1alpha1.MysqlStreamConfig
	4,  // 3: mgmt.v1alpha1.ConnectionStreamConfig.gcp_cloudstorage_config:type_name -> mgmt.v1alpha1.GcpCloudStorageStreamConfig
	2,  // 4: mgmt.v1alpha1.ConnectionStreamConfig.dynamodb_config:type_name -> mgmt.v1alpha1.AwsDynamoDBStreamConfig
	5,  // 5: mgmt.v1alpha1.GetConnectionDataStreamRequest.stream_config:type_name -> mgmt.v1alpha1.ConnectionStreamConfig
	46, // 6: mgmt.v1alpha1.GetConnectionDataStreamResponse.row:type_name -> mgmt.v1alpha1.GetConnectionDataStreamResponse.RowEntry
	8,  // 7: mgmt.v1alpha1.ConnectionSchemaConfig.pg_config:type_name -> mgmt.v1alpha1.PostgresSchemaConfig
	11, // 8: mgmt.v1alpha1.ConnectionSchemaConfig.aws_s3_config:type_name -> mgmt.v1alpha1.AwsS3SchemaConfig
	9,  // 9: mgmt.v1alpha1.ConnectionSchemaConfig.mysql_config:type_name -> mgmt.v1alpha1.MysqlSchemaConfig
	12, // 10: mgmt.v1alpha1.ConnectionSchemaConfig.mongo_config:type_name -> mgmt.v1alpha1.MongoSchemaConfig
	14, // 11: mgmt.v1alpha1.ConnectionSchemaConfig.gcp_cloudstorage_config:type_name -> mgmt.v1alpha1.GcpCloudStorageSchemaConfig
	13, // 12: mgmt.v1alpha1.ConnectionSchemaConfig.dynamodb_config:type_name -> mgmt.v1alpha1.DynamoDBSchemaConfig
	10, // 13: mgmt.v1alpha1.ConnectionSchemaConfig.mssql_config:type_name -> mgmt.v1alpha1.MssqlSchemaConfig
	15, // 14: mgmt.v1alpha1.GetConnectionSchemaRequest.schema_config:type_name -> mgmt.v1alpha1.ConnectionSchemaConfig
	16, // 15: mgmt.v1alpha1.GetConnectionSchemaResponse.schemas:type_name -> mgmt.v1alpha1.DatabaseColumn
	15, // 16: mgmt.v1alpha1.GetConnectionSchemaMapRequest.schema_config:type_name -> mgmt.v1alpha1.ConnectionSchemaConfig
	47, // 17: mgmt.v1alpha1.GetConnectionSchemaMapResponse.schema_map:type_name -> mgmt.v1alpha1.GetConnectionSchemaMapResponse.SchemaMapEntry
	19, // 18: mgmt.v1alpha1.GetConnectionSchemaMapsRequest.requests:type_name -> mgmt.v1alpha1.GetConnectionSchemaMapRequest
	20, // 19: mgmt.v1alpha1.GetConnectionSchemaMapsResponse.responses:type_name -> mgmt.v1alpha1.GetConnectionSchemaMapResponse
	24, // 20: mgmt.v1alpha1.ForeignConstraint.foreign_key:type_name -> mgmt.v1alpha1.ForeignKey
	25, // 21: mgmt.v1alpha1.ForeignConstraintTables.constraints:type_name -> mgmt.v1alpha1.ForeignConstraint
	48, // 22: mgmt.v1alpha1.GetConnectionForeignConstraintsResponse.table_constraints:type_name -> mgmt.v1alpha1.GetConnectionForeignConstraintsResponse.TableConstraintsEntry
	28, // 23: mgmt.v1alpha1.GetConnectionInitStatementsRequest.options:type_name -> mgmt.v1alpha1.InitStatementOptions
	49, // 24: mgmt.v1alpha1.GetConnectionInitStatementsResponse.table_init_statements:type_name -> mgmt.v1alpha1.GetConnectionInitStatementsResponse.TableInitStatementsEntry
	50, // 25: mgmt.v1alpha1.GetConnectionInitStatementsResponse.table_truncate_statements:type_name -> mgmt.v1alpha1.GetConnectionInitStatementsResponse.TableTruncateStatementsEntry
	30, // 26: mgmt.v1alpha1.GetConnectionInitStatementsResponse.schema_init_statements:type_name -> mgmt.v1alpha1.SchemaInitStatements
	51, // 27: mgmt.v1alpha1.GetConnectionPrimaryConstraintsResponse.table_constraints:type_name -> mgmt.v1alpha1.GetConnectionPrimaryConstraintsResponse.TableConstraintsEntry
	52, // 28: mgmt.v1alpha1.GetConnectionUniqueConstraintsResponse.table_constraints:type_name -> mgmt.v1alpha1.GetConnectionUniqueConstraintsResponse.TableConstraintsEntry
	39, // 29: mgmt.v1alpha1.GetAiGeneratedDataRequest.table:type_name -> mgmt.v1alpha1.DatabaseTable
	56, // 30: mgmt.v1alpha1.GetAiGeneratedDataResponse.records:type_name -> google.protobuf.Struct
	37, // 31: mgmt.v1alpha1.UniqueConstraints.constraints:type_name -> mgmt.v1alpha1.UniqueConstraint
	53, // 32: mgmt.v1alpha1.GetConnectionTableConstraintsResponse.foreign_key_constraints:type_name -> mgmt.v1alpha1.GetConnectionTableConstraintsResponse.ForeignKeyConstraintsEntry
	54, // 33: mgmt.v1alpha1.GetConnectionTableConstraintsResponse.primary_key_constraints:type_name -> mgmt.v1alpha1.GetConnectionTableConstraintsResponse.PrimaryKeyConstraintsEntry
	55, // 34: mgmt.v1alpha1.GetConnectionTableConstraintsResponse.unique_constraints:type_name -> mgmt.v1alpha1.GetConnectionTableConstraintsResponse.UniqueConstraintsEntry
	18, // 35: mgmt.v1alpha1.GetConnectionSchemaMapResponse.SchemaMapEntry.value:type_name -> mgmt.v1alpha1.GetConnectionSchemaResponse
	26, // 36: mgmt.v1alpha1.GetConnectionForeignConstraintsResponse.TableConstraintsEntry.value:type_name -> mgmt.v1alpha1.ForeignConstraintTables
	32, // 37: mgmt.v1alpha1.GetConnectionPrimaryConstraintsResponse.TableConstraintsEntry.value:type_name -> mgmt.v1alpha1.PrimaryConstraint
	37, // 38: mgmt.v1alpha1.GetConnectionUniqueConstraintsResponse.TableConstraintsEntry.value:type_name -> mgmt.v1alpha1.UniqueConstraint
	26, // 39: mgmt.v1alpha1.GetConnectionTableConstraintsResponse.ForeignKeyConstraintsEntry.value:type_name -> mgmt.v1alpha1.ForeignConstraintTables
	32, // 40: mgmt.v1alpha1.GetConnectionTableConstraintsResponse.PrimaryKeyConstraintsEntry.value:type_name -> mgmt.v1alpha1.PrimaryConstraint
	42, // 41: mgmt.v1alpha1.GetConnectionTableConstraintsResponse.UniqueConstraintsEntry.value:type_name -> mgmt.v1alpha1.UniqueConstraints
	6,  // 42: mgmt.v1alpha1.ConnectionDataService.GetConnectionDataStream:input_type -> mgmt.v1alpha1.GetConnectionDataStreamRequest
	17, // 43: mgmt.v1alpha1.ConnectionDataService.GetConnectionSchema:input_type -> mgmt.v1alpha1.GetConnectionSchemaRequest
	19, // 44: mgmt.v1alpha1.ConnectionDataService.GetConnectionSchemaMap:input_type -> mgmt.v1alpha1.GetConnectionSchemaMapRequest
	21, // 45: mgmt.v1alpha1.ConnectionDataService.GetConnectionSchemaMaps:input_type -> mgmt.v1alpha1.GetConnectionSchemaMapsRequest
	41, // 46: mgmt.v1alpha1.ConnectionDataService.GetConnectionTableConstraints:input_type -> mgmt.v1alpha1.GetConnectionTableConstraintsRequest
	23, // 47: mgmt.v1alpha1.ConnectionDataService.GetConnectionForeignConstraints:input_type -> mgmt.v1alpha1.GetConnectionForeignConstraintsRequest
	33, // 48: mgmt.v1alpha1.ConnectionDataService.GetConnectionPrimaryConstraints:input_type -> mgmt.v1alpha1.GetConnectionPrimaryConstraintsRequest
	29, // 49: mgmt.v1alpha1.ConnectionDataService.GetConnectionInitStatements:input_type -> mgmt.v1alpha1.GetConnectionInitStatementsRequest
	35, // 50: mgmt.v1alpha1.ConnectionDataService.GetConnectionUniqueConstraints:input_type -> mgmt.v1alpha1.GetConnectionUniqueConstraintsRequest
	38, // 51: mgmt.v1alpha1.ConnectionDataService.GetAiGeneratedData:input_type -> mgmt.v1alpha1.GetAiGeneratedDataRequest
	44, // 52: mgmt.v1alpha1.ConnectionDataService.GetTableRowCount:input_type -> mgmt.v1alpha1.GetTableRowCountRequest
	7,  // 53: mgmt.v1alpha1.ConnectionDataService.GetConnectionDataStream:output_type -> mgmt.v1alpha1.GetConnectionDataStreamResponse
	18, // 54: mgmt.v1alpha1.ConnectionDataService.GetConnectionSchema:output_type -> mgmt.v1alpha1.GetConnectionSchemaResponse
	20, // 55: mgmt.v1alpha1.ConnectionDataService.GetConnectionSchemaMap:output_type -> mgmt.v1alpha1.GetConnectionSchemaMapResponse
	22, // 56: mgmt.v1alpha1.ConnectionDataService.GetConnectionSchemaMaps:output_type -> mgmt.v1alpha1.GetConnectionSchemaMapsResponse
	43, // 57: mgmt.v1alpha1.ConnectionDataService.GetConnectionTableConstraints:output_type -> mgmt.v1alpha1.GetConnectionTableConstraintsResponse
	27, // 58: mgmt.v1alpha1.ConnectionDataService.GetConnectionForeignConstraints:output_type -> mgmt.v1alpha1.GetConnectionForeignConstraintsResponse
	34, // 59: mgmt.v1alpha1.ConnectionDataService.GetConnectionPrimaryConstraints:output_type -> mgmt.v1alpha1.GetConnectionPrimaryConstraintsResponse
	31, // 60: mgmt.v1alpha1.ConnectionDataService.GetConnectionInitStatements:output_type -> mgmt.v1alpha1.GetConnectionInitStatementsResponse
	36, // 61: mgmt.v1alpha1.ConnectionDataService.GetConnectionUniqueConstraints:output_type -> mgmt.v1alpha1.GetConnectionUniqueConstraintsResponse
	40, // 62: mgmt.v1alpha1.ConnectionDataService.GetAiGeneratedData:output_type -> mgmt.v1alpha1.GetAiGeneratedDataResponse
	45, // 63: mgmt.v1alpha1.ConnectionDataService.GetTableRowCount:output_type -> mgmt.v1alpha1.GetTableRowCountResponse
	53, // [53:64] is the sub-list for method output_type
	42, // [42:53] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_mgmt_v1alpha1_connection_data_proto_init() }
func file_mgmt_v1alpha1_connection_data_proto_init() {
	if File_mgmt_v1alpha1_connection_data_proto != nil {
		return
	}
	file_mgmt_v1alpha1_connection_data_proto_msgTypes[3].OneofWrappers = []any{
		(*AwsS3StreamConfig_JobId)(nil),
		(*AwsS3StreamConfig_JobRunId)(nil),
	}
	file_mgmt_v1alpha1_connection_data_proto_msgTypes[4].OneofWrappers = []any{
		(*GcpCloudStorageStreamConfig_JobId)(nil),
		(*GcpCloudStorageStreamConfig_JobRunId)(nil),
	}
	file_mgmt_v1alpha1_connection_data_proto_msgTypes[5].OneofWrappers = []any{
		(*ConnectionStreamConfig_PgConfig)(nil),
		(*ConnectionStreamConfig_AwsS3Config)(nil),
		(*ConnectionStreamConfig_MysqlConfig)(nil),
		(*ConnectionStreamConfig_GcpCloudstorageConfig)(nil),
		(*ConnectionStreamConfig_DynamodbConfig)(nil),
	}
	file_mgmt_v1alpha1_connection_data_proto_msgTypes[11].OneofWrappers = []any{
		(*AwsS3SchemaConfig_JobId)(nil),
		(*AwsS3SchemaConfig_JobRunId)(nil),
	}
	file_mgmt_v1alpha1_connection_data_proto_msgTypes[14].OneofWrappers = []any{
		(*GcpCloudStorageSchemaConfig_JobId)(nil),
		(*GcpCloudStorageSchemaConfig_JobRunId)(nil),
	}
	file_mgmt_v1alpha1_connection_data_proto_msgTypes[15].OneofWrappers = []any{
		(*ConnectionSchemaConfig_PgConfig)(nil),
		(*ConnectionSchemaConfig_AwsS3Config)(nil),
		(*ConnectionSchemaConfig_MysqlConfig)(nil),
		(*ConnectionSchemaConfig_MongoConfig)(nil),
		(*ConnectionSchemaConfig_GcpCloudstorageConfig)(nil),
		(*ConnectionSchemaConfig_DynamodbConfig)(nil),
		(*ConnectionSchemaConfig_MssqlConfig)(nil),
	}
	file_mgmt_v1alpha1_connection_data_proto_msgTypes[16].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_data_proto_msgTypes[38].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_data_proto_msgTypes[44].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mgmt_v1alpha1_connection_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mgmt_v1alpha1_connection_data_proto_goTypes,
		DependencyIndexes: file_mgmt_v1alpha1_connection_data_proto_depIdxs,
		MessageInfos:      file_mgmt_v1alpha1_connection_data_proto_msgTypes,
	}.Build()
	File_mgmt_v1alpha1_connection_data_proto = out.File
	file_mgmt_v1alpha1_connection_data_proto_rawDesc = nil
	file_mgmt_v1alpha1_connection_data_proto_goTypes = nil
	file_mgmt_v1alpha1_connection_data_proto_depIdxs = nil
}
