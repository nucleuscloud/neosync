// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mgmt/v1alpha1/transformer.proto

package mgmtv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSystemTransformersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemTransformersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemTransformersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemTransformersRequestMultiError, or nil if none found.
func (m *GetSystemTransformersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemTransformersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSystemTransformersRequestMultiError(errors)
	}

	return nil
}

// GetSystemTransformersRequestMultiError is an error wrapping multiple
// validation errors returned by GetSystemTransformersRequest.ValidateAll() if
// the designated constraints aren't met.
type GetSystemTransformersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemTransformersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemTransformersRequestMultiError) AllErrors() []error { return m }

// GetSystemTransformersRequestValidationError is the validation error returned
// by GetSystemTransformersRequest.Validate if the designated constraints
// aren't met.
type GetSystemTransformersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemTransformersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemTransformersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemTransformersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemTransformersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemTransformersRequestValidationError) ErrorName() string {
	return "GetSystemTransformersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemTransformersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemTransformersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemTransformersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemTransformersRequestValidationError{}

// Validate checks the field values on GetSystemTransformersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSystemTransformersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemTransformersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSystemTransformersResponseMultiError, or nil if none found.
func (m *GetSystemTransformersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemTransformersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransformers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSystemTransformersResponseValidationError{
						field:  fmt.Sprintf("Transformers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSystemTransformersResponseValidationError{
						field:  fmt.Sprintf("Transformers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSystemTransformersResponseValidationError{
					field:  fmt.Sprintf("Transformers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSystemTransformersResponseMultiError(errors)
	}

	return nil
}

// GetSystemTransformersResponseMultiError is an error wrapping multiple
// validation errors returned by GetSystemTransformersResponse.ValidateAll()
// if the designated constraints aren't met.
type GetSystemTransformersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemTransformersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemTransformersResponseMultiError) AllErrors() []error { return m }

// GetSystemTransformersResponseValidationError is the validation error
// returned by GetSystemTransformersResponse.Validate if the designated
// constraints aren't met.
type GetSystemTransformersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemTransformersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemTransformersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemTransformersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemTransformersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemTransformersResponseValidationError) ErrorName() string {
	return "GetSystemTransformersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemTransformersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemTransformersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemTransformersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemTransformersResponseValidationError{}

// Validate checks the field values on GetSystemTransformerBySourceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSystemTransformerBySourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemTransformerBySourceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSystemTransformerBySourceRequestMultiError, or nil if none found.
func (m *GetSystemTransformerBySourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemTransformerBySourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	if len(errors) > 0 {
		return GetSystemTransformerBySourceRequestMultiError(errors)
	}

	return nil
}

// GetSystemTransformerBySourceRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetSystemTransformerBySourceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSystemTransformerBySourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemTransformerBySourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemTransformerBySourceRequestMultiError) AllErrors() []error { return m }

// GetSystemTransformerBySourceRequestValidationError is the validation error
// returned by GetSystemTransformerBySourceRequest.Validate if the designated
// constraints aren't met.
type GetSystemTransformerBySourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemTransformerBySourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemTransformerBySourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemTransformerBySourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemTransformerBySourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemTransformerBySourceRequestValidationError) ErrorName() string {
	return "GetSystemTransformerBySourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemTransformerBySourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemTransformerBySourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemTransformerBySourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemTransformerBySourceRequestValidationError{}

// Validate checks the field values on GetSystemTransformerBySourceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSystemTransformerBySourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemTransformerBySourceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSystemTransformerBySourceResponseMultiError, or nil if none found.
func (m *GetSystemTransformerBySourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemTransformerBySourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransformer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSystemTransformerBySourceResponseValidationError{
					field:  "Transformer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSystemTransformerBySourceResponseValidationError{
					field:  "Transformer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransformer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSystemTransformerBySourceResponseValidationError{
				field:  "Transformer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSystemTransformerBySourceResponseMultiError(errors)
	}

	return nil
}

// GetSystemTransformerBySourceResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetSystemTransformerBySourceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSystemTransformerBySourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemTransformerBySourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemTransformerBySourceResponseMultiError) AllErrors() []error { return m }

// GetSystemTransformerBySourceResponseValidationError is the validation error
// returned by GetSystemTransformerBySourceResponse.Validate if the designated
// constraints aren't met.
type GetSystemTransformerBySourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemTransformerBySourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemTransformerBySourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemTransformerBySourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemTransformerBySourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemTransformerBySourceResponseValidationError) ErrorName() string {
	return "GetSystemTransformerBySourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemTransformerBySourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemTransformerBySourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemTransformerBySourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemTransformerBySourceResponseValidationError{}

// Validate checks the field values on GetUserDefinedTransformersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserDefinedTransformersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDefinedTransformersRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserDefinedTransformersRequestMultiError, or nil if none found.
func (m *GetUserDefinedTransformersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDefinedTransformersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetUserDefinedTransformersRequestMultiError(errors)
	}

	return nil
}

// GetUserDefinedTransformersRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserDefinedTransformersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserDefinedTransformersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDefinedTransformersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDefinedTransformersRequestMultiError) AllErrors() []error { return m }

// GetUserDefinedTransformersRequestValidationError is the validation error
// returned by GetUserDefinedTransformersRequest.Validate if the designated
// constraints aren't met.
type GetUserDefinedTransformersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDefinedTransformersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDefinedTransformersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDefinedTransformersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDefinedTransformersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDefinedTransformersRequestValidationError) ErrorName() string {
	return "GetUserDefinedTransformersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDefinedTransformersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDefinedTransformersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDefinedTransformersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDefinedTransformersRequestValidationError{}

// Validate checks the field values on GetUserDefinedTransformersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserDefinedTransformersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDefinedTransformersResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserDefinedTransformersResponseMultiError, or nil if none found.
func (m *GetUserDefinedTransformersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDefinedTransformersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransformers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserDefinedTransformersResponseValidationError{
						field:  fmt.Sprintf("Transformers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserDefinedTransformersResponseValidationError{
						field:  fmt.Sprintf("Transformers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserDefinedTransformersResponseValidationError{
					field:  fmt.Sprintf("Transformers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserDefinedTransformersResponseMultiError(errors)
	}

	return nil
}

// GetUserDefinedTransformersResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserDefinedTransformersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserDefinedTransformersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDefinedTransformersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDefinedTransformersResponseMultiError) AllErrors() []error { return m }

// GetUserDefinedTransformersResponseValidationError is the validation error
// returned by GetUserDefinedTransformersResponse.Validate if the designated
// constraints aren't met.
type GetUserDefinedTransformersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDefinedTransformersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDefinedTransformersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDefinedTransformersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDefinedTransformersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDefinedTransformersResponseValidationError) ErrorName() string {
	return "GetUserDefinedTransformersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDefinedTransformersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDefinedTransformersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDefinedTransformersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDefinedTransformersResponseValidationError{}

// Validate checks the field values on GetUserDefinedTransformerByIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserDefinedTransformerByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDefinedTransformerByIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserDefinedTransformerByIdRequestMultiError, or nil if none found.
func (m *GetUserDefinedTransformerByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDefinedTransformerByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransformerId

	if len(errors) > 0 {
		return GetUserDefinedTransformerByIdRequestMultiError(errors)
	}

	return nil
}

// GetUserDefinedTransformerByIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserDefinedTransformerByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserDefinedTransformerByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDefinedTransformerByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDefinedTransformerByIdRequestMultiError) AllErrors() []error { return m }

// GetUserDefinedTransformerByIdRequestValidationError is the validation error
// returned by GetUserDefinedTransformerByIdRequest.Validate if the designated
// constraints aren't met.
type GetUserDefinedTransformerByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDefinedTransformerByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDefinedTransformerByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDefinedTransformerByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDefinedTransformerByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDefinedTransformerByIdRequestValidationError) ErrorName() string {
	return "GetUserDefinedTransformerByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDefinedTransformerByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDefinedTransformerByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDefinedTransformerByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDefinedTransformerByIdRequestValidationError{}

// Validate checks the field values on GetUserDefinedTransformerByIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserDefinedTransformerByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserDefinedTransformerByIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserDefinedTransformerByIdResponseMultiError, or nil if none found.
func (m *GetUserDefinedTransformerByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserDefinedTransformerByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransformer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserDefinedTransformerByIdResponseValidationError{
					field:  "Transformer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserDefinedTransformerByIdResponseValidationError{
					field:  "Transformer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransformer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserDefinedTransformerByIdResponseValidationError{
				field:  "Transformer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserDefinedTransformerByIdResponseMultiError(errors)
	}

	return nil
}

// GetUserDefinedTransformerByIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetUserDefinedTransformerByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserDefinedTransformerByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserDefinedTransformerByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserDefinedTransformerByIdResponseMultiError) AllErrors() []error { return m }

// GetUserDefinedTransformerByIdResponseValidationError is the validation error
// returned by GetUserDefinedTransformerByIdResponse.Validate if the
// designated constraints aren't met.
type GetUserDefinedTransformerByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserDefinedTransformerByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserDefinedTransformerByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserDefinedTransformerByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserDefinedTransformerByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserDefinedTransformerByIdResponseValidationError) ErrorName() string {
	return "GetUserDefinedTransformerByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserDefinedTransformerByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserDefinedTransformerByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserDefinedTransformerByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserDefinedTransformerByIdResponseValidationError{}

// Validate checks the field values on CreateUserDefinedTransformerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateUserDefinedTransformerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserDefinedTransformerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateUserDefinedTransformerRequestMultiError, or nil if none found.
func (m *CreateUserDefinedTransformerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserDefinedTransformerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Type

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetTransformerConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserDefinedTransformerRequestValidationError{
					field:  "TransformerConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserDefinedTransformerRequestValidationError{
					field:  "TransformerConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransformerConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserDefinedTransformerRequestValidationError{
				field:  "TransformerConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserDefinedTransformerRequestMultiError(errors)
	}

	return nil
}

// CreateUserDefinedTransformerRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateUserDefinedTransformerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserDefinedTransformerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserDefinedTransformerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserDefinedTransformerRequestMultiError) AllErrors() []error { return m }

// CreateUserDefinedTransformerRequestValidationError is the validation error
// returned by CreateUserDefinedTransformerRequest.Validate if the designated
// constraints aren't met.
type CreateUserDefinedTransformerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserDefinedTransformerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserDefinedTransformerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserDefinedTransformerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserDefinedTransformerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserDefinedTransformerRequestValidationError) ErrorName() string {
	return "CreateUserDefinedTransformerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserDefinedTransformerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserDefinedTransformerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserDefinedTransformerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserDefinedTransformerRequestValidationError{}

// Validate checks the field values on CreateUserDefinedTransformerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateUserDefinedTransformerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserDefinedTransformerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateUserDefinedTransformerResponseMultiError, or nil if none found.
func (m *CreateUserDefinedTransformerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserDefinedTransformerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransformer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserDefinedTransformerResponseValidationError{
					field:  "Transformer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserDefinedTransformerResponseValidationError{
					field:  "Transformer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransformer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserDefinedTransformerResponseValidationError{
				field:  "Transformer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserDefinedTransformerResponseMultiError(errors)
	}

	return nil
}

// CreateUserDefinedTransformerResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateUserDefinedTransformerResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateUserDefinedTransformerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserDefinedTransformerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserDefinedTransformerResponseMultiError) AllErrors() []error { return m }

// CreateUserDefinedTransformerResponseValidationError is the validation error
// returned by CreateUserDefinedTransformerResponse.Validate if the designated
// constraints aren't met.
type CreateUserDefinedTransformerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserDefinedTransformerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserDefinedTransformerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserDefinedTransformerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserDefinedTransformerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserDefinedTransformerResponseValidationError) ErrorName() string {
	return "CreateUserDefinedTransformerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserDefinedTransformerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserDefinedTransformerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserDefinedTransformerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserDefinedTransformerResponseValidationError{}

// Validate checks the field values on DeleteUserDefinedTransformerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteUserDefinedTransformerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserDefinedTransformerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteUserDefinedTransformerRequestMultiError, or nil if none found.
func (m *DeleteUserDefinedTransformerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserDefinedTransformerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransformerId

	if len(errors) > 0 {
		return DeleteUserDefinedTransformerRequestMultiError(errors)
	}

	return nil
}

// DeleteUserDefinedTransformerRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteUserDefinedTransformerRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserDefinedTransformerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserDefinedTransformerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserDefinedTransformerRequestMultiError) AllErrors() []error { return m }

// DeleteUserDefinedTransformerRequestValidationError is the validation error
// returned by DeleteUserDefinedTransformerRequest.Validate if the designated
// constraints aren't met.
type DeleteUserDefinedTransformerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserDefinedTransformerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserDefinedTransformerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserDefinedTransformerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserDefinedTransformerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserDefinedTransformerRequestValidationError) ErrorName() string {
	return "DeleteUserDefinedTransformerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserDefinedTransformerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserDefinedTransformerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserDefinedTransformerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserDefinedTransformerRequestValidationError{}

// Validate checks the field values on DeleteUserDefinedTransformerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteUserDefinedTransformerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserDefinedTransformerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteUserDefinedTransformerResponseMultiError, or nil if none found.
func (m *DeleteUserDefinedTransformerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserDefinedTransformerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserDefinedTransformerResponseMultiError(errors)
	}

	return nil
}

// DeleteUserDefinedTransformerResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteUserDefinedTransformerResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserDefinedTransformerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserDefinedTransformerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserDefinedTransformerResponseMultiError) AllErrors() []error { return m }

// DeleteUserDefinedTransformerResponseValidationError is the validation error
// returned by DeleteUserDefinedTransformerResponse.Validate if the designated
// constraints aren't met.
type DeleteUserDefinedTransformerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserDefinedTransformerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserDefinedTransformerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserDefinedTransformerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserDefinedTransformerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserDefinedTransformerResponseValidationError) ErrorName() string {
	return "DeleteUserDefinedTransformerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserDefinedTransformerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserDefinedTransformerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserDefinedTransformerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserDefinedTransformerResponseValidationError{}

// Validate checks the field values on UpdateUserDefinedTransformerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateUserDefinedTransformerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserDefinedTransformerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateUserDefinedTransformerRequestMultiError, or nil if none found.
func (m *UpdateUserDefinedTransformerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserDefinedTransformerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransformerId

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetTransformerConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserDefinedTransformerRequestValidationError{
					field:  "TransformerConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserDefinedTransformerRequestValidationError{
					field:  "TransformerConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransformerConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserDefinedTransformerRequestValidationError{
				field:  "TransformerConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserDefinedTransformerRequestMultiError(errors)
	}

	return nil
}

// UpdateUserDefinedTransformerRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateUserDefinedTransformerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserDefinedTransformerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserDefinedTransformerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserDefinedTransformerRequestMultiError) AllErrors() []error { return m }

// UpdateUserDefinedTransformerRequestValidationError is the validation error
// returned by UpdateUserDefinedTransformerRequest.Validate if the designated
// constraints aren't met.
type UpdateUserDefinedTransformerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserDefinedTransformerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserDefinedTransformerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserDefinedTransformerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserDefinedTransformerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserDefinedTransformerRequestValidationError) ErrorName() string {
	return "UpdateUserDefinedTransformerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserDefinedTransformerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserDefinedTransformerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserDefinedTransformerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserDefinedTransformerRequestValidationError{}

// Validate checks the field values on UpdateUserDefinedTransformerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateUserDefinedTransformerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserDefinedTransformerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateUserDefinedTransformerResponseMultiError, or nil if none found.
func (m *UpdateUserDefinedTransformerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserDefinedTransformerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransformer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserDefinedTransformerResponseValidationError{
					field:  "Transformer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserDefinedTransformerResponseValidationError{
					field:  "Transformer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransformer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserDefinedTransformerResponseValidationError{
				field:  "Transformer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserDefinedTransformerResponseMultiError(errors)
	}

	return nil
}

// UpdateUserDefinedTransformerResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateUserDefinedTransformerResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserDefinedTransformerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserDefinedTransformerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserDefinedTransformerResponseMultiError) AllErrors() []error { return m }

// UpdateUserDefinedTransformerResponseValidationError is the validation error
// returned by UpdateUserDefinedTransformerResponse.Validate if the designated
// constraints aren't met.
type UpdateUserDefinedTransformerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserDefinedTransformerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserDefinedTransformerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserDefinedTransformerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserDefinedTransformerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserDefinedTransformerResponseValidationError) ErrorName() string {
	return "UpdateUserDefinedTransformerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserDefinedTransformerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserDefinedTransformerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserDefinedTransformerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserDefinedTransformerResponseValidationError{}

// Validate checks the field values on IsTransformerNameAvailableRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IsTransformerNameAvailableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsTransformerNameAvailableRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IsTransformerNameAvailableRequestMultiError, or nil if none found.
func (m *IsTransformerNameAvailableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsTransformerNameAvailableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for TransformerName

	if len(errors) > 0 {
		return IsTransformerNameAvailableRequestMultiError(errors)
	}

	return nil
}

// IsTransformerNameAvailableRequestMultiError is an error wrapping multiple
// validation errors returned by
// IsTransformerNameAvailableRequest.ValidateAll() if the designated
// constraints aren't met.
type IsTransformerNameAvailableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsTransformerNameAvailableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsTransformerNameAvailableRequestMultiError) AllErrors() []error { return m }

// IsTransformerNameAvailableRequestValidationError is the validation error
// returned by IsTransformerNameAvailableRequest.Validate if the designated
// constraints aren't met.
type IsTransformerNameAvailableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTransformerNameAvailableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTransformerNameAvailableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTransformerNameAvailableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTransformerNameAvailableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTransformerNameAvailableRequestValidationError) ErrorName() string {
	return "IsTransformerNameAvailableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsTransformerNameAvailableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTransformerNameAvailableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTransformerNameAvailableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTransformerNameAvailableRequestValidationError{}

// Validate checks the field values on IsTransformerNameAvailableResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IsTransformerNameAvailableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsTransformerNameAvailableResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IsTransformerNameAvailableResponseMultiError, or nil if none found.
func (m *IsTransformerNameAvailableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsTransformerNameAvailableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAvailable

	if len(errors) > 0 {
		return IsTransformerNameAvailableResponseMultiError(errors)
	}

	return nil
}

// IsTransformerNameAvailableResponseMultiError is an error wrapping multiple
// validation errors returned by
// IsTransformerNameAvailableResponse.ValidateAll() if the designated
// constraints aren't met.
type IsTransformerNameAvailableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsTransformerNameAvailableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsTransformerNameAvailableResponseMultiError) AllErrors() []error { return m }

// IsTransformerNameAvailableResponseValidationError is the validation error
// returned by IsTransformerNameAvailableResponse.Validate if the designated
// constraints aren't met.
type IsTransformerNameAvailableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTransformerNameAvailableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTransformerNameAvailableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTransformerNameAvailableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTransformerNameAvailableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTransformerNameAvailableResponseValidationError) ErrorName() string {
	return "IsTransformerNameAvailableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsTransformerNameAvailableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTransformerNameAvailableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTransformerNameAvailableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTransformerNameAvailableResponseValidationError{}

// Validate checks the field values on UserDefinedTransformer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserDefinedTransformer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDefinedTransformer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDefinedTransformerMultiError, or nil if none found.
func (m *UserDefinedTransformer) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDefinedTransformer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for DataType

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserDefinedTransformerValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserDefinedTransformerValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserDefinedTransformerValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserDefinedTransformerValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserDefinedTransformerValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserDefinedTransformerValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserDefinedTransformerValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserDefinedTransformerValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserDefinedTransformerValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccountId

	if len(errors) > 0 {
		return UserDefinedTransformerMultiError(errors)
	}

	return nil
}

// UserDefinedTransformerMultiError is an error wrapping multiple validation
// errors returned by UserDefinedTransformer.ValidateAll() if the designated
// constraints aren't met.
type UserDefinedTransformerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDefinedTransformerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDefinedTransformerMultiError) AllErrors() []error { return m }

// UserDefinedTransformerValidationError is the validation error returned by
// UserDefinedTransformer.Validate if the designated constraints aren't met.
type UserDefinedTransformerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDefinedTransformerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDefinedTransformerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDefinedTransformerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDefinedTransformerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDefinedTransformerValidationError) ErrorName() string {
	return "UserDefinedTransformerValidationError"
}

// Error satisfies the builtin error interface
func (e UserDefinedTransformerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDefinedTransformer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDefinedTransformerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDefinedTransformerValidationError{}

// Validate checks the field values on SystemTransformer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SystemTransformer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemTransformer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SystemTransformerMultiError, or nil if none found.
func (m *SystemTransformer) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemTransformer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for DataType

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemTransformerValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemTransformerValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemTransformerValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SystemTransformerMultiError(errors)
	}

	return nil
}

// SystemTransformerMultiError is an error wrapping multiple validation errors
// returned by SystemTransformer.ValidateAll() if the designated constraints
// aren't met.
type SystemTransformerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemTransformerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemTransformerMultiError) AllErrors() []error { return m }

// SystemTransformerValidationError is the validation error returned by
// SystemTransformer.Validate if the designated constraints aren't met.
type SystemTransformerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemTransformerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemTransformerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemTransformerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemTransformerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemTransformerValidationError) ErrorName() string {
	return "SystemTransformerValidationError"
}

// Error satisfies the builtin error interface
func (e SystemTransformerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemTransformer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemTransformerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemTransformerValidationError{}

// Validate checks the field values on TransformerConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransformerConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformerConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformerConfigMultiError, or nil if none found.
func (m *TransformerConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformerConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *TransformerConfig_GenerateEmailConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateEmailConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateEmailConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateEmailConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateEmailConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateEmailConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_TransformEmailConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformEmailConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformEmailConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformEmailConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformEmailConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "TransformEmailConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateBoolConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateBoolConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateBoolConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateBoolConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateBoolConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateBoolConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateCardNumberConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateCardNumberConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateCardNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateCardNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateCardNumberConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateCardNumberConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateCityConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateCityConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateCityConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateCityConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateCityConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateCityConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateE164PhoneNumberConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateE164PhoneNumberConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateE164PhoneNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateE164PhoneNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateE164PhoneNumberConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateE164PhoneNumberConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateFirstNameConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateFirstNameConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateFirstNameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateFirstNameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateFirstNameConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateFirstNameConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateFloat64Config:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateFloat64Config()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateFloat64Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateFloat64Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateFloat64Config()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateFloat64Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateFullAddressConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateFullAddressConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateFullAddressConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateFullAddressConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateFullAddressConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateFullAddressConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateFullNameConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateFullNameConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateFullNameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateFullNameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateFullNameConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateFullNameConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateGenderConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateGenderConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateGenderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateGenderConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateGenderConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateGenderConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateInt64PhoneNumberConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateInt64PhoneNumberConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateInt64PhoneNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateInt64PhoneNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateInt64PhoneNumberConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateInt64PhoneNumberConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateInt64Config:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateInt64Config()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateInt64Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateInt64Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateInt64Config()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateInt64Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateLastNameConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateLastNameConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateLastNameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateLastNameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateLastNameConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateLastNameConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateSha256HashConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateSha256HashConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateSha256HashConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateSha256HashConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateSha256HashConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateSha256HashConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateSsnConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateSsnConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateSsnConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateSsnConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateSsnConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateSsnConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateStateConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateStateConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateStateConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateStateConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateStateConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateStateConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateStreetAddressConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateStreetAddressConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateStreetAddressConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateStreetAddressConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateStreetAddressConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateStreetAddressConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateStringPhoneNumberConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateStringPhoneNumberConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateStringPhoneNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateStringPhoneNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateStringPhoneNumberConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateStringPhoneNumberConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateStringConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateStringConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateStringConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateStringConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateStringConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateStringConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateUnixtimestampConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateUnixtimestampConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateUnixtimestampConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateUnixtimestampConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateUnixtimestampConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateUnixtimestampConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateUsernameConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateUsernameConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateUsernameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateUsernameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateUsernameConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateUsernameConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateUtctimestampConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateUtctimestampConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateUtctimestampConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateUtctimestampConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateUtctimestampConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateUtctimestampConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateUuidConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateUuidConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateUuidConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateUuidConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateUuidConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateUuidConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateZipcodeConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateZipcodeConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateZipcodeConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateZipcodeConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateZipcodeConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateZipcodeConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_TransformE164PhoneNumberConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformE164PhoneNumberConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformE164PhoneNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformE164PhoneNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformE164PhoneNumberConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "TransformE164PhoneNumberConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_TransformFirstNameConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformFirstNameConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformFirstNameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformFirstNameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformFirstNameConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "TransformFirstNameConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_TransformFloat64Config:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformFloat64Config()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformFloat64Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformFloat64Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformFloat64Config()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "TransformFloat64Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_TransformFullNameConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformFullNameConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformFullNameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformFullNameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformFullNameConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "TransformFullNameConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_TransformInt64PhoneNumberConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformInt64PhoneNumberConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformInt64PhoneNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformInt64PhoneNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformInt64PhoneNumberConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "TransformInt64PhoneNumberConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_TransformInt64Config:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformInt64Config()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformInt64Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformInt64Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformInt64Config()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "TransformInt64Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_TransformLastNameConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformLastNameConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformLastNameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformLastNameConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformLastNameConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "TransformLastNameConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_TransformPhoneNumberConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformPhoneNumberConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformPhoneNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformPhoneNumberConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformPhoneNumberConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "TransformPhoneNumberConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_TransformStringConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformStringConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformStringConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformStringConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformStringConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "TransformStringConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_PassthroughConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPassthroughConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "PassthroughConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "PassthroughConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPassthroughConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "PassthroughConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_Nullconfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNullconfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "Nullconfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "Nullconfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNullconfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "Nullconfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_UserDefinedTransformerConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUserDefinedTransformerConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "UserDefinedTransformerConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "UserDefinedTransformerConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserDefinedTransformerConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "UserDefinedTransformerConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateDefaultConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateDefaultConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateDefaultConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateDefaultConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateDefaultConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateDefaultConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_TransformJavascriptConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformJavascriptConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformJavascriptConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformJavascriptConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformJavascriptConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "TransformJavascriptConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateCategoricalConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateCategoricalConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateCategoricalConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateCategoricalConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateCategoricalConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateCategoricalConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_TransformCharacterScrambleConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTransformCharacterScrambleConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformCharacterScrambleConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "TransformCharacterScrambleConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTransformCharacterScrambleConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "TransformCharacterScrambleConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TransformerConfig_GenerateJavascriptConfig:
		if v == nil {
			err := TransformerConfigValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerateJavascriptConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateJavascriptConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransformerConfigValidationError{
						field:  "GenerateJavascriptConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerateJavascriptConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransformerConfigValidationError{
					field:  "GenerateJavascriptConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TransformerConfigMultiError(errors)
	}

	return nil
}

// TransformerConfigMultiError is an error wrapping multiple validation errors
// returned by TransformerConfig.ValidateAll() if the designated constraints
// aren't met.
type TransformerConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformerConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformerConfigMultiError) AllErrors() []error { return m }

// TransformerConfigValidationError is the validation error returned by
// TransformerConfig.Validate if the designated constraints aren't met.
type TransformerConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformerConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformerConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformerConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformerConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformerConfigValidationError) ErrorName() string {
	return "TransformerConfigValidationError"
}

// Error satisfies the builtin error interface
func (e TransformerConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformerConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformerConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformerConfigValidationError{}

// Validate checks the field values on GenerateEmail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateEmail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateEmail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenerateEmailMultiError, or
// nil if none found.
func (m *GenerateEmail) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateEmail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.EmailType != nil {
		// no validation rules for EmailType
	}

	if len(errors) > 0 {
		return GenerateEmailMultiError(errors)
	}

	return nil
}

// GenerateEmailMultiError is an error wrapping multiple validation errors
// returned by GenerateEmail.ValidateAll() if the designated constraints
// aren't met.
type GenerateEmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateEmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateEmailMultiError) AllErrors() []error { return m }

// GenerateEmailValidationError is the validation error returned by
// GenerateEmail.Validate if the designated constraints aren't met.
type GenerateEmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateEmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateEmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateEmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateEmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateEmailValidationError) ErrorName() string { return "GenerateEmailValidationError" }

// Error satisfies the builtin error interface
func (e GenerateEmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateEmail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateEmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateEmailValidationError{}

// Validate checks the field values on TransformEmail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransformEmail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformEmail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransformEmailMultiError,
// or nil if none found.
func (m *TransformEmail) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformEmail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreserveDomain

	// no validation rules for PreserveLength

	if m.EmailType != nil {
		// no validation rules for EmailType
	}

	if m.InvalidEmailAction != nil {
		// no validation rules for InvalidEmailAction
	}

	if len(errors) > 0 {
		return TransformEmailMultiError(errors)
	}

	return nil
}

// TransformEmailMultiError is an error wrapping multiple validation errors
// returned by TransformEmail.ValidateAll() if the designated constraints
// aren't met.
type TransformEmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformEmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformEmailMultiError) AllErrors() []error { return m }

// TransformEmailValidationError is the validation error returned by
// TransformEmail.Validate if the designated constraints aren't met.
type TransformEmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformEmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformEmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformEmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformEmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformEmailValidationError) ErrorName() string { return "TransformEmailValidationError" }

// Error satisfies the builtin error interface
func (e TransformEmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformEmail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformEmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformEmailValidationError{}

// Validate checks the field values on GenerateBool with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateBool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateBool with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenerateBoolMultiError, or
// nil if none found.
func (m *GenerateBool) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateBool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateBoolMultiError(errors)
	}

	return nil
}

// GenerateBoolMultiError is an error wrapping multiple validation errors
// returned by GenerateBool.ValidateAll() if the designated constraints aren't met.
type GenerateBoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateBoolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateBoolMultiError) AllErrors() []error { return m }

// GenerateBoolValidationError is the validation error returned by
// GenerateBool.Validate if the designated constraints aren't met.
type GenerateBoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateBoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateBoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateBoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateBoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateBoolValidationError) ErrorName() string { return "GenerateBoolValidationError" }

// Error satisfies the builtin error interface
func (e GenerateBoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateBool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateBoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateBoolValidationError{}

// Validate checks the field values on GenerateCardNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateCardNumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateCardNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateCardNumberMultiError, or nil if none found.
func (m *GenerateCardNumber) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateCardNumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ValidLuhn

	if len(errors) > 0 {
		return GenerateCardNumberMultiError(errors)
	}

	return nil
}

// GenerateCardNumberMultiError is an error wrapping multiple validation errors
// returned by GenerateCardNumber.ValidateAll() if the designated constraints
// aren't met.
type GenerateCardNumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateCardNumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateCardNumberMultiError) AllErrors() []error { return m }

// GenerateCardNumberValidationError is the validation error returned by
// GenerateCardNumber.Validate if the designated constraints aren't met.
type GenerateCardNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateCardNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateCardNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateCardNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateCardNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateCardNumberValidationError) ErrorName() string {
	return "GenerateCardNumberValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateCardNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateCardNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateCardNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateCardNumberValidationError{}

// Validate checks the field values on GenerateCity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateCity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateCity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenerateCityMultiError, or
// nil if none found.
func (m *GenerateCity) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateCity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateCityMultiError(errors)
	}

	return nil
}

// GenerateCityMultiError is an error wrapping multiple validation errors
// returned by GenerateCity.ValidateAll() if the designated constraints aren't met.
type GenerateCityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateCityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateCityMultiError) AllErrors() []error { return m }

// GenerateCityValidationError is the validation error returned by
// GenerateCity.Validate if the designated constraints aren't met.
type GenerateCityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateCityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateCityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateCityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateCityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateCityValidationError) ErrorName() string { return "GenerateCityValidationError" }

// Error satisfies the builtin error interface
func (e GenerateCityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateCity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateCityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateCityValidationError{}

// Validate checks the field values on GenerateDefault with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateDefault) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateDefault with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateDefaultMultiError, or nil if none found.
func (m *GenerateDefault) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateDefault) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateDefaultMultiError(errors)
	}

	return nil
}

// GenerateDefaultMultiError is an error wrapping multiple validation errors
// returned by GenerateDefault.ValidateAll() if the designated constraints
// aren't met.
type GenerateDefaultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateDefaultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateDefaultMultiError) AllErrors() []error { return m }

// GenerateDefaultValidationError is the validation error returned by
// GenerateDefault.Validate if the designated constraints aren't met.
type GenerateDefaultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateDefaultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateDefaultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateDefaultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateDefaultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateDefaultValidationError) ErrorName() string { return "GenerateDefaultValidationError" }

// Error satisfies the builtin error interface
func (e GenerateDefaultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateDefault.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateDefaultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateDefaultValidationError{}

// Validate checks the field values on GenerateE164PhoneNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateE164PhoneNumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateE164PhoneNumber with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateE164PhoneNumberMultiError, or nil if none found.
func (m *GenerateE164PhoneNumber) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateE164PhoneNumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Min

	// no validation rules for Max

	if len(errors) > 0 {
		return GenerateE164PhoneNumberMultiError(errors)
	}

	return nil
}

// GenerateE164PhoneNumberMultiError is an error wrapping multiple validation
// errors returned by GenerateE164PhoneNumber.ValidateAll() if the designated
// constraints aren't met.
type GenerateE164PhoneNumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateE164PhoneNumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateE164PhoneNumberMultiError) AllErrors() []error { return m }

// GenerateE164PhoneNumberValidationError is the validation error returned by
// GenerateE164PhoneNumber.Validate if the designated constraints aren't met.
type GenerateE164PhoneNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateE164PhoneNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateE164PhoneNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateE164PhoneNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateE164PhoneNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateE164PhoneNumberValidationError) ErrorName() string {
	return "GenerateE164PhoneNumberValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateE164PhoneNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateE164PhoneNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateE164PhoneNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateE164PhoneNumberValidationError{}

// Validate checks the field values on GenerateFirstName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateFirstName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateFirstName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateFirstNameMultiError, or nil if none found.
func (m *GenerateFirstName) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateFirstName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateFirstNameMultiError(errors)
	}

	return nil
}

// GenerateFirstNameMultiError is an error wrapping multiple validation errors
// returned by GenerateFirstName.ValidateAll() if the designated constraints
// aren't met.
type GenerateFirstNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateFirstNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateFirstNameMultiError) AllErrors() []error { return m }

// GenerateFirstNameValidationError is the validation error returned by
// GenerateFirstName.Validate if the designated constraints aren't met.
type GenerateFirstNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateFirstNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateFirstNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateFirstNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateFirstNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateFirstNameValidationError) ErrorName() string {
	return "GenerateFirstNameValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateFirstNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateFirstName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateFirstNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateFirstNameValidationError{}

// Validate checks the field values on GenerateFloat64 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateFloat64) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateFloat64 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateFloat64MultiError, or nil if none found.
func (m *GenerateFloat64) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateFloat64) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RandomizeSign

	// no validation rules for Min

	// no validation rules for Max

	// no validation rules for Precision

	if len(errors) > 0 {
		return GenerateFloat64MultiError(errors)
	}

	return nil
}

// GenerateFloat64MultiError is an error wrapping multiple validation errors
// returned by GenerateFloat64.ValidateAll() if the designated constraints
// aren't met.
type GenerateFloat64MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateFloat64MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateFloat64MultiError) AllErrors() []error { return m }

// GenerateFloat64ValidationError is the validation error returned by
// GenerateFloat64.Validate if the designated constraints aren't met.
type GenerateFloat64ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateFloat64ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateFloat64ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateFloat64ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateFloat64ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateFloat64ValidationError) ErrorName() string { return "GenerateFloat64ValidationError" }

// Error satisfies the builtin error interface
func (e GenerateFloat64ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateFloat64.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateFloat64ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateFloat64ValidationError{}

// Validate checks the field values on GenerateFullAddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateFullAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateFullAddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateFullAddressMultiError, or nil if none found.
func (m *GenerateFullAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateFullAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateFullAddressMultiError(errors)
	}

	return nil
}

// GenerateFullAddressMultiError is an error wrapping multiple validation
// errors returned by GenerateFullAddress.ValidateAll() if the designated
// constraints aren't met.
type GenerateFullAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateFullAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateFullAddressMultiError) AllErrors() []error { return m }

// GenerateFullAddressValidationError is the validation error returned by
// GenerateFullAddress.Validate if the designated constraints aren't met.
type GenerateFullAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateFullAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateFullAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateFullAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateFullAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateFullAddressValidationError) ErrorName() string {
	return "GenerateFullAddressValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateFullAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateFullAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateFullAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateFullAddressValidationError{}

// Validate checks the field values on GenerateFullName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateFullName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateFullName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateFullNameMultiError, or nil if none found.
func (m *GenerateFullName) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateFullName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateFullNameMultiError(errors)
	}

	return nil
}

// GenerateFullNameMultiError is an error wrapping multiple validation errors
// returned by GenerateFullName.ValidateAll() if the designated constraints
// aren't met.
type GenerateFullNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateFullNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateFullNameMultiError) AllErrors() []error { return m }

// GenerateFullNameValidationError is the validation error returned by
// GenerateFullName.Validate if the designated constraints aren't met.
type GenerateFullNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateFullNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateFullNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateFullNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateFullNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateFullNameValidationError) ErrorName() string { return "GenerateFullNameValidationError" }

// Error satisfies the builtin error interface
func (e GenerateFullNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateFullName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateFullNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateFullNameValidationError{}

// Validate checks the field values on GenerateGender with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateGender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateGender with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenerateGenderMultiError,
// or nil if none found.
func (m *GenerateGender) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateGender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Abbreviate

	if len(errors) > 0 {
		return GenerateGenderMultiError(errors)
	}

	return nil
}

// GenerateGenderMultiError is an error wrapping multiple validation errors
// returned by GenerateGender.ValidateAll() if the designated constraints
// aren't met.
type GenerateGenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateGenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateGenderMultiError) AllErrors() []error { return m }

// GenerateGenderValidationError is the validation error returned by
// GenerateGender.Validate if the designated constraints aren't met.
type GenerateGenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateGenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateGenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateGenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateGenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateGenderValidationError) ErrorName() string { return "GenerateGenderValidationError" }

// Error satisfies the builtin error interface
func (e GenerateGenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateGender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateGenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateGenderValidationError{}

// Validate checks the field values on GenerateInt64PhoneNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateInt64PhoneNumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateInt64PhoneNumber with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateInt64PhoneNumberMultiError, or nil if none found.
func (m *GenerateInt64PhoneNumber) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateInt64PhoneNumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateInt64PhoneNumberMultiError(errors)
	}

	return nil
}

// GenerateInt64PhoneNumberMultiError is an error wrapping multiple validation
// errors returned by GenerateInt64PhoneNumber.ValidateAll() if the designated
// constraints aren't met.
type GenerateInt64PhoneNumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateInt64PhoneNumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateInt64PhoneNumberMultiError) AllErrors() []error { return m }

// GenerateInt64PhoneNumberValidationError is the validation error returned by
// GenerateInt64PhoneNumber.Validate if the designated constraints aren't met.
type GenerateInt64PhoneNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateInt64PhoneNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateInt64PhoneNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateInt64PhoneNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateInt64PhoneNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateInt64PhoneNumberValidationError) ErrorName() string {
	return "GenerateInt64PhoneNumberValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateInt64PhoneNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateInt64PhoneNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateInt64PhoneNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateInt64PhoneNumberValidationError{}

// Validate checks the field values on GenerateInt64 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateInt64) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateInt64 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenerateInt64MultiError, or
// nil if none found.
func (m *GenerateInt64) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateInt64) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RandomizeSign

	// no validation rules for Min

	// no validation rules for Max

	if len(errors) > 0 {
		return GenerateInt64MultiError(errors)
	}

	return nil
}

// GenerateInt64MultiError is an error wrapping multiple validation errors
// returned by GenerateInt64.ValidateAll() if the designated constraints
// aren't met.
type GenerateInt64MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateInt64MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateInt64MultiError) AllErrors() []error { return m }

// GenerateInt64ValidationError is the validation error returned by
// GenerateInt64.Validate if the designated constraints aren't met.
type GenerateInt64ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateInt64ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateInt64ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateInt64ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateInt64ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateInt64ValidationError) ErrorName() string { return "GenerateInt64ValidationError" }

// Error satisfies the builtin error interface
func (e GenerateInt64ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateInt64.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateInt64ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateInt64ValidationError{}

// Validate checks the field values on GenerateLastName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateLastName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateLastName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateLastNameMultiError, or nil if none found.
func (m *GenerateLastName) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateLastName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateLastNameMultiError(errors)
	}

	return nil
}

// GenerateLastNameMultiError is an error wrapping multiple validation errors
// returned by GenerateLastName.ValidateAll() if the designated constraints
// aren't met.
type GenerateLastNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateLastNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateLastNameMultiError) AllErrors() []error { return m }

// GenerateLastNameValidationError is the validation error returned by
// GenerateLastName.Validate if the designated constraints aren't met.
type GenerateLastNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateLastNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateLastNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateLastNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateLastNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateLastNameValidationError) ErrorName() string { return "GenerateLastNameValidationError" }

// Error satisfies the builtin error interface
func (e GenerateLastNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateLastName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateLastNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateLastNameValidationError{}

// Validate checks the field values on GenerateSha256Hash with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateSha256Hash) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateSha256Hash with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateSha256HashMultiError, or nil if none found.
func (m *GenerateSha256Hash) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateSha256Hash) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateSha256HashMultiError(errors)
	}

	return nil
}

// GenerateSha256HashMultiError is an error wrapping multiple validation errors
// returned by GenerateSha256Hash.ValidateAll() if the designated constraints
// aren't met.
type GenerateSha256HashMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateSha256HashMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateSha256HashMultiError) AllErrors() []error { return m }

// GenerateSha256HashValidationError is the validation error returned by
// GenerateSha256Hash.Validate if the designated constraints aren't met.
type GenerateSha256HashValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateSha256HashValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateSha256HashValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateSha256HashValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateSha256HashValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateSha256HashValidationError) ErrorName() string {
	return "GenerateSha256HashValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateSha256HashValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateSha256Hash.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateSha256HashValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateSha256HashValidationError{}

// Validate checks the field values on GenerateSSN with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateSSN) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateSSN with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenerateSSNMultiError, or
// nil if none found.
func (m *GenerateSSN) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateSSN) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateSSNMultiError(errors)
	}

	return nil
}

// GenerateSSNMultiError is an error wrapping multiple validation errors
// returned by GenerateSSN.ValidateAll() if the designated constraints aren't met.
type GenerateSSNMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateSSNMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateSSNMultiError) AllErrors() []error { return m }

// GenerateSSNValidationError is the validation error returned by
// GenerateSSN.Validate if the designated constraints aren't met.
type GenerateSSNValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateSSNValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateSSNValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateSSNValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateSSNValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateSSNValidationError) ErrorName() string { return "GenerateSSNValidationError" }

// Error satisfies the builtin error interface
func (e GenerateSSNValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateSSN.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateSSNValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateSSNValidationError{}

// Validate checks the field values on GenerateState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenerateStateMultiError, or
// nil if none found.
func (m *GenerateState) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateStateMultiError(errors)
	}

	return nil
}

// GenerateStateMultiError is an error wrapping multiple validation errors
// returned by GenerateState.ValidateAll() if the designated constraints
// aren't met.
type GenerateStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStateMultiError) AllErrors() []error { return m }

// GenerateStateValidationError is the validation error returned by
// GenerateState.Validate if the designated constraints aren't met.
type GenerateStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStateValidationError) ErrorName() string { return "GenerateStateValidationError" }

// Error satisfies the builtin error interface
func (e GenerateStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStateValidationError{}

// Validate checks the field values on GenerateStreetAddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateStreetAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStreetAddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateStreetAddressMultiError, or nil if none found.
func (m *GenerateStreetAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStreetAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateStreetAddressMultiError(errors)
	}

	return nil
}

// GenerateStreetAddressMultiError is an error wrapping multiple validation
// errors returned by GenerateStreetAddress.ValidateAll() if the designated
// constraints aren't met.
type GenerateStreetAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStreetAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStreetAddressMultiError) AllErrors() []error { return m }

// GenerateStreetAddressValidationError is the validation error returned by
// GenerateStreetAddress.Validate if the designated constraints aren't met.
type GenerateStreetAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStreetAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStreetAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStreetAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStreetAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStreetAddressValidationError) ErrorName() string {
	return "GenerateStreetAddressValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStreetAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStreetAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStreetAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStreetAddressValidationError{}

// Validate checks the field values on GenerateStringPhoneNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateStringPhoneNumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateStringPhoneNumber with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateStringPhoneNumberMultiError, or nil if none found.
func (m *GenerateStringPhoneNumber) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateStringPhoneNumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Min

	// no validation rules for Max

	if len(errors) > 0 {
		return GenerateStringPhoneNumberMultiError(errors)
	}

	return nil
}

// GenerateStringPhoneNumberMultiError is an error wrapping multiple validation
// errors returned by GenerateStringPhoneNumber.ValidateAll() if the
// designated constraints aren't met.
type GenerateStringPhoneNumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStringPhoneNumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStringPhoneNumberMultiError) AllErrors() []error { return m }

// GenerateStringPhoneNumberValidationError is the validation error returned by
// GenerateStringPhoneNumber.Validate if the designated constraints aren't met.
type GenerateStringPhoneNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStringPhoneNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStringPhoneNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStringPhoneNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStringPhoneNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStringPhoneNumberValidationError) ErrorName() string {
	return "GenerateStringPhoneNumberValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateStringPhoneNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateStringPhoneNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStringPhoneNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStringPhoneNumberValidationError{}

// Validate checks the field values on GenerateString with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateString with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenerateStringMultiError,
// or nil if none found.
func (m *GenerateString) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Min

	// no validation rules for Max

	if len(errors) > 0 {
		return GenerateStringMultiError(errors)
	}

	return nil
}

// GenerateStringMultiError is an error wrapping multiple validation errors
// returned by GenerateString.ValidateAll() if the designated constraints
// aren't met.
type GenerateStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateStringMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateStringMultiError) AllErrors() []error { return m }

// GenerateStringValidationError is the validation error returned by
// GenerateString.Validate if the designated constraints aren't met.
type GenerateStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateStringValidationError) ErrorName() string { return "GenerateStringValidationError" }

// Error satisfies the builtin error interface
func (e GenerateStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateStringValidationError{}

// Validate checks the field values on GenerateUnixTimestamp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateUnixTimestamp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateUnixTimestamp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateUnixTimestampMultiError, or nil if none found.
func (m *GenerateUnixTimestamp) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateUnixTimestamp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateUnixTimestampMultiError(errors)
	}

	return nil
}

// GenerateUnixTimestampMultiError is an error wrapping multiple validation
// errors returned by GenerateUnixTimestamp.ValidateAll() if the designated
// constraints aren't met.
type GenerateUnixTimestampMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateUnixTimestampMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateUnixTimestampMultiError) AllErrors() []error { return m }

// GenerateUnixTimestampValidationError is the validation error returned by
// GenerateUnixTimestamp.Validate if the designated constraints aren't met.
type GenerateUnixTimestampValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateUnixTimestampValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateUnixTimestampValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateUnixTimestampValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateUnixTimestampValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateUnixTimestampValidationError) ErrorName() string {
	return "GenerateUnixTimestampValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateUnixTimestampValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateUnixTimestamp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateUnixTimestampValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateUnixTimestampValidationError{}

// Validate checks the field values on GenerateUsername with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateUsername) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateUsername with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateUsernameMultiError, or nil if none found.
func (m *GenerateUsername) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateUsername) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateUsernameMultiError(errors)
	}

	return nil
}

// GenerateUsernameMultiError is an error wrapping multiple validation errors
// returned by GenerateUsername.ValidateAll() if the designated constraints
// aren't met.
type GenerateUsernameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateUsernameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateUsernameMultiError) AllErrors() []error { return m }

// GenerateUsernameValidationError is the validation error returned by
// GenerateUsername.Validate if the designated constraints aren't met.
type GenerateUsernameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateUsernameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateUsernameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateUsernameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateUsernameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateUsernameValidationError) ErrorName() string { return "GenerateUsernameValidationError" }

// Error satisfies the builtin error interface
func (e GenerateUsernameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateUsername.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateUsernameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateUsernameValidationError{}

// Validate checks the field values on GenerateUtcTimestamp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateUtcTimestamp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateUtcTimestamp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateUtcTimestampMultiError, or nil if none found.
func (m *GenerateUtcTimestamp) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateUtcTimestamp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateUtcTimestampMultiError(errors)
	}

	return nil
}

// GenerateUtcTimestampMultiError is an error wrapping multiple validation
// errors returned by GenerateUtcTimestamp.ValidateAll() if the designated
// constraints aren't met.
type GenerateUtcTimestampMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateUtcTimestampMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateUtcTimestampMultiError) AllErrors() []error { return m }

// GenerateUtcTimestampValidationError is the validation error returned by
// GenerateUtcTimestamp.Validate if the designated constraints aren't met.
type GenerateUtcTimestampValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateUtcTimestampValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateUtcTimestampValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateUtcTimestampValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateUtcTimestampValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateUtcTimestampValidationError) ErrorName() string {
	return "GenerateUtcTimestampValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateUtcTimestampValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateUtcTimestamp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateUtcTimestampValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateUtcTimestampValidationError{}

// Validate checks the field values on GenerateUuid with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateUuid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateUuid with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenerateUuidMultiError, or
// nil if none found.
func (m *GenerateUuid) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateUuid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IncludeHyphens

	if len(errors) > 0 {
		return GenerateUuidMultiError(errors)
	}

	return nil
}

// GenerateUuidMultiError is an error wrapping multiple validation errors
// returned by GenerateUuid.ValidateAll() if the designated constraints aren't met.
type GenerateUuidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateUuidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateUuidMultiError) AllErrors() []error { return m }

// GenerateUuidValidationError is the validation error returned by
// GenerateUuid.Validate if the designated constraints aren't met.
type GenerateUuidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateUuidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateUuidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateUuidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateUuidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateUuidValidationError) ErrorName() string { return "GenerateUuidValidationError" }

// Error satisfies the builtin error interface
func (e GenerateUuidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateUuid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateUuidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateUuidValidationError{}

// Validate checks the field values on GenerateZipcode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateZipcode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateZipcode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateZipcodeMultiError, or nil if none found.
func (m *GenerateZipcode) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateZipcode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateZipcodeMultiError(errors)
	}

	return nil
}

// GenerateZipcodeMultiError is an error wrapping multiple validation errors
// returned by GenerateZipcode.ValidateAll() if the designated constraints
// aren't met.
type GenerateZipcodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateZipcodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateZipcodeMultiError) AllErrors() []error { return m }

// GenerateZipcodeValidationError is the validation error returned by
// GenerateZipcode.Validate if the designated constraints aren't met.
type GenerateZipcodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateZipcodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateZipcodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateZipcodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateZipcodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateZipcodeValidationError) ErrorName() string { return "GenerateZipcodeValidationError" }

// Error satisfies the builtin error interface
func (e GenerateZipcodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateZipcode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateZipcodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateZipcodeValidationError{}

// Validate checks the field values on TransformE164PhoneNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransformE164PhoneNumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformE164PhoneNumber with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformE164PhoneNumberMultiError, or nil if none found.
func (m *TransformE164PhoneNumber) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformE164PhoneNumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreserveLength

	if len(errors) > 0 {
		return TransformE164PhoneNumberMultiError(errors)
	}

	return nil
}

// TransformE164PhoneNumberMultiError is an error wrapping multiple validation
// errors returned by TransformE164PhoneNumber.ValidateAll() if the designated
// constraints aren't met.
type TransformE164PhoneNumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformE164PhoneNumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformE164PhoneNumberMultiError) AllErrors() []error { return m }

// TransformE164PhoneNumberValidationError is the validation error returned by
// TransformE164PhoneNumber.Validate if the designated constraints aren't met.
type TransformE164PhoneNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformE164PhoneNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformE164PhoneNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformE164PhoneNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformE164PhoneNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformE164PhoneNumberValidationError) ErrorName() string {
	return "TransformE164PhoneNumberValidationError"
}

// Error satisfies the builtin error interface
func (e TransformE164PhoneNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformE164PhoneNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformE164PhoneNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformE164PhoneNumberValidationError{}

// Validate checks the field values on TransformFirstName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransformFirstName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformFirstName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformFirstNameMultiError, or nil if none found.
func (m *TransformFirstName) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformFirstName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreserveLength

	if len(errors) > 0 {
		return TransformFirstNameMultiError(errors)
	}

	return nil
}

// TransformFirstNameMultiError is an error wrapping multiple validation errors
// returned by TransformFirstName.ValidateAll() if the designated constraints
// aren't met.
type TransformFirstNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformFirstNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformFirstNameMultiError) AllErrors() []error { return m }

// TransformFirstNameValidationError is the validation error returned by
// TransformFirstName.Validate if the designated constraints aren't met.
type TransformFirstNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformFirstNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformFirstNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformFirstNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformFirstNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformFirstNameValidationError) ErrorName() string {
	return "TransformFirstNameValidationError"
}

// Error satisfies the builtin error interface
func (e TransformFirstNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformFirstName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformFirstNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformFirstNameValidationError{}

// Validate checks the field values on TransformFloat64 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransformFloat64) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformFloat64 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformFloat64MultiError, or nil if none found.
func (m *TransformFloat64) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformFloat64) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RandomizationRangeMin

	// no validation rules for RandomizationRangeMax

	if len(errors) > 0 {
		return TransformFloat64MultiError(errors)
	}

	return nil
}

// TransformFloat64MultiError is an error wrapping multiple validation errors
// returned by TransformFloat64.ValidateAll() if the designated constraints
// aren't met.
type TransformFloat64MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformFloat64MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformFloat64MultiError) AllErrors() []error { return m }

// TransformFloat64ValidationError is the validation error returned by
// TransformFloat64.Validate if the designated constraints aren't met.
type TransformFloat64ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformFloat64ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformFloat64ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformFloat64ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformFloat64ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformFloat64ValidationError) ErrorName() string { return "TransformFloat64ValidationError" }

// Error satisfies the builtin error interface
func (e TransformFloat64ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformFloat64.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformFloat64ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformFloat64ValidationError{}

// Validate checks the field values on TransformFullName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransformFullName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformFullName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformFullNameMultiError, or nil if none found.
func (m *TransformFullName) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformFullName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreserveLength

	if len(errors) > 0 {
		return TransformFullNameMultiError(errors)
	}

	return nil
}

// TransformFullNameMultiError is an error wrapping multiple validation errors
// returned by TransformFullName.ValidateAll() if the designated constraints
// aren't met.
type TransformFullNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformFullNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformFullNameMultiError) AllErrors() []error { return m }

// TransformFullNameValidationError is the validation error returned by
// TransformFullName.Validate if the designated constraints aren't met.
type TransformFullNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformFullNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformFullNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformFullNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformFullNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformFullNameValidationError) ErrorName() string {
	return "TransformFullNameValidationError"
}

// Error satisfies the builtin error interface
func (e TransformFullNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformFullName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformFullNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformFullNameValidationError{}

// Validate checks the field values on TransformInt64PhoneNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransformInt64PhoneNumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformInt64PhoneNumber with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformInt64PhoneNumberMultiError, or nil if none found.
func (m *TransformInt64PhoneNumber) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformInt64PhoneNumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreserveLength

	if len(errors) > 0 {
		return TransformInt64PhoneNumberMultiError(errors)
	}

	return nil
}

// TransformInt64PhoneNumberMultiError is an error wrapping multiple validation
// errors returned by TransformInt64PhoneNumber.ValidateAll() if the
// designated constraints aren't met.
type TransformInt64PhoneNumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformInt64PhoneNumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformInt64PhoneNumberMultiError) AllErrors() []error { return m }

// TransformInt64PhoneNumberValidationError is the validation error returned by
// TransformInt64PhoneNumber.Validate if the designated constraints aren't met.
type TransformInt64PhoneNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformInt64PhoneNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformInt64PhoneNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformInt64PhoneNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformInt64PhoneNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformInt64PhoneNumberValidationError) ErrorName() string {
	return "TransformInt64PhoneNumberValidationError"
}

// Error satisfies the builtin error interface
func (e TransformInt64PhoneNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformInt64PhoneNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformInt64PhoneNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformInt64PhoneNumberValidationError{}

// Validate checks the field values on TransformInt64 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransformInt64) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformInt64 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransformInt64MultiError,
// or nil if none found.
func (m *TransformInt64) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformInt64) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RandomizationRangeMin

	// no validation rules for RandomizationRangeMax

	if len(errors) > 0 {
		return TransformInt64MultiError(errors)
	}

	return nil
}

// TransformInt64MultiError is an error wrapping multiple validation errors
// returned by TransformInt64.ValidateAll() if the designated constraints
// aren't met.
type TransformInt64MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformInt64MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformInt64MultiError) AllErrors() []error { return m }

// TransformInt64ValidationError is the validation error returned by
// TransformInt64.Validate if the designated constraints aren't met.
type TransformInt64ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformInt64ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformInt64ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformInt64ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformInt64ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformInt64ValidationError) ErrorName() string { return "TransformInt64ValidationError" }

// Error satisfies the builtin error interface
func (e TransformInt64ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformInt64.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformInt64ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformInt64ValidationError{}

// Validate checks the field values on TransformLastName with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransformLastName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformLastName with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformLastNameMultiError, or nil if none found.
func (m *TransformLastName) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformLastName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreserveLength

	if len(errors) > 0 {
		return TransformLastNameMultiError(errors)
	}

	return nil
}

// TransformLastNameMultiError is an error wrapping multiple validation errors
// returned by TransformLastName.ValidateAll() if the designated constraints
// aren't met.
type TransformLastNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformLastNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformLastNameMultiError) AllErrors() []error { return m }

// TransformLastNameValidationError is the validation error returned by
// TransformLastName.Validate if the designated constraints aren't met.
type TransformLastNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformLastNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformLastNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformLastNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformLastNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformLastNameValidationError) ErrorName() string {
	return "TransformLastNameValidationError"
}

// Error satisfies the builtin error interface
func (e TransformLastNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformLastName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformLastNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformLastNameValidationError{}

// Validate checks the field values on TransformPhoneNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransformPhoneNumber) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformPhoneNumber with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformPhoneNumberMultiError, or nil if none found.
func (m *TransformPhoneNumber) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformPhoneNumber) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreserveLength

	if len(errors) > 0 {
		return TransformPhoneNumberMultiError(errors)
	}

	return nil
}

// TransformPhoneNumberMultiError is an error wrapping multiple validation
// errors returned by TransformPhoneNumber.ValidateAll() if the designated
// constraints aren't met.
type TransformPhoneNumberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformPhoneNumberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformPhoneNumberMultiError) AllErrors() []error { return m }

// TransformPhoneNumberValidationError is the validation error returned by
// TransformPhoneNumber.Validate if the designated constraints aren't met.
type TransformPhoneNumberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformPhoneNumberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformPhoneNumberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformPhoneNumberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformPhoneNumberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformPhoneNumberValidationError) ErrorName() string {
	return "TransformPhoneNumberValidationError"
}

// Error satisfies the builtin error interface
func (e TransformPhoneNumberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformPhoneNumber.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformPhoneNumberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformPhoneNumberValidationError{}

// Validate checks the field values on TransformString with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransformString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformString with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformStringMultiError, or nil if none found.
func (m *TransformString) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreserveLength

	if len(errors) > 0 {
		return TransformStringMultiError(errors)
	}

	return nil
}

// TransformStringMultiError is an error wrapping multiple validation errors
// returned by TransformString.ValidateAll() if the designated constraints
// aren't met.
type TransformStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformStringMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformStringMultiError) AllErrors() []error { return m }

// TransformStringValidationError is the validation error returned by
// TransformString.Validate if the designated constraints aren't met.
type TransformStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformStringValidationError) ErrorName() string { return "TransformStringValidationError" }

// Error satisfies the builtin error interface
func (e TransformStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformStringValidationError{}

// Validate checks the field values on Passthrough with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Passthrough) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Passthrough with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PassthroughMultiError, or
// nil if none found.
func (m *Passthrough) ValidateAll() error {
	return m.validate(true)
}

func (m *Passthrough) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PassthroughMultiError(errors)
	}

	return nil
}

// PassthroughMultiError is an error wrapping multiple validation errors
// returned by Passthrough.ValidateAll() if the designated constraints aren't met.
type PassthroughMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PassthroughMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PassthroughMultiError) AllErrors() []error { return m }

// PassthroughValidationError is the validation error returned by
// Passthrough.Validate if the designated constraints aren't met.
type PassthroughValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PassthroughValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PassthroughValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PassthroughValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PassthroughValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PassthroughValidationError) ErrorName() string { return "PassthroughValidationError" }

// Error satisfies the builtin error interface
func (e PassthroughValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPassthrough.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PassthroughValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PassthroughValidationError{}

// Validate checks the field values on Null with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Null) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Null with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NullMultiError, or nil if none found.
func (m *Null) ValidateAll() error {
	return m.validate(true)
}

func (m *Null) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NullMultiError(errors)
	}

	return nil
}

// NullMultiError is an error wrapping multiple validation errors returned by
// Null.ValidateAll() if the designated constraints aren't met.
type NullMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NullMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NullMultiError) AllErrors() []error { return m }

// NullValidationError is the validation error returned by Null.Validate if the
// designated constraints aren't met.
type NullValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NullValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NullValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NullValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NullValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NullValidationError) ErrorName() string { return "NullValidationError" }

// Error satisfies the builtin error interface
func (e NullValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNull.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NullValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NullValidationError{}

// Validate checks the field values on TransformJavascript with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransformJavascript) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformJavascript with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformJavascriptMultiError, or nil if none found.
func (m *TransformJavascript) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformJavascript) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return TransformJavascriptMultiError(errors)
	}

	return nil
}

// TransformJavascriptMultiError is an error wrapping multiple validation
// errors returned by TransformJavascript.ValidateAll() if the designated
// constraints aren't met.
type TransformJavascriptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformJavascriptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformJavascriptMultiError) AllErrors() []error { return m }

// TransformJavascriptValidationError is the validation error returned by
// TransformJavascript.Validate if the designated constraints aren't met.
type TransformJavascriptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformJavascriptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformJavascriptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformJavascriptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformJavascriptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformJavascriptValidationError) ErrorName() string {
	return "TransformJavascriptValidationError"
}

// Error satisfies the builtin error interface
func (e TransformJavascriptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformJavascript.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformJavascriptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformJavascriptValidationError{}

// Validate checks the field values on UserDefinedTransformerConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserDefinedTransformerConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDefinedTransformerConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDefinedTransformerConfigMultiError, or nil if none found.
func (m *UserDefinedTransformerConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDefinedTransformerConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UserDefinedTransformerConfigMultiError(errors)
	}

	return nil
}

// UserDefinedTransformerConfigMultiError is an error wrapping multiple
// validation errors returned by UserDefinedTransformerConfig.ValidateAll() if
// the designated constraints aren't met.
type UserDefinedTransformerConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDefinedTransformerConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDefinedTransformerConfigMultiError) AllErrors() []error { return m }

// UserDefinedTransformerConfigValidationError is the validation error returned
// by UserDefinedTransformerConfig.Validate if the designated constraints
// aren't met.
type UserDefinedTransformerConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDefinedTransformerConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDefinedTransformerConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDefinedTransformerConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDefinedTransformerConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDefinedTransformerConfigValidationError) ErrorName() string {
	return "UserDefinedTransformerConfigValidationError"
}

// Error satisfies the builtin error interface
func (e UserDefinedTransformerConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDefinedTransformerConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDefinedTransformerConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDefinedTransformerConfigValidationError{}

// Validate checks the field values on ValidateUserJavascriptCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ValidateUserJavascriptCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateUserJavascriptCodeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ValidateUserJavascriptCodeRequestMultiError, or nil if none found.
func (m *ValidateUserJavascriptCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateUserJavascriptCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Code

	if len(errors) > 0 {
		return ValidateUserJavascriptCodeRequestMultiError(errors)
	}

	return nil
}

// ValidateUserJavascriptCodeRequestMultiError is an error wrapping multiple
// validation errors returned by
// ValidateUserJavascriptCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type ValidateUserJavascriptCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateUserJavascriptCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateUserJavascriptCodeRequestMultiError) AllErrors() []error { return m }

// ValidateUserJavascriptCodeRequestValidationError is the validation error
// returned by ValidateUserJavascriptCodeRequest.Validate if the designated
// constraints aren't met.
type ValidateUserJavascriptCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateUserJavascriptCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateUserJavascriptCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateUserJavascriptCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateUserJavascriptCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateUserJavascriptCodeRequestValidationError) ErrorName() string {
	return "ValidateUserJavascriptCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateUserJavascriptCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateUserJavascriptCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateUserJavascriptCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateUserJavascriptCodeRequestValidationError{}

// Validate checks the field values on ValidateUserJavascriptCodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ValidateUserJavascriptCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateUserJavascriptCodeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ValidateUserJavascriptCodeResponseMultiError, or nil if none found.
func (m *ValidateUserJavascriptCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateUserJavascriptCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if len(errors) > 0 {
		return ValidateUserJavascriptCodeResponseMultiError(errors)
	}

	return nil
}

// ValidateUserJavascriptCodeResponseMultiError is an error wrapping multiple
// validation errors returned by
// ValidateUserJavascriptCodeResponse.ValidateAll() if the designated
// constraints aren't met.
type ValidateUserJavascriptCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateUserJavascriptCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateUserJavascriptCodeResponseMultiError) AllErrors() []error { return m }

// ValidateUserJavascriptCodeResponseValidationError is the validation error
// returned by ValidateUserJavascriptCodeResponse.Validate if the designated
// constraints aren't met.
type ValidateUserJavascriptCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateUserJavascriptCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateUserJavascriptCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateUserJavascriptCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateUserJavascriptCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateUserJavascriptCodeResponseValidationError) ErrorName() string {
	return "ValidateUserJavascriptCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateUserJavascriptCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateUserJavascriptCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateUserJavascriptCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateUserJavascriptCodeResponseValidationError{}

// Validate checks the field values on GenerateCategorical with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateCategorical) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateCategorical with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateCategoricalMultiError, or nil if none found.
func (m *GenerateCategorical) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateCategorical) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Categories

	if len(errors) > 0 {
		return GenerateCategoricalMultiError(errors)
	}

	return nil
}

// GenerateCategoricalMultiError is an error wrapping multiple validation
// errors returned by GenerateCategorical.ValidateAll() if the designated
// constraints aren't met.
type GenerateCategoricalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateCategoricalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateCategoricalMultiError) AllErrors() []error { return m }

// GenerateCategoricalValidationError is the validation error returned by
// GenerateCategorical.Validate if the designated constraints aren't met.
type GenerateCategoricalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateCategoricalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateCategoricalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateCategoricalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateCategoricalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateCategoricalValidationError) ErrorName() string {
	return "GenerateCategoricalValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateCategoricalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateCategorical.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateCategoricalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateCategoricalValidationError{}

// Validate checks the field values on TransformCharacterScramble with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransformCharacterScramble) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransformCharacterScramble with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransformCharacterScrambleMultiError, or nil if none found.
func (m *TransformCharacterScramble) ValidateAll() error {
	return m.validate(true)
}

func (m *TransformCharacterScramble) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserProvidedRegex != nil {
		// no validation rules for UserProvidedRegex
	}

	if len(errors) > 0 {
		return TransformCharacterScrambleMultiError(errors)
	}

	return nil
}

// TransformCharacterScrambleMultiError is an error wrapping multiple
// validation errors returned by TransformCharacterScramble.ValidateAll() if
// the designated constraints aren't met.
type TransformCharacterScrambleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformCharacterScrambleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformCharacterScrambleMultiError) AllErrors() []error { return m }

// TransformCharacterScrambleValidationError is the validation error returned
// by TransformCharacterScramble.Validate if the designated constraints aren't met.
type TransformCharacterScrambleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformCharacterScrambleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformCharacterScrambleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformCharacterScrambleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformCharacterScrambleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformCharacterScrambleValidationError) ErrorName() string {
	return "TransformCharacterScrambleValidationError"
}

// Error satisfies the builtin error interface
func (e TransformCharacterScrambleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformCharacterScramble.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformCharacterScrambleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformCharacterScrambleValidationError{}

// Validate checks the field values on GenerateJavascript with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateJavascript) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateJavascript with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateJavascriptMultiError, or nil if none found.
func (m *GenerateJavascript) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateJavascript) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return GenerateJavascriptMultiError(errors)
	}

	return nil
}

// GenerateJavascriptMultiError is an error wrapping multiple validation errors
// returned by GenerateJavascript.ValidateAll() if the designated constraints
// aren't met.
type GenerateJavascriptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateJavascriptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateJavascriptMultiError) AllErrors() []error { return m }

// GenerateJavascriptValidationError is the validation error returned by
// GenerateJavascript.Validate if the designated constraints aren't met.
type GenerateJavascriptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateJavascriptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateJavascriptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateJavascriptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateJavascriptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateJavascriptValidationError) ErrorName() string {
	return "GenerateJavascriptValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateJavascriptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateJavascript.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateJavascriptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateJavascriptValidationError{}

// Validate checks the field values on ValidateUserRegexCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateUserRegexCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateUserRegexCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateUserRegexCodeRequestMultiError, or nil if none found.
func (m *ValidateUserRegexCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateUserRegexCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for UserProvidedRegex

	if len(errors) > 0 {
		return ValidateUserRegexCodeRequestMultiError(errors)
	}

	return nil
}

// ValidateUserRegexCodeRequestMultiError is an error wrapping multiple
// validation errors returned by ValidateUserRegexCodeRequest.ValidateAll() if
// the designated constraints aren't met.
type ValidateUserRegexCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateUserRegexCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateUserRegexCodeRequestMultiError) AllErrors() []error { return m }

// ValidateUserRegexCodeRequestValidationError is the validation error returned
// by ValidateUserRegexCodeRequest.Validate if the designated constraints
// aren't met.
type ValidateUserRegexCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateUserRegexCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateUserRegexCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateUserRegexCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateUserRegexCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateUserRegexCodeRequestValidationError) ErrorName() string {
	return "ValidateUserRegexCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateUserRegexCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateUserRegexCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateUserRegexCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateUserRegexCodeRequestValidationError{}

// Validate checks the field values on ValidateUserRegexCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateUserRegexCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateUserRegexCodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ValidateUserRegexCodeResponseMultiError, or nil if none found.
func (m *ValidateUserRegexCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateUserRegexCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	if len(errors) > 0 {
		return ValidateUserRegexCodeResponseMultiError(errors)
	}

	return nil
}

// ValidateUserRegexCodeResponseMultiError is an error wrapping multiple
// validation errors returned by ValidateUserRegexCodeResponse.ValidateAll()
// if the designated constraints aren't met.
type ValidateUserRegexCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateUserRegexCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateUserRegexCodeResponseMultiError) AllErrors() []error { return m }

// ValidateUserRegexCodeResponseValidationError is the validation error
// returned by ValidateUserRegexCodeResponse.Validate if the designated
// constraints aren't met.
type ValidateUserRegexCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateUserRegexCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateUserRegexCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateUserRegexCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateUserRegexCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateUserRegexCodeResponseValidationError) ErrorName() string {
	return "ValidateUserRegexCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateUserRegexCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateUserRegexCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateUserRegexCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateUserRegexCodeResponseValidationError{}
