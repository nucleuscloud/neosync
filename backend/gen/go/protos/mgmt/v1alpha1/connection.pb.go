// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: mgmt/v1alpha1/connection.proto

package mgmtv1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetConnectionsRequest) Reset() {
	*x = GetConnectionsRequest{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionsRequest) ProtoMessage() {}

func (x *GetConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionsRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{0}
}

func (x *GetConnectionsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *GetConnectionsResponse) Reset() {
	*x = GetConnectionsResponse{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionsResponse) ProtoMessage() {}

func (x *GetConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionsResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{1}
}

func (x *GetConnectionsResponse) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type GetConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetConnectionRequest) Reset() {
	*x = GetConnectionRequest{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionRequest) ProtoMessage() {}

func (x *GetConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{2}
}

func (x *GetConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *GetConnectionResponse) Reset() {
	*x = GetConnectionResponse{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionResponse) ProtoMessage() {}

func (x *GetConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionResponse.ProtoReflect.Descriptor instead.
func (*GetConnectionResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{3}
}

func (x *GetConnectionResponse) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type CreateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The friendly name of the connection
	Name             string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ConnectionConfig *ConnectionConfig `protobuf:"bytes,3,opt,name=connection_config,json=connectionConfig,proto3" json:"connection_config,omitempty"`
}

func (x *CreateConnectionRequest) Reset() {
	*x = CreateConnectionRequest{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionRequest) ProtoMessage() {}

func (x *CreateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{4}
}

func (x *CreateConnectionRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateConnectionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateConnectionRequest) GetConnectionConfig() *ConnectionConfig {
	if x != nil {
		return x.ConnectionConfig
	}
	return nil
}

type CreateConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *CreateConnectionResponse) Reset() {
	*x = CreateConnectionResponse{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionResponse) ProtoMessage() {}

func (x *CreateConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionResponse.ProtoReflect.Descriptor instead.
func (*CreateConnectionResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{5}
}

func (x *CreateConnectionResponse) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type UpdateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ConnectionConfig *ConnectionConfig `protobuf:"bytes,3,opt,name=connection_config,json=connectionConfig,proto3" json:"connection_config,omitempty"`
}

func (x *UpdateConnectionRequest) Reset() {
	*x = UpdateConnectionRequest{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectionRequest) ProtoMessage() {}

func (x *UpdateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateConnectionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateConnectionRequest) GetConnectionConfig() *ConnectionConfig {
	if x != nil {
		return x.ConnectionConfig
	}
	return nil
}

type UpdateConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *UpdateConnectionResponse) Reset() {
	*x = UpdateConnectionResponse{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectionResponse) ProtoMessage() {}

func (x *UpdateConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectionResponse.ProtoReflect.Descriptor instead.
func (*UpdateConnectionResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateConnectionResponse) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type DeleteConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteConnectionRequest) Reset() {
	*x = DeleteConnectionRequest{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectionRequest) ProtoMessage() {}

func (x *DeleteConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteConnectionResponse) Reset() {
	*x = DeleteConnectionResponse{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectionResponse) ProtoMessage() {}

func (x *DeleteConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectionResponse.ProtoReflect.Descriptor instead.
func (*DeleteConnectionResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{9}
}

type CheckConnectionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionConfig *ConnectionConfig `protobuf:"bytes,1,opt,name=connection_config,json=connectionConfig,proto3" json:"connection_config,omitempty"`
}

func (x *CheckConnectionConfigRequest) Reset() {
	*x = CheckConnectionConfigRequest{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckConnectionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConnectionConfigRequest) ProtoMessage() {}

func (x *CheckConnectionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConnectionConfigRequest.ProtoReflect.Descriptor instead.
func (*CheckConnectionConfigRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{10}
}

func (x *CheckConnectionConfigRequest) GetConnectionConfig() *ConnectionConfig {
	if x != nil {
		return x.ConnectionConfig
	}
	return nil
}

type CheckConnectionConfigByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connection id to validate
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CheckConnectionConfigByIdRequest) Reset() {
	*x = CheckConnectionConfigByIdRequest{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckConnectionConfigByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConnectionConfigByIdRequest) ProtoMessage() {}

func (x *CheckConnectionConfigByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConnectionConfigByIdRequest.ProtoReflect.Descriptor instead.
func (*CheckConnectionConfigByIdRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{11}
}

func (x *CheckConnectionConfigByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CheckConnectionConfigByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the API was able to ping the connection
	IsConnected bool `protobuf:"varint,1,opt,name=is_connected,json=isConnected,proto3" json:"is_connected,omitempty"`
	// This is the error that was received if the API was unable to connect
	ConnectionError *string `protobuf:"bytes,2,opt,name=connection_error,json=connectionError,proto3,oneof" json:"connection_error,omitempty"`
	// The privileges the role has to the connection
	Privileges []*ConnectionRolePrivilege `protobuf:"bytes,3,rep,name=privileges,proto3" json:"privileges,omitempty"`
}

func (x *CheckConnectionConfigByIdResponse) Reset() {
	*x = CheckConnectionConfigByIdResponse{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckConnectionConfigByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConnectionConfigByIdResponse) ProtoMessage() {}

func (x *CheckConnectionConfigByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConnectionConfigByIdResponse.ProtoReflect.Descriptor instead.
func (*CheckConnectionConfigByIdResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{12}
}

func (x *CheckConnectionConfigByIdResponse) GetIsConnected() bool {
	if x != nil {
		return x.IsConnected
	}
	return false
}

func (x *CheckConnectionConfigByIdResponse) GetConnectionError() string {
	if x != nil && x.ConnectionError != nil {
		return *x.ConnectionError
	}
	return ""
}

func (x *CheckConnectionConfigByIdResponse) GetPrivileges() []*ConnectionRolePrivilege {
	if x != nil {
		return x.Privileges
	}
	return nil
}

type CheckConnectionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the API was able to ping the connection
	IsConnected bool `protobuf:"varint,1,opt,name=is_connected,json=isConnected,proto3" json:"is_connected,omitempty"`
	// This is the error that was received if the API was unable to connect
	ConnectionError *string                    `protobuf:"bytes,2,opt,name=connection_error,json=connectionError,proto3,oneof" json:"connection_error,omitempty"`
	Privileges      []*ConnectionRolePrivilege `protobuf:"bytes,3,rep,name=privileges,proto3" json:"privileges,omitempty"`
}

func (x *CheckConnectionConfigResponse) Reset() {
	*x = CheckConnectionConfigResponse{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckConnectionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConnectionConfigResponse) ProtoMessage() {}

func (x *CheckConnectionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConnectionConfigResponse.ProtoReflect.Descriptor instead.
func (*CheckConnectionConfigResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{13}
}

func (x *CheckConnectionConfigResponse) GetIsConnected() bool {
	if x != nil {
		return x.IsConnected
	}
	return false
}

func (x *CheckConnectionConfigResponse) GetConnectionError() string {
	if x != nil && x.ConnectionError != nil {
		return *x.ConnectionError
	}
	return ""
}

func (x *CheckConnectionConfigResponse) GetPrivileges() []*ConnectionRolePrivilege {
	if x != nil {
		return x.Privileges
	}
	return nil
}

type ConnectionRolePrivilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The role that was given the permissions
	Grantee string `protobuf:"bytes,1,opt,name=grantee,proto3" json:"grantee,omitempty"`
	// The database schema. Ex: public
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// The name of the table in the schema
	Table string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// The privileges given to that role
	PrivilegeType []string `protobuf:"bytes,4,rep,name=privilege_type,json=privilegeType,proto3" json:"privilege_type,omitempty"`
}

func (x *ConnectionRolePrivilege) Reset() {
	*x = ConnectionRolePrivilege{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionRolePrivilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRolePrivilege) ProtoMessage() {}

func (x *ConnectionRolePrivilege) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRolePrivilege.ProtoReflect.Descriptor instead.
func (*ConnectionRolePrivilege) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{14}
}

func (x *ConnectionRolePrivilege) GetGrantee() string {
	if x != nil {
		return x.Grantee
	}
	return ""
}

func (x *ConnectionRolePrivilege) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *ConnectionRolePrivilege) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ConnectionRolePrivilege) GetPrivilegeType() []string {
	if x != nil {
		return x.PrivilegeType
	}
	return nil
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the connection
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The unique, friendly name of the connection
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Contains the connection configuration and connection type
	ConnectionConfig *ConnectionConfig `protobuf:"bytes,3,opt,name=connection_config,json=connectionConfig,proto3" json:"connection_config,omitempty"`
	// The user id of the user that created the connection
	CreatedByUserId string `protobuf:"bytes,4,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	// When the connection was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Who last updated the connection
	UpdatedByUserId string `protobuf:"bytes,6,opt,name=updated_by_user_id,json=updatedByUserId,proto3" json:"updated_by_user_id,omitempty"`
	// When the connection was last updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The unique account that owns this connection
	AccountId string `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{15}
}

func (x *Connection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Connection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connection) GetConnectionConfig() *ConnectionConfig {
	if x != nil {
		return x.ConnectionConfig
	}
	return nil
}

func (x *Connection) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *Connection) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Connection) GetUpdatedByUserId() string {
	if x != nil {
		return x.UpdatedByUserId
	}
	return ""
}

func (x *Connection) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Connection) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Configuration for all of the supported Neosync connection types
type ConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*ConnectionConfig_PgConfig
	//	*ConnectionConfig_AwsS3Config
	//	*ConnectionConfig_MysqlConfig
	//	*ConnectionConfig_LocalDirConfig
	//	*ConnectionConfig_OpenaiConfig
	//	*ConnectionConfig_MongoConfig
	//	*ConnectionConfig_GcpCloudstorageConfig
	//	*ConnectionConfig_DynamodbConfig
	//	*ConnectionConfig_MssqlConfig
	Config isConnectionConfig_Config `protobuf_oneof:"config"`
}

func (x *ConnectionConfig) Reset() {
	*x = ConnectionConfig{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionConfig) ProtoMessage() {}

func (x *ConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionConfig.ProtoReflect.Descriptor instead.
func (*ConnectionConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{16}
}

func (m *ConnectionConfig) GetConfig() isConnectionConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ConnectionConfig) GetPgConfig() *PostgresConnectionConfig {
	if x, ok := x.GetConfig().(*ConnectionConfig_PgConfig); ok {
		return x.PgConfig
	}
	return nil
}

func (x *ConnectionConfig) GetAwsS3Config() *AwsS3ConnectionConfig {
	if x, ok := x.GetConfig().(*ConnectionConfig_AwsS3Config); ok {
		return x.AwsS3Config
	}
	return nil
}

func (x *ConnectionConfig) GetMysqlConfig() *MysqlConnectionConfig {
	if x, ok := x.GetConfig().(*ConnectionConfig_MysqlConfig); ok {
		return x.MysqlConfig
	}
	return nil
}

func (x *ConnectionConfig) GetLocalDirConfig() *LocalDirectoryConnectionConfig {
	if x, ok := x.GetConfig().(*ConnectionConfig_LocalDirConfig); ok {
		return x.LocalDirConfig
	}
	return nil
}

func (x *ConnectionConfig) GetOpenaiConfig() *OpenAiConnectionConfig {
	if x, ok := x.GetConfig().(*ConnectionConfig_OpenaiConfig); ok {
		return x.OpenaiConfig
	}
	return nil
}

func (x *ConnectionConfig) GetMongoConfig() *MongoConnectionConfig {
	if x, ok := x.GetConfig().(*ConnectionConfig_MongoConfig); ok {
		return x.MongoConfig
	}
	return nil
}

func (x *ConnectionConfig) GetGcpCloudstorageConfig() *GcpCloudStorageConnectionConfig {
	if x, ok := x.GetConfig().(*ConnectionConfig_GcpCloudstorageConfig); ok {
		return x.GcpCloudstorageConfig
	}
	return nil
}

func (x *ConnectionConfig) GetDynamodbConfig() *DynamoDBConnectionConfig {
	if x, ok := x.GetConfig().(*ConnectionConfig_DynamodbConfig); ok {
		return x.DynamodbConfig
	}
	return nil
}

func (x *ConnectionConfig) GetMssqlConfig() *MssqlConnectionConfig {
	if x, ok := x.GetConfig().(*ConnectionConfig_MssqlConfig); ok {
		return x.MssqlConfig
	}
	return nil
}

type isConnectionConfig_Config interface {
	isConnectionConfig_Config()
}

type ConnectionConfig_PgConfig struct {
	// Configures a PostgreSQL connection
	PgConfig *PostgresConnectionConfig `protobuf:"bytes,1,opt,name=pg_config,json=pgConfig,proto3,oneof"`
}

type ConnectionConfig_AwsS3Config struct {
	// Configures an AWS S3 Connection
	AwsS3Config *AwsS3ConnectionConfig `protobuf:"bytes,2,opt,name=aws_s3_config,json=awsS3Config,proto3,oneof"`
}

type ConnectionConfig_MysqlConfig struct {
	// Configures a MySQL connection
	MysqlConfig *MysqlConnectionConfig `protobuf:"bytes,3,opt,name=mysql_config,json=mysqlConfig,proto3,oneof"`
}

type ConnectionConfig_LocalDirConfig struct {
	// Configures a connection to a directory available on the local file system
	LocalDirConfig *LocalDirectoryConnectionConfig `protobuf:"bytes,4,opt,name=local_dir_config,json=localDirConfig,proto3,oneof"`
}

type ConnectionConfig_OpenaiConfig struct {
	// Connection config for an OpenAI (or compatible) Connection
	OpenaiConfig *OpenAiConnectionConfig `protobuf:"bytes,5,opt,name=openai_config,json=openaiConfig,proto3,oneof"`
}

type ConnectionConfig_MongoConfig struct {
	// Configures a MongoDB Connection
	MongoConfig *MongoConnectionConfig `protobuf:"bytes,6,opt,name=mongo_config,json=mongoConfig,proto3,oneof"`
}

type ConnectionConfig_GcpCloudstorageConfig struct {
	// Configures a GCP Cloud Storage Connection
	GcpCloudstorageConfig *GcpCloudStorageConnectionConfig `protobuf:"bytes,7,opt,name=gcp_cloudstorage_config,json=gcpCloudstorageConfig,proto3,oneof"`
}

type ConnectionConfig_DynamodbConfig struct {
	// Configures a DynamoDB Connection
	DynamodbConfig *DynamoDBConnectionConfig `protobuf:"bytes,8,opt,name=dynamodb_config,json=dynamodbConfig,proto3,oneof"`
}

type ConnectionConfig_MssqlConfig struct {
	// Configures a Microsoft SQL Server (mssql) Connection
	MssqlConfig *MssqlConnectionConfig `protobuf:"bytes,9,opt,name=mssql_config,json=mssqlConfig,proto3,oneof"`
}

func (*ConnectionConfig_PgConfig) isConnectionConfig_Config() {}

func (*ConnectionConfig_AwsS3Config) isConnectionConfig_Config() {}

func (*ConnectionConfig_MysqlConfig) isConnectionConfig_Config() {}

func (*ConnectionConfig_LocalDirConfig) isConnectionConfig_Config() {}

func (*ConnectionConfig_OpenaiConfig) isConnectionConfig_Config() {}

func (*ConnectionConfig_MongoConfig) isConnectionConfig_Config() {}

func (*ConnectionConfig_GcpCloudstorageConfig) isConnectionConfig_Config() {}

func (*ConnectionConfig_DynamodbConfig) isConnectionConfig_Config() {}

func (*ConnectionConfig_MssqlConfig) isConnectionConfig_Config() {}

// Configuration for a Mssql Connection
type MssqlConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// May provide a raw string url or in the future other methods of connection
	//
	// Types that are assignable to ConnectionConfig:
	//
	//	*MssqlConnectionConfig_Url
	ConnectionConfig  isMssqlConnectionConfig_ConnectionConfig `protobuf_oneof:"connection_config"`
	ConnectionOptions *SqlConnectionOptions                    `protobuf:"bytes,2,opt,name=connection_options,json=connectionOptions,proto3" json:"connection_options,omitempty"`
	// Provide tunnel configuration that can be used to access a postgres connection that is not publicly accessible to the internet
	Tunnel *SSHTunnel `protobuf:"bytes,3,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	// Provide client-side TLS Certificates
	ClientTls *ClientTlsConfig `protobuf:"bytes,4,opt,name=client_tls,json=clientTls,proto3" json:"client_tls,omitempty"`
}

func (x *MssqlConnectionConfig) Reset() {
	*x = MssqlConnectionConfig{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MssqlConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MssqlConnectionConfig) ProtoMessage() {}

func (x *MssqlConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MssqlConnectionConfig.ProtoReflect.Descriptor instead.
func (*MssqlConnectionConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{17}
}

func (m *MssqlConnectionConfig) GetConnectionConfig() isMssqlConnectionConfig_ConnectionConfig {
	if m != nil {
		return m.ConnectionConfig
	}
	return nil
}

func (x *MssqlConnectionConfig) GetUrl() string {
	if x, ok := x.GetConnectionConfig().(*MssqlConnectionConfig_Url); ok {
		return x.Url
	}
	return ""
}

func (x *MssqlConnectionConfig) GetConnectionOptions() *SqlConnectionOptions {
	if x != nil {
		return x.ConnectionOptions
	}
	return nil
}

func (x *MssqlConnectionConfig) GetTunnel() *SSHTunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *MssqlConnectionConfig) GetClientTls() *ClientTlsConfig {
	if x != nil {
		return x.ClientTls
	}
	return nil
}

type isMssqlConnectionConfig_ConnectionConfig interface {
	isMssqlConnectionConfig_ConnectionConfig()
}

type MssqlConnectionConfig_Url struct {
	// The URL with sqlserver scheme.
	Url string `protobuf:"bytes,1,opt,name=url,proto3,oneof"`
}

func (*MssqlConnectionConfig_Url) isMssqlConnectionConfig_ConnectionConfig() {}

// Configuration for a DynaomDB Connection
type DynamoDBConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional credentials that may be provided and will be used to connect to the DynamoDB Instance.
	// If self-hosting, this may be provided by the environment in lieu of specifying these here
	Credentials *AwsS3Credentials `protobuf:"bytes,1,opt,name=credentials,proto3,oneof" json:"credentials,omitempty"`
	// Optionally specify the region that the dynamodb instance lives in if not provided by the environment.
	Region *string `protobuf:"bytes,2,opt,name=region,proto3,oneof" json:"region,omitempty"`
	// Optionally specify the endpoint that will be used by the AWS SDK.
	Endpoint *string `protobuf:"bytes,3,opt,name=endpoint,proto3,oneof" json:"endpoint,omitempty"`
}

func (x *DynamoDBConnectionConfig) Reset() {
	*x = DynamoDBConnectionConfig{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamoDBConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDBConnectionConfig) ProtoMessage() {}

func (x *DynamoDBConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDBConnectionConfig.ProtoReflect.Descriptor instead.
func (*DynamoDBConnectionConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{18}
}

func (x *DynamoDBConnectionConfig) GetCredentials() *AwsS3Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *DynamoDBConnectionConfig) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *DynamoDBConnectionConfig) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

type MongoConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// May provide either a raw string url, or a structured version
	//
	// Types that are assignable to ConnectionConfig:
	//
	//	*MongoConnectionConfig_Url
	ConnectionConfig isMongoConnectionConfig_ConnectionConfig `protobuf_oneof:"connection_config"`
	// Provide tunnel configuration that can be used to access a connection that is not publicly accessible to the internet
	Tunnel *SSHTunnel `protobuf:"bytes,2,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	// Provide client-side TLS Certificates
	ClientTls *ClientTlsConfig `protobuf:"bytes,3,opt,name=client_tls,json=clientTls,proto3" json:"client_tls,omitempty"`
}

func (x *MongoConnectionConfig) Reset() {
	*x = MongoConnectionConfig{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongoConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoConnectionConfig) ProtoMessage() {}

func (x *MongoConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoConnectionConfig.ProtoReflect.Descriptor instead.
func (*MongoConnectionConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{19}
}

func (m *MongoConnectionConfig) GetConnectionConfig() isMongoConnectionConfig_ConnectionConfig {
	if m != nil {
		return m.ConnectionConfig
	}
	return nil
}

func (x *MongoConnectionConfig) GetUrl() string {
	if x, ok := x.GetConnectionConfig().(*MongoConnectionConfig_Url); ok {
		return x.Url
	}
	return ""
}

func (x *MongoConnectionConfig) GetTunnel() *SSHTunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *MongoConnectionConfig) GetClientTls() *ClientTlsConfig {
	if x != nil {
		return x.ClientTls
	}
	return nil
}

type isMongoConnectionConfig_ConnectionConfig interface {
	isMongoConnectionConfig_ConnectionConfig()
}

type MongoConnectionConfig_Url struct {
	// The full mongo connection url
	Url string `protobuf:"bytes,1,opt,name=url,proto3,oneof"`
}

func (*MongoConnectionConfig_Url) isMongoConnectionConfig_ConnectionConfig() {}

// Configures a connection to OpenAI or OpenAI compatible API.
type OpenAiConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OpenAI Api Key
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// OpenAI URL
	ApiUrl string `protobuf:"bytes,2,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty"`
}

func (x *OpenAiConnectionConfig) Reset() {
	*x = OpenAiConnectionConfig{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAiConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAiConnectionConfig) ProtoMessage() {}

func (x *OpenAiConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAiConnectionConfig.ProtoReflect.Descriptor instead.
func (*OpenAiConnectionConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{20}
}

func (x *OpenAiConnectionConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *OpenAiConnectionConfig) GetApiUrl() string {
	if x != nil {
		return x.ApiUrl
	}
	return ""
}

// Configures a connection to a directory available on the local file system
type LocalDirectoryConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The absolute path to a directory that is available on the local file system to the API and Worker nodes
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *LocalDirectoryConnectionConfig) Reset() {
	*x = LocalDirectoryConnectionConfig{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalDirectoryConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDirectoryConnectionConfig) ProtoMessage() {}

func (x *LocalDirectoryConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDirectoryConnectionConfig.ProtoReflect.Descriptor instead.
func (*LocalDirectoryConnectionConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{21}
}

func (x *LocalDirectoryConnectionConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type PostgresConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// May provide either a raw string url, or a structured version
	//
	// Types that are assignable to ConnectionConfig:
	//
	//	*PostgresConnectionConfig_Url
	//	*PostgresConnectionConfig_Connection
	ConnectionConfig isPostgresConnectionConfig_ConnectionConfig `protobuf_oneof:"connection_config"`
	// Provide tunnel configuration that can be used to access a postgres connection that is not publicly accessible to the internet
	Tunnel            *SSHTunnel            `protobuf:"bytes,3,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	ConnectionOptions *SqlConnectionOptions `protobuf:"bytes,4,opt,name=connection_options,json=connectionOptions,proto3" json:"connection_options,omitempty"`
	// Provide client-side TLS Certificates
	ClientTls *ClientTlsConfig `protobuf:"bytes,5,opt,name=client_tls,json=clientTls,proto3" json:"client_tls,omitempty"`
}

func (x *PostgresConnectionConfig) Reset() {
	*x = PostgresConnectionConfig{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresConnectionConfig) ProtoMessage() {}

func (x *PostgresConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresConnectionConfig.ProtoReflect.Descriptor instead.
func (*PostgresConnectionConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{22}
}

func (m *PostgresConnectionConfig) GetConnectionConfig() isPostgresConnectionConfig_ConnectionConfig {
	if m != nil {
		return m.ConnectionConfig
	}
	return nil
}

func (x *PostgresConnectionConfig) GetUrl() string {
	if x, ok := x.GetConnectionConfig().(*PostgresConnectionConfig_Url); ok {
		return x.Url
	}
	return ""
}

func (x *PostgresConnectionConfig) GetConnection() *PostgresConnection {
	if x, ok := x.GetConnectionConfig().(*PostgresConnectionConfig_Connection); ok {
		return x.Connection
	}
	return nil
}

func (x *PostgresConnectionConfig) GetTunnel() *SSHTunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *PostgresConnectionConfig) GetConnectionOptions() *SqlConnectionOptions {
	if x != nil {
		return x.ConnectionOptions
	}
	return nil
}

func (x *PostgresConnectionConfig) GetClientTls() *ClientTlsConfig {
	if x != nil {
		return x.ClientTls
	}
	return nil
}

type isPostgresConnectionConfig_ConnectionConfig interface {
	isPostgresConnectionConfig_ConnectionConfig()
}

type PostgresConnectionConfig_Url struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3,oneof"`
}

type PostgresConnectionConfig_Connection struct {
	Connection *PostgresConnection `protobuf:"bytes,2,opt,name=connection,proto3,oneof"`
}

func (*PostgresConnectionConfig_Url) isPostgresConnectionConfig_ConnectionConfig() {}

func (*PostgresConnectionConfig_Connection) isPostgresConnectionConfig_ConnectionConfig() {}

// Config for providing client-side TLS certificates
type ClientTlsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root Certificate in PEM Format
	RootCert *string `protobuf:"bytes,1,opt,name=root_cert,json=rootCert,proto3,oneof" json:"root_cert,omitempty"`
	// Client Certificate in PEM format. Must also provide key.
	ClientCert *string `protobuf:"bytes,2,opt,name=client_cert,json=clientCert,proto3,oneof" json:"client_cert,omitempty"`
	// Client Key in PEM format. Must also provide cert.
	ClientKey *string `protobuf:"bytes,3,opt,name=client_key,json=clientKey,proto3,oneof" json:"client_key,omitempty"`
	// Provide the expected server name. Depending on the driver or encryption mode, this may be required
	// In order to fully validate the server certificate.
	ServerName *string `protobuf:"bytes,4,opt,name=server_name,json=serverName,proto3,oneof" json:"server_name,omitempty"`
}

func (x *ClientTlsConfig) Reset() {
	*x = ClientTlsConfig{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientTlsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientTlsConfig) ProtoMessage() {}

func (x *ClientTlsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientTlsConfig.ProtoReflect.Descriptor instead.
func (*ClientTlsConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{23}
}

func (x *ClientTlsConfig) GetRootCert() string {
	if x != nil && x.RootCert != nil {
		return *x.RootCert
	}
	return ""
}

func (x *ClientTlsConfig) GetClientCert() string {
	if x != nil && x.ClientCert != nil {
		return *x.ClientCert
	}
	return ""
}

func (x *ClientTlsConfig) GetClientKey() string {
	if x != nil && x.ClientKey != nil {
		return *x.ClientKey
	}
	return ""
}

func (x *ClientTlsConfig) GetServerName() string {
	if x != nil && x.ServerName != nil {
		return *x.ServerName
	}
	return ""
}

type SqlConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sets the maximum number of open connections
	// If this value is greater than 0, but less than the max_idle_connections, then max_idle_connections will be reduced to match the max_connection_limit
	// If this value is less than or equal to 0, then there is no limit on the number of open connections. If not provided, the default is 0 (unlimited).
	MaxConnectionLimit *int32 `protobuf:"varint,1,opt,name=max_connection_limit,json=maxConnectionLimit,proto3,oneof" json:"max_connection_limit,omitempty"`
	// Sets the maximum number of connections in the idle connection pool.
	// This value will be reduced at runtime to match the max_connection_limit if max_connection_limit is greater than 0 but less than this value.
	// If this value is less than or equal to 0, then no idle connections are maintained. If not provided, the default is 2, which may change in a future release.
	MaxIdleConnections *int32 `protobuf:"varint,2,opt,name=max_idle_connections,json=maxIdleConnections,proto3,oneof" json:"max_idle_connections,omitempty"`
	// Sets the maximum amount of time a connection may be idle.
	// Expired connections may be closed lazily before reuse.
	// if this value is less than or equal to 0, connections are not closed due to a connection's idle time.
	// This value is parsed as a Go duration string (ex: 1s, 1m, 500ms)
	MaxIdleDuration *string `protobuf:"bytes,3,opt,name=max_idle_duration,json=maxIdleDuration,proto3,oneof" json:"max_idle_duration,omitempty"`
	// Sets the maximum amount of time a connection may be reused.
	// Expired connections may be closed lazily before reuse.
	// If this value is less than or equal to 0, connections may not be closed due to a connection's age.
	// This value is parsed as a Go duration string (ex: 1s, 1m, 500ms)
	MaxOpenDuration *string `protobuf:"bytes,4,opt,name=max_open_duration,json=maxOpenDuration,proto3,oneof" json:"max_open_duration,omitempty"`
}

func (x *SqlConnectionOptions) Reset() {
	*x = SqlConnectionOptions{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlConnectionOptions) ProtoMessage() {}

func (x *SqlConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlConnectionOptions.ProtoReflect.Descriptor instead.
func (*SqlConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{24}
}

func (x *SqlConnectionOptions) GetMaxConnectionLimit() int32 {
	if x != nil && x.MaxConnectionLimit != nil {
		return *x.MaxConnectionLimit
	}
	return 0
}

func (x *SqlConnectionOptions) GetMaxIdleConnections() int32 {
	if x != nil && x.MaxIdleConnections != nil {
		return *x.MaxIdleConnections
	}
	return 0
}

func (x *SqlConnectionOptions) GetMaxIdleDuration() string {
	if x != nil && x.MaxIdleDuration != nil {
		return *x.MaxIdleDuration
	}
	return ""
}

func (x *SqlConnectionOptions) GetMaxOpenDuration() string {
	if x != nil && x.MaxOpenDuration != nil {
		return *x.MaxOpenDuration
	}
	return ""
}

type SSHTunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host of the SSH server
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The port of the SSH server, typically 22
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The user that will be used to authenticate
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Optionally provide the public key of the known host of the SSH tunnel that we are connecting to.
	// If this is not provided, the server will blindly connect to the host with the given credentials.
	// This is not recommended for production use!
	KnownHostPublicKey *string `protobuf:"bytes,4,opt,name=known_host_public_key,json=knownHostPublicKey,proto3,oneof" json:"known_host_public_key,omitempty"`
	// Provide the authentication required to successfully connect to the SSH server for tunneling
	Authentication *SSHAuthentication `protobuf:"bytes,5,opt,name=authentication,proto3" json:"authentication,omitempty"`
}

func (x *SSHTunnel) Reset() {
	*x = SSHTunnel{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSHTunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHTunnel) ProtoMessage() {}

func (x *SSHTunnel) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHTunnel.ProtoReflect.Descriptor instead.
func (*SSHTunnel) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{25}
}

func (x *SSHTunnel) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SSHTunnel) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SSHTunnel) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SSHTunnel) GetKnownHostPublicKey() string {
	if x != nil && x.KnownHostPublicKey != nil {
		return *x.KnownHostPublicKey
	}
	return ""
}

func (x *SSHTunnel) GetAuthentication() *SSHAuthentication {
	if x != nil {
		return x.Authentication
	}
	return nil
}

// SSH Authentication
type SSHAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AuthConfig:
	//
	//	*SSHAuthentication_Passphrase
	//	*SSHAuthentication_PrivateKey
	AuthConfig isSSHAuthentication_AuthConfig `protobuf_oneof:"auth_config"`
}

func (x *SSHAuthentication) Reset() {
	*x = SSHAuthentication{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSHAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHAuthentication) ProtoMessage() {}

func (x *SSHAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHAuthentication.ProtoReflect.Descriptor instead.
func (*SSHAuthentication) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{26}
}

func (m *SSHAuthentication) GetAuthConfig() isSSHAuthentication_AuthConfig {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (x *SSHAuthentication) GetPassphrase() *SSHPassphrase {
	if x, ok := x.GetAuthConfig().(*SSHAuthentication_Passphrase); ok {
		return x.Passphrase
	}
	return nil
}

func (x *SSHAuthentication) GetPrivateKey() *SSHPrivateKey {
	if x, ok := x.GetAuthConfig().(*SSHAuthentication_PrivateKey); ok {
		return x.PrivateKey
	}
	return nil
}

type isSSHAuthentication_AuthConfig interface {
	isSSHAuthentication_AuthConfig()
}

type SSHAuthentication_Passphrase struct {
	Passphrase *SSHPassphrase `protobuf:"bytes,1,opt,name=passphrase,proto3,oneof"`
}

type SSHAuthentication_PrivateKey struct {
	PrivateKey *SSHPrivateKey `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3,oneof"`
}

func (*SSHAuthentication_Passphrase) isSSHAuthentication_AuthConfig() {}

func (*SSHAuthentication_PrivateKey) isSSHAuthentication_AuthConfig() {}

// Contains the configuration needed to retrieve the SSH passphrase for the tunnel
type SSHPassphrase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The password to be used to connect to the SSH server
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"` // eventually we can expand this to allow pulling from other sources.
}

func (x *SSHPassphrase) Reset() {
	*x = SSHPassphrase{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSHPassphrase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHPassphrase) ProtoMessage() {}

func (x *SSHPassphrase) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHPassphrase.ProtoReflect.Descriptor instead.
func (*SSHPassphrase) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{27}
}

func (x *SSHPassphrase) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Contains the configuration needed to retrieve the SSH private key for the tunnel
type SSHPrivateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The private key in PEM format.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// If the private key is encrypted, this value should decrypt it.
	Passphrase *string `protobuf:"bytes,2,opt,name=passphrase,proto3,oneof" json:"passphrase,omitempty"`
}

func (x *SSHPrivateKey) Reset() {
	*x = SSHPrivateKey{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SSHPrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHPrivateKey) ProtoMessage() {}

func (x *SSHPrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHPrivateKey.ProtoReflect.Descriptor instead.
func (*SSHPrivateKey) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{28}
}

func (x *SSHPrivateKey) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SSHPrivateKey) GetPassphrase() string {
	if x != nil && x.Passphrase != nil {
		return *x.Passphrase
	}
	return ""
}

type PostgresConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host    string  `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port    int32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Name    string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	User    string  `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Pass    string  `protobuf:"bytes,5,opt,name=pass,proto3" json:"pass,omitempty"`
	SslMode *string `protobuf:"bytes,6,opt,name=ssl_mode,json=sslMode,proto3,oneof" json:"ssl_mode,omitempty"`
}

func (x *PostgresConnection) Reset() {
	*x = PostgresConnection{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresConnection) ProtoMessage() {}

func (x *PostgresConnection) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresConnection.ProtoReflect.Descriptor instead.
func (*PostgresConnection) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{29}
}

func (x *PostgresConnection) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *PostgresConnection) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PostgresConnection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostgresConnection) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PostgresConnection) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *PostgresConnection) GetSslMode() string {
	if x != nil && x.SslMode != nil {
		return *x.SslMode
	}
	return ""
}

type MysqlConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Pass     string `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Host     string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	Port     int32  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Name     string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MysqlConnection) Reset() {
	*x = MysqlConnection{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlConnection) ProtoMessage() {}

func (x *MysqlConnection) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlConnection.ProtoReflect.Descriptor instead.
func (*MysqlConnection) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{30}
}

func (x *MysqlConnection) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MysqlConnection) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *MysqlConnection) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *MysqlConnection) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MysqlConnection) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MysqlConnection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MysqlConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// May provide either a raw string url, or a structured version
	//
	// Types that are assignable to ConnectionConfig:
	//
	//	*MysqlConnectionConfig_Url
	//	*MysqlConnectionConfig_Connection
	ConnectionConfig isMysqlConnectionConfig_ConnectionConfig `protobuf_oneof:"connection_config"`
	// Provide tunnel configuration that can be used to access a postgres connection that is not publicly accessible to the internet
	Tunnel            *SSHTunnel            `protobuf:"bytes,3,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	ConnectionOptions *SqlConnectionOptions `protobuf:"bytes,4,opt,name=connection_options,json=connectionOptions,proto3" json:"connection_options,omitempty"`
	// Provide client-side TLS Certificates
	ClientTls *ClientTlsConfig `protobuf:"bytes,5,opt,name=client_tls,json=clientTls,proto3" json:"client_tls,omitempty"`
}

func (x *MysqlConnectionConfig) Reset() {
	*x = MysqlConnectionConfig{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlConnectionConfig) ProtoMessage() {}

func (x *MysqlConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlConnectionConfig.ProtoReflect.Descriptor instead.
func (*MysqlConnectionConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{31}
}

func (m *MysqlConnectionConfig) GetConnectionConfig() isMysqlConnectionConfig_ConnectionConfig {
	if m != nil {
		return m.ConnectionConfig
	}
	return nil
}

func (x *MysqlConnectionConfig) GetUrl() string {
	if x, ok := x.GetConnectionConfig().(*MysqlConnectionConfig_Url); ok {
		return x.Url
	}
	return ""
}

func (x *MysqlConnectionConfig) GetConnection() *MysqlConnection {
	if x, ok := x.GetConnectionConfig().(*MysqlConnectionConfig_Connection); ok {
		return x.Connection
	}
	return nil
}

func (x *MysqlConnectionConfig) GetTunnel() *SSHTunnel {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *MysqlConnectionConfig) GetConnectionOptions() *SqlConnectionOptions {
	if x != nil {
		return x.ConnectionOptions
	}
	return nil
}

func (x *MysqlConnectionConfig) GetClientTls() *ClientTlsConfig {
	if x != nil {
		return x.ClientTls
	}
	return nil
}

type isMysqlConnectionConfig_ConnectionConfig interface {
	isMysqlConnectionConfig_ConnectionConfig()
}

type MysqlConnectionConfig_Url struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3,oneof"`
}

type MysqlConnectionConfig_Connection struct {
	Connection *MysqlConnection `protobuf:"bytes,2,opt,name=connection,proto3,oneof"`
}

func (*MysqlConnectionConfig_Url) isMysqlConnectionConfig_ConnectionConfig() {}

func (*MysqlConnectionConfig_Connection) isMysqlConnectionConfig_ConnectionConfig() {}

type AwsS3ConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in mgmt/v1alpha1/connection.proto.
	BucketArn   string            `protobuf:"bytes,1,opt,name=bucket_arn,json=bucketArn,proto3" json:"bucket_arn,omitempty"`
	PathPrefix  *string           `protobuf:"bytes,2,opt,name=path_prefix,json=pathPrefix,proto3,oneof" json:"path_prefix,omitempty"`
	Credentials *AwsS3Credentials `protobuf:"bytes,3,opt,name=credentials,proto3,oneof" json:"credentials,omitempty"`
	Region      *string           `protobuf:"bytes,4,opt,name=region,proto3,oneof" json:"region,omitempty"`
	Endpoint    *string           `protobuf:"bytes,5,opt,name=endpoint,proto3,oneof" json:"endpoint,omitempty"`
	Bucket      string            `protobuf:"bytes,6,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (x *AwsS3ConnectionConfig) Reset() {
	*x = AwsS3ConnectionConfig{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsS3ConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsS3ConnectionConfig) ProtoMessage() {}

func (x *AwsS3ConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsS3ConnectionConfig.ProtoReflect.Descriptor instead.
func (*AwsS3ConnectionConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{32}
}

// Deprecated: Marked as deprecated in mgmt/v1alpha1/connection.proto.
func (x *AwsS3ConnectionConfig) GetBucketArn() string {
	if x != nil {
		return x.BucketArn
	}
	return ""
}

func (x *AwsS3ConnectionConfig) GetPathPrefix() string {
	if x != nil && x.PathPrefix != nil {
		return *x.PathPrefix
	}
	return ""
}

func (x *AwsS3ConnectionConfig) GetCredentials() *AwsS3Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *AwsS3ConnectionConfig) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *AwsS3ConnectionConfig) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *AwsS3ConnectionConfig) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

// S3 Credentials that are used by the worker process.
// Note: this may be optionally provided if the worker that is being hosted has environment credentials to the S3 bucket instead.
type AwsS3Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile         *string `protobuf:"bytes,1,opt,name=profile,proto3,oneof" json:"profile,omitempty"`
	AccessKeyId     *string `protobuf:"bytes,2,opt,name=access_key_id,json=accessKeyId,proto3,oneof" json:"access_key_id,omitempty"`
	SecretAccessKey *string `protobuf:"bytes,3,opt,name=secret_access_key,json=secretAccessKey,proto3,oneof" json:"secret_access_key,omitempty"`
	SessionToken    *string `protobuf:"bytes,4,opt,name=session_token,json=sessionToken,proto3,oneof" json:"session_token,omitempty"`
	FromEc2Role     *bool   `protobuf:"varint,5,opt,name=from_ec2_role,json=fromEc2Role,proto3,oneof" json:"from_ec2_role,omitempty"`
	RoleArn         *string `protobuf:"bytes,6,opt,name=role_arn,json=roleArn,proto3,oneof" json:"role_arn,omitempty"`
	RoleExternalId  *string `protobuf:"bytes,7,opt,name=role_external_id,json=roleExternalId,proto3,oneof" json:"role_external_id,omitempty"`
}

func (x *AwsS3Credentials) Reset() {
	*x = AwsS3Credentials{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsS3Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsS3Credentials) ProtoMessage() {}

func (x *AwsS3Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsS3Credentials.ProtoReflect.Descriptor instead.
func (*AwsS3Credentials) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{33}
}

func (x *AwsS3Credentials) GetProfile() string {
	if x != nil && x.Profile != nil {
		return *x.Profile
	}
	return ""
}

func (x *AwsS3Credentials) GetAccessKeyId() string {
	if x != nil && x.AccessKeyId != nil {
		return *x.AccessKeyId
	}
	return ""
}

func (x *AwsS3Credentials) GetSecretAccessKey() string {
	if x != nil && x.SecretAccessKey != nil {
		return *x.SecretAccessKey
	}
	return ""
}

func (x *AwsS3Credentials) GetSessionToken() string {
	if x != nil && x.SessionToken != nil {
		return *x.SessionToken
	}
	return ""
}

func (x *AwsS3Credentials) GetFromEc2Role() bool {
	if x != nil && x.FromEc2Role != nil {
		return *x.FromEc2Role
	}
	return false
}

func (x *AwsS3Credentials) GetRoleArn() string {
	if x != nil && x.RoleArn != nil {
		return *x.RoleArn
	}
	return ""
}

func (x *AwsS3Credentials) GetRoleExternalId() string {
	if x != nil && x.RoleExternalId != nil {
		return *x.RoleExternalId
	}
	return ""
}

// Configuration for GCP Cloud Storage Buckets
type GcpCloudStorageConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The GCP Cloud Storage bucket that will be accessed.
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The path prefix that will be appended to each file
	PathPrefix *string `protobuf:"bytes,2,opt,name=path_prefix,json=pathPrefix,proto3,oneof" json:"path_prefix,omitempty"`
	// stringified json of the service account credentials file
	ServiceAccountCredentials *string `protobuf:"bytes,3,opt,name=service_account_credentials,json=serviceAccountCredentials,proto3,oneof" json:"service_account_credentials,omitempty"`
}

func (x *GcpCloudStorageConnectionConfig) Reset() {
	*x = GcpCloudStorageConnectionConfig{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpCloudStorageConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpCloudStorageConnectionConfig) ProtoMessage() {}

func (x *GcpCloudStorageConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpCloudStorageConnectionConfig.ProtoReflect.Descriptor instead.
func (*GcpCloudStorageConnectionConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{34}
}

func (x *GcpCloudStorageConnectionConfig) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GcpCloudStorageConnectionConfig) GetPathPrefix() string {
	if x != nil && x.PathPrefix != nil {
		return *x.PathPrefix
	}
	return ""
}

func (x *GcpCloudStorageConnectionConfig) GetServiceAccountCredentials() string {
	if x != nil && x.ServiceAccountCredentials != nil {
		return *x.ServiceAccountCredentials
	}
	return ""
}

type IsConnectionNameAvailableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ConnectionName string `protobuf:"bytes,2,opt,name=connection_name,json=connectionName,proto3" json:"connection_name,omitempty"`
}

func (x *IsConnectionNameAvailableRequest) Reset() {
	*x = IsConnectionNameAvailableRequest{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsConnectionNameAvailableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsConnectionNameAvailableRequest) ProtoMessage() {}

func (x *IsConnectionNameAvailableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsConnectionNameAvailableRequest.ProtoReflect.Descriptor instead.
func (*IsConnectionNameAvailableRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{35}
}

func (x *IsConnectionNameAvailableRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *IsConnectionNameAvailableRequest) GetConnectionName() string {
	if x != nil {
		return x.ConnectionName
	}
	return ""
}

type IsConnectionNameAvailableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAvailable bool `protobuf:"varint,1,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
}

func (x *IsConnectionNameAvailableResponse) Reset() {
	*x = IsConnectionNameAvailableResponse{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsConnectionNameAvailableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsConnectionNameAvailableResponse) ProtoMessage() {}

func (x *IsConnectionNameAvailableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsConnectionNameAvailableResponse.ProtoReflect.Descriptor instead.
func (*IsConnectionNameAvailableResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{36}
}

func (x *IsConnectionNameAvailableResponse) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

type CheckSqlQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connection id that the query will be checked against
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The full query that will be run through a PREPARE statement
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *CheckSqlQueryRequest) Reset() {
	*x = CheckSqlQueryRequest{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckSqlQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSqlQueryRequest) ProtoMessage() {}

func (x *CheckSqlQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSqlQueryRequest.ProtoReflect.Descriptor instead.
func (*CheckSqlQueryRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{37}
}

func (x *CheckSqlQueryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CheckSqlQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type CheckSqlQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query is run through PREPARE. Returns valid if it correctly compiled
	IsValid bool `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	// The error message returned by the sql client if the prepare did not return successfully
	ErorrMessage *string `protobuf:"bytes,2,opt,name=erorr_message,json=erorrMessage,proto3,oneof" json:"erorr_message,omitempty"`
}

func (x *CheckSqlQueryResponse) Reset() {
	*x = CheckSqlQueryResponse{}
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckSqlQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSqlQueryResponse) ProtoMessage() {}

func (x *CheckSqlQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_connection_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSqlQueryResponse.ProtoReflect.Descriptor instead.
func (*CheckSqlQueryResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_connection_proto_rawDescGZIP(), []int{38}
}

func (x *CheckSqlQueryResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckSqlQueryResponse) GetErorrMessage() string {
	if x != nil && x.ErorrMessage != nil {
		return *x.ErorrMessage
	}
	return ""
}

var File_mgmt_v1alpha1_connection_proto protoreflect.FileDescriptor

var file_mgmt_v1alpha1_connection_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x55, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x30, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xba, 0x48, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x55,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x48, 0x16, 0x72, 0x14,
	0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x31,
	0x30, 0x30, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x55, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x33, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6c, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3c,
	0x0a, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd3, 0x01, 0x0a,
	0x21, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xcf, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xed, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2b, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xff, 0x05, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0d,
	0x61, 0x77, 0x73, 0x5f, 0x73, 0x33, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x77, 0x73,
	0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0c, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d,
	0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x69, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0c,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x68, 0x0a, 0x17, 0x67, 0x63, 0x70, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x15, 0x67, 0x63, 0x70, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x52, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x44, 0x42, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0c, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x73, 0x73, 0x71,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x0f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08,
	0x01, 0x22, 0x8c, 0x02, 0x0a, 0x15, 0x4d, 0x73, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x52, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x53, 0x48, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x06, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6c, 0x73, 0x42, 0x1a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01,
	0x22, 0xc8, 0x01, 0x0a, 0x18, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x15,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x53, 0x48, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6c, 0x73, 0x42, 0x1a, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x4a, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x69,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x55,
	0x72, 0x6c, 0x22, 0x3d, 0x0a, 0x1e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0xd4, 0x02, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x53, 0x48, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x52, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6c, 0x73, 0x42, 0x1a, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x09,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x14,
	0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69,
	0x64, 0x6c, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x87, 0x02, 0x0a, 0x09, 0x53, 0x53, 0x48, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1b, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x1a, 0x02, 0x28, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x15, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48,
	0x00, 0x52, 0x12, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xaa, 0x01, 0x0a,
	0x11, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x53, 0x48, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x53, 0x48, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x42, 0x14, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x2e, 0x0a, 0x0d, 0x53, 0x53, 0x48,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x0d, 0x53, 0x53, 0x48,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0xa5, 0x01,
	0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x73, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x73,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x73, 0x6c,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x15, 0x4d, 0x79,
	0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x53, 0x48, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x52, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6c, 0x73, 0x42, 0x1a,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0xbf, 0x02, 0x0a, 0x15, 0x41,
	0x77, 0x73, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa7, 0x03, 0x0a,
	0x10, 0x41, 0x77, 0x73, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x63, 0x32,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x45, 0x63, 0x32, 0x52, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x63, 0x32, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72,
	0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x1f, 0x47, 0x63, 0x70, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x20, 0x49, 0x73, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba,
	0x48, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d,
	0x7b, 0x33, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x21, 0x49, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x4f, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x22, 0x6e, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x6f, 0x72, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x65, 0x72, 0x6f, 0x72, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x6f, 0x72, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0xe1, 0x07, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x19,
	0x49, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74,
	0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x2f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x71,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xcb, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x75, 0x63, 0x6c, 0x65,
	0x75, 0x73, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6e, 0x65, 0x6f, 0x73, 0x79, 0x6e, 0x63, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x6d, 0x67, 0x6d, 0x74, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xa2, 0x02, 0x03, 0x4d, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x4d, 0x67, 0x6d, 0x74, 0x2e, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x0d, 0x4d, 0x67, 0x6d, 0x74, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x19, 0x4d, 0x67, 0x6d, 0x74, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0e, 0x4d, 0x67, 0x6d, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mgmt_v1alpha1_connection_proto_rawDescOnce sync.Once
	file_mgmt_v1alpha1_connection_proto_rawDescData = file_mgmt_v1alpha1_connection_proto_rawDesc
)

func file_mgmt_v1alpha1_connection_proto_rawDescGZIP() []byte {
	file_mgmt_v1alpha1_connection_proto_rawDescOnce.Do(func() {
		file_mgmt_v1alpha1_connection_proto_rawDescData = protoimpl.X.CompressGZIP(file_mgmt_v1alpha1_connection_proto_rawDescData)
	})
	return file_mgmt_v1alpha1_connection_proto_rawDescData
}

var file_mgmt_v1alpha1_connection_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_mgmt_v1alpha1_connection_proto_goTypes = []any{
	(*GetConnectionsRequest)(nil),             // 0: mgmt.v1alpha1.GetConnectionsRequest
	(*GetConnectionsResponse)(nil),            // 1: mgmt.v1alpha1.GetConnectionsResponse
	(*GetConnectionRequest)(nil),              // 2: mgmt.v1alpha1.GetConnectionRequest
	(*GetConnectionResponse)(nil),             // 3: mgmt.v1alpha1.GetConnectionResponse
	(*CreateConnectionRequest)(nil),           // 4: mgmt.v1alpha1.CreateConnectionRequest
	(*CreateConnectionResponse)(nil),          // 5: mgmt.v1alpha1.CreateConnectionResponse
	(*UpdateConnectionRequest)(nil),           // 6: mgmt.v1alpha1.UpdateConnectionRequest
	(*UpdateConnectionResponse)(nil),          // 7: mgmt.v1alpha1.UpdateConnectionResponse
	(*DeleteConnectionRequest)(nil),           // 8: mgmt.v1alpha1.DeleteConnectionRequest
	(*DeleteConnectionResponse)(nil),          // 9: mgmt.v1alpha1.DeleteConnectionResponse
	(*CheckConnectionConfigRequest)(nil),      // 10: mgmt.v1alpha1.CheckConnectionConfigRequest
	(*CheckConnectionConfigByIdRequest)(nil),  // 11: mgmt.v1alpha1.CheckConnectionConfigByIdRequest
	(*CheckConnectionConfigByIdResponse)(nil), // 12: mgmt.v1alpha1.CheckConnectionConfigByIdResponse
	(*CheckConnectionConfigResponse)(nil),     // 13: mgmt.v1alpha1.CheckConnectionConfigResponse
	(*ConnectionRolePrivilege)(nil),           // 14: mgmt.v1alpha1.ConnectionRolePrivilege
	(*Connection)(nil),                        // 15: mgmt.v1alpha1.Connection
	(*ConnectionConfig)(nil),                  // 16: mgmt.v1alpha1.ConnectionConfig
	(*MssqlConnectionConfig)(nil),             // 17: mgmt.v1alpha1.MssqlConnectionConfig
	(*DynamoDBConnectionConfig)(nil),          // 18: mgmt.v1alpha1.DynamoDBConnectionConfig
	(*MongoConnectionConfig)(nil),             // 19: mgmt.v1alpha1.MongoConnectionConfig
	(*OpenAiConnectionConfig)(nil),            // 20: mgmt.v1alpha1.OpenAiConnectionConfig
	(*LocalDirectoryConnectionConfig)(nil),    // 21: mgmt.v1alpha1.LocalDirectoryConnectionConfig
	(*PostgresConnectionConfig)(nil),          // 22: mgmt.v1alpha1.PostgresConnectionConfig
	(*ClientTlsConfig)(nil),                   // 23: mgmt.v1alpha1.ClientTlsConfig
	(*SqlConnectionOptions)(nil),              // 24: mgmt.v1alpha1.SqlConnectionOptions
	(*SSHTunnel)(nil),                         // 25: mgmt.v1alpha1.SSHTunnel
	(*SSHAuthentication)(nil),                 // 26: mgmt.v1alpha1.SSHAuthentication
	(*SSHPassphrase)(nil),                     // 27: mgmt.v1alpha1.SSHPassphrase
	(*SSHPrivateKey)(nil),                     // 28: mgmt.v1alpha1.SSHPrivateKey
	(*PostgresConnection)(nil),                // 29: mgmt.v1alpha1.PostgresConnection
	(*MysqlConnection)(nil),                   // 30: mgmt.v1alpha1.MysqlConnection
	(*MysqlConnectionConfig)(nil),             // 31: mgmt.v1alpha1.MysqlConnectionConfig
	(*AwsS3ConnectionConfig)(nil),             // 32: mgmt.v1alpha1.AwsS3ConnectionConfig
	(*AwsS3Credentials)(nil),                  // 33: mgmt.v1alpha1.AwsS3Credentials
	(*GcpCloudStorageConnectionConfig)(nil),   // 34: mgmt.v1alpha1.GcpCloudStorageConnectionConfig
	(*IsConnectionNameAvailableRequest)(nil),  // 35: mgmt.v1alpha1.IsConnectionNameAvailableRequest
	(*IsConnectionNameAvailableResponse)(nil), // 36: mgmt.v1alpha1.IsConnectionNameAvailableResponse
	(*CheckSqlQueryRequest)(nil),              // 37: mgmt.v1alpha1.CheckSqlQueryRequest
	(*CheckSqlQueryResponse)(nil),             // 38: mgmt.v1alpha1.CheckSqlQueryResponse
	(*timestamppb.Timestamp)(nil),             // 39: google.protobuf.Timestamp
}
var file_mgmt_v1alpha1_connection_proto_depIdxs = []int32{
	15, // 0: mgmt.v1alpha1.GetConnectionsResponse.connections:type_name -> mgmt.v1alpha1.Connection
	15, // 1: mgmt.v1alpha1.GetConnectionResponse.connection:type_name -> mgmt.v1alpha1.Connection
	16, // 2: mgmt.v1alpha1.CreateConnectionRequest.connection_config:type_name -> mgmt.v1alpha1.ConnectionConfig
	15, // 3: mgmt.v1alpha1.CreateConnectionResponse.connection:type_name -> mgmt.v1alpha1.Connection
	16, // 4: mgmt.v1alpha1.UpdateConnectionRequest.connection_config:type_name -> mgmt.v1alpha1.ConnectionConfig
	15, // 5: mgmt.v1alpha1.UpdateConnectionResponse.connection:type_name -> mgmt.v1alpha1.Connection
	16, // 6: mgmt.v1alpha1.CheckConnectionConfigRequest.connection_config:type_name -> mgmt.v1alpha1.ConnectionConfig
	14, // 7: mgmt.v1alpha1.CheckConnectionConfigByIdResponse.privileges:type_name -> mgmt.v1alpha1.ConnectionRolePrivilege
	14, // 8: mgmt.v1alpha1.CheckConnectionConfigResponse.privileges:type_name -> mgmt.v1alpha1.ConnectionRolePrivilege
	16, // 9: mgmt.v1alpha1.Connection.connection_config:type_name -> mgmt.v1alpha1.ConnectionConfig
	39, // 10: mgmt.v1alpha1.Connection.created_at:type_name -> google.protobuf.Timestamp
	39, // 11: mgmt.v1alpha1.Connection.updated_at:type_name -> google.protobuf.Timestamp
	22, // 12: mgmt.v1alpha1.ConnectionConfig.pg_config:type_name -> mgmt.v1alpha1.PostgresConnectionConfig
	32, // 13: mgmt.v1alpha1.ConnectionConfig.aws_s3_config:type_name -> mgmt.v1alpha1.AwsS3ConnectionConfig
	31, // 14: mgmt.v1alpha1.ConnectionConfig.mysql_config:type_name -> mgmt.v1alpha1.MysqlConnectionConfig
	21, // 15: mgmt.v1alpha1.ConnectionConfig.local_dir_config:type_name -> mgmt.v1alpha1.LocalDirectoryConnectionConfig
	20, // 16: mgmt.v1alpha1.ConnectionConfig.openai_config:type_name -> mgmt.v1alpha1.OpenAiConnectionConfig
	19, // 17: mgmt.v1alpha1.ConnectionConfig.mongo_config:type_name -> mgmt.v1alpha1.MongoConnectionConfig
	34, // 18: mgmt.v1alpha1.ConnectionConfig.gcp_cloudstorage_config:type_name -> mgmt.v1alpha1.GcpCloudStorageConnectionConfig
	18, // 19: mgmt.v1alpha1.ConnectionConfig.dynamodb_config:type_name -> mgmt.v1alpha1.DynamoDBConnectionConfig
	17, // 20: mgmt.v1alpha1.ConnectionConfig.mssql_config:type_name -> mgmt.v1alpha1.MssqlConnectionConfig
	24, // 21: mgmt.v1alpha1.MssqlConnectionConfig.connection_options:type_name -> mgmt.v1alpha1.SqlConnectionOptions
	25, // 22: mgmt.v1alpha1.MssqlConnectionConfig.tunnel:type_name -> mgmt.v1alpha1.SSHTunnel
	23, // 23: mgmt.v1alpha1.MssqlConnectionConfig.client_tls:type_name -> mgmt.v1alpha1.ClientTlsConfig
	33, // 24: mgmt.v1alpha1.DynamoDBConnectionConfig.credentials:type_name -> mgmt.v1alpha1.AwsS3Credentials
	25, // 25: mgmt.v1alpha1.MongoConnectionConfig.tunnel:type_name -> mgmt.v1alpha1.SSHTunnel
	23, // 26: mgmt.v1alpha1.MongoConnectionConfig.client_tls:type_name -> mgmt.v1alpha1.ClientTlsConfig
	29, // 27: mgmt.v1alpha1.PostgresConnectionConfig.connection:type_name -> mgmt.v1alpha1.PostgresConnection
	25, // 28: mgmt.v1alpha1.PostgresConnectionConfig.tunnel:type_name -> mgmt.v1alpha1.SSHTunnel
	24, // 29: mgmt.v1alpha1.PostgresConnectionConfig.connection_options:type_name -> mgmt.v1alpha1.SqlConnectionOptions
	23, // 30: mgmt.v1alpha1.PostgresConnectionConfig.client_tls:type_name -> mgmt.v1alpha1.ClientTlsConfig
	26, // 31: mgmt.v1alpha1.SSHTunnel.authentication:type_name -> mgmt.v1alpha1.SSHAuthentication
	27, // 32: mgmt.v1alpha1.SSHAuthentication.passphrase:type_name -> mgmt.v1alpha1.SSHPassphrase
	28, // 33: mgmt.v1alpha1.SSHAuthentication.private_key:type_name -> mgmt.v1alpha1.SSHPrivateKey
	30, // 34: mgmt.v1alpha1.MysqlConnectionConfig.connection:type_name -> mgmt.v1alpha1.MysqlConnection
	25, // 35: mgmt.v1alpha1.MysqlConnectionConfig.tunnel:type_name -> mgmt.v1alpha1.SSHTunnel
	24, // 36: mgmt.v1alpha1.MysqlConnectionConfig.connection_options:type_name -> mgmt.v1alpha1.SqlConnectionOptions
	23, // 37: mgmt.v1alpha1.MysqlConnectionConfig.client_tls:type_name -> mgmt.v1alpha1.ClientTlsConfig
	33, // 38: mgmt.v1alpha1.AwsS3ConnectionConfig.credentials:type_name -> mgmt.v1alpha1.AwsS3Credentials
	0,  // 39: mgmt.v1alpha1.ConnectionService.GetConnections:input_type -> mgmt.v1alpha1.GetConnectionsRequest
	2,  // 40: mgmt.v1alpha1.ConnectionService.GetConnection:input_type -> mgmt.v1alpha1.GetConnectionRequest
	4,  // 41: mgmt.v1alpha1.ConnectionService.CreateConnection:input_type -> mgmt.v1alpha1.CreateConnectionRequest
	6,  // 42: mgmt.v1alpha1.ConnectionService.UpdateConnection:input_type -> mgmt.v1alpha1.UpdateConnectionRequest
	8,  // 43: mgmt.v1alpha1.ConnectionService.DeleteConnection:input_type -> mgmt.v1alpha1.DeleteConnectionRequest
	35, // 44: mgmt.v1alpha1.ConnectionService.IsConnectionNameAvailable:input_type -> mgmt.v1alpha1.IsConnectionNameAvailableRequest
	10, // 45: mgmt.v1alpha1.ConnectionService.CheckConnectionConfig:input_type -> mgmt.v1alpha1.CheckConnectionConfigRequest
	11, // 46: mgmt.v1alpha1.ConnectionService.CheckConnectionConfigById:input_type -> mgmt.v1alpha1.CheckConnectionConfigByIdRequest
	37, // 47: mgmt.v1alpha1.ConnectionService.CheckSqlQuery:input_type -> mgmt.v1alpha1.CheckSqlQueryRequest
	1,  // 48: mgmt.v1alpha1.ConnectionService.GetConnections:output_type -> mgmt.v1alpha1.GetConnectionsResponse
	3,  // 49: mgmt.v1alpha1.ConnectionService.GetConnection:output_type -> mgmt.v1alpha1.GetConnectionResponse
	5,  // 50: mgmt.v1alpha1.ConnectionService.CreateConnection:output_type -> mgmt.v1alpha1.CreateConnectionResponse
	7,  // 51: mgmt.v1alpha1.ConnectionService.UpdateConnection:output_type -> mgmt.v1alpha1.UpdateConnectionResponse
	9,  // 52: mgmt.v1alpha1.ConnectionService.DeleteConnection:output_type -> mgmt.v1alpha1.DeleteConnectionResponse
	36, // 53: mgmt.v1alpha1.ConnectionService.IsConnectionNameAvailable:output_type -> mgmt.v1alpha1.IsConnectionNameAvailableResponse
	13, // 54: mgmt.v1alpha1.ConnectionService.CheckConnectionConfig:output_type -> mgmt.v1alpha1.CheckConnectionConfigResponse
	12, // 55: mgmt.v1alpha1.ConnectionService.CheckConnectionConfigById:output_type -> mgmt.v1alpha1.CheckConnectionConfigByIdResponse
	38, // 56: mgmt.v1alpha1.ConnectionService.CheckSqlQuery:output_type -> mgmt.v1alpha1.CheckSqlQueryResponse
	48, // [48:57] is the sub-list for method output_type
	39, // [39:48] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_mgmt_v1alpha1_connection_proto_init() }
func file_mgmt_v1alpha1_connection_proto_init() {
	if File_mgmt_v1alpha1_connection_proto != nil {
		return
	}
	file_mgmt_v1alpha1_connection_proto_msgTypes[12].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_proto_msgTypes[13].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_proto_msgTypes[16].OneofWrappers = []any{
		(*ConnectionConfig_PgConfig)(nil),
		(*ConnectionConfig_AwsS3Config)(nil),
		(*ConnectionConfig_MysqlConfig)(nil),
		(*ConnectionConfig_LocalDirConfig)(nil),
		(*ConnectionConfig_OpenaiConfig)(nil),
		(*ConnectionConfig_MongoConfig)(nil),
		(*ConnectionConfig_GcpCloudstorageConfig)(nil),
		(*ConnectionConfig_DynamodbConfig)(nil),
		(*ConnectionConfig_MssqlConfig)(nil),
	}
	file_mgmt_v1alpha1_connection_proto_msgTypes[17].OneofWrappers = []any{
		(*MssqlConnectionConfig_Url)(nil),
	}
	file_mgmt_v1alpha1_connection_proto_msgTypes[18].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_proto_msgTypes[19].OneofWrappers = []any{
		(*MongoConnectionConfig_Url)(nil),
	}
	file_mgmt_v1alpha1_connection_proto_msgTypes[22].OneofWrappers = []any{
		(*PostgresConnectionConfig_Url)(nil),
		(*PostgresConnectionConfig_Connection)(nil),
	}
	file_mgmt_v1alpha1_connection_proto_msgTypes[23].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_proto_msgTypes[24].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_proto_msgTypes[25].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_proto_msgTypes[26].OneofWrappers = []any{
		(*SSHAuthentication_Passphrase)(nil),
		(*SSHAuthentication_PrivateKey)(nil),
	}
	file_mgmt_v1alpha1_connection_proto_msgTypes[28].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_proto_msgTypes[29].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_proto_msgTypes[31].OneofWrappers = []any{
		(*MysqlConnectionConfig_Url)(nil),
		(*MysqlConnectionConfig_Connection)(nil),
	}
	file_mgmt_v1alpha1_connection_proto_msgTypes[32].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_proto_msgTypes[33].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_proto_msgTypes[34].OneofWrappers = []any{}
	file_mgmt_v1alpha1_connection_proto_msgTypes[38].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mgmt_v1alpha1_connection_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mgmt_v1alpha1_connection_proto_goTypes,
		DependencyIndexes: file_mgmt_v1alpha1_connection_proto_depIdxs,
		MessageInfos:      file_mgmt_v1alpha1_connection_proto_msgTypes,
	}.Build()
	File_mgmt_v1alpha1_connection_proto = out.File
	file_mgmt_v1alpha1_connection_proto_rawDesc = nil
	file_mgmt_v1alpha1_connection_proto_goTypes = nil
	file_mgmt_v1alpha1_connection_proto_depIdxs = nil
}
