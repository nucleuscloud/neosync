// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mgmt/v1alpha1/job.proto

package mgmtv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _job_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetJobsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetJobsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetJobsRequestMultiError,
// or nil if none found.
func (m *GetJobsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetJobsRequestMultiError(errors)
	}

	return nil
}

// GetJobsRequestMultiError is an error wrapping multiple validation errors
// returned by GetJobsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetJobsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobsRequestMultiError) AllErrors() []error { return m }

// GetJobsRequestValidationError is the validation error returned by
// GetJobsRequest.Validate if the designated constraints aren't met.
type GetJobsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobsRequestValidationError) ErrorName() string { return "GetJobsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetJobsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobsRequestValidationError{}

// Validate checks the field values on GetJobsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetJobsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobsResponseMultiError, or nil if none found.
func (m *GetJobsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetJobs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJobsResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJobsResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJobsResponseValidationError{
					field:  fmt.Sprintf("Jobs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJobsResponseMultiError(errors)
	}

	return nil
}

// GetJobsResponseMultiError is an error wrapping multiple validation errors
// returned by GetJobsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetJobsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobsResponseMultiError) AllErrors() []error { return m }

// GetJobsResponseValidationError is the validation error returned by
// GetJobsResponse.Validate if the designated constraints aren't met.
type GetJobsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobsResponseValidationError) ErrorName() string { return "GetJobsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetJobsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobsResponseValidationError{}

// Validate checks the field values on CreateJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateJobRequestMultiError, or nil if none found.
func (m *CreateJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobName

	if err := m._validateUuid(m.GetConnectionSourceId()); err != nil {
		err = CreateJobRequestValidationError{
			field:  "ConnectionSourceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSourceOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateJobRequestValidationError{
					field:  "SourceOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateJobRequestValidationError{
					field:  "SourceOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJobRequestValidationError{
				field:  "SourceOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateJobRequestValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateJobRequestValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateJobRequestValidationError{
					field:  fmt.Sprintf("Mappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CronSchedule != nil {
		// no validation rules for CronSchedule
	}

	if len(errors) > 0 {
		return CreateJobRequestMultiError(errors)
	}

	return nil
}

func (m *CreateJobRequest) _validateUuid(uuid string) error {
	if matched := _job_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateJobRequestMultiError is an error wrapping multiple validation errors
// returned by CreateJobRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobRequestMultiError) AllErrors() []error { return m }

// CreateJobRequestValidationError is the validation error returned by
// CreateJobRequest.Validate if the designated constraints aren't met.
type CreateJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobRequestValidationError) ErrorName() string { return "CreateJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobRequestValidationError{}

// Validate checks the field values on CreateJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateJobResponseMultiError, or nil if none found.
func (m *CreateJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateJobResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateJobResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJobResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateJobResponseMultiError(errors)
	}

	return nil
}

// CreateJobResponseMultiError is an error wrapping multiple validation errors
// returned by CreateJobResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobResponseMultiError) AllErrors() []error { return m }

// CreateJobResponseValidationError is the validation error returned by
// CreateJobResponse.Validate if the designated constraints aren't met.
type CreateJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobResponseValidationError) ErrorName() string {
	return "CreateJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobResponseValidationError{}

// Validate checks the field values on JobMapping with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobMapping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobMapping with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobMappingMultiError, or
// nil if none found.
func (m *JobMapping) ValidateAll() error {
	return m.validate(true)
}

func (m *JobMapping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	// no validation rules for Table

	// no validation rules for Column

	if _, ok := _JobMapping_Transformer_InLookup[m.GetTransformer()]; !ok {
		err := JobMappingValidationError{
			field:  "Transformer",
			reason: "value must be in list [passthrough uuid_v4 first_name phone_number]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Exclude

	if len(errors) > 0 {
		return JobMappingMultiError(errors)
	}

	return nil
}

// JobMappingMultiError is an error wrapping multiple validation errors
// returned by JobMapping.ValidateAll() if the designated constraints aren't met.
type JobMappingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobMappingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobMappingMultiError) AllErrors() []error { return m }

// JobMappingValidationError is the validation error returned by
// JobMapping.Validate if the designated constraints aren't met.
type JobMappingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobMappingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobMappingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobMappingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobMappingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobMappingValidationError) ErrorName() string { return "JobMappingValidationError" }

// Error satisfies the builtin error interface
func (e JobMappingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobMapping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobMappingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobMappingValidationError{}

var _JobMapping_Transformer_InLookup = map[string]struct{}{
	"passthrough":  {},
	"uuid_v4":      {},
	"first_name":   {},
	"phone_number": {},
}

// Validate checks the field values on GetJobRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetJobRequestMultiError, or
// nil if none found.
func (m *GetJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetJobRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetJobRequestMultiError(errors)
	}

	return nil
}

func (m *GetJobRequest) _validateUuid(uuid string) error {
	if matched := _job_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetJobRequestMultiError is an error wrapping multiple validation errors
// returned by GetJobRequest.ValidateAll() if the designated constraints
// aren't met.
type GetJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRequestMultiError) AllErrors() []error { return m }

// GetJobRequestValidationError is the validation error returned by
// GetJobRequest.Validate if the designated constraints aren't met.
type GetJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRequestValidationError) ErrorName() string { return "GetJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRequestValidationError{}

// Validate checks the field values on GetJobResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetJobResponseMultiError,
// or nil if none found.
func (m *GetJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetJobResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetJobResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetJobResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetJobResponseMultiError(errors)
	}

	return nil
}

// GetJobResponseMultiError is an error wrapping multiple validation errors
// returned by GetJobResponse.ValidateAll() if the designated constraints
// aren't met.
type GetJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobResponseMultiError) AllErrors() []error { return m }

// GetJobResponseValidationError is the validation error returned by
// GetJobResponse.Validate if the designated constraints aren't met.
type GetJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobResponseValidationError) ErrorName() string { return "GetJobResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobResponseValidationError{}

// Validate checks the field values on UpdateJobScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateJobScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateJobScheduleRequestMultiError, or nil if none found.
func (m *UpdateJobScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateJobScheduleRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.CronSchedule != nil {
		// no validation rules for CronSchedule
	}

	if len(errors) > 0 {
		return UpdateJobScheduleRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateJobScheduleRequest) _validateUuid(uuid string) error {
	if matched := _job_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateJobScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateJobScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobScheduleRequestMultiError) AllErrors() []error { return m }

// UpdateJobScheduleRequestValidationError is the validation error returned by
// UpdateJobScheduleRequest.Validate if the designated constraints aren't met.
type UpdateJobScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobScheduleRequestValidationError) ErrorName() string {
	return "UpdateJobScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobScheduleRequestValidationError{}

// Validate checks the field values on UpdateJobScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateJobScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateJobScheduleResponseMultiError, or nil if none found.
func (m *UpdateJobScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateJobScheduleResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateJobScheduleResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJobScheduleResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateJobScheduleResponseMultiError(errors)
	}

	return nil
}

// UpdateJobScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateJobScheduleResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateJobScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobScheduleResponseMultiError) AllErrors() []error { return m }

// UpdateJobScheduleResponseValidationError is the validation error returned by
// UpdateJobScheduleResponse.Validate if the designated constraints aren't met.
type UpdateJobScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobScheduleResponseValidationError) ErrorName() string {
	return "UpdateJobScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobScheduleResponseValidationError{}

// Validate checks the field values on UpdateJobSourceConnectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateJobSourceConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobSourceConnectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateJobSourceConnectionRequestMultiError, or nil if none found.
func (m *UpdateJobSourceConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobSourceConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateJobSourceConnectionRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetConnectionId()); err != nil {
		err = UpdateJobSourceConnectionRequestValidationError{
			field:  "ConnectionId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateJobSourceConnectionRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateJobSourceConnectionRequest) _validateUuid(uuid string) error {
	if matched := _job_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateJobSourceConnectionRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateJobSourceConnectionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobSourceConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobSourceConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobSourceConnectionRequestMultiError) AllErrors() []error { return m }

// UpdateJobSourceConnectionRequestValidationError is the validation error
// returned by UpdateJobSourceConnectionRequest.Validate if the designated
// constraints aren't met.
type UpdateJobSourceConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobSourceConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobSourceConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobSourceConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobSourceConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobSourceConnectionRequestValidationError) ErrorName() string {
	return "UpdateJobSourceConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobSourceConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobSourceConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobSourceConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobSourceConnectionRequestValidationError{}

// Validate checks the field values on UpdateJobSourceConnectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateJobSourceConnectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobSourceConnectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateJobSourceConnectionResponseMultiError, or nil if none found.
func (m *UpdateJobSourceConnectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobSourceConnectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateJobSourceConnectionResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateJobSourceConnectionResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJobSourceConnectionResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateJobSourceConnectionResponseMultiError(errors)
	}

	return nil
}

// UpdateJobSourceConnectionResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateJobSourceConnectionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobSourceConnectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobSourceConnectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobSourceConnectionResponseMultiError) AllErrors() []error { return m }

// UpdateJobSourceConnectionResponseValidationError is the validation error
// returned by UpdateJobSourceConnectionResponse.Validate if the designated
// constraints aren't met.
type UpdateJobSourceConnectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobSourceConnectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobSourceConnectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobSourceConnectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobSourceConnectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobSourceConnectionResponseValidationError) ErrorName() string {
	return "UpdateJobSourceConnectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobSourceConnectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobSourceConnectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobSourceConnectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobSourceConnectionResponseValidationError{}

// Validate checks the field values on UpdateJobDestinationConnectionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateJobDestinationConnectionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateJobDestinationConnectionsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateJobDestinationConnectionsRequestMultiError, or nil if none found.
func (m *UpdateJobDestinationConnectionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobDestinationConnectionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateJobDestinationConnectionsRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetConnectionIds()) < 1 {
		err := UpdateJobDestinationConnectionsRequestValidationError{
			field:  "ConnectionIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateJobDestinationConnectionsRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateJobDestinationConnectionsRequest) _validateUuid(uuid string) error {
	if matched := _job_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateJobDestinationConnectionsRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateJobDestinationConnectionsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobDestinationConnectionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobDestinationConnectionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobDestinationConnectionsRequestMultiError) AllErrors() []error { return m }

// UpdateJobDestinationConnectionsRequestValidationError is the validation
// error returned by UpdateJobDestinationConnectionsRequest.Validate if the
// designated constraints aren't met.
type UpdateJobDestinationConnectionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobDestinationConnectionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobDestinationConnectionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobDestinationConnectionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobDestinationConnectionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobDestinationConnectionsRequestValidationError) ErrorName() string {
	return "UpdateJobDestinationConnectionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobDestinationConnectionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobDestinationConnectionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobDestinationConnectionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobDestinationConnectionsRequestValidationError{}

// Validate checks the field values on UpdateJobDestinationConnectionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateJobDestinationConnectionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateJobDestinationConnectionsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateJobDestinationConnectionsResponseMultiError, or nil if none found.
func (m *UpdateJobDestinationConnectionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobDestinationConnectionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateJobDestinationConnectionsResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateJobDestinationConnectionsResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJobDestinationConnectionsResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateJobDestinationConnectionsResponseMultiError(errors)
	}

	return nil
}

// UpdateJobDestinationConnectionsResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateJobDestinationConnectionsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobDestinationConnectionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobDestinationConnectionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobDestinationConnectionsResponseMultiError) AllErrors() []error { return m }

// UpdateJobDestinationConnectionsResponseValidationError is the validation
// error returned by UpdateJobDestinationConnectionsResponse.Validate if the
// designated constraints aren't met.
type UpdateJobDestinationConnectionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobDestinationConnectionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobDestinationConnectionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobDestinationConnectionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobDestinationConnectionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobDestinationConnectionsResponseValidationError) ErrorName() string {
	return "UpdateJobDestinationConnectionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobDestinationConnectionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobDestinationConnectionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobDestinationConnectionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobDestinationConnectionsResponseValidationError{}

// Validate checks the field values on UpdateJobMappingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateJobMappingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobMappingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateJobMappingsRequestMultiError, or nil if none found.
func (m *UpdateJobMappingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobMappingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateJobMappingsRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMappings()) < 1 {
		err := UpdateJobMappingsRequestValidationError{
			field:  "Mappings",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateJobMappingsRequestValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateJobMappingsRequestValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateJobMappingsRequestValidationError{
					field:  fmt.Sprintf("Mappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateJobMappingsRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateJobMappingsRequest) _validateUuid(uuid string) error {
	if matched := _job_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateJobMappingsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateJobMappingsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobMappingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobMappingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobMappingsRequestMultiError) AllErrors() []error { return m }

// UpdateJobMappingsRequestValidationError is the validation error returned by
// UpdateJobMappingsRequest.Validate if the designated constraints aren't met.
type UpdateJobMappingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobMappingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobMappingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobMappingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobMappingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobMappingsRequestValidationError) ErrorName() string {
	return "UpdateJobMappingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobMappingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobMappingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobMappingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobMappingsRequestValidationError{}

// Validate checks the field values on UpdateJobMappingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateJobMappingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobMappingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateJobMappingsResponseMultiError, or nil if none found.
func (m *UpdateJobMappingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobMappingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateJobMappingsResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateJobMappingsResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJobMappingsResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateJobMappingsResponseMultiError(errors)
	}

	return nil
}

// UpdateJobMappingsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateJobMappingsResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateJobMappingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobMappingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobMappingsResponseMultiError) AllErrors() []error { return m }

// UpdateJobMappingsResponseValidationError is the validation error returned by
// UpdateJobMappingsResponse.Validate if the designated constraints aren't met.
type UpdateJobMappingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobMappingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobMappingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobMappingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobMappingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobMappingsResponseValidationError) ErrorName() string {
	return "UpdateJobMappingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobMappingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobMappingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobMappingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobMappingsResponseValidationError{}

// Validate checks the field values on UpdateJobHaltOnNewColumnAdditionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateJobHaltOnNewColumnAdditionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateJobHaltOnNewColumnAdditionRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateJobHaltOnNewColumnAdditionRequestMultiError, or nil if none found.
func (m *UpdateJobHaltOnNewColumnAdditionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobHaltOnNewColumnAdditionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateJobHaltOnNewColumnAdditionRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for HaltOnNewColumnAddition

	if len(errors) > 0 {
		return UpdateJobHaltOnNewColumnAdditionRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateJobHaltOnNewColumnAdditionRequest) _validateUuid(uuid string) error {
	if matched := _job_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateJobHaltOnNewColumnAdditionRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateJobHaltOnNewColumnAdditionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobHaltOnNewColumnAdditionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobHaltOnNewColumnAdditionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobHaltOnNewColumnAdditionRequestMultiError) AllErrors() []error { return m }

// UpdateJobHaltOnNewColumnAdditionRequestValidationError is the validation
// error returned by UpdateJobHaltOnNewColumnAdditionRequest.Validate if the
// designated constraints aren't met.
type UpdateJobHaltOnNewColumnAdditionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobHaltOnNewColumnAdditionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobHaltOnNewColumnAdditionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobHaltOnNewColumnAdditionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobHaltOnNewColumnAdditionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobHaltOnNewColumnAdditionRequestValidationError) ErrorName() string {
	return "UpdateJobHaltOnNewColumnAdditionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobHaltOnNewColumnAdditionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobHaltOnNewColumnAdditionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobHaltOnNewColumnAdditionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobHaltOnNewColumnAdditionRequestValidationError{}

// Validate checks the field values on UpdateJobHaltOnNewColumnAdditionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateJobHaltOnNewColumnAdditionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateJobHaltOnNewColumnAdditionResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateJobHaltOnNewColumnAdditionResponseMultiError, or nil if none found.
func (m *UpdateJobHaltOnNewColumnAdditionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobHaltOnNewColumnAdditionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateJobHaltOnNewColumnAdditionResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateJobHaltOnNewColumnAdditionResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJobHaltOnNewColumnAdditionResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateJobHaltOnNewColumnAdditionResponseMultiError(errors)
	}

	return nil
}

// UpdateJobHaltOnNewColumnAdditionResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateJobHaltOnNewColumnAdditionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobHaltOnNewColumnAdditionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobHaltOnNewColumnAdditionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobHaltOnNewColumnAdditionResponseMultiError) AllErrors() []error { return m }

// UpdateJobHaltOnNewColumnAdditionResponseValidationError is the validation
// error returned by UpdateJobHaltOnNewColumnAdditionResponse.Validate if the
// designated constraints aren't met.
type UpdateJobHaltOnNewColumnAdditionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobHaltOnNewColumnAdditionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobHaltOnNewColumnAdditionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobHaltOnNewColumnAdditionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobHaltOnNewColumnAdditionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobHaltOnNewColumnAdditionResponseValidationError) ErrorName() string {
	return "UpdateJobHaltOnNewColumnAdditionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobHaltOnNewColumnAdditionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobHaltOnNewColumnAdditionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobHaltOnNewColumnAdditionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobHaltOnNewColumnAdditionResponseValidationError{}

// Validate checks the field values on DeleteJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteJobRequestMultiError, or nil if none found.
func (m *DeleteJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteJobRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteJobRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteJobRequest) _validateUuid(uuid string) error {
	if matched := _job_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteJobRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteJobRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobRequestMultiError) AllErrors() []error { return m }

// DeleteJobRequestValidationError is the validation error returned by
// DeleteJobRequest.Validate if the designated constraints aren't met.
type DeleteJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobRequestValidationError) ErrorName() string { return "DeleteJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobRequestValidationError{}

// Validate checks the field values on DeleteJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteJobResponseMultiError, or nil if none found.
func (m *DeleteJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteJobResponseMultiError(errors)
	}

	return nil
}

// DeleteJobResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteJobResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobResponseMultiError) AllErrors() []error { return m }

// DeleteJobResponseValidationError is the validation error returned by
// DeleteJobResponse.Validate if the designated constraints aren't met.
type DeleteJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobResponseValidationError) ErrorName() string {
	return "DeleteJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobResponseValidationError{}

// Validate checks the field values on IsJobNameAvailableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsJobNameAvailableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsJobNameAvailableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsJobNameAvailableRequestMultiError, or nil if none found.
func (m *IsJobNameAvailableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsJobNameAvailableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return IsJobNameAvailableRequestMultiError(errors)
	}

	return nil
}

// IsJobNameAvailableRequestMultiError is an error wrapping multiple validation
// errors returned by IsJobNameAvailableRequest.ValidateAll() if the
// designated constraints aren't met.
type IsJobNameAvailableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsJobNameAvailableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsJobNameAvailableRequestMultiError) AllErrors() []error { return m }

// IsJobNameAvailableRequestValidationError is the validation error returned by
// IsJobNameAvailableRequest.Validate if the designated constraints aren't met.
type IsJobNameAvailableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsJobNameAvailableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsJobNameAvailableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsJobNameAvailableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsJobNameAvailableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsJobNameAvailableRequestValidationError) ErrorName() string {
	return "IsJobNameAvailableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsJobNameAvailableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsJobNameAvailableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsJobNameAvailableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsJobNameAvailableRequestValidationError{}

// Validate checks the field values on IsJobNameAvailableResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsJobNameAvailableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsJobNameAvailableResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsJobNameAvailableResponseMultiError, or nil if none found.
func (m *IsJobNameAvailableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsJobNameAvailableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAvailable

	if len(errors) > 0 {
		return IsJobNameAvailableResponseMultiError(errors)
	}

	return nil
}

// IsJobNameAvailableResponseMultiError is an error wrapping multiple
// validation errors returned by IsJobNameAvailableResponse.ValidateAll() if
// the designated constraints aren't met.
type IsJobNameAvailableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsJobNameAvailableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsJobNameAvailableResponseMultiError) AllErrors() []error { return m }

// IsJobNameAvailableResponseValidationError is the validation error returned
// by IsJobNameAvailableResponse.Validate if the designated constraints aren't met.
type IsJobNameAvailableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsJobNameAvailableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsJobNameAvailableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsJobNameAvailableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsJobNameAvailableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsJobNameAvailableResponseValidationError) ErrorName() string {
	return "IsJobNameAvailableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsJobNameAvailableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsJobNameAvailableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsJobNameAvailableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsJobNameAvailableResponseValidationError{}

// Validate checks the field values on GetJobRunsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetJobRunsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRunsRequestMultiError, or nil if none found.
func (m *GetJobRunsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRunsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Id.(type) {
	case *GetJobRunsRequest_JobId:
		if v == nil {
			err := GetJobRunsRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateUuid(m.GetJobId()); err != nil {
			err = GetJobRunsRequestValidationError{
				field:  "JobId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetJobRunsRequestMultiError(errors)
	}

	return nil
}

func (m *GetJobRunsRequest) _validateUuid(uuid string) error {
	if matched := _job_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetJobRunsRequestMultiError is an error wrapping multiple validation errors
// returned by GetJobRunsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetJobRunsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRunsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRunsRequestMultiError) AllErrors() []error { return m }

// GetJobRunsRequestValidationError is the validation error returned by
// GetJobRunsRequest.Validate if the designated constraints aren't met.
type GetJobRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRunsRequestValidationError) ErrorName() string {
	return "GetJobRunsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRunsRequestValidationError{}

// Validate checks the field values on GetJobRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobRunsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRunsResponseMultiError, or nil if none found.
func (m *GetJobRunsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRunsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetJobRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJobRunsResponseValidationError{
						field:  fmt.Sprintf("JobRuns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJobRunsResponseValidationError{
						field:  fmt.Sprintf("JobRuns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJobRunsResponseValidationError{
					field:  fmt.Sprintf("JobRuns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJobRunsResponseMultiError(errors)
	}

	return nil
}

// GetJobRunsResponseMultiError is an error wrapping multiple validation errors
// returned by GetJobRunsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetJobRunsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRunsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRunsResponseMultiError) AllErrors() []error { return m }

// GetJobRunsResponseValidationError is the validation error returned by
// GetJobRunsResponse.Validate if the designated constraints aren't met.
type GetJobRunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRunsResponseValidationError) ErrorName() string {
	return "GetJobRunsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobRunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRunsResponseValidationError{}

// Validate checks the field values on GetJobRunRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetJobRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRunRequestMultiError, or nil if none found.
func (m *GetJobRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetJobRunRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetJobRunRequestMultiError(errors)
	}

	return nil
}

func (m *GetJobRunRequest) _validateUuid(uuid string) error {
	if matched := _job_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetJobRunRequestMultiError is an error wrapping multiple validation errors
// returned by GetJobRunRequest.ValidateAll() if the designated constraints
// aren't met.
type GetJobRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRunRequestMultiError) AllErrors() []error { return m }

// GetJobRunRequestValidationError is the validation error returned by
// GetJobRunRequest.Validate if the designated constraints aren't met.
type GetJobRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRunRequestValidationError) ErrorName() string { return "GetJobRunRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetJobRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRunRequestValidationError{}

// Validate checks the field values on GetJobRunResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetJobRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRunResponseMultiError, or nil if none found.
func (m *GetJobRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJobRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetJobRunResponseValidationError{
					field:  "JobRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetJobRunResponseValidationError{
					field:  "JobRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetJobRunResponseValidationError{
				field:  "JobRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetJobRunResponseMultiError(errors)
	}

	return nil
}

// GetJobRunResponseMultiError is an error wrapping multiple validation errors
// returned by GetJobRunResponse.ValidateAll() if the designated constraints
// aren't met.
type GetJobRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRunResponseMultiError) AllErrors() []error { return m }

// GetJobRunResponseValidationError is the validation error returned by
// GetJobRunResponse.Validate if the designated constraints aren't met.
type GetJobRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRunResponseValidationError) ErrorName() string {
	return "GetJobRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRunResponseValidationError{}

// Validate checks the field values on CreateJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateJobRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateJobRunRequestMultiError, or nil if none found.
func (m *CreateJobRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if len(errors) > 0 {
		return CreateJobRunRequestMultiError(errors)
	}

	return nil
}

// CreateJobRunRequestMultiError is an error wrapping multiple validation
// errors returned by CreateJobRunRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateJobRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobRunRequestMultiError) AllErrors() []error { return m }

// CreateJobRunRequestValidationError is the validation error returned by
// CreateJobRunRequest.Validate if the designated constraints aren't met.
type CreateJobRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobRunRequestValidationError) ErrorName() string {
	return "CreateJobRunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJobRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobRunRequestValidationError{}

// Validate checks the field values on CreateJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateJobRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateJobRunResponseMultiError, or nil if none found.
func (m *CreateJobRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJobRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateJobRunResponseValidationError{
					field:  "JobRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateJobRunResponseValidationError{
					field:  "JobRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJobRunResponseValidationError{
				field:  "JobRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateJobRunResponseMultiError(errors)
	}

	return nil
}

// CreateJobRunResponseMultiError is an error wrapping multiple validation
// errors returned by CreateJobRunResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateJobRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobRunResponseMultiError) AllErrors() []error { return m }

// CreateJobRunResponseValidationError is the validation error returned by
// CreateJobRunResponse.Validate if the designated constraints aren't met.
type CreateJobRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobRunResponseValidationError) ErrorName() string {
	return "CreateJobRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJobRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobRunResponseValidationError{}

// Validate checks the field values on CancelJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelJobRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelJobRunRequestMultiError, or nil if none found.
func (m *CancelJobRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelJobRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobRunId

	if len(errors) > 0 {
		return CancelJobRunRequestMultiError(errors)
	}

	return nil
}

// CancelJobRunRequestMultiError is an error wrapping multiple validation
// errors returned by CancelJobRunRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelJobRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelJobRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelJobRunRequestMultiError) AllErrors() []error { return m }

// CancelJobRunRequestValidationError is the validation error returned by
// CancelJobRunRequest.Validate if the designated constraints aren't met.
type CancelJobRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelJobRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelJobRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelJobRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelJobRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelJobRunRequestValidationError) ErrorName() string {
	return "CancelJobRunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelJobRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelJobRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelJobRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelJobRunRequestValidationError{}

// Validate checks the field values on CancelJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelJobRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelJobRunResponseMultiError, or nil if none found.
func (m *CancelJobRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelJobRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelJobRunResponseMultiError(errors)
	}

	return nil
}

// CancelJobRunResponseMultiError is an error wrapping multiple validation
// errors returned by CancelJobRunResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelJobRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelJobRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelJobRunResponseMultiError) AllErrors() []error { return m }

// CancelJobRunResponseValidationError is the validation error returned by
// CancelJobRunResponse.Validate if the designated constraints aren't met.
type CancelJobRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelJobRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelJobRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelJobRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelJobRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelJobRunResponseValidationError) ErrorName() string {
	return "CancelJobRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelJobRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelJobRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelJobRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelJobRunResponseValidationError{}

// Validate checks the field values on JobSourceOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobSourceOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobSourceOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobSourceOptionsMultiError, or nil if none found.
func (m *JobSourceOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *JobSourceOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HaltOnNewColumnAddition

	if len(errors) > 0 {
		return JobSourceOptionsMultiError(errors)
	}

	return nil
}

// JobSourceOptionsMultiError is an error wrapping multiple validation errors
// returned by JobSourceOptions.ValidateAll() if the designated constraints
// aren't met.
type JobSourceOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobSourceOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobSourceOptionsMultiError) AllErrors() []error { return m }

// JobSourceOptionsValidationError is the validation error returned by
// JobSourceOptions.Validate if the designated constraints aren't met.
type JobSourceOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobSourceOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobSourceOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobSourceOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobSourceOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobSourceOptionsValidationError) ErrorName() string { return "JobSourceOptionsValidationError" }

// Error satisfies the builtin error interface
func (e JobSourceOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobSourceOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobSourceOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobSourceOptionsValidationError{}

// Validate checks the field values on Job with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Job) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Job with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JobMultiError, or nil if none found.
func (m *Job) ValidateAll() error {
	return m.validate(true)
}

func (m *Job) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Status

	if err := m._validateUuid(m.GetConnectionSourceId()); err != nil {
		err = JobValidationError{
			field:  "ConnectionSourceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobValidationError{
					field:  fmt.Sprintf("Mappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSourceOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "SourceOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "SourceOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobValidationError{
				field:  "SourceOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CronSchedule != nil {
		// no validation rules for CronSchedule
	}

	if len(errors) > 0 {
		return JobMultiError(errors)
	}

	return nil
}

func (m *Job) _validateUuid(uuid string) error {
	if matched := _job_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// JobMultiError is an error wrapping multiple validation errors returned by
// Job.ValidateAll() if the designated constraints aren't met.
type JobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobMultiError) AllErrors() []error { return m }

// JobValidationError is the validation error returned by Job.Validate if the
// designated constraints aren't met.
type JobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobValidationError) ErrorName() string { return "JobValidationError" }

// Error satisfies the builtin error interface
func (e JobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobValidationError{}

// Validate checks the field values on JobRun with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobRun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobRun with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JobRunMultiError, or nil if none found.
func (m *JobRun) ValidateAll() error {
	return m.validate(true)
}

func (m *JobRun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for JobId

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for CreatedByUserId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobRunValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobRunValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobRunValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JobRunMultiError(errors)
	}

	return nil
}

// JobRunMultiError is an error wrapping multiple validation errors returned by
// JobRun.ValidateAll() if the designated constraints aren't met.
type JobRunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobRunMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobRunMultiError) AllErrors() []error { return m }

// JobRunValidationError is the validation error returned by JobRun.Validate if
// the designated constraints aren't met.
type JobRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobRunValidationError) ErrorName() string { return "JobRunValidationError" }

// Error satisfies the builtin error interface
func (e JobRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobRunValidationError{}

// Validate checks the field values on Transformer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transformer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transformer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransformerMultiError, or
// nil if none found.
func (m *Transformer) ValidateAll() error {
	return m.validate(true)
}

func (m *Transformer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Value

	if len(errors) > 0 {
		return TransformerMultiError(errors)
	}

	return nil
}

// TransformerMultiError is an error wrapping multiple validation errors
// returned by Transformer.ValidateAll() if the designated constraints aren't met.
type TransformerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransformerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransformerMultiError) AllErrors() []error { return m }

// TransformerValidationError is the validation error returned by
// Transformer.Validate if the designated constraints aren't met.
type TransformerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransformerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransformerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransformerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransformerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransformerValidationError) ErrorName() string { return "TransformerValidationError" }

// Error satisfies the builtin error interface
func (e TransformerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransformer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransformerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransformerValidationError{}

// Validate checks the field values on GetTransformersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransformersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransformersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransformersRequestMultiError, or nil if none found.
func (m *GetTransformersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransformersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTransformersRequestMultiError(errors)
	}

	return nil
}

// GetTransformersRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransformersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransformersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransformersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransformersRequestMultiError) AllErrors() []error { return m }

// GetTransformersRequestValidationError is the validation error returned by
// GetTransformersRequest.Validate if the designated constraints aren't met.
type GetTransformersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransformersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransformersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransformersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransformersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransformersRequestValidationError) ErrorName() string {
	return "GetTransformersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransformersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransformersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransformersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransformersRequestValidationError{}

// Validate checks the field values on GetTransformersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransformersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransformersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransformersResponseMultiError, or nil if none found.
func (m *GetTransformersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransformersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransformers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTransformersResponseValidationError{
						field:  fmt.Sprintf("Transformers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTransformersResponseValidationError{
						field:  fmt.Sprintf("Transformers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransformersResponseValidationError{
					field:  fmt.Sprintf("Transformers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTransformersResponseMultiError(errors)
	}

	return nil
}

// GetTransformersResponseMultiError is an error wrapping multiple validation
// errors returned by GetTransformersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransformersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransformersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransformersResponseMultiError) AllErrors() []error { return m }

// GetTransformersResponseValidationError is the validation error returned by
// GetTransformersResponse.Validate if the designated constraints aren't met.
type GetTransformersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransformersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransformersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransformersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransformersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransformersResponseValidationError) ErrorName() string {
	return "GetTransformersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransformersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransformersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransformersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransformersResponseValidationError{}
