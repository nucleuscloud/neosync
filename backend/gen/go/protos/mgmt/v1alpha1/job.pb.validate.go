// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mgmt/v1alpha1/job.proto

package mgmtv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetJobsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetJobsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetJobsRequestMultiError,
// or nil if none found.
func (m *GetJobsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetJobsRequestMultiError(errors)
	}

	return nil
}

// GetJobsRequestMultiError is an error wrapping multiple validation errors
// returned by GetJobsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetJobsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobsRequestMultiError) AllErrors() []error { return m }

// GetJobsRequestValidationError is the validation error returned by
// GetJobsRequest.Validate if the designated constraints aren't met.
type GetJobsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobsRequestValidationError) ErrorName() string { return "GetJobsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetJobsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobsRequestValidationError{}

// Validate checks the field values on GetJobsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetJobsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobsResponseMultiError, or nil if none found.
func (m *GetJobsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetJobs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJobsResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJobsResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJobsResponseValidationError{
					field:  fmt.Sprintf("Jobs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJobsResponseMultiError(errors)
	}

	return nil
}

// GetJobsResponseMultiError is an error wrapping multiple validation errors
// returned by GetJobsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetJobsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobsResponseMultiError) AllErrors() []error { return m }

// GetJobsResponseValidationError is the validation error returned by
// GetJobsResponse.Validate if the designated constraints aren't met.
type GetJobsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobsResponseValidationError) ErrorName() string { return "GetJobsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetJobsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobsResponseValidationError{}

// Validate checks the field values on JobSource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobSource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobSourceMultiError, or nil
// if none found.
func (m *JobSource) ValidateAll() error {
	return m.validate(true)
}

func (m *JobSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobSourceValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobSourceValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobSourceValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JobSourceMultiError(errors)
	}

	return nil
}

// JobSourceMultiError is an error wrapping multiple validation errors returned
// by JobSource.ValidateAll() if the designated constraints aren't met.
type JobSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobSourceMultiError) AllErrors() []error { return m }

// JobSourceValidationError is the validation error returned by
// JobSource.Validate if the designated constraints aren't met.
type JobSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobSourceValidationError) ErrorName() string { return "JobSourceValidationError" }

// Error satisfies the builtin error interface
func (e JobSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobSourceValidationError{}

// Validate checks the field values on JobSourceOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobSourceOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobSourceOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobSourceOptionsMultiError, or nil if none found.
func (m *JobSourceOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *JobSourceOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *JobSourceOptions_Postgres:
		if v == nil {
			err := JobSourceOptionsValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgres()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobSourceOptionsValidationError{
						field:  "Postgres",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobSourceOptionsValidationError{
						field:  "Postgres",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgres()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobSourceOptionsValidationError{
					field:  "Postgres",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobSourceOptions_AwsS3:
		if v == nil {
			err := JobSourceOptionsValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsS3()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobSourceOptionsValidationError{
						field:  "AwsS3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobSourceOptionsValidationError{
						field:  "AwsS3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsS3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobSourceOptionsValidationError{
					field:  "AwsS3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobSourceOptions_Mysql:
		if v == nil {
			err := JobSourceOptionsValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobSourceOptionsValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobSourceOptionsValidationError{
						field:  "Mysql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobSourceOptionsValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobSourceOptions_Generate:
		if v == nil {
			err := JobSourceOptionsValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGenerate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobSourceOptionsValidationError{
						field:  "Generate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobSourceOptionsValidationError{
						field:  "Generate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGenerate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobSourceOptionsValidationError{
					field:  "Generate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobSourceOptions_AiGenerate:
		if v == nil {
			err := JobSourceOptionsValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAiGenerate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobSourceOptionsValidationError{
						field:  "AiGenerate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobSourceOptionsValidationError{
						field:  "AiGenerate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAiGenerate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobSourceOptionsValidationError{
					field:  "AiGenerate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobSourceOptions_Mongodb:
		if v == nil {
			err := JobSourceOptionsValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobSourceOptionsValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobSourceOptionsValidationError{
						field:  "Mongodb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobSourceOptionsValidationError{
					field:  "Mongodb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return JobSourceOptionsMultiError(errors)
	}

	return nil
}

// JobSourceOptionsMultiError is an error wrapping multiple validation errors
// returned by JobSourceOptions.ValidateAll() if the designated constraints
// aren't met.
type JobSourceOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobSourceOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobSourceOptionsMultiError) AllErrors() []error { return m }

// JobSourceOptionsValidationError is the validation error returned by
// JobSourceOptions.Validate if the designated constraints aren't met.
type JobSourceOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobSourceOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobSourceOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobSourceOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobSourceOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobSourceOptionsValidationError) ErrorName() string { return "JobSourceOptionsValidationError" }

// Error satisfies the builtin error interface
func (e JobSourceOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobSourceOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobSourceOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobSourceOptionsValidationError{}

// Validate checks the field values on CreateJobDestination with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateJobDestination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateJobDestination with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateJobDestinationMultiError, or nil if none found.
func (m *CreateJobDestination) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobDestination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectionId

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateJobDestinationValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateJobDestinationValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJobDestinationValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateJobDestinationMultiError(errors)
	}

	return nil
}

// CreateJobDestinationMultiError is an error wrapping multiple validation
// errors returned by CreateJobDestination.ValidateAll() if the designated
// constraints aren't met.
type CreateJobDestinationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobDestinationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobDestinationMultiError) AllErrors() []error { return m }

// CreateJobDestinationValidationError is the validation error returned by
// CreateJobDestination.Validate if the designated constraints aren't met.
type CreateJobDestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobDestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobDestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobDestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobDestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobDestinationValidationError) ErrorName() string {
	return "CreateJobDestinationValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJobDestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobDestination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobDestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobDestinationValidationError{}

// Validate checks the field values on JobDestination with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobDestination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobDestination with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobDestinationMultiError,
// or nil if none found.
func (m *JobDestination) ValidateAll() error {
	return m.validate(true)
}

func (m *JobDestination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectionId

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobDestinationValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobDestinationValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobDestinationValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	if len(errors) > 0 {
		return JobDestinationMultiError(errors)
	}

	return nil
}

// JobDestinationMultiError is an error wrapping multiple validation errors
// returned by JobDestination.ValidateAll() if the designated constraints
// aren't met.
type JobDestinationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobDestinationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobDestinationMultiError) AllErrors() []error { return m }

// JobDestinationValidationError is the validation error returned by
// JobDestination.Validate if the designated constraints aren't met.
type JobDestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobDestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobDestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobDestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobDestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobDestinationValidationError) ErrorName() string { return "JobDestinationValidationError" }

// Error satisfies the builtin error interface
func (e JobDestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobDestination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobDestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobDestinationValidationError{}

// Validate checks the field values on AiGenerateSourceOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AiGenerateSourceOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AiGenerateSourceOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AiGenerateSourceOptionsMultiError, or nil if none found.
func (m *AiGenerateSourceOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *AiGenerateSourceOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AiConnectionId

	for idx, item := range m.GetSchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AiGenerateSourceOptionsValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AiGenerateSourceOptionsValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AiGenerateSourceOptionsValidationError{
					field:  fmt.Sprintf("Schemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ModelName

	if m.FkSourceConnectionId != nil {
		// no validation rules for FkSourceConnectionId
	}

	if m.UserPrompt != nil {
		// no validation rules for UserPrompt
	}

	if m.GenerateBatchSize != nil {
		// no validation rules for GenerateBatchSize
	}

	if len(errors) > 0 {
		return AiGenerateSourceOptionsMultiError(errors)
	}

	return nil
}

// AiGenerateSourceOptionsMultiError is an error wrapping multiple validation
// errors returned by AiGenerateSourceOptions.ValidateAll() if the designated
// constraints aren't met.
type AiGenerateSourceOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AiGenerateSourceOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AiGenerateSourceOptionsMultiError) AllErrors() []error { return m }

// AiGenerateSourceOptionsValidationError is the validation error returned by
// AiGenerateSourceOptions.Validate if the designated constraints aren't met.
type AiGenerateSourceOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AiGenerateSourceOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AiGenerateSourceOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AiGenerateSourceOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AiGenerateSourceOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AiGenerateSourceOptionsValidationError) ErrorName() string {
	return "AiGenerateSourceOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e AiGenerateSourceOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAiGenerateSourceOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AiGenerateSourceOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AiGenerateSourceOptionsValidationError{}

// Validate checks the field values on AiGenerateSourceSchemaOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AiGenerateSourceSchemaOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AiGenerateSourceSchemaOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AiGenerateSourceSchemaOptionMultiError, or nil if none found.
func (m *AiGenerateSourceSchemaOption) ValidateAll() error {
	return m.validate(true)
}

func (m *AiGenerateSourceSchemaOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AiGenerateSourceSchemaOptionValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AiGenerateSourceSchemaOptionValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AiGenerateSourceSchemaOptionValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AiGenerateSourceSchemaOptionMultiError(errors)
	}

	return nil
}

// AiGenerateSourceSchemaOptionMultiError is an error wrapping multiple
// validation errors returned by AiGenerateSourceSchemaOption.ValidateAll() if
// the designated constraints aren't met.
type AiGenerateSourceSchemaOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AiGenerateSourceSchemaOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AiGenerateSourceSchemaOptionMultiError) AllErrors() []error { return m }

// AiGenerateSourceSchemaOptionValidationError is the validation error returned
// by AiGenerateSourceSchemaOption.Validate if the designated constraints
// aren't met.
type AiGenerateSourceSchemaOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AiGenerateSourceSchemaOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AiGenerateSourceSchemaOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AiGenerateSourceSchemaOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AiGenerateSourceSchemaOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AiGenerateSourceSchemaOptionValidationError) ErrorName() string {
	return "AiGenerateSourceSchemaOptionValidationError"
}

// Error satisfies the builtin error interface
func (e AiGenerateSourceSchemaOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAiGenerateSourceSchemaOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AiGenerateSourceSchemaOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AiGenerateSourceSchemaOptionValidationError{}

// Validate checks the field values on AiGenerateSourceTableOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AiGenerateSourceTableOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AiGenerateSourceTableOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AiGenerateSourceTableOptionMultiError, or nil if none found.
func (m *AiGenerateSourceTableOption) ValidateAll() error {
	return m.validate(true)
}

func (m *AiGenerateSourceTableOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Table

	// no validation rules for RowCount

	if len(errors) > 0 {
		return AiGenerateSourceTableOptionMultiError(errors)
	}

	return nil
}

// AiGenerateSourceTableOptionMultiError is an error wrapping multiple
// validation errors returned by AiGenerateSourceTableOption.ValidateAll() if
// the designated constraints aren't met.
type AiGenerateSourceTableOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AiGenerateSourceTableOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AiGenerateSourceTableOptionMultiError) AllErrors() []error { return m }

// AiGenerateSourceTableOptionValidationError is the validation error returned
// by AiGenerateSourceTableOption.Validate if the designated constraints
// aren't met.
type AiGenerateSourceTableOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AiGenerateSourceTableOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AiGenerateSourceTableOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AiGenerateSourceTableOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AiGenerateSourceTableOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AiGenerateSourceTableOptionValidationError) ErrorName() string {
	return "AiGenerateSourceTableOptionValidationError"
}

// Error satisfies the builtin error interface
func (e AiGenerateSourceTableOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAiGenerateSourceTableOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AiGenerateSourceTableOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AiGenerateSourceTableOptionValidationError{}

// Validate checks the field values on GenerateSourceOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateSourceOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateSourceOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateSourceOptionsMultiError, or nil if none found.
func (m *GenerateSourceOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateSourceOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenerateSourceOptionsValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenerateSourceOptionsValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenerateSourceOptionsValidationError{
					field:  fmt.Sprintf("Schemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FkSourceConnectionId != nil {
		// no validation rules for FkSourceConnectionId
	}

	if len(errors) > 0 {
		return GenerateSourceOptionsMultiError(errors)
	}

	return nil
}

// GenerateSourceOptionsMultiError is an error wrapping multiple validation
// errors returned by GenerateSourceOptions.ValidateAll() if the designated
// constraints aren't met.
type GenerateSourceOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateSourceOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateSourceOptionsMultiError) AllErrors() []error { return m }

// GenerateSourceOptionsValidationError is the validation error returned by
// GenerateSourceOptions.Validate if the designated constraints aren't met.
type GenerateSourceOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateSourceOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateSourceOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateSourceOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateSourceOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateSourceOptionsValidationError) ErrorName() string {
	return "GenerateSourceOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateSourceOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateSourceOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateSourceOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateSourceOptionsValidationError{}

// Validate checks the field values on GenerateSourceSchemaOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateSourceSchemaOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateSourceSchemaOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateSourceSchemaOptionMultiError, or nil if none found.
func (m *GenerateSourceSchemaOption) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateSourceSchemaOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenerateSourceSchemaOptionValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenerateSourceSchemaOptionValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenerateSourceSchemaOptionValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GenerateSourceSchemaOptionMultiError(errors)
	}

	return nil
}

// GenerateSourceSchemaOptionMultiError is an error wrapping multiple
// validation errors returned by GenerateSourceSchemaOption.ValidateAll() if
// the designated constraints aren't met.
type GenerateSourceSchemaOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateSourceSchemaOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateSourceSchemaOptionMultiError) AllErrors() []error { return m }

// GenerateSourceSchemaOptionValidationError is the validation error returned
// by GenerateSourceSchemaOption.Validate if the designated constraints aren't met.
type GenerateSourceSchemaOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateSourceSchemaOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateSourceSchemaOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateSourceSchemaOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateSourceSchemaOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateSourceSchemaOptionValidationError) ErrorName() string {
	return "GenerateSourceSchemaOptionValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateSourceSchemaOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateSourceSchemaOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateSourceSchemaOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateSourceSchemaOptionValidationError{}

// Validate checks the field values on GenerateSourceTableOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateSourceTableOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateSourceTableOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateSourceTableOptionMultiError, or nil if none found.
func (m *GenerateSourceTableOption) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateSourceTableOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Table

	// no validation rules for RowCount

	if len(errors) > 0 {
		return GenerateSourceTableOptionMultiError(errors)
	}

	return nil
}

// GenerateSourceTableOptionMultiError is an error wrapping multiple validation
// errors returned by GenerateSourceTableOption.ValidateAll() if the
// designated constraints aren't met.
type GenerateSourceTableOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateSourceTableOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateSourceTableOptionMultiError) AllErrors() []error { return m }

// GenerateSourceTableOptionValidationError is the validation error returned by
// GenerateSourceTableOption.Validate if the designated constraints aren't met.
type GenerateSourceTableOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateSourceTableOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateSourceTableOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateSourceTableOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateSourceTableOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateSourceTableOptionValidationError) ErrorName() string {
	return "GenerateSourceTableOptionValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateSourceTableOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateSourceTableOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateSourceTableOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateSourceTableOptionValidationError{}

// Validate checks the field values on MongoDBSourceConnectionOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MongoDBSourceConnectionOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MongoDBSourceConnectionOptions with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MongoDBSourceConnectionOptionsMultiError, or nil if none found.
func (m *MongoDBSourceConnectionOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *MongoDBSourceConnectionOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectionId

	if len(errors) > 0 {
		return MongoDBSourceConnectionOptionsMultiError(errors)
	}

	return nil
}

// MongoDBSourceConnectionOptionsMultiError is an error wrapping multiple
// validation errors returned by MongoDBSourceConnectionOptions.ValidateAll()
// if the designated constraints aren't met.
type MongoDBSourceConnectionOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MongoDBSourceConnectionOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MongoDBSourceConnectionOptionsMultiError) AllErrors() []error { return m }

// MongoDBSourceConnectionOptionsValidationError is the validation error
// returned by MongoDBSourceConnectionOptions.Validate if the designated
// constraints aren't met.
type MongoDBSourceConnectionOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MongoDBSourceConnectionOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MongoDBSourceConnectionOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MongoDBSourceConnectionOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MongoDBSourceConnectionOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MongoDBSourceConnectionOptionsValidationError) ErrorName() string {
	return "MongoDBSourceConnectionOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e MongoDBSourceConnectionOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMongoDBSourceConnectionOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MongoDBSourceConnectionOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MongoDBSourceConnectionOptionsValidationError{}

// Validate checks the field values on PostgresSourceConnectionOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostgresSourceConnectionOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresSourceConnectionOptions with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PostgresSourceConnectionOptionsMultiError, or nil if none found.
func (m *PostgresSourceConnectionOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresSourceConnectionOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HaltOnNewColumnAddition

	for idx, item := range m.GetSchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostgresSourceConnectionOptionsValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostgresSourceConnectionOptionsValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostgresSourceConnectionOptionsValidationError{
					field:  fmt.Sprintf("Schemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ConnectionId

	// no validation rules for SubsetByForeignKeyConstraints

	if len(errors) > 0 {
		return PostgresSourceConnectionOptionsMultiError(errors)
	}

	return nil
}

// PostgresSourceConnectionOptionsMultiError is an error wrapping multiple
// validation errors returned by PostgresSourceConnectionOptions.ValidateAll()
// if the designated constraints aren't met.
type PostgresSourceConnectionOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresSourceConnectionOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresSourceConnectionOptionsMultiError) AllErrors() []error { return m }

// PostgresSourceConnectionOptionsValidationError is the validation error
// returned by PostgresSourceConnectionOptions.Validate if the designated
// constraints aren't met.
type PostgresSourceConnectionOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresSourceConnectionOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresSourceConnectionOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresSourceConnectionOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresSourceConnectionOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresSourceConnectionOptionsValidationError) ErrorName() string {
	return "PostgresSourceConnectionOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresSourceConnectionOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresSourceConnectionOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresSourceConnectionOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresSourceConnectionOptionsValidationError{}

// Validate checks the field values on PostgresSourceSchemaOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostgresSourceSchemaOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresSourceSchemaOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostgresSourceSchemaOptionMultiError, or nil if none found.
func (m *PostgresSourceSchemaOption) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresSourceSchemaOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostgresSourceSchemaOptionValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostgresSourceSchemaOptionValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostgresSourceSchemaOptionValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PostgresSourceSchemaOptionMultiError(errors)
	}

	return nil
}

// PostgresSourceSchemaOptionMultiError is an error wrapping multiple
// validation errors returned by PostgresSourceSchemaOption.ValidateAll() if
// the designated constraints aren't met.
type PostgresSourceSchemaOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresSourceSchemaOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresSourceSchemaOptionMultiError) AllErrors() []error { return m }

// PostgresSourceSchemaOptionValidationError is the validation error returned
// by PostgresSourceSchemaOption.Validate if the designated constraints aren't met.
type PostgresSourceSchemaOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresSourceSchemaOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresSourceSchemaOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresSourceSchemaOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresSourceSchemaOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresSourceSchemaOptionValidationError) ErrorName() string {
	return "PostgresSourceSchemaOptionValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresSourceSchemaOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresSourceSchemaOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresSourceSchemaOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresSourceSchemaOptionValidationError{}

// Validate checks the field values on PostgresSourceTableOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostgresSourceTableOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresSourceTableOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostgresSourceTableOptionMultiError, or nil if none found.
func (m *PostgresSourceTableOption) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresSourceTableOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Table

	if m.WhereClause != nil {
		// no validation rules for WhereClause
	}

	if len(errors) > 0 {
		return PostgresSourceTableOptionMultiError(errors)
	}

	return nil
}

// PostgresSourceTableOptionMultiError is an error wrapping multiple validation
// errors returned by PostgresSourceTableOption.ValidateAll() if the
// designated constraints aren't met.
type PostgresSourceTableOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresSourceTableOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresSourceTableOptionMultiError) AllErrors() []error { return m }

// PostgresSourceTableOptionValidationError is the validation error returned by
// PostgresSourceTableOption.Validate if the designated constraints aren't met.
type PostgresSourceTableOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresSourceTableOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresSourceTableOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresSourceTableOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresSourceTableOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresSourceTableOptionValidationError) ErrorName() string {
	return "PostgresSourceTableOptionValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresSourceTableOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresSourceTableOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresSourceTableOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresSourceTableOptionValidationError{}

// Validate checks the field values on MysqlSourceConnectionOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MysqlSourceConnectionOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MysqlSourceConnectionOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MysqlSourceConnectionOptionsMultiError, or nil if none found.
func (m *MysqlSourceConnectionOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *MysqlSourceConnectionOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HaltOnNewColumnAddition

	for idx, item := range m.GetSchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MysqlSourceConnectionOptionsValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MysqlSourceConnectionOptionsValidationError{
						field:  fmt.Sprintf("Schemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MysqlSourceConnectionOptionsValidationError{
					field:  fmt.Sprintf("Schemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ConnectionId

	// no validation rules for SubsetByForeignKeyConstraints

	if len(errors) > 0 {
		return MysqlSourceConnectionOptionsMultiError(errors)
	}

	return nil
}

// MysqlSourceConnectionOptionsMultiError is an error wrapping multiple
// validation errors returned by MysqlSourceConnectionOptions.ValidateAll() if
// the designated constraints aren't met.
type MysqlSourceConnectionOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MysqlSourceConnectionOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MysqlSourceConnectionOptionsMultiError) AllErrors() []error { return m }

// MysqlSourceConnectionOptionsValidationError is the validation error returned
// by MysqlSourceConnectionOptions.Validate if the designated constraints
// aren't met.
type MysqlSourceConnectionOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlSourceConnectionOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlSourceConnectionOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlSourceConnectionOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlSourceConnectionOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlSourceConnectionOptionsValidationError) ErrorName() string {
	return "MysqlSourceConnectionOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e MysqlSourceConnectionOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysqlSourceConnectionOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlSourceConnectionOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlSourceConnectionOptionsValidationError{}

// Validate checks the field values on MysqlSourceSchemaOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MysqlSourceSchemaOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MysqlSourceSchemaOption with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MysqlSourceSchemaOptionMultiError, or nil if none found.
func (m *MysqlSourceSchemaOption) ValidateAll() error {
	return m.validate(true)
}

func (m *MysqlSourceSchemaOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MysqlSourceSchemaOptionValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MysqlSourceSchemaOptionValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MysqlSourceSchemaOptionValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MysqlSourceSchemaOptionMultiError(errors)
	}

	return nil
}

// MysqlSourceSchemaOptionMultiError is an error wrapping multiple validation
// errors returned by MysqlSourceSchemaOption.ValidateAll() if the designated
// constraints aren't met.
type MysqlSourceSchemaOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MysqlSourceSchemaOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MysqlSourceSchemaOptionMultiError) AllErrors() []error { return m }

// MysqlSourceSchemaOptionValidationError is the validation error returned by
// MysqlSourceSchemaOption.Validate if the designated constraints aren't met.
type MysqlSourceSchemaOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlSourceSchemaOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlSourceSchemaOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlSourceSchemaOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlSourceSchemaOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlSourceSchemaOptionValidationError) ErrorName() string {
	return "MysqlSourceSchemaOptionValidationError"
}

// Error satisfies the builtin error interface
func (e MysqlSourceSchemaOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysqlSourceSchemaOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlSourceSchemaOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlSourceSchemaOptionValidationError{}

// Validate checks the field values on MysqlSourceTableOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MysqlSourceTableOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MysqlSourceTableOption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MysqlSourceTableOptionMultiError, or nil if none found.
func (m *MysqlSourceTableOption) ValidateAll() error {
	return m.validate(true)
}

func (m *MysqlSourceTableOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Table

	if m.WhereClause != nil {
		// no validation rules for WhereClause
	}

	if len(errors) > 0 {
		return MysqlSourceTableOptionMultiError(errors)
	}

	return nil
}

// MysqlSourceTableOptionMultiError is an error wrapping multiple validation
// errors returned by MysqlSourceTableOption.ValidateAll() if the designated
// constraints aren't met.
type MysqlSourceTableOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MysqlSourceTableOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MysqlSourceTableOptionMultiError) AllErrors() []error { return m }

// MysqlSourceTableOptionValidationError is the validation error returned by
// MysqlSourceTableOption.Validate if the designated constraints aren't met.
type MysqlSourceTableOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlSourceTableOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlSourceTableOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlSourceTableOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlSourceTableOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlSourceTableOptionValidationError) ErrorName() string {
	return "MysqlSourceTableOptionValidationError"
}

// Error satisfies the builtin error interface
func (e MysqlSourceTableOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysqlSourceTableOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlSourceTableOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlSourceTableOptionValidationError{}

// Validate checks the field values on AwsS3SourceConnectionOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AwsS3SourceConnectionOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AwsS3SourceConnectionOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AwsS3SourceConnectionOptionsMultiError, or nil if none found.
func (m *AwsS3SourceConnectionOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *AwsS3SourceConnectionOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectionId

	if len(errors) > 0 {
		return AwsS3SourceConnectionOptionsMultiError(errors)
	}

	return nil
}

// AwsS3SourceConnectionOptionsMultiError is an error wrapping multiple
// validation errors returned by AwsS3SourceConnectionOptions.ValidateAll() if
// the designated constraints aren't met.
type AwsS3SourceConnectionOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AwsS3SourceConnectionOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AwsS3SourceConnectionOptionsMultiError) AllErrors() []error { return m }

// AwsS3SourceConnectionOptionsValidationError is the validation error returned
// by AwsS3SourceConnectionOptions.Validate if the designated constraints
// aren't met.
type AwsS3SourceConnectionOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AwsS3SourceConnectionOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AwsS3SourceConnectionOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AwsS3SourceConnectionOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AwsS3SourceConnectionOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AwsS3SourceConnectionOptionsValidationError) ErrorName() string {
	return "AwsS3SourceConnectionOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e AwsS3SourceConnectionOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAwsS3SourceConnectionOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AwsS3SourceConnectionOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AwsS3SourceConnectionOptionsValidationError{}

// Validate checks the field values on JobDestinationOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobDestinationOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobDestinationOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobDestinationOptionsMultiError, or nil if none found.
func (m *JobDestinationOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *JobDestinationOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Config.(type) {
	case *JobDestinationOptions_PostgresOptions:
		if v == nil {
			err := JobDestinationOptionsValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobDestinationOptionsValidationError{
						field:  "PostgresOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobDestinationOptionsValidationError{
						field:  "PostgresOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobDestinationOptionsValidationError{
					field:  "PostgresOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobDestinationOptions_AwsS3Options:
		if v == nil {
			err := JobDestinationOptionsValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAwsS3Options()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobDestinationOptionsValidationError{
						field:  "AwsS3Options",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobDestinationOptionsValidationError{
						field:  "AwsS3Options",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsS3Options()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobDestinationOptionsValidationError{
					field:  "AwsS3Options",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobDestinationOptions_MysqlOptions:
		if v == nil {
			err := JobDestinationOptionsValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobDestinationOptionsValidationError{
						field:  "MysqlOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobDestinationOptionsValidationError{
						field:  "MysqlOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobDestinationOptionsValidationError{
					field:  "MysqlOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobDestinationOptions_MongodbOptions:
		if v == nil {
			err := JobDestinationOptionsValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMongodbOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobDestinationOptionsValidationError{
						field:  "MongodbOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobDestinationOptionsValidationError{
						field:  "MongodbOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMongodbOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobDestinationOptionsValidationError{
					field:  "MongodbOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobDestinationOptions_GcpCloudstorageOptions:
		if v == nil {
			err := JobDestinationOptionsValidationError{
				field:  "Config",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGcpCloudstorageOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobDestinationOptionsValidationError{
						field:  "GcpCloudstorageOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobDestinationOptionsValidationError{
						field:  "GcpCloudstorageOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGcpCloudstorageOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobDestinationOptionsValidationError{
					field:  "GcpCloudstorageOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return JobDestinationOptionsMultiError(errors)
	}

	return nil
}

// JobDestinationOptionsMultiError is an error wrapping multiple validation
// errors returned by JobDestinationOptions.ValidateAll() if the designated
// constraints aren't met.
type JobDestinationOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobDestinationOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobDestinationOptionsMultiError) AllErrors() []error { return m }

// JobDestinationOptionsValidationError is the validation error returned by
// JobDestinationOptions.Validate if the designated constraints aren't met.
type JobDestinationOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobDestinationOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobDestinationOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobDestinationOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobDestinationOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobDestinationOptionsValidationError) ErrorName() string {
	return "JobDestinationOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e JobDestinationOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobDestinationOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobDestinationOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobDestinationOptionsValidationError{}

// Validate checks the field values on MongoDBDestinationConnectionOptions with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MongoDBDestinationConnectionOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MongoDBDestinationConnectionOptions
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MongoDBDestinationConnectionOptionsMultiError, or nil if none found.
func (m *MongoDBDestinationConnectionOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *MongoDBDestinationConnectionOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MongoDBDestinationConnectionOptionsMultiError(errors)
	}

	return nil
}

// MongoDBDestinationConnectionOptionsMultiError is an error wrapping multiple
// validation errors returned by
// MongoDBDestinationConnectionOptions.ValidateAll() if the designated
// constraints aren't met.
type MongoDBDestinationConnectionOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MongoDBDestinationConnectionOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MongoDBDestinationConnectionOptionsMultiError) AllErrors() []error { return m }

// MongoDBDestinationConnectionOptionsValidationError is the validation error
// returned by MongoDBDestinationConnectionOptions.Validate if the designated
// constraints aren't met.
type MongoDBDestinationConnectionOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MongoDBDestinationConnectionOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MongoDBDestinationConnectionOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MongoDBDestinationConnectionOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MongoDBDestinationConnectionOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MongoDBDestinationConnectionOptionsValidationError) ErrorName() string {
	return "MongoDBDestinationConnectionOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e MongoDBDestinationConnectionOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMongoDBDestinationConnectionOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MongoDBDestinationConnectionOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MongoDBDestinationConnectionOptionsValidationError{}

// Validate checks the field values on
// GcpCloudStorageDestinationConnectionOptions with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GcpCloudStorageDestinationConnectionOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GcpCloudStorageDestinationConnectionOptions with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GcpCloudStorageDestinationConnectionOptionsMultiError, or nil if none found.
func (m *GcpCloudStorageDestinationConnectionOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *GcpCloudStorageDestinationConnectionOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GcpCloudStorageDestinationConnectionOptionsMultiError(errors)
	}

	return nil
}

// GcpCloudStorageDestinationConnectionOptionsMultiError is an error wrapping
// multiple validation errors returned by
// GcpCloudStorageDestinationConnectionOptions.ValidateAll() if the designated
// constraints aren't met.
type GcpCloudStorageDestinationConnectionOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GcpCloudStorageDestinationConnectionOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GcpCloudStorageDestinationConnectionOptionsMultiError) AllErrors() []error { return m }

// GcpCloudStorageDestinationConnectionOptionsValidationError is the validation
// error returned by GcpCloudStorageDestinationConnectionOptions.Validate if
// the designated constraints aren't met.
type GcpCloudStorageDestinationConnectionOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GcpCloudStorageDestinationConnectionOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GcpCloudStorageDestinationConnectionOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GcpCloudStorageDestinationConnectionOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GcpCloudStorageDestinationConnectionOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GcpCloudStorageDestinationConnectionOptionsValidationError) ErrorName() string {
	return "GcpCloudStorageDestinationConnectionOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e GcpCloudStorageDestinationConnectionOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGcpCloudStorageDestinationConnectionOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GcpCloudStorageDestinationConnectionOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GcpCloudStorageDestinationConnectionOptionsValidationError{}

// Validate checks the field values on PostgresDestinationConnectionOptions
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PostgresDestinationConnectionOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresDestinationConnectionOptions
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PostgresDestinationConnectionOptionsMultiError, or nil if none found.
func (m *PostgresDestinationConnectionOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresDestinationConnectionOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTruncateTable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostgresDestinationConnectionOptionsValidationError{
					field:  "TruncateTable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostgresDestinationConnectionOptionsValidationError{
					field:  "TruncateTable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTruncateTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostgresDestinationConnectionOptionsValidationError{
				field:  "TruncateTable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitTableSchema

	if all {
		switch v := interface{}(m.GetOnConflict()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostgresDestinationConnectionOptionsValidationError{
					field:  "OnConflict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostgresDestinationConnectionOptionsValidationError{
					field:  "OnConflict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOnConflict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostgresDestinationConnectionOptionsValidationError{
				field:  "OnConflict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostgresDestinationConnectionOptionsMultiError(errors)
	}

	return nil
}

// PostgresDestinationConnectionOptionsMultiError is an error wrapping multiple
// validation errors returned by
// PostgresDestinationConnectionOptions.ValidateAll() if the designated
// constraints aren't met.
type PostgresDestinationConnectionOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresDestinationConnectionOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresDestinationConnectionOptionsMultiError) AllErrors() []error { return m }

// PostgresDestinationConnectionOptionsValidationError is the validation error
// returned by PostgresDestinationConnectionOptions.Validate if the designated
// constraints aren't met.
type PostgresDestinationConnectionOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresDestinationConnectionOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresDestinationConnectionOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresDestinationConnectionOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresDestinationConnectionOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresDestinationConnectionOptionsValidationError) ErrorName() string {
	return "PostgresDestinationConnectionOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresDestinationConnectionOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresDestinationConnectionOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresDestinationConnectionOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresDestinationConnectionOptionsValidationError{}

// Validate checks the field values on PostgresOnConflictConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostgresOnConflictConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresOnConflictConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostgresOnConflictConfigMultiError, or nil if none found.
func (m *PostgresOnConflictConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresOnConflictConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DoNothing

	if len(errors) > 0 {
		return PostgresOnConflictConfigMultiError(errors)
	}

	return nil
}

// PostgresOnConflictConfigMultiError is an error wrapping multiple validation
// errors returned by PostgresOnConflictConfig.ValidateAll() if the designated
// constraints aren't met.
type PostgresOnConflictConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresOnConflictConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresOnConflictConfigMultiError) AllErrors() []error { return m }

// PostgresOnConflictConfigValidationError is the validation error returned by
// PostgresOnConflictConfig.Validate if the designated constraints aren't met.
type PostgresOnConflictConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresOnConflictConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresOnConflictConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresOnConflictConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresOnConflictConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresOnConflictConfigValidationError) ErrorName() string {
	return "PostgresOnConflictConfigValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresOnConflictConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresOnConflictConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresOnConflictConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresOnConflictConfigValidationError{}

// Validate checks the field values on PostgresTruncateTableConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostgresTruncateTableConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresTruncateTableConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostgresTruncateTableConfigMultiError, or nil if none found.
func (m *PostgresTruncateTableConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresTruncateTableConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TruncateBeforeInsert

	// no validation rules for Cascade

	if len(errors) > 0 {
		return PostgresTruncateTableConfigMultiError(errors)
	}

	return nil
}

// PostgresTruncateTableConfigMultiError is an error wrapping multiple
// validation errors returned by PostgresTruncateTableConfig.ValidateAll() if
// the designated constraints aren't met.
type PostgresTruncateTableConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresTruncateTableConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresTruncateTableConfigMultiError) AllErrors() []error { return m }

// PostgresTruncateTableConfigValidationError is the validation error returned
// by PostgresTruncateTableConfig.Validate if the designated constraints
// aren't met.
type PostgresTruncateTableConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresTruncateTableConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresTruncateTableConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresTruncateTableConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresTruncateTableConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresTruncateTableConfigValidationError) ErrorName() string {
	return "PostgresTruncateTableConfigValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresTruncateTableConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresTruncateTableConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresTruncateTableConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresTruncateTableConfigValidationError{}

// Validate checks the field values on MysqlDestinationConnectionOptions with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MysqlDestinationConnectionOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MysqlDestinationConnectionOptions
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MysqlDestinationConnectionOptionsMultiError, or nil if none found.
func (m *MysqlDestinationConnectionOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *MysqlDestinationConnectionOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTruncateTable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MysqlDestinationConnectionOptionsValidationError{
					field:  "TruncateTable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MysqlDestinationConnectionOptionsValidationError{
					field:  "TruncateTable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTruncateTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MysqlDestinationConnectionOptionsValidationError{
				field:  "TruncateTable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitTableSchema

	if all {
		switch v := interface{}(m.GetOnConflict()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MysqlDestinationConnectionOptionsValidationError{
					field:  "OnConflict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MysqlDestinationConnectionOptionsValidationError{
					field:  "OnConflict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOnConflict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MysqlDestinationConnectionOptionsValidationError{
				field:  "OnConflict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MysqlDestinationConnectionOptionsMultiError(errors)
	}

	return nil
}

// MysqlDestinationConnectionOptionsMultiError is an error wrapping multiple
// validation errors returned by
// MysqlDestinationConnectionOptions.ValidateAll() if the designated
// constraints aren't met.
type MysqlDestinationConnectionOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MysqlDestinationConnectionOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MysqlDestinationConnectionOptionsMultiError) AllErrors() []error { return m }

// MysqlDestinationConnectionOptionsValidationError is the validation error
// returned by MysqlDestinationConnectionOptions.Validate if the designated
// constraints aren't met.
type MysqlDestinationConnectionOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlDestinationConnectionOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlDestinationConnectionOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlDestinationConnectionOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlDestinationConnectionOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlDestinationConnectionOptionsValidationError) ErrorName() string {
	return "MysqlDestinationConnectionOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e MysqlDestinationConnectionOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysqlDestinationConnectionOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlDestinationConnectionOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlDestinationConnectionOptionsValidationError{}

// Validate checks the field values on MysqlTruncateTableConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MysqlTruncateTableConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MysqlTruncateTableConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MysqlTruncateTableConfigMultiError, or nil if none found.
func (m *MysqlTruncateTableConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MysqlTruncateTableConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TruncateBeforeInsert

	if len(errors) > 0 {
		return MysqlTruncateTableConfigMultiError(errors)
	}

	return nil
}

// MysqlTruncateTableConfigMultiError is an error wrapping multiple validation
// errors returned by MysqlTruncateTableConfig.ValidateAll() if the designated
// constraints aren't met.
type MysqlTruncateTableConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MysqlTruncateTableConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MysqlTruncateTableConfigMultiError) AllErrors() []error { return m }

// MysqlTruncateTableConfigValidationError is the validation error returned by
// MysqlTruncateTableConfig.Validate if the designated constraints aren't met.
type MysqlTruncateTableConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlTruncateTableConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlTruncateTableConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlTruncateTableConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlTruncateTableConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlTruncateTableConfigValidationError) ErrorName() string {
	return "MysqlTruncateTableConfigValidationError"
}

// Error satisfies the builtin error interface
func (e MysqlTruncateTableConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysqlTruncateTableConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlTruncateTableConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlTruncateTableConfigValidationError{}

// Validate checks the field values on MysqlOnConflictConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MysqlOnConflictConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MysqlOnConflictConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MysqlOnConflictConfigMultiError, or nil if none found.
func (m *MysqlOnConflictConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *MysqlOnConflictConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DoNothing

	if len(errors) > 0 {
		return MysqlOnConflictConfigMultiError(errors)
	}

	return nil
}

// MysqlOnConflictConfigMultiError is an error wrapping multiple validation
// errors returned by MysqlOnConflictConfig.ValidateAll() if the designated
// constraints aren't met.
type MysqlOnConflictConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MysqlOnConflictConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MysqlOnConflictConfigMultiError) AllErrors() []error { return m }

// MysqlOnConflictConfigValidationError is the validation error returned by
// MysqlOnConflictConfig.Validate if the designated constraints aren't met.
type MysqlOnConflictConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlOnConflictConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlOnConflictConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlOnConflictConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlOnConflictConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlOnConflictConfigValidationError) ErrorName() string {
	return "MysqlOnConflictConfigValidationError"
}

// Error satisfies the builtin error interface
func (e MysqlOnConflictConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysqlOnConflictConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlOnConflictConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlOnConflictConfigValidationError{}

// Validate checks the field values on AwsS3DestinationConnectionOptions with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AwsS3DestinationConnectionOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AwsS3DestinationConnectionOptions
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AwsS3DestinationConnectionOptionsMultiError, or nil if none found.
func (m *AwsS3DestinationConnectionOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *AwsS3DestinationConnectionOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AwsS3DestinationConnectionOptionsMultiError(errors)
	}

	return nil
}

// AwsS3DestinationConnectionOptionsMultiError is an error wrapping multiple
// validation errors returned by
// AwsS3DestinationConnectionOptions.ValidateAll() if the designated
// constraints aren't met.
type AwsS3DestinationConnectionOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AwsS3DestinationConnectionOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AwsS3DestinationConnectionOptionsMultiError) AllErrors() []error { return m }

// AwsS3DestinationConnectionOptionsValidationError is the validation error
// returned by AwsS3DestinationConnectionOptions.Validate if the designated
// constraints aren't met.
type AwsS3DestinationConnectionOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AwsS3DestinationConnectionOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AwsS3DestinationConnectionOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AwsS3DestinationConnectionOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AwsS3DestinationConnectionOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AwsS3DestinationConnectionOptionsValidationError) ErrorName() string {
	return "AwsS3DestinationConnectionOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e AwsS3DestinationConnectionOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAwsS3DestinationConnectionOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AwsS3DestinationConnectionOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AwsS3DestinationConnectionOptionsValidationError{}

// Validate checks the field values on CreateJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateJobRequestMultiError, or nil if none found.
func (m *CreateJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for JobName

	for idx, item := range m.GetMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateJobRequestValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateJobRequestValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateJobRequestValidationError{
					field:  fmt.Sprintf("Mappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateJobRequestValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateJobRequestValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJobRequestValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDestinations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateJobRequestValidationError{
						field:  fmt.Sprintf("Destinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateJobRequestValidationError{
						field:  fmt.Sprintf("Destinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateJobRequestValidationError{
					field:  fmt.Sprintf("Destinations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for InitiateJobRun

	if all {
		switch v := interface{}(m.GetWorkflowOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateJobRequestValidationError{
					field:  "WorkflowOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateJobRequestValidationError{
					field:  "WorkflowOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJobRequestValidationError{
				field:  "WorkflowOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSyncOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateJobRequestValidationError{
					field:  "SyncOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateJobRequestValidationError{
					field:  "SyncOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSyncOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJobRequestValidationError{
				field:  "SyncOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVirtualForeignKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateJobRequestValidationError{
						field:  fmt.Sprintf("VirtualForeignKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateJobRequestValidationError{
						field:  fmt.Sprintf("VirtualForeignKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateJobRequestValidationError{
					field:  fmt.Sprintf("VirtualForeignKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CronSchedule != nil {
		// no validation rules for CronSchedule
	}

	if len(errors) > 0 {
		return CreateJobRequestMultiError(errors)
	}

	return nil
}

// CreateJobRequestMultiError is an error wrapping multiple validation errors
// returned by CreateJobRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobRequestMultiError) AllErrors() []error { return m }

// CreateJobRequestValidationError is the validation error returned by
// CreateJobRequest.Validate if the designated constraints aren't met.
type CreateJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobRequestValidationError) ErrorName() string { return "CreateJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobRequestValidationError{}

// Validate checks the field values on WorkflowOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkflowOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowOptionsMultiError, or nil if none found.
func (m *WorkflowOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.RunTimeout != nil {
		// no validation rules for RunTimeout
	}

	if len(errors) > 0 {
		return WorkflowOptionsMultiError(errors)
	}

	return nil
}

// WorkflowOptionsMultiError is an error wrapping multiple validation errors
// returned by WorkflowOptions.ValidateAll() if the designated constraints
// aren't met.
type WorkflowOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowOptionsMultiError) AllErrors() []error { return m }

// WorkflowOptionsValidationError is the validation error returned by
// WorkflowOptions.Validate if the designated constraints aren't met.
type WorkflowOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowOptionsValidationError) ErrorName() string { return "WorkflowOptionsValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowOptionsValidationError{}

// Validate checks the field values on ActivityOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActivityOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivityOptionsMultiError, or nil if none found.
func (m *ActivityOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRetryPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityOptionsValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityOptionsValidationError{
					field:  "RetryPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityOptionsValidationError{
				field:  "RetryPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ScheduleToCloseTimeout != nil {
		// no validation rules for ScheduleToCloseTimeout
	}

	if m.StartToCloseTimeout != nil {
		// no validation rules for StartToCloseTimeout
	}

	if len(errors) > 0 {
		return ActivityOptionsMultiError(errors)
	}

	return nil
}

// ActivityOptionsMultiError is an error wrapping multiple validation errors
// returned by ActivityOptions.ValidateAll() if the designated constraints
// aren't met.
type ActivityOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityOptionsMultiError) AllErrors() []error { return m }

// ActivityOptionsValidationError is the validation error returned by
// ActivityOptions.Validate if the designated constraints aren't met.
type ActivityOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityOptionsValidationError) ErrorName() string { return "ActivityOptionsValidationError" }

// Error satisfies the builtin error interface
func (e ActivityOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityOptionsValidationError{}

// Validate checks the field values on RetryPolicy with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RetryPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetryPolicy with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RetryPolicyMultiError, or
// nil if none found.
func (m *RetryPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *RetryPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.MaximumAttempts != nil {
		// no validation rules for MaximumAttempts
	}

	if len(errors) > 0 {
		return RetryPolicyMultiError(errors)
	}

	return nil
}

// RetryPolicyMultiError is an error wrapping multiple validation errors
// returned by RetryPolicy.ValidateAll() if the designated constraints aren't met.
type RetryPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetryPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetryPolicyMultiError) AllErrors() []error { return m }

// RetryPolicyValidationError is the validation error returned by
// RetryPolicy.Validate if the designated constraints aren't met.
type RetryPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryPolicyValidationError) ErrorName() string { return "RetryPolicyValidationError" }

// Error satisfies the builtin error interface
func (e RetryPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryPolicyValidationError{}

// Validate checks the field values on CreateJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateJobResponseMultiError, or nil if none found.
func (m *CreateJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateJobResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateJobResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJobResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateJobResponseMultiError(errors)
	}

	return nil
}

// CreateJobResponseMultiError is an error wrapping multiple validation errors
// returned by CreateJobResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobResponseMultiError) AllErrors() []error { return m }

// CreateJobResponseValidationError is the validation error returned by
// CreateJobResponse.Validate if the designated constraints aren't met.
type CreateJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobResponseValidationError) ErrorName() string {
	return "CreateJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobResponseValidationError{}

// Validate checks the field values on JobMappingTransformer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobMappingTransformer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobMappingTransformer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobMappingTransformerMultiError, or nil if none found.
func (m *JobMappingTransformer) ValidateAll() error {
	return m.validate(true)
}

func (m *JobMappingTransformer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobMappingTransformerValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobMappingTransformerValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobMappingTransformerValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JobMappingTransformerMultiError(errors)
	}

	return nil
}

// JobMappingTransformerMultiError is an error wrapping multiple validation
// errors returned by JobMappingTransformer.ValidateAll() if the designated
// constraints aren't met.
type JobMappingTransformerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobMappingTransformerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobMappingTransformerMultiError) AllErrors() []error { return m }

// JobMappingTransformerValidationError is the validation error returned by
// JobMappingTransformer.Validate if the designated constraints aren't met.
type JobMappingTransformerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobMappingTransformerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobMappingTransformerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobMappingTransformerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobMappingTransformerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobMappingTransformerValidationError) ErrorName() string {
	return "JobMappingTransformerValidationError"
}

// Error satisfies the builtin error interface
func (e JobMappingTransformerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobMappingTransformer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobMappingTransformerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobMappingTransformerValidationError{}

// Validate checks the field values on JobMapping with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobMapping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobMapping with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobMappingMultiError, or
// nil if none found.
func (m *JobMapping) ValidateAll() error {
	return m.validate(true)
}

func (m *JobMapping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	// no validation rules for Table

	// no validation rules for Column

	if all {
		switch v := interface{}(m.GetTransformer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobMappingValidationError{
					field:  "Transformer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobMappingValidationError{
					field:  "Transformer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransformer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobMappingValidationError{
				field:  "Transformer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JobMappingMultiError(errors)
	}

	return nil
}

// JobMappingMultiError is an error wrapping multiple validation errors
// returned by JobMapping.ValidateAll() if the designated constraints aren't met.
type JobMappingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobMappingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobMappingMultiError) AllErrors() []error { return m }

// JobMappingValidationError is the validation error returned by
// JobMapping.Validate if the designated constraints aren't met.
type JobMappingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobMappingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobMappingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobMappingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobMappingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobMappingValidationError) ErrorName() string { return "JobMappingValidationError" }

// Error satisfies the builtin error interface
func (e JobMappingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobMapping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobMappingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobMappingValidationError{}

// Validate checks the field values on GetJobRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetJobRequestMultiError, or
// nil if none found.
func (m *GetJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetJobRequestMultiError(errors)
	}

	return nil
}

// GetJobRequestMultiError is an error wrapping multiple validation errors
// returned by GetJobRequest.ValidateAll() if the designated constraints
// aren't met.
type GetJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRequestMultiError) AllErrors() []error { return m }

// GetJobRequestValidationError is the validation error returned by
// GetJobRequest.Validate if the designated constraints aren't met.
type GetJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRequestValidationError) ErrorName() string { return "GetJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRequestValidationError{}

// Validate checks the field values on GetJobResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetJobResponseMultiError,
// or nil if none found.
func (m *GetJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetJobResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetJobResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetJobResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetJobResponseMultiError(errors)
	}

	return nil
}

// GetJobResponseMultiError is an error wrapping multiple validation errors
// returned by GetJobResponse.ValidateAll() if the designated constraints
// aren't met.
type GetJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobResponseMultiError) AllErrors() []error { return m }

// GetJobResponseValidationError is the validation error returned by
// GetJobResponse.Validate if the designated constraints aren't met.
type GetJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobResponseValidationError) ErrorName() string { return "GetJobResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobResponseValidationError{}

// Validate checks the field values on UpdateJobScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateJobScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateJobScheduleRequestMultiError, or nil if none found.
func (m *UpdateJobScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.CronSchedule != nil {
		// no validation rules for CronSchedule
	}

	if len(errors) > 0 {
		return UpdateJobScheduleRequestMultiError(errors)
	}

	return nil
}

// UpdateJobScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateJobScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobScheduleRequestMultiError) AllErrors() []error { return m }

// UpdateJobScheduleRequestValidationError is the validation error returned by
// UpdateJobScheduleRequest.Validate if the designated constraints aren't met.
type UpdateJobScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobScheduleRequestValidationError) ErrorName() string {
	return "UpdateJobScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobScheduleRequestValidationError{}

// Validate checks the field values on UpdateJobScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateJobScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateJobScheduleResponseMultiError, or nil if none found.
func (m *UpdateJobScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateJobScheduleResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateJobScheduleResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJobScheduleResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateJobScheduleResponseMultiError(errors)
	}

	return nil
}

// UpdateJobScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateJobScheduleResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateJobScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobScheduleResponseMultiError) AllErrors() []error { return m }

// UpdateJobScheduleResponseValidationError is the validation error returned by
// UpdateJobScheduleResponse.Validate if the designated constraints aren't met.
type UpdateJobScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobScheduleResponseValidationError) ErrorName() string {
	return "UpdateJobScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobScheduleResponseValidationError{}

// Validate checks the field values on PauseJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PauseJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PauseJobRequestMultiError, or nil if none found.
func (m *PauseJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pause

	if m.Note != nil {
		// no validation rules for Note
	}

	if len(errors) > 0 {
		return PauseJobRequestMultiError(errors)
	}

	return nil
}

// PauseJobRequestMultiError is an error wrapping multiple validation errors
// returned by PauseJobRequest.ValidateAll() if the designated constraints
// aren't met.
type PauseJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseJobRequestMultiError) AllErrors() []error { return m }

// PauseJobRequestValidationError is the validation error returned by
// PauseJobRequest.Validate if the designated constraints aren't met.
type PauseJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseJobRequestValidationError) ErrorName() string { return "PauseJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e PauseJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseJobRequestValidationError{}

// Validate checks the field values on PauseJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PauseJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PauseJobResponseMultiError, or nil if none found.
func (m *PauseJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PauseJobResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PauseJobResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PauseJobResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PauseJobResponseMultiError(errors)
	}

	return nil
}

// PauseJobResponseMultiError is an error wrapping multiple validation errors
// returned by PauseJobResponse.ValidateAll() if the designated constraints
// aren't met.
type PauseJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseJobResponseMultiError) AllErrors() []error { return m }

// PauseJobResponseValidationError is the validation error returned by
// PauseJobResponse.Validate if the designated constraints aren't met.
type PauseJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseJobResponseValidationError) ErrorName() string { return "PauseJobResponseValidationError" }

// Error satisfies the builtin error interface
func (e PauseJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseJobResponseValidationError{}

// Validate checks the field values on UpdateJobSourceConnectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateJobSourceConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobSourceConnectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateJobSourceConnectionRequestMultiError, or nil if none found.
func (m *UpdateJobSourceConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobSourceConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateJobSourceConnectionRequestValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateJobSourceConnectionRequestValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJobSourceConnectionRequestValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateJobSourceConnectionRequestValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateJobSourceConnectionRequestValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateJobSourceConnectionRequestValidationError{
					field:  fmt.Sprintf("Mappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVirtualForeignKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateJobSourceConnectionRequestValidationError{
						field:  fmt.Sprintf("VirtualForeignKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateJobSourceConnectionRequestValidationError{
						field:  fmt.Sprintf("VirtualForeignKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateJobSourceConnectionRequestValidationError{
					field:  fmt.Sprintf("VirtualForeignKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateJobSourceConnectionRequestMultiError(errors)
	}

	return nil
}

// UpdateJobSourceConnectionRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateJobSourceConnectionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobSourceConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobSourceConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobSourceConnectionRequestMultiError) AllErrors() []error { return m }

// UpdateJobSourceConnectionRequestValidationError is the validation error
// returned by UpdateJobSourceConnectionRequest.Validate if the designated
// constraints aren't met.
type UpdateJobSourceConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobSourceConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobSourceConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobSourceConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobSourceConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobSourceConnectionRequestValidationError) ErrorName() string {
	return "UpdateJobSourceConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobSourceConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobSourceConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobSourceConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobSourceConnectionRequestValidationError{}

// Validate checks the field values on UpdateJobSourceConnectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateJobSourceConnectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobSourceConnectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateJobSourceConnectionResponseMultiError, or nil if none found.
func (m *UpdateJobSourceConnectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobSourceConnectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateJobSourceConnectionResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateJobSourceConnectionResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJobSourceConnectionResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateJobSourceConnectionResponseMultiError(errors)
	}

	return nil
}

// UpdateJobSourceConnectionResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateJobSourceConnectionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobSourceConnectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobSourceConnectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobSourceConnectionResponseMultiError) AllErrors() []error { return m }

// UpdateJobSourceConnectionResponseValidationError is the validation error
// returned by UpdateJobSourceConnectionResponse.Validate if the designated
// constraints aren't met.
type UpdateJobSourceConnectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobSourceConnectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobSourceConnectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobSourceConnectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobSourceConnectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobSourceConnectionResponseValidationError) ErrorName() string {
	return "UpdateJobSourceConnectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobSourceConnectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobSourceConnectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobSourceConnectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobSourceConnectionResponseValidationError{}

// Validate checks the field values on PostgresSourceSchemaSubset with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostgresSourceSchemaSubset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostgresSourceSchemaSubset with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostgresSourceSchemaSubsetMultiError, or nil if none found.
func (m *PostgresSourceSchemaSubset) ValidateAll() error {
	return m.validate(true)
}

func (m *PostgresSourceSchemaSubset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPostgresSchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostgresSourceSchemaSubsetValidationError{
						field:  fmt.Sprintf("PostgresSchemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostgresSourceSchemaSubsetValidationError{
						field:  fmt.Sprintf("PostgresSchemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostgresSourceSchemaSubsetValidationError{
					field:  fmt.Sprintf("PostgresSchemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PostgresSourceSchemaSubsetMultiError(errors)
	}

	return nil
}

// PostgresSourceSchemaSubsetMultiError is an error wrapping multiple
// validation errors returned by PostgresSourceSchemaSubset.ValidateAll() if
// the designated constraints aren't met.
type PostgresSourceSchemaSubsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostgresSourceSchemaSubsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostgresSourceSchemaSubsetMultiError) AllErrors() []error { return m }

// PostgresSourceSchemaSubsetValidationError is the validation error returned
// by PostgresSourceSchemaSubset.Validate if the designated constraints aren't met.
type PostgresSourceSchemaSubsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostgresSourceSchemaSubsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostgresSourceSchemaSubsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostgresSourceSchemaSubsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostgresSourceSchemaSubsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostgresSourceSchemaSubsetValidationError) ErrorName() string {
	return "PostgresSourceSchemaSubsetValidationError"
}

// Error satisfies the builtin error interface
func (e PostgresSourceSchemaSubsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostgresSourceSchemaSubset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostgresSourceSchemaSubsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostgresSourceSchemaSubsetValidationError{}

// Validate checks the field values on MysqlSourceSchemaSubset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MysqlSourceSchemaSubset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MysqlSourceSchemaSubset with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MysqlSourceSchemaSubsetMultiError, or nil if none found.
func (m *MysqlSourceSchemaSubset) ValidateAll() error {
	return m.validate(true)
}

func (m *MysqlSourceSchemaSubset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMysqlSchemas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MysqlSourceSchemaSubsetValidationError{
						field:  fmt.Sprintf("MysqlSchemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MysqlSourceSchemaSubsetValidationError{
						field:  fmt.Sprintf("MysqlSchemas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MysqlSourceSchemaSubsetValidationError{
					field:  fmt.Sprintf("MysqlSchemas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MysqlSourceSchemaSubsetMultiError(errors)
	}

	return nil
}

// MysqlSourceSchemaSubsetMultiError is an error wrapping multiple validation
// errors returned by MysqlSourceSchemaSubset.ValidateAll() if the designated
// constraints aren't met.
type MysqlSourceSchemaSubsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MysqlSourceSchemaSubsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MysqlSourceSchemaSubsetMultiError) AllErrors() []error { return m }

// MysqlSourceSchemaSubsetValidationError is the validation error returned by
// MysqlSourceSchemaSubset.Validate if the designated constraints aren't met.
type MysqlSourceSchemaSubsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlSourceSchemaSubsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlSourceSchemaSubsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlSourceSchemaSubsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlSourceSchemaSubsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlSourceSchemaSubsetValidationError) ErrorName() string {
	return "MysqlSourceSchemaSubsetValidationError"
}

// Error satisfies the builtin error interface
func (e MysqlSourceSchemaSubsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysqlSourceSchemaSubset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlSourceSchemaSubsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlSourceSchemaSubsetValidationError{}

// Validate checks the field values on JobSourceSqlSubetSchemas with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobSourceSqlSubetSchemas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobSourceSqlSubetSchemas with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobSourceSqlSubetSchemasMultiError, or nil if none found.
func (m *JobSourceSqlSubetSchemas) ValidateAll() error {
	return m.validate(true)
}

func (m *JobSourceSqlSubetSchemas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Schemas.(type) {
	case *JobSourceSqlSubetSchemas_PostgresSubset:
		if v == nil {
			err := JobSourceSqlSubetSchemasValidationError{
				field:  "Schemas",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPostgresSubset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobSourceSqlSubetSchemasValidationError{
						field:  "PostgresSubset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobSourceSqlSubetSchemasValidationError{
						field:  "PostgresSubset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPostgresSubset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobSourceSqlSubetSchemasValidationError{
					field:  "PostgresSubset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *JobSourceSqlSubetSchemas_MysqlSubset:
		if v == nil {
			err := JobSourceSqlSubetSchemasValidationError{
				field:  "Schemas",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMysqlSubset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobSourceSqlSubetSchemasValidationError{
						field:  "MysqlSubset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobSourceSqlSubetSchemasValidationError{
						field:  "MysqlSubset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMysqlSubset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobSourceSqlSubetSchemasValidationError{
					field:  "MysqlSubset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return JobSourceSqlSubetSchemasMultiError(errors)
	}

	return nil
}

// JobSourceSqlSubetSchemasMultiError is an error wrapping multiple validation
// errors returned by JobSourceSqlSubetSchemas.ValidateAll() if the designated
// constraints aren't met.
type JobSourceSqlSubetSchemasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobSourceSqlSubetSchemasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobSourceSqlSubetSchemasMultiError) AllErrors() []error { return m }

// JobSourceSqlSubetSchemasValidationError is the validation error returned by
// JobSourceSqlSubetSchemas.Validate if the designated constraints aren't met.
type JobSourceSqlSubetSchemasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobSourceSqlSubetSchemasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobSourceSqlSubetSchemasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobSourceSqlSubetSchemasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobSourceSqlSubetSchemasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobSourceSqlSubetSchemasValidationError) ErrorName() string {
	return "JobSourceSqlSubetSchemasValidationError"
}

// Error satisfies the builtin error interface
func (e JobSourceSqlSubetSchemasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobSourceSqlSubetSchemas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobSourceSqlSubetSchemasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobSourceSqlSubetSchemasValidationError{}

// Validate checks the field values on SetJobSourceSqlConnectionSubsetsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetJobSourceSqlConnectionSubsetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SetJobSourceSqlConnectionSubsetsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SetJobSourceSqlConnectionSubsetsRequestMultiError, or nil if none found.
func (m *SetJobSourceSqlConnectionSubsetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetJobSourceSqlConnectionSubsetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSchemas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetJobSourceSqlConnectionSubsetsRequestValidationError{
					field:  "Schemas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetJobSourceSqlConnectionSubsetsRequestValidationError{
					field:  "Schemas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchemas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetJobSourceSqlConnectionSubsetsRequestValidationError{
				field:  "Schemas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SubsetByForeignKeyConstraints

	if len(errors) > 0 {
		return SetJobSourceSqlConnectionSubsetsRequestMultiError(errors)
	}

	return nil
}

// SetJobSourceSqlConnectionSubsetsRequestMultiError is an error wrapping
// multiple validation errors returned by
// SetJobSourceSqlConnectionSubsetsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetJobSourceSqlConnectionSubsetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetJobSourceSqlConnectionSubsetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetJobSourceSqlConnectionSubsetsRequestMultiError) AllErrors() []error { return m }

// SetJobSourceSqlConnectionSubsetsRequestValidationError is the validation
// error returned by SetJobSourceSqlConnectionSubsetsRequest.Validate if the
// designated constraints aren't met.
type SetJobSourceSqlConnectionSubsetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetJobSourceSqlConnectionSubsetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetJobSourceSqlConnectionSubsetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetJobSourceSqlConnectionSubsetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetJobSourceSqlConnectionSubsetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetJobSourceSqlConnectionSubsetsRequestValidationError) ErrorName() string {
	return "SetJobSourceSqlConnectionSubsetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetJobSourceSqlConnectionSubsetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetJobSourceSqlConnectionSubsetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetJobSourceSqlConnectionSubsetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetJobSourceSqlConnectionSubsetsRequestValidationError{}

// Validate checks the field values on SetJobSourceSqlConnectionSubsetsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetJobSourceSqlConnectionSubsetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SetJobSourceSqlConnectionSubsetsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SetJobSourceSqlConnectionSubsetsResponseMultiError, or nil if none found.
func (m *SetJobSourceSqlConnectionSubsetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetJobSourceSqlConnectionSubsetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetJobSourceSqlConnectionSubsetsResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetJobSourceSqlConnectionSubsetsResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetJobSourceSqlConnectionSubsetsResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetJobSourceSqlConnectionSubsetsResponseMultiError(errors)
	}

	return nil
}

// SetJobSourceSqlConnectionSubsetsResponseMultiError is an error wrapping
// multiple validation errors returned by
// SetJobSourceSqlConnectionSubsetsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetJobSourceSqlConnectionSubsetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetJobSourceSqlConnectionSubsetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetJobSourceSqlConnectionSubsetsResponseMultiError) AllErrors() []error { return m }

// SetJobSourceSqlConnectionSubsetsResponseValidationError is the validation
// error returned by SetJobSourceSqlConnectionSubsetsResponse.Validate if the
// designated constraints aren't met.
type SetJobSourceSqlConnectionSubsetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetJobSourceSqlConnectionSubsetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetJobSourceSqlConnectionSubsetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetJobSourceSqlConnectionSubsetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetJobSourceSqlConnectionSubsetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetJobSourceSqlConnectionSubsetsResponseValidationError) ErrorName() string {
	return "SetJobSourceSqlConnectionSubsetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetJobSourceSqlConnectionSubsetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetJobSourceSqlConnectionSubsetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetJobSourceSqlConnectionSubsetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetJobSourceSqlConnectionSubsetsResponseValidationError{}

// Validate checks the field values on UpdateJobDestinationConnectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateJobDestinationConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobDestinationConnectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateJobDestinationConnectionRequestMultiError, or nil if none found.
func (m *UpdateJobDestinationConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobDestinationConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for ConnectionId

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateJobDestinationConnectionRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateJobDestinationConnectionRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJobDestinationConnectionRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DestinationId

	if len(errors) > 0 {
		return UpdateJobDestinationConnectionRequestMultiError(errors)
	}

	return nil
}

// UpdateJobDestinationConnectionRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateJobDestinationConnectionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobDestinationConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobDestinationConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobDestinationConnectionRequestMultiError) AllErrors() []error { return m }

// UpdateJobDestinationConnectionRequestValidationError is the validation error
// returned by UpdateJobDestinationConnectionRequest.Validate if the
// designated constraints aren't met.
type UpdateJobDestinationConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobDestinationConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobDestinationConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobDestinationConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobDestinationConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobDestinationConnectionRequestValidationError) ErrorName() string {
	return "UpdateJobDestinationConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobDestinationConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobDestinationConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobDestinationConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobDestinationConnectionRequestValidationError{}

// Validate checks the field values on UpdateJobDestinationConnectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateJobDestinationConnectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateJobDestinationConnectionResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateJobDestinationConnectionResponseMultiError, or nil if none found.
func (m *UpdateJobDestinationConnectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobDestinationConnectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateJobDestinationConnectionResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateJobDestinationConnectionResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJobDestinationConnectionResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateJobDestinationConnectionResponseMultiError(errors)
	}

	return nil
}

// UpdateJobDestinationConnectionResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateJobDestinationConnectionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobDestinationConnectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobDestinationConnectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobDestinationConnectionResponseMultiError) AllErrors() []error { return m }

// UpdateJobDestinationConnectionResponseValidationError is the validation
// error returned by UpdateJobDestinationConnectionResponse.Validate if the
// designated constraints aren't met.
type UpdateJobDestinationConnectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobDestinationConnectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobDestinationConnectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobDestinationConnectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobDestinationConnectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobDestinationConnectionResponseValidationError) ErrorName() string {
	return "UpdateJobDestinationConnectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobDestinationConnectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobDestinationConnectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobDestinationConnectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobDestinationConnectionResponseValidationError{}

// Validate checks the field values on DeleteJobDestinationConnectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteJobDestinationConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobDestinationConnectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteJobDestinationConnectionRequestMultiError, or nil if none found.
func (m *DeleteJobDestinationConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobDestinationConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DestinationId

	if len(errors) > 0 {
		return DeleteJobDestinationConnectionRequestMultiError(errors)
	}

	return nil
}

// DeleteJobDestinationConnectionRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteJobDestinationConnectionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteJobDestinationConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobDestinationConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobDestinationConnectionRequestMultiError) AllErrors() []error { return m }

// DeleteJobDestinationConnectionRequestValidationError is the validation error
// returned by DeleteJobDestinationConnectionRequest.Validate if the
// designated constraints aren't met.
type DeleteJobDestinationConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobDestinationConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobDestinationConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobDestinationConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobDestinationConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobDestinationConnectionRequestValidationError) ErrorName() string {
	return "DeleteJobDestinationConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJobDestinationConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobDestinationConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobDestinationConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobDestinationConnectionRequestValidationError{}

// Validate checks the field values on DeleteJobDestinationConnectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteJobDestinationConnectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteJobDestinationConnectionResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteJobDestinationConnectionResponseMultiError, or nil if none found.
func (m *DeleteJobDestinationConnectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobDestinationConnectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteJobDestinationConnectionResponseMultiError(errors)
	}

	return nil
}

// DeleteJobDestinationConnectionResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteJobDestinationConnectionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteJobDestinationConnectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobDestinationConnectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobDestinationConnectionResponseMultiError) AllErrors() []error { return m }

// DeleteJobDestinationConnectionResponseValidationError is the validation
// error returned by DeleteJobDestinationConnectionResponse.Validate if the
// designated constraints aren't met.
type DeleteJobDestinationConnectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobDestinationConnectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobDestinationConnectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobDestinationConnectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobDestinationConnectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobDestinationConnectionResponseValidationError) ErrorName() string {
	return "DeleteJobDestinationConnectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJobDestinationConnectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobDestinationConnectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobDestinationConnectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobDestinationConnectionResponseValidationError{}

// Validate checks the field values on CreateJobDestinationConnectionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateJobDestinationConnectionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateJobDestinationConnectionsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateJobDestinationConnectionsRequestMultiError, or nil if none found.
func (m *CreateJobDestinationConnectionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobDestinationConnectionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	for idx, item := range m.GetDestinations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateJobDestinationConnectionsRequestValidationError{
						field:  fmt.Sprintf("Destinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateJobDestinationConnectionsRequestValidationError{
						field:  fmt.Sprintf("Destinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateJobDestinationConnectionsRequestValidationError{
					field:  fmt.Sprintf("Destinations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateJobDestinationConnectionsRequestMultiError(errors)
	}

	return nil
}

// CreateJobDestinationConnectionsRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateJobDestinationConnectionsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateJobDestinationConnectionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobDestinationConnectionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobDestinationConnectionsRequestMultiError) AllErrors() []error { return m }

// CreateJobDestinationConnectionsRequestValidationError is the validation
// error returned by CreateJobDestinationConnectionsRequest.Validate if the
// designated constraints aren't met.
type CreateJobDestinationConnectionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobDestinationConnectionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobDestinationConnectionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobDestinationConnectionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobDestinationConnectionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobDestinationConnectionsRequestValidationError) ErrorName() string {
	return "CreateJobDestinationConnectionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJobDestinationConnectionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobDestinationConnectionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobDestinationConnectionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobDestinationConnectionsRequestValidationError{}

// Validate checks the field values on CreateJobDestinationConnectionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateJobDestinationConnectionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateJobDestinationConnectionsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateJobDestinationConnectionsResponseMultiError, or nil if none found.
func (m *CreateJobDestinationConnectionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobDestinationConnectionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateJobDestinationConnectionsResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateJobDestinationConnectionsResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJobDestinationConnectionsResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateJobDestinationConnectionsResponseMultiError(errors)
	}

	return nil
}

// CreateJobDestinationConnectionsResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateJobDestinationConnectionsResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateJobDestinationConnectionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobDestinationConnectionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobDestinationConnectionsResponseMultiError) AllErrors() []error { return m }

// CreateJobDestinationConnectionsResponseValidationError is the validation
// error returned by CreateJobDestinationConnectionsResponse.Validate if the
// designated constraints aren't met.
type CreateJobDestinationConnectionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobDestinationConnectionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobDestinationConnectionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobDestinationConnectionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobDestinationConnectionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobDestinationConnectionsResponseValidationError) ErrorName() string {
	return "CreateJobDestinationConnectionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJobDestinationConnectionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobDestinationConnectionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobDestinationConnectionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobDestinationConnectionsResponseValidationError{}

// Validate checks the field values on DeleteJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteJobRequestMultiError, or nil if none found.
func (m *DeleteJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteJobRequestMultiError(errors)
	}

	return nil
}

// DeleteJobRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteJobRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobRequestMultiError) AllErrors() []error { return m }

// DeleteJobRequestValidationError is the validation error returned by
// DeleteJobRequest.Validate if the designated constraints aren't met.
type DeleteJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobRequestValidationError) ErrorName() string { return "DeleteJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobRequestValidationError{}

// Validate checks the field values on DeleteJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteJobResponseMultiError, or nil if none found.
func (m *DeleteJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteJobResponseMultiError(errors)
	}

	return nil
}

// DeleteJobResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteJobResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobResponseMultiError) AllErrors() []error { return m }

// DeleteJobResponseValidationError is the validation error returned by
// DeleteJobResponse.Validate if the designated constraints aren't met.
type DeleteJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobResponseValidationError) ErrorName() string {
	return "DeleteJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobResponseValidationError{}

// Validate checks the field values on IsJobNameAvailableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsJobNameAvailableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsJobNameAvailableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsJobNameAvailableRequestMultiError, or nil if none found.
func (m *IsJobNameAvailableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsJobNameAvailableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for AccountId

	if len(errors) > 0 {
		return IsJobNameAvailableRequestMultiError(errors)
	}

	return nil
}

// IsJobNameAvailableRequestMultiError is an error wrapping multiple validation
// errors returned by IsJobNameAvailableRequest.ValidateAll() if the
// designated constraints aren't met.
type IsJobNameAvailableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsJobNameAvailableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsJobNameAvailableRequestMultiError) AllErrors() []error { return m }

// IsJobNameAvailableRequestValidationError is the validation error returned by
// IsJobNameAvailableRequest.Validate if the designated constraints aren't met.
type IsJobNameAvailableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsJobNameAvailableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsJobNameAvailableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsJobNameAvailableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsJobNameAvailableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsJobNameAvailableRequestValidationError) ErrorName() string {
	return "IsJobNameAvailableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsJobNameAvailableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsJobNameAvailableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsJobNameAvailableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsJobNameAvailableRequestValidationError{}

// Validate checks the field values on IsJobNameAvailableResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsJobNameAvailableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsJobNameAvailableResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsJobNameAvailableResponseMultiError, or nil if none found.
func (m *IsJobNameAvailableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsJobNameAvailableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAvailable

	if len(errors) > 0 {
		return IsJobNameAvailableResponseMultiError(errors)
	}

	return nil
}

// IsJobNameAvailableResponseMultiError is an error wrapping multiple
// validation errors returned by IsJobNameAvailableResponse.ValidateAll() if
// the designated constraints aren't met.
type IsJobNameAvailableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsJobNameAvailableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsJobNameAvailableResponseMultiError) AllErrors() []error { return m }

// IsJobNameAvailableResponseValidationError is the validation error returned
// by IsJobNameAvailableResponse.Validate if the designated constraints aren't met.
type IsJobNameAvailableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsJobNameAvailableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsJobNameAvailableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsJobNameAvailableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsJobNameAvailableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsJobNameAvailableResponseValidationError) ErrorName() string {
	return "IsJobNameAvailableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsJobNameAvailableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsJobNameAvailableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsJobNameAvailableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsJobNameAvailableResponseValidationError{}

// Validate checks the field values on GetJobRunsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetJobRunsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRunsRequestMultiError, or nil if none found.
func (m *GetJobRunsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRunsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Id.(type) {
	case *GetJobRunsRequest_JobId:
		if v == nil {
			err := GetJobRunsRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for JobId
	case *GetJobRunsRequest_AccountId:
		if v == nil {
			err := GetJobRunsRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for AccountId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetJobRunsRequestMultiError(errors)
	}

	return nil
}

// GetJobRunsRequestMultiError is an error wrapping multiple validation errors
// returned by GetJobRunsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetJobRunsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRunsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRunsRequestMultiError) AllErrors() []error { return m }

// GetJobRunsRequestValidationError is the validation error returned by
// GetJobRunsRequest.Validate if the designated constraints aren't met.
type GetJobRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRunsRequestValidationError) ErrorName() string {
	return "GetJobRunsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRunsRequestValidationError{}

// Validate checks the field values on GetJobRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobRunsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRunsResponseMultiError, or nil if none found.
func (m *GetJobRunsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRunsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetJobRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJobRunsResponseValidationError{
						field:  fmt.Sprintf("JobRuns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJobRunsResponseValidationError{
						field:  fmt.Sprintf("JobRuns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJobRunsResponseValidationError{
					field:  fmt.Sprintf("JobRuns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJobRunsResponseMultiError(errors)
	}

	return nil
}

// GetJobRunsResponseMultiError is an error wrapping multiple validation errors
// returned by GetJobRunsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetJobRunsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRunsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRunsResponseMultiError) AllErrors() []error { return m }

// GetJobRunsResponseValidationError is the validation error returned by
// GetJobRunsResponse.Validate if the designated constraints aren't met.
type GetJobRunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRunsResponseValidationError) ErrorName() string {
	return "GetJobRunsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobRunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRunsResponseValidationError{}

// Validate checks the field values on GetJobRunRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetJobRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRunRequestMultiError, or nil if none found.
func (m *GetJobRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobRunId

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetJobRunRequestMultiError(errors)
	}

	return nil
}

// GetJobRunRequestMultiError is an error wrapping multiple validation errors
// returned by GetJobRunRequest.ValidateAll() if the designated constraints
// aren't met.
type GetJobRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRunRequestMultiError) AllErrors() []error { return m }

// GetJobRunRequestValidationError is the validation error returned by
// GetJobRunRequest.Validate if the designated constraints aren't met.
type GetJobRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRunRequestValidationError) ErrorName() string { return "GetJobRunRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetJobRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRunRequestValidationError{}

// Validate checks the field values on GetJobRunResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetJobRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRunResponseMultiError, or nil if none found.
func (m *GetJobRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJobRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetJobRunResponseValidationError{
					field:  "JobRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetJobRunResponseValidationError{
					field:  "JobRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetJobRunResponseValidationError{
				field:  "JobRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetJobRunResponseMultiError(errors)
	}

	return nil
}

// GetJobRunResponseMultiError is an error wrapping multiple validation errors
// returned by GetJobRunResponse.ValidateAll() if the designated constraints
// aren't met.
type GetJobRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRunResponseMultiError) AllErrors() []error { return m }

// GetJobRunResponseValidationError is the validation error returned by
// GetJobRunResponse.Validate if the designated constraints aren't met.
type GetJobRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRunResponseValidationError) ErrorName() string {
	return "GetJobRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRunResponseValidationError{}

// Validate checks the field values on CreateJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateJobRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateJobRunRequestMultiError, or nil if none found.
func (m *CreateJobRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if len(errors) > 0 {
		return CreateJobRunRequestMultiError(errors)
	}

	return nil
}

// CreateJobRunRequestMultiError is an error wrapping multiple validation
// errors returned by CreateJobRunRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateJobRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobRunRequestMultiError) AllErrors() []error { return m }

// CreateJobRunRequestValidationError is the validation error returned by
// CreateJobRunRequest.Validate if the designated constraints aren't met.
type CreateJobRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobRunRequestValidationError) ErrorName() string {
	return "CreateJobRunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJobRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobRunRequestValidationError{}

// Validate checks the field values on CreateJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateJobRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateJobRunResponseMultiError, or nil if none found.
func (m *CreateJobRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateJobRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateJobRunResponseMultiError(errors)
	}

	return nil
}

// CreateJobRunResponseMultiError is an error wrapping multiple validation
// errors returned by CreateJobRunResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateJobRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateJobRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateJobRunResponseMultiError) AllErrors() []error { return m }

// CreateJobRunResponseValidationError is the validation error returned by
// CreateJobRunResponse.Validate if the designated constraints aren't met.
type CreateJobRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJobRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJobRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJobRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJobRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJobRunResponseValidationError) ErrorName() string {
	return "CreateJobRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJobRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJobRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJobRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJobRunResponseValidationError{}

// Validate checks the field values on CancelJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelJobRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelJobRunRequestMultiError, or nil if none found.
func (m *CancelJobRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelJobRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobRunId

	// no validation rules for AccountId

	if len(errors) > 0 {
		return CancelJobRunRequestMultiError(errors)
	}

	return nil
}

// CancelJobRunRequestMultiError is an error wrapping multiple validation
// errors returned by CancelJobRunRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelJobRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelJobRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelJobRunRequestMultiError) AllErrors() []error { return m }

// CancelJobRunRequestValidationError is the validation error returned by
// CancelJobRunRequest.Validate if the designated constraints aren't met.
type CancelJobRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelJobRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelJobRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelJobRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelJobRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelJobRunRequestValidationError) ErrorName() string {
	return "CancelJobRunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelJobRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelJobRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelJobRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelJobRunRequestValidationError{}

// Validate checks the field values on CancelJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelJobRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelJobRunResponseMultiError, or nil if none found.
func (m *CancelJobRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelJobRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelJobRunResponseMultiError(errors)
	}

	return nil
}

// CancelJobRunResponseMultiError is an error wrapping multiple validation
// errors returned by CancelJobRunResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelJobRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelJobRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelJobRunResponseMultiError) AllErrors() []error { return m }

// CancelJobRunResponseValidationError is the validation error returned by
// CancelJobRunResponse.Validate if the designated constraints aren't met.
type CancelJobRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelJobRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelJobRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelJobRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelJobRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelJobRunResponseValidationError) ErrorName() string {
	return "CancelJobRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelJobRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelJobRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelJobRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelJobRunResponseValidationError{}

// Validate checks the field values on Job with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Job) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Job with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JobMultiError, or nil if none found.
func (m *Job) ValidateAll() error {
	return m.validate(true)
}

func (m *Job) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedByUserId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UpdatedByUserId

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobValidationError{
				field:  "Source",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDestinations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobValidationError{
						field:  fmt.Sprintf("Destinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobValidationError{
						field:  fmt.Sprintf("Destinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobValidationError{
					field:  fmt.Sprintf("Destinations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobValidationError{
					field:  fmt.Sprintf("Mappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AccountId

	if all {
		switch v := interface{}(m.GetSyncOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "SyncOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "SyncOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSyncOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobValidationError{
				field:  "SyncOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflowOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "WorkflowOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "WorkflowOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobValidationError{
				field:  "WorkflowOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVirtualForeignKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobValidationError{
						field:  fmt.Sprintf("VirtualForeignKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobValidationError{
						field:  fmt.Sprintf("VirtualForeignKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobValidationError{
					field:  fmt.Sprintf("VirtualForeignKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CronSchedule != nil {
		// no validation rules for CronSchedule
	}

	if len(errors) > 0 {
		return JobMultiError(errors)
	}

	return nil
}

// JobMultiError is an error wrapping multiple validation errors returned by
// Job.ValidateAll() if the designated constraints aren't met.
type JobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobMultiError) AllErrors() []error { return m }

// JobValidationError is the validation error returned by Job.Validate if the
// designated constraints aren't met.
type JobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobValidationError) ErrorName() string { return "JobValidationError" }

// Error satisfies the builtin error interface
func (e JobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobValidationError{}

// Validate checks the field values on JobRecentRun with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobRecentRun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobRecentRun with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobRecentRunMultiError, or
// nil if none found.
func (m *JobRecentRun) ValidateAll() error {
	return m.validate(true)
}

func (m *JobRecentRun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobRecentRunValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobRecentRunValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobRecentRunValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for JobRunId

	if len(errors) > 0 {
		return JobRecentRunMultiError(errors)
	}

	return nil
}

// JobRecentRunMultiError is an error wrapping multiple validation errors
// returned by JobRecentRun.ValidateAll() if the designated constraints aren't met.
type JobRecentRunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobRecentRunMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobRecentRunMultiError) AllErrors() []error { return m }

// JobRecentRunValidationError is the validation error returned by
// JobRecentRun.Validate if the designated constraints aren't met.
type JobRecentRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobRecentRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobRecentRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobRecentRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobRecentRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobRecentRunValidationError) ErrorName() string { return "JobRecentRunValidationError" }

// Error satisfies the builtin error interface
func (e JobRecentRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobRecentRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobRecentRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobRecentRunValidationError{}

// Validate checks the field values on GetJobRecentRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobRecentRunsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRecentRunsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRecentRunsRequestMultiError, or nil if none found.
func (m *GetJobRecentRunsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRecentRunsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if len(errors) > 0 {
		return GetJobRecentRunsRequestMultiError(errors)
	}

	return nil
}

// GetJobRecentRunsRequestMultiError is an error wrapping multiple validation
// errors returned by GetJobRecentRunsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetJobRecentRunsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRecentRunsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRecentRunsRequestMultiError) AllErrors() []error { return m }

// GetJobRecentRunsRequestValidationError is the validation error returned by
// GetJobRecentRunsRequest.Validate if the designated constraints aren't met.
type GetJobRecentRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRecentRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRecentRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRecentRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRecentRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRecentRunsRequestValidationError) ErrorName() string {
	return "GetJobRecentRunsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobRecentRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRecentRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRecentRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRecentRunsRequestValidationError{}

// Validate checks the field values on GetJobRecentRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobRecentRunsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRecentRunsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRecentRunsResponseMultiError, or nil if none found.
func (m *GetJobRecentRunsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRecentRunsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecentRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJobRecentRunsResponseValidationError{
						field:  fmt.Sprintf("RecentRuns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJobRecentRunsResponseValidationError{
						field:  fmt.Sprintf("RecentRuns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJobRecentRunsResponseValidationError{
					field:  fmt.Sprintf("RecentRuns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJobRecentRunsResponseMultiError(errors)
	}

	return nil
}

// GetJobRecentRunsResponseMultiError is an error wrapping multiple validation
// errors returned by GetJobRecentRunsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetJobRecentRunsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRecentRunsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRecentRunsResponseMultiError) AllErrors() []error { return m }

// GetJobRecentRunsResponseValidationError is the validation error returned by
// GetJobRecentRunsResponse.Validate if the designated constraints aren't met.
type GetJobRecentRunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRecentRunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRecentRunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRecentRunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRecentRunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRecentRunsResponseValidationError) ErrorName() string {
	return "GetJobRecentRunsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobRecentRunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRecentRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRecentRunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRecentRunsResponseValidationError{}

// Validate checks the field values on JobNextRuns with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobNextRuns) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobNextRuns with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobNextRunsMultiError, or
// nil if none found.
func (m *JobNextRuns) ValidateAll() error {
	return m.validate(true)
}

func (m *JobNextRuns) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNextRunTimes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobNextRunsValidationError{
						field:  fmt.Sprintf("NextRunTimes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobNextRunsValidationError{
						field:  fmt.Sprintf("NextRunTimes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobNextRunsValidationError{
					field:  fmt.Sprintf("NextRunTimes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return JobNextRunsMultiError(errors)
	}

	return nil
}

// JobNextRunsMultiError is an error wrapping multiple validation errors
// returned by JobNextRuns.ValidateAll() if the designated constraints aren't met.
type JobNextRunsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobNextRunsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobNextRunsMultiError) AllErrors() []error { return m }

// JobNextRunsValidationError is the validation error returned by
// JobNextRuns.Validate if the designated constraints aren't met.
type JobNextRunsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobNextRunsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobNextRunsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobNextRunsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobNextRunsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobNextRunsValidationError) ErrorName() string { return "JobNextRunsValidationError" }

// Error satisfies the builtin error interface
func (e JobNextRunsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobNextRuns.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobNextRunsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobNextRunsValidationError{}

// Validate checks the field values on GetJobNextRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobNextRunsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobNextRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobNextRunsRequestMultiError, or nil if none found.
func (m *GetJobNextRunsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobNextRunsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if len(errors) > 0 {
		return GetJobNextRunsRequestMultiError(errors)
	}

	return nil
}

// GetJobNextRunsRequestMultiError is an error wrapping multiple validation
// errors returned by GetJobNextRunsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetJobNextRunsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobNextRunsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobNextRunsRequestMultiError) AllErrors() []error { return m }

// GetJobNextRunsRequestValidationError is the validation error returned by
// GetJobNextRunsRequest.Validate if the designated constraints aren't met.
type GetJobNextRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobNextRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobNextRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobNextRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobNextRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobNextRunsRequestValidationError) ErrorName() string {
	return "GetJobNextRunsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobNextRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobNextRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobNextRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobNextRunsRequestValidationError{}

// Validate checks the field values on GetJobNextRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobNextRunsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobNextRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobNextRunsResponseMultiError, or nil if none found.
func (m *GetJobNextRunsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobNextRunsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextRuns()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetJobNextRunsResponseValidationError{
					field:  "NextRuns",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetJobNextRunsResponseValidationError{
					field:  "NextRuns",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextRuns()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetJobNextRunsResponseValidationError{
				field:  "NextRuns",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetJobNextRunsResponseMultiError(errors)
	}

	return nil
}

// GetJobNextRunsResponseMultiError is an error wrapping multiple validation
// errors returned by GetJobNextRunsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetJobNextRunsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobNextRunsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobNextRunsResponseMultiError) AllErrors() []error { return m }

// GetJobNextRunsResponseValidationError is the validation error returned by
// GetJobNextRunsResponse.Validate if the designated constraints aren't met.
type GetJobNextRunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobNextRunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobNextRunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobNextRunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobNextRunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobNextRunsResponseValidationError) ErrorName() string {
	return "GetJobNextRunsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobNextRunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobNextRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobNextRunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobNextRunsResponseValidationError{}

// Validate checks the field values on GetJobStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobStatusRequestMultiError, or nil if none found.
func (m *GetJobStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if len(errors) > 0 {
		return GetJobStatusRequestMultiError(errors)
	}

	return nil
}

// GetJobStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetJobStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetJobStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobStatusRequestMultiError) AllErrors() []error { return m }

// GetJobStatusRequestValidationError is the validation error returned by
// GetJobStatusRequest.Validate if the designated constraints aren't met.
type GetJobStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobStatusRequestValidationError) ErrorName() string {
	return "GetJobStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobStatusRequestValidationError{}

// Validate checks the field values on GetJobStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobStatusResponseMultiError, or nil if none found.
func (m *GetJobStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return GetJobStatusResponseMultiError(errors)
	}

	return nil
}

// GetJobStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetJobStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetJobStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobStatusResponseMultiError) AllErrors() []error { return m }

// GetJobStatusResponseValidationError is the validation error returned by
// GetJobStatusResponse.Validate if the designated constraints aren't met.
type GetJobStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobStatusResponseValidationError) ErrorName() string {
	return "GetJobStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobStatusResponseValidationError{}

// Validate checks the field values on JobStatusRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobStatusRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobStatusRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobStatusRecordMultiError, or nil if none found.
func (m *JobStatusRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *JobStatusRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for Status

	if len(errors) > 0 {
		return JobStatusRecordMultiError(errors)
	}

	return nil
}

// JobStatusRecordMultiError is an error wrapping multiple validation errors
// returned by JobStatusRecord.ValidateAll() if the designated constraints
// aren't met.
type JobStatusRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobStatusRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobStatusRecordMultiError) AllErrors() []error { return m }

// JobStatusRecordValidationError is the validation error returned by
// JobStatusRecord.Validate if the designated constraints aren't met.
type JobStatusRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobStatusRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobStatusRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobStatusRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobStatusRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobStatusRecordValidationError) ErrorName() string { return "JobStatusRecordValidationError" }

// Error satisfies the builtin error interface
func (e JobStatusRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobStatusRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobStatusRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobStatusRecordValidationError{}

// Validate checks the field values on GetJobStatusesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobStatusesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobStatusesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobStatusesRequestMultiError, or nil if none found.
func (m *GetJobStatusesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobStatusesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetJobStatusesRequestMultiError(errors)
	}

	return nil
}

// GetJobStatusesRequestMultiError is an error wrapping multiple validation
// errors returned by GetJobStatusesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetJobStatusesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobStatusesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobStatusesRequestMultiError) AllErrors() []error { return m }

// GetJobStatusesRequestValidationError is the validation error returned by
// GetJobStatusesRequest.Validate if the designated constraints aren't met.
type GetJobStatusesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobStatusesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobStatusesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobStatusesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobStatusesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobStatusesRequestValidationError) ErrorName() string {
	return "GetJobStatusesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobStatusesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobStatusesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobStatusesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobStatusesRequestValidationError{}

// Validate checks the field values on GetJobStatusesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobStatusesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobStatusesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobStatusesResponseMultiError, or nil if none found.
func (m *GetJobStatusesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobStatusesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJobStatusesResponseValidationError{
						field:  fmt.Sprintf("Statuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJobStatusesResponseValidationError{
						field:  fmt.Sprintf("Statuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJobStatusesResponseValidationError{
					field:  fmt.Sprintf("Statuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJobStatusesResponseMultiError(errors)
	}

	return nil
}

// GetJobStatusesResponseMultiError is an error wrapping multiple validation
// errors returned by GetJobStatusesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetJobStatusesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobStatusesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobStatusesResponseMultiError) AllErrors() []error { return m }

// GetJobStatusesResponseValidationError is the validation error returned by
// GetJobStatusesResponse.Validate if the designated constraints aren't met.
type GetJobStatusesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobStatusesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobStatusesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobStatusesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobStatusesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobStatusesResponseValidationError) ErrorName() string {
	return "GetJobStatusesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobStatusesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobStatusesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobStatusesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobStatusesResponseValidationError{}

// Validate checks the field values on ActivityFailure with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActivityFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivityFailureMultiError, or nil if none found.
func (m *ActivityFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return ActivityFailureMultiError(errors)
	}

	return nil
}

// ActivityFailureMultiError is an error wrapping multiple validation errors
// returned by ActivityFailure.ValidateAll() if the designated constraints
// aren't met.
type ActivityFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityFailureMultiError) AllErrors() []error { return m }

// ActivityFailureValidationError is the validation error returned by
// ActivityFailure.Validate if the designated constraints aren't met.
type ActivityFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityFailureValidationError) ErrorName() string { return "ActivityFailureValidationError" }

// Error satisfies the builtin error interface
func (e ActivityFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityFailureValidationError{}

// Validate checks the field values on PendingActivity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PendingActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PendingActivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PendingActivityMultiError, or nil if none found.
func (m *PendingActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *PendingActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for ActivityName

	if m.LastFailure != nil {

		if all {
			switch v := interface{}(m.GetLastFailure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PendingActivityValidationError{
						field:  "LastFailure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PendingActivityValidationError{
						field:  "LastFailure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLastFailure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PendingActivityValidationError{
					field:  "LastFailure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PendingActivityMultiError(errors)
	}

	return nil
}

// PendingActivityMultiError is an error wrapping multiple validation errors
// returned by PendingActivity.ValidateAll() if the designated constraints
// aren't met.
type PendingActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PendingActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PendingActivityMultiError) AllErrors() []error { return m }

// PendingActivityValidationError is the validation error returned by
// PendingActivity.Validate if the designated constraints aren't met.
type PendingActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PendingActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PendingActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PendingActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PendingActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PendingActivityValidationError) ErrorName() string { return "PendingActivityValidationError" }

// Error satisfies the builtin error interface
func (e PendingActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPendingActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PendingActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PendingActivityValidationError{}

// Validate checks the field values on JobRun with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobRun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobRun with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JobRunMultiError, or nil if none found.
func (m *JobRun) ValidateAll() error {
	return m.validate(true)
}

func (m *JobRun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for JobId

	// no validation rules for Name

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobRunValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobRunValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobRunValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPendingActivities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobRunValidationError{
						field:  fmt.Sprintf("PendingActivities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobRunValidationError{
						field:  fmt.Sprintf("PendingActivities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobRunValidationError{
					field:  fmt.Sprintf("PendingActivities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CompletedAt != nil {

		if all {
			switch v := interface{}(m.GetCompletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobRunValidationError{
						field:  "CompletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobRunValidationError{
						field:  "CompletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCompletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobRunValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return JobRunMultiError(errors)
	}

	return nil
}

// JobRunMultiError is an error wrapping multiple validation errors returned by
// JobRun.ValidateAll() if the designated constraints aren't met.
type JobRunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobRunMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobRunMultiError) AllErrors() []error { return m }

// JobRunValidationError is the validation error returned by JobRun.Validate if
// the designated constraints aren't met.
type JobRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobRunValidationError) ErrorName() string { return "JobRunValidationError" }

// Error satisfies the builtin error interface
func (e JobRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobRunValidationError{}

// Validate checks the field values on JobRunEventTaskError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobRunEventTaskError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobRunEventTaskError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobRunEventTaskErrorMultiError, or nil if none found.
func (m *JobRunEventTaskError) ValidateAll() error {
	return m.validate(true)
}

func (m *JobRunEventTaskError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for RetryState

	if len(errors) > 0 {
		return JobRunEventTaskErrorMultiError(errors)
	}

	return nil
}

// JobRunEventTaskErrorMultiError is an error wrapping multiple validation
// errors returned by JobRunEventTaskError.ValidateAll() if the designated
// constraints aren't met.
type JobRunEventTaskErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobRunEventTaskErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobRunEventTaskErrorMultiError) AllErrors() []error { return m }

// JobRunEventTaskErrorValidationError is the validation error returned by
// JobRunEventTaskError.Validate if the designated constraints aren't met.
type JobRunEventTaskErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobRunEventTaskErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobRunEventTaskErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobRunEventTaskErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobRunEventTaskErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobRunEventTaskErrorValidationError) ErrorName() string {
	return "JobRunEventTaskErrorValidationError"
}

// Error satisfies the builtin error interface
func (e JobRunEventTaskErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobRunEventTaskError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobRunEventTaskErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobRunEventTaskErrorValidationError{}

// Validate checks the field values on JobRunEventTask with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobRunEventTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobRunEventTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobRunEventTaskMultiError, or nil if none found.
func (m *JobRunEventTask) ValidateAll() error {
	return m.validate(true)
}

func (m *JobRunEventTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetEventTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobRunEventTaskValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobRunEventTaskValidationError{
					field:  "EventTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobRunEventTaskValidationError{
				field:  "EventTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobRunEventTaskValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobRunEventTaskValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobRunEventTaskValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JobRunEventTaskMultiError(errors)
	}

	return nil
}

// JobRunEventTaskMultiError is an error wrapping multiple validation errors
// returned by JobRunEventTask.ValidateAll() if the designated constraints
// aren't met.
type JobRunEventTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobRunEventTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobRunEventTaskMultiError) AllErrors() []error { return m }

// JobRunEventTaskValidationError is the validation error returned by
// JobRunEventTask.Validate if the designated constraints aren't met.
type JobRunEventTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobRunEventTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobRunEventTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobRunEventTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobRunEventTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobRunEventTaskValidationError) ErrorName() string { return "JobRunEventTaskValidationError" }

// Error satisfies the builtin error interface
func (e JobRunEventTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobRunEventTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobRunEventTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobRunEventTaskValidationError{}

// Validate checks the field values on JobRunSyncMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobRunSyncMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobRunSyncMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobRunSyncMetadataMultiError, or nil if none found.
func (m *JobRunSyncMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *JobRunSyncMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	// no validation rules for Table

	if len(errors) > 0 {
		return JobRunSyncMetadataMultiError(errors)
	}

	return nil
}

// JobRunSyncMetadataMultiError is an error wrapping multiple validation errors
// returned by JobRunSyncMetadata.ValidateAll() if the designated constraints
// aren't met.
type JobRunSyncMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobRunSyncMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobRunSyncMetadataMultiError) AllErrors() []error { return m }

// JobRunSyncMetadataValidationError is the validation error returned by
// JobRunSyncMetadata.Validate if the designated constraints aren't met.
type JobRunSyncMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobRunSyncMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobRunSyncMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobRunSyncMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobRunSyncMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobRunSyncMetadataValidationError) ErrorName() string {
	return "JobRunSyncMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e JobRunSyncMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobRunSyncMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobRunSyncMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobRunSyncMetadataValidationError{}

// Validate checks the field values on JobRunEventMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobRunEventMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobRunEventMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobRunEventMetadataMultiError, or nil if none found.
func (m *JobRunEventMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *JobRunEventMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Metadata.(type) {
	case *JobRunEventMetadata_SyncMetadata:
		if v == nil {
			err := JobRunEventMetadataValidationError{
				field:  "Metadata",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSyncMetadata()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobRunEventMetadataValidationError{
						field:  "SyncMetadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobRunEventMetadataValidationError{
						field:  "SyncMetadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSyncMetadata()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobRunEventMetadataValidationError{
					field:  "SyncMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return JobRunEventMetadataMultiError(errors)
	}

	return nil
}

// JobRunEventMetadataMultiError is an error wrapping multiple validation
// errors returned by JobRunEventMetadata.ValidateAll() if the designated
// constraints aren't met.
type JobRunEventMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobRunEventMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobRunEventMetadataMultiError) AllErrors() []error { return m }

// JobRunEventMetadataValidationError is the validation error returned by
// JobRunEventMetadata.Validate if the designated constraints aren't met.
type JobRunEventMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobRunEventMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobRunEventMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobRunEventMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobRunEventMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobRunEventMetadataValidationError) ErrorName() string {
	return "JobRunEventMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e JobRunEventMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobRunEventMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobRunEventMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobRunEventMetadataValidationError{}

// Validate checks the field values on JobRunEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobRunEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobRunEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobRunEventMultiError, or
// nil if none found.
func (m *JobRunEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *JobRunEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobRunEventValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobRunEventValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobRunEventValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCloseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobRunEventValidationError{
					field:  "CloseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobRunEventValidationError{
					field:  "CloseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobRunEventValidationError{
				field:  "CloseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobRunEventValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobRunEventValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobRunEventValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobRunEventValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobRunEventValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobRunEventValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return JobRunEventMultiError(errors)
	}

	return nil
}

// JobRunEventMultiError is an error wrapping multiple validation errors
// returned by JobRunEvent.ValidateAll() if the designated constraints aren't met.
type JobRunEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobRunEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobRunEventMultiError) AllErrors() []error { return m }

// JobRunEventValidationError is the validation error returned by
// JobRunEvent.Validate if the designated constraints aren't met.
type JobRunEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobRunEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobRunEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobRunEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobRunEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobRunEventValidationError) ErrorName() string { return "JobRunEventValidationError" }

// Error satisfies the builtin error interface
func (e JobRunEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobRunEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobRunEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobRunEventValidationError{}

// Validate checks the field values on GetJobRunEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobRunEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRunEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRunEventsRequestMultiError, or nil if none found.
func (m *GetJobRunEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRunEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobRunId

	// no validation rules for AccountId

	if len(errors) > 0 {
		return GetJobRunEventsRequestMultiError(errors)
	}

	return nil
}

// GetJobRunEventsRequestMultiError is an error wrapping multiple validation
// errors returned by GetJobRunEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetJobRunEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRunEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRunEventsRequestMultiError) AllErrors() []error { return m }

// GetJobRunEventsRequestValidationError is the validation error returned by
// GetJobRunEventsRequest.Validate if the designated constraints aren't met.
type GetJobRunEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRunEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRunEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRunEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRunEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRunEventsRequestValidationError) ErrorName() string {
	return "GetJobRunEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobRunEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRunEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRunEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRunEventsRequestValidationError{}

// Validate checks the field values on GetJobRunEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobRunEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRunEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRunEventsResponseMultiError, or nil if none found.
func (m *GetJobRunEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRunEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJobRunEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJobRunEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJobRunEventsResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsRunComplete

	if len(errors) > 0 {
		return GetJobRunEventsResponseMultiError(errors)
	}

	return nil
}

// GetJobRunEventsResponseMultiError is an error wrapping multiple validation
// errors returned by GetJobRunEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetJobRunEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRunEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRunEventsResponseMultiError) AllErrors() []error { return m }

// GetJobRunEventsResponseValidationError is the validation error returned by
// GetJobRunEventsResponse.Validate if the designated constraints aren't met.
type GetJobRunEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRunEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRunEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRunEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRunEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRunEventsResponseValidationError) ErrorName() string {
	return "GetJobRunEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobRunEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRunEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRunEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRunEventsResponseValidationError{}

// Validate checks the field values on DeleteJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteJobRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteJobRunRequestMultiError, or nil if none found.
func (m *DeleteJobRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobRunId

	// no validation rules for AccountId

	if len(errors) > 0 {
		return DeleteJobRunRequestMultiError(errors)
	}

	return nil
}

// DeleteJobRunRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteJobRunRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteJobRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobRunRequestMultiError) AllErrors() []error { return m }

// DeleteJobRunRequestValidationError is the validation error returned by
// DeleteJobRunRequest.Validate if the designated constraints aren't met.
type DeleteJobRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobRunRequestValidationError) ErrorName() string {
	return "DeleteJobRunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJobRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobRunRequestValidationError{}

// Validate checks the field values on DeleteJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteJobRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteJobRunResponseMultiError, or nil if none found.
func (m *DeleteJobRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteJobRunResponseMultiError(errors)
	}

	return nil
}

// DeleteJobRunResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteJobRunResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteJobRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobRunResponseMultiError) AllErrors() []error { return m }

// DeleteJobRunResponseValidationError is the validation error returned by
// DeleteJobRunResponse.Validate if the designated constraints aren't met.
type DeleteJobRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobRunResponseValidationError) ErrorName() string {
	return "DeleteJobRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJobRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobRunResponseValidationError{}

// Validate checks the field values on TerminateJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TerminateJobRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TerminateJobRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TerminateJobRunRequestMultiError, or nil if none found.
func (m *TerminateJobRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TerminateJobRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobRunId

	// no validation rules for AccountId

	if len(errors) > 0 {
		return TerminateJobRunRequestMultiError(errors)
	}

	return nil
}

// TerminateJobRunRequestMultiError is an error wrapping multiple validation
// errors returned by TerminateJobRunRequest.ValidateAll() if the designated
// constraints aren't met.
type TerminateJobRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerminateJobRunRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerminateJobRunRequestMultiError) AllErrors() []error { return m }

// TerminateJobRunRequestValidationError is the validation error returned by
// TerminateJobRunRequest.Validate if the designated constraints aren't met.
type TerminateJobRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerminateJobRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerminateJobRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerminateJobRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerminateJobRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerminateJobRunRequestValidationError) ErrorName() string {
	return "TerminateJobRunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TerminateJobRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerminateJobRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerminateJobRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerminateJobRunRequestValidationError{}

// Validate checks the field values on TerminateJobRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TerminateJobRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TerminateJobRunResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TerminateJobRunResponseMultiError, or nil if none found.
func (m *TerminateJobRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TerminateJobRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TerminateJobRunResponseMultiError(errors)
	}

	return nil
}

// TerminateJobRunResponseMultiError is an error wrapping multiple validation
// errors returned by TerminateJobRunResponse.ValidateAll() if the designated
// constraints aren't met.
type TerminateJobRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerminateJobRunResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerminateJobRunResponseMultiError) AllErrors() []error { return m }

// TerminateJobRunResponseValidationError is the validation error returned by
// TerminateJobRunResponse.Validate if the designated constraints aren't met.
type TerminateJobRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerminateJobRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerminateJobRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerminateJobRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerminateJobRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerminateJobRunResponseValidationError) ErrorName() string {
	return "TerminateJobRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TerminateJobRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerminateJobRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerminateJobRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerminateJobRunResponseValidationError{}

// Validate checks the field values on GetJobRunLogsStreamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobRunLogsStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRunLogsStreamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRunLogsStreamRequestMultiError, or nil if none found.
func (m *GetJobRunLogsStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRunLogsStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobRunId

	// no validation rules for AccountId

	// no validation rules for Window

	// no validation rules for ShouldTail

	if m.MaxLogLines != nil {
		// no validation rules for MaxLogLines
	}

	if len(errors) > 0 {
		return GetJobRunLogsStreamRequestMultiError(errors)
	}

	return nil
}

// GetJobRunLogsStreamRequestMultiError is an error wrapping multiple
// validation errors returned by GetJobRunLogsStreamRequest.ValidateAll() if
// the designated constraints aren't met.
type GetJobRunLogsStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRunLogsStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRunLogsStreamRequestMultiError) AllErrors() []error { return m }

// GetJobRunLogsStreamRequestValidationError is the validation error returned
// by GetJobRunLogsStreamRequest.Validate if the designated constraints aren't met.
type GetJobRunLogsStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRunLogsStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRunLogsStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRunLogsStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRunLogsStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRunLogsStreamRequestValidationError) ErrorName() string {
	return "GetJobRunLogsStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobRunLogsStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRunLogsStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRunLogsStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRunLogsStreamRequestValidationError{}

// Validate checks the field values on GetJobRunLogsStreamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobRunLogsStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobRunLogsStreamResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobRunLogsStreamResponseMultiError, or nil if none found.
func (m *GetJobRunLogsStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobRunLogsStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogLine

	if m.Timestamp != nil {

		if all {
			switch v := interface{}(m.GetTimestamp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJobRunLogsStreamResponseValidationError{
						field:  "Timestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJobRunLogsStreamResponseValidationError{
						field:  "Timestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJobRunLogsStreamResponseValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJobRunLogsStreamResponseMultiError(errors)
	}

	return nil
}

// GetJobRunLogsStreamResponseMultiError is an error wrapping multiple
// validation errors returned by GetJobRunLogsStreamResponse.ValidateAll() if
// the designated constraints aren't met.
type GetJobRunLogsStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobRunLogsStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobRunLogsStreamResponseMultiError) AllErrors() []error { return m }

// GetJobRunLogsStreamResponseValidationError is the validation error returned
// by GetJobRunLogsStreamResponse.Validate if the designated constraints
// aren't met.
type GetJobRunLogsStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobRunLogsStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobRunLogsStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobRunLogsStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobRunLogsStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobRunLogsStreamResponseValidationError) ErrorName() string {
	return "GetJobRunLogsStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobRunLogsStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobRunLogsStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobRunLogsStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobRunLogsStreamResponseValidationError{}

// Validate checks the field values on SetJobWorkflowOptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetJobWorkflowOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetJobWorkflowOptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetJobWorkflowOptionsRequestMultiError, or nil if none found.
func (m *SetJobWorkflowOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetJobWorkflowOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetWorfklowOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetJobWorkflowOptionsRequestValidationError{
					field:  "WorfklowOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetJobWorkflowOptionsRequestValidationError{
					field:  "WorfklowOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorfklowOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetJobWorkflowOptionsRequestValidationError{
				field:  "WorfklowOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetJobWorkflowOptionsRequestMultiError(errors)
	}

	return nil
}

// SetJobWorkflowOptionsRequestMultiError is an error wrapping multiple
// validation errors returned by SetJobWorkflowOptionsRequest.ValidateAll() if
// the designated constraints aren't met.
type SetJobWorkflowOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetJobWorkflowOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetJobWorkflowOptionsRequestMultiError) AllErrors() []error { return m }

// SetJobWorkflowOptionsRequestValidationError is the validation error returned
// by SetJobWorkflowOptionsRequest.Validate if the designated constraints
// aren't met.
type SetJobWorkflowOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetJobWorkflowOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetJobWorkflowOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetJobWorkflowOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetJobWorkflowOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetJobWorkflowOptionsRequestValidationError) ErrorName() string {
	return "SetJobWorkflowOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetJobWorkflowOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetJobWorkflowOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetJobWorkflowOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetJobWorkflowOptionsRequestValidationError{}

// Validate checks the field values on SetJobWorkflowOptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetJobWorkflowOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetJobWorkflowOptionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetJobWorkflowOptionsResponseMultiError, or nil if none found.
func (m *SetJobWorkflowOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetJobWorkflowOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetJobWorkflowOptionsResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetJobWorkflowOptionsResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetJobWorkflowOptionsResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetJobWorkflowOptionsResponseMultiError(errors)
	}

	return nil
}

// SetJobWorkflowOptionsResponseMultiError is an error wrapping multiple
// validation errors returned by SetJobWorkflowOptionsResponse.ValidateAll()
// if the designated constraints aren't met.
type SetJobWorkflowOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetJobWorkflowOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetJobWorkflowOptionsResponseMultiError) AllErrors() []error { return m }

// SetJobWorkflowOptionsResponseValidationError is the validation error
// returned by SetJobWorkflowOptionsResponse.Validate if the designated
// constraints aren't met.
type SetJobWorkflowOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetJobWorkflowOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetJobWorkflowOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetJobWorkflowOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetJobWorkflowOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetJobWorkflowOptionsResponseValidationError) ErrorName() string {
	return "SetJobWorkflowOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetJobWorkflowOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetJobWorkflowOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetJobWorkflowOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetJobWorkflowOptionsResponseValidationError{}

// Validate checks the field values on SetJobSyncOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetJobSyncOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetJobSyncOptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetJobSyncOptionsRequestMultiError, or nil if none found.
func (m *SetJobSyncOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetJobSyncOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSyncOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetJobSyncOptionsRequestValidationError{
					field:  "SyncOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetJobSyncOptionsRequestValidationError{
					field:  "SyncOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSyncOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetJobSyncOptionsRequestValidationError{
				field:  "SyncOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetJobSyncOptionsRequestMultiError(errors)
	}

	return nil
}

// SetJobSyncOptionsRequestMultiError is an error wrapping multiple validation
// errors returned by SetJobSyncOptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetJobSyncOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetJobSyncOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetJobSyncOptionsRequestMultiError) AllErrors() []error { return m }

// SetJobSyncOptionsRequestValidationError is the validation error returned by
// SetJobSyncOptionsRequest.Validate if the designated constraints aren't met.
type SetJobSyncOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetJobSyncOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetJobSyncOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetJobSyncOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetJobSyncOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetJobSyncOptionsRequestValidationError) ErrorName() string {
	return "SetJobSyncOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetJobSyncOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetJobSyncOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetJobSyncOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetJobSyncOptionsRequestValidationError{}

// Validate checks the field values on SetJobSyncOptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetJobSyncOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetJobSyncOptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetJobSyncOptionsResponseMultiError, or nil if none found.
func (m *SetJobSyncOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetJobSyncOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetJobSyncOptionsResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetJobSyncOptionsResponseValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetJobSyncOptionsResponseValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetJobSyncOptionsResponseMultiError(errors)
	}

	return nil
}

// SetJobSyncOptionsResponseMultiError is an error wrapping multiple validation
// errors returned by SetJobSyncOptionsResponse.ValidateAll() if the
// designated constraints aren't met.
type SetJobSyncOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetJobSyncOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetJobSyncOptionsResponseMultiError) AllErrors() []error { return m }

// SetJobSyncOptionsResponseValidationError is the validation error returned by
// SetJobSyncOptionsResponse.Validate if the designated constraints aren't met.
type SetJobSyncOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetJobSyncOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetJobSyncOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetJobSyncOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetJobSyncOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetJobSyncOptionsResponseValidationError) ErrorName() string {
	return "SetJobSyncOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetJobSyncOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetJobSyncOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetJobSyncOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetJobSyncOptionsResponseValidationError{}

// Validate checks the field values on ValidateJobMappingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateJobMappingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateJobMappingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateJobMappingsRequestMultiError, or nil if none found.
func (m *ValidateJobMappingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateJobMappingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	for idx, item := range m.GetMappings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidateJobMappingsRequestValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidateJobMappingsRequestValidationError{
						field:  fmt.Sprintf("Mappings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateJobMappingsRequestValidationError{
					field:  fmt.Sprintf("Mappings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ConnectionId

	for idx, item := range m.GetVirtualForeignKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidateJobMappingsRequestValidationError{
						field:  fmt.Sprintf("VirtualForeignKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidateJobMappingsRequestValidationError{
						field:  fmt.Sprintf("VirtualForeignKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateJobMappingsRequestValidationError{
					field:  fmt.Sprintf("VirtualForeignKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ValidateJobMappingsRequestMultiError(errors)
	}

	return nil
}

// ValidateJobMappingsRequestMultiError is an error wrapping multiple
// validation errors returned by ValidateJobMappingsRequest.ValidateAll() if
// the designated constraints aren't met.
type ValidateJobMappingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateJobMappingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateJobMappingsRequestMultiError) AllErrors() []error { return m }

// ValidateJobMappingsRequestValidationError is the validation error returned
// by ValidateJobMappingsRequest.Validate if the designated constraints aren't met.
type ValidateJobMappingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateJobMappingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateJobMappingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateJobMappingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateJobMappingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateJobMappingsRequestValidationError) ErrorName() string {
	return "ValidateJobMappingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateJobMappingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateJobMappingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateJobMappingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateJobMappingsRequestValidationError{}

// Validate checks the field values on ColumnError with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ColumnError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ColumnError with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ColumnErrorMultiError, or
// nil if none found.
func (m *ColumnError) ValidateAll() error {
	return m.validate(true)
}

func (m *ColumnError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	// no validation rules for Table

	// no validation rules for Column

	if len(errors) > 0 {
		return ColumnErrorMultiError(errors)
	}

	return nil
}

// ColumnErrorMultiError is an error wrapping multiple validation errors
// returned by ColumnError.ValidateAll() if the designated constraints aren't met.
type ColumnErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColumnErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColumnErrorMultiError) AllErrors() []error { return m }

// ColumnErrorValidationError is the validation error returned by
// ColumnError.Validate if the designated constraints aren't met.
type ColumnErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColumnErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColumnErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColumnErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColumnErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColumnErrorValidationError) ErrorName() string { return "ColumnErrorValidationError" }

// Error satisfies the builtin error interface
func (e ColumnErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColumnError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColumnErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColumnErrorValidationError{}

// Validate checks the field values on DatabaseError with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DatabaseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DatabaseError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DatabaseErrorMultiError, or
// nil if none found.
func (m *DatabaseError) ValidateAll() error {
	return m.validate(true)
}

func (m *DatabaseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DatabaseErrorMultiError(errors)
	}

	return nil
}

// DatabaseErrorMultiError is an error wrapping multiple validation errors
// returned by DatabaseError.ValidateAll() if the designated constraints
// aren't met.
type DatabaseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DatabaseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DatabaseErrorMultiError) AllErrors() []error { return m }

// DatabaseErrorValidationError is the validation error returned by
// DatabaseError.Validate if the designated constraints aren't met.
type DatabaseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatabaseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatabaseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatabaseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatabaseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatabaseErrorValidationError) ErrorName() string { return "DatabaseErrorValidationError" }

// Error satisfies the builtin error interface
func (e DatabaseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatabaseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatabaseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatabaseErrorValidationError{}

// Validate checks the field values on ValidateJobMappingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateJobMappingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateJobMappingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateJobMappingsResponseMultiError, or nil if none found.
func (m *ValidateJobMappingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateJobMappingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetColumnErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidateJobMappingsResponseValidationError{
						field:  fmt.Sprintf("ColumnErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidateJobMappingsResponseValidationError{
						field:  fmt.Sprintf("ColumnErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateJobMappingsResponseValidationError{
					field:  fmt.Sprintf("ColumnErrors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDatabaseErrors()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateJobMappingsResponseValidationError{
					field:  "DatabaseErrors",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateJobMappingsResponseValidationError{
					field:  "DatabaseErrors",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDatabaseErrors()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateJobMappingsResponseValidationError{
				field:  "DatabaseErrors",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValidateJobMappingsResponseMultiError(errors)
	}

	return nil
}

// ValidateJobMappingsResponseMultiError is an error wrapping multiple
// validation errors returned by ValidateJobMappingsResponse.ValidateAll() if
// the designated constraints aren't met.
type ValidateJobMappingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateJobMappingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateJobMappingsResponseMultiError) AllErrors() []error { return m }

// ValidateJobMappingsResponseValidationError is the validation error returned
// by ValidateJobMappingsResponse.Validate if the designated constraints
// aren't met.
type ValidateJobMappingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateJobMappingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateJobMappingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateJobMappingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateJobMappingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateJobMappingsResponseValidationError) ErrorName() string {
	return "ValidateJobMappingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateJobMappingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateJobMappingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateJobMappingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateJobMappingsResponseValidationError{}

// Validate checks the field values on VirtualForeignKey with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VirtualForeignKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualForeignKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualForeignKeyMultiError, or nil if none found.
func (m *VirtualForeignKey) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualForeignKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	// no validation rules for Table

	if len(errors) > 0 {
		return VirtualForeignKeyMultiError(errors)
	}

	return nil
}

// VirtualForeignKeyMultiError is an error wrapping multiple validation errors
// returned by VirtualForeignKey.ValidateAll() if the designated constraints
// aren't met.
type VirtualForeignKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualForeignKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualForeignKeyMultiError) AllErrors() []error { return m }

// VirtualForeignKeyValidationError is the validation error returned by
// VirtualForeignKey.Validate if the designated constraints aren't met.
type VirtualForeignKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualForeignKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualForeignKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualForeignKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualForeignKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualForeignKeyValidationError) ErrorName() string {
	return "VirtualForeignKeyValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualForeignKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualForeignKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualForeignKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualForeignKeyValidationError{}

// Validate checks the field values on VirtualForeignConstraint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VirtualForeignConstraint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualForeignConstraint with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualForeignConstraintMultiError, or nil if none found.
func (m *VirtualForeignConstraint) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualForeignConstraint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Schema

	// no validation rules for Table

	if all {
		switch v := interface{}(m.GetForeignKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VirtualForeignConstraintValidationError{
					field:  "ForeignKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VirtualForeignConstraintValidationError{
					field:  "ForeignKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetForeignKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualForeignConstraintValidationError{
				field:  "ForeignKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VirtualForeignConstraintMultiError(errors)
	}

	return nil
}

// VirtualForeignConstraintMultiError is an error wrapping multiple validation
// errors returned by VirtualForeignConstraint.ValidateAll() if the designated
// constraints aren't met.
type VirtualForeignConstraintMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualForeignConstraintMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualForeignConstraintMultiError) AllErrors() []error { return m }

// VirtualForeignConstraintValidationError is the validation error returned by
// VirtualForeignConstraint.Validate if the designated constraints aren't met.
type VirtualForeignConstraintValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualForeignConstraintValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualForeignConstraintValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualForeignConstraintValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualForeignConstraintValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualForeignConstraintValidationError) ErrorName() string {
	return "VirtualForeignConstraintValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualForeignConstraintValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualForeignConstraint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualForeignConstraintValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualForeignConstraintValidationError{}
