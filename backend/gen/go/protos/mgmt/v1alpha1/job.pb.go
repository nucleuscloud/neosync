// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: mgmt/v1alpha1/job.proto

package mgmtv1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobStatus int32

const (
	JobStatus_JOB_STATUS_UNSPECIFIED JobStatus = 0
	JobStatus_JOB_STATUS_ENABLED     JobStatus = 1
	JobStatus_JOB_STATUS_PAUSED      JobStatus = 3
	JobStatus_JOB_STATUS_DISABLED    JobStatus = 4
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0: "JOB_STATUS_UNSPECIFIED",
		1: "JOB_STATUS_ENABLED",
		3: "JOB_STATUS_PAUSED",
		4: "JOB_STATUS_DISABLED",
	}
	JobStatus_value = map[string]int32{
		"JOB_STATUS_UNSPECIFIED": 0,
		"JOB_STATUS_ENABLED":     1,
		"JOB_STATUS_PAUSED":      3,
		"JOB_STATUS_DISABLED":    4,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_v1alpha1_job_proto_enumTypes[0].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_mgmt_v1alpha1_job_proto_enumTypes[0]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{0}
}

type ActivityStatus int32

const (
	ActivityStatus_ACTIVITY_STATUS_UNSPECIFIED ActivityStatus = 0
	ActivityStatus_ACTIVITY_STATUS_SCHEDULED   ActivityStatus = 1
	ActivityStatus_ACTIVITY_STATUS_STARTED     ActivityStatus = 2
	ActivityStatus_ACTIVITY_STATUS_CANCELED    ActivityStatus = 3
	ActivityStatus_ACTIVITY_STATUS_FAILED      ActivityStatus = 4
)

// Enum value maps for ActivityStatus.
var (
	ActivityStatus_name = map[int32]string{
		0: "ACTIVITY_STATUS_UNSPECIFIED",
		1: "ACTIVITY_STATUS_SCHEDULED",
		2: "ACTIVITY_STATUS_STARTED",
		3: "ACTIVITY_STATUS_CANCELED",
		4: "ACTIVITY_STATUS_FAILED",
	}
	ActivityStatus_value = map[string]int32{
		"ACTIVITY_STATUS_UNSPECIFIED": 0,
		"ACTIVITY_STATUS_SCHEDULED":   1,
		"ACTIVITY_STATUS_STARTED":     2,
		"ACTIVITY_STATUS_CANCELED":    3,
		"ACTIVITY_STATUS_FAILED":      4,
	}
)

func (x ActivityStatus) Enum() *ActivityStatus {
	p := new(ActivityStatus)
	*p = x
	return p
}

func (x ActivityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_v1alpha1_job_proto_enumTypes[1].Descriptor()
}

func (ActivityStatus) Type() protoreflect.EnumType {
	return &file_mgmt_v1alpha1_job_proto_enumTypes[1]
}

func (x ActivityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityStatus.Descriptor instead.
func (ActivityStatus) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{1}
}

// An enumeration of job run statuses.
type JobRunStatus int32

const (
	// if the job run status is unknown
	JobRunStatus_JOB_RUN_STATUS_UNSPECIFIED JobRunStatus = 0
	// the run is pending and has not started yet
	JobRunStatus_JOB_RUN_STATUS_PENDING JobRunStatus = 1
	// the run is currently in progress
	JobRunStatus_JOB_RUN_STATUS_RUNNING JobRunStatus = 2
	// the run has successfully completed
	JobRunStatus_JOB_RUN_STATUS_COMPLETE JobRunStatus = 3
	// the run ended with an error
	JobRunStatus_JOB_RUN_STATUS_ERROR JobRunStatus = 4
	// the run was cancelled
	JobRunStatus_JOB_RUN_STATUS_CANCELED JobRunStatus = 5
	// the run was terminated
	JobRunStatus_JOB_RUN_STATUS_TERMINATED JobRunStatus = 6
	// the run ended in failure
	JobRunStatus_JOB_RUN_STATUS_FAILED JobRunStatus = 7
	// the run was ended pre-maturely due to timeout
	JobRunStatus_JOB_RUN_STATUS_TIMED_OUT JobRunStatus = 8
)

// Enum value maps for JobRunStatus.
var (
	JobRunStatus_name = map[int32]string{
		0: "JOB_RUN_STATUS_UNSPECIFIED",
		1: "JOB_RUN_STATUS_PENDING",
		2: "JOB_RUN_STATUS_RUNNING",
		3: "JOB_RUN_STATUS_COMPLETE",
		4: "JOB_RUN_STATUS_ERROR",
		5: "JOB_RUN_STATUS_CANCELED",
		6: "JOB_RUN_STATUS_TERMINATED",
		7: "JOB_RUN_STATUS_FAILED",
		8: "JOB_RUN_STATUS_TIMED_OUT",
	}
	JobRunStatus_value = map[string]int32{
		"JOB_RUN_STATUS_UNSPECIFIED": 0,
		"JOB_RUN_STATUS_PENDING":     1,
		"JOB_RUN_STATUS_RUNNING":     2,
		"JOB_RUN_STATUS_COMPLETE":    3,
		"JOB_RUN_STATUS_ERROR":       4,
		"JOB_RUN_STATUS_CANCELED":    5,
		"JOB_RUN_STATUS_TERMINATED":  6,
		"JOB_RUN_STATUS_FAILED":      7,
		"JOB_RUN_STATUS_TIMED_OUT":   8,
	}
)

func (x JobRunStatus) Enum() *JobRunStatus {
	p := new(JobRunStatus)
	*p = x
	return p
}

func (x JobRunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobRunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_v1alpha1_job_proto_enumTypes[2].Descriptor()
}

func (JobRunStatus) Type() protoreflect.EnumType {
	return &file_mgmt_v1alpha1_job_proto_enumTypes[2]
}

func (x JobRunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobRunStatus.Descriptor instead.
func (JobRunStatus) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{2}
}

type LogWindow int32

const (
	LogWindow_LOG_WINDOW_NO_TIME_UNSPECIFIED LogWindow = 0
	LogWindow_LOG_WINDOW_FIFTEEN_MIN         LogWindow = 1
	LogWindow_LOG_WINDOW_ONE_HOUR            LogWindow = 2
	LogWindow_LOG_WINDOW_ONE_DAY             LogWindow = 3
)

// Enum value maps for LogWindow.
var (
	LogWindow_name = map[int32]string{
		0: "LOG_WINDOW_NO_TIME_UNSPECIFIED",
		1: "LOG_WINDOW_FIFTEEN_MIN",
		2: "LOG_WINDOW_ONE_HOUR",
		3: "LOG_WINDOW_ONE_DAY",
	}
	LogWindow_value = map[string]int32{
		"LOG_WINDOW_NO_TIME_UNSPECIFIED": 0,
		"LOG_WINDOW_FIFTEEN_MIN":         1,
		"LOG_WINDOW_ONE_HOUR":            2,
		"LOG_WINDOW_ONE_DAY":             3,
	}
)

func (x LogWindow) Enum() *LogWindow {
	p := new(LogWindow)
	*p = x
	return p
}

func (x LogWindow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogWindow) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_v1alpha1_job_proto_enumTypes[3].Descriptor()
}

func (LogWindow) Type() protoreflect.EnumType {
	return &file_mgmt_v1alpha1_job_proto_enumTypes[3]
}

func (x LogWindow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogWindow.Descriptor instead.
func (LogWindow) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{3}
}

type LogLevel int32

const (
	LogLevel_LOG_LEVEL_UNSPECIFIED LogLevel = 0
	LogLevel_LOG_LEVEL_DEBUG       LogLevel = 1
	LogLevel_LOG_LEVEL_INFO        LogLevel = 2
	LogLevel_LOG_LEVEL_WARN        LogLevel = 3
	LogLevel_LOG_LEVEL_ERROR       LogLevel = 4
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_UNSPECIFIED",
		1: "LOG_LEVEL_DEBUG",
		2: "LOG_LEVEL_INFO",
		3: "LOG_LEVEL_WARN",
		4: "LOG_LEVEL_ERROR",
	}
	LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"LOG_LEVEL_DEBUG":       1,
		"LOG_LEVEL_INFO":        2,
		"LOG_LEVEL_WARN":        3,
		"LOG_LEVEL_ERROR":       4,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_v1alpha1_job_proto_enumTypes[4].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_mgmt_v1alpha1_job_proto_enumTypes[4]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{4}
}

type AwsS3DestinationConnectionOptions_StorageClass int32

const (
	AwsS3DestinationConnectionOptions_STORAGE_CLASS_UNSPECIFIED         AwsS3DestinationConnectionOptions_StorageClass = 0
	AwsS3DestinationConnectionOptions_STORAGE_CLASS_STANDARD            AwsS3DestinationConnectionOptions_StorageClass = 1
	AwsS3DestinationConnectionOptions_STORAGE_CLASS_REDUCED_REDUNDANCY  AwsS3DestinationConnectionOptions_StorageClass = 2
	AwsS3DestinationConnectionOptions_STORAGE_CLASS_GLACIER             AwsS3DestinationConnectionOptions_StorageClass = 3
	AwsS3DestinationConnectionOptions_STORAGE_CLASS_STANDARD_IA         AwsS3DestinationConnectionOptions_StorageClass = 4
	AwsS3DestinationConnectionOptions_STORAGE_CLASS_ONEZONE_IA          AwsS3DestinationConnectionOptions_StorageClass = 5
	AwsS3DestinationConnectionOptions_STORAGE_CLASS_INTELLIGENT_TIERING AwsS3DestinationConnectionOptions_StorageClass = 6
	AwsS3DestinationConnectionOptions_STORAGE_CLASS_DEEP_ARCHIVE        AwsS3DestinationConnectionOptions_StorageClass = 7
)

// Enum value maps for AwsS3DestinationConnectionOptions_StorageClass.
var (
	AwsS3DestinationConnectionOptions_StorageClass_name = map[int32]string{
		0: "STORAGE_CLASS_UNSPECIFIED",
		1: "STORAGE_CLASS_STANDARD",
		2: "STORAGE_CLASS_REDUCED_REDUNDANCY",
		3: "STORAGE_CLASS_GLACIER",
		4: "STORAGE_CLASS_STANDARD_IA",
		5: "STORAGE_CLASS_ONEZONE_IA",
		6: "STORAGE_CLASS_INTELLIGENT_TIERING",
		7: "STORAGE_CLASS_DEEP_ARCHIVE",
	}
	AwsS3DestinationConnectionOptions_StorageClass_value = map[string]int32{
		"STORAGE_CLASS_UNSPECIFIED":         0,
		"STORAGE_CLASS_STANDARD":            1,
		"STORAGE_CLASS_REDUCED_REDUNDANCY":  2,
		"STORAGE_CLASS_GLACIER":             3,
		"STORAGE_CLASS_STANDARD_IA":         4,
		"STORAGE_CLASS_ONEZONE_IA":          5,
		"STORAGE_CLASS_INTELLIGENT_TIERING": 6,
		"STORAGE_CLASS_DEEP_ARCHIVE":        7,
	}
)

func (x AwsS3DestinationConnectionOptions_StorageClass) Enum() *AwsS3DestinationConnectionOptions_StorageClass {
	p := new(AwsS3DestinationConnectionOptions_StorageClass)
	*p = x
	return p
}

func (x AwsS3DestinationConnectionOptions_StorageClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsS3DestinationConnectionOptions_StorageClass) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_v1alpha1_job_proto_enumTypes[5].Descriptor()
}

func (AwsS3DestinationConnectionOptions_StorageClass) Type() protoreflect.EnumType {
	return &file_mgmt_v1alpha1_job_proto_enumTypes[5]
}

func (x AwsS3DestinationConnectionOptions_StorageClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsS3DestinationConnectionOptions_StorageClass.Descriptor instead.
func (AwsS3DestinationConnectionOptions_StorageClass) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{40, 0}
}

type GetActiveJobHooksByTimingRequest_Timing int32

const (
	// If unspecified, returns all active job hooks
	GetActiveJobHooksByTimingRequest_TIMING_UNSPECIFIED GetActiveJobHooksByTimingRequest_Timing = 0
	// Only returns presync hooks
	GetActiveJobHooksByTimingRequest_TIMING_PRESYNC GetActiveJobHooksByTimingRequest_Timing = 1
	// Only returns postsync hooks
	GetActiveJobHooksByTimingRequest_TIMING_POSTSYNC GetActiveJobHooksByTimingRequest_Timing = 2
)

// Enum value maps for GetActiveJobHooksByTimingRequest_Timing.
var (
	GetActiveJobHooksByTimingRequest_Timing_name = map[int32]string{
		0: "TIMING_UNSPECIFIED",
		1: "TIMING_PRESYNC",
		2: "TIMING_POSTSYNC",
	}
	GetActiveJobHooksByTimingRequest_Timing_value = map[string]int32{
		"TIMING_UNSPECIFIED": 0,
		"TIMING_PRESYNC":     1,
		"TIMING_POSTSYNC":    2,
	}
)

func (x GetActiveJobHooksByTimingRequest_Timing) Enum() *GetActiveJobHooksByTimingRequest_Timing {
	p := new(GetActiveJobHooksByTimingRequest_Timing)
	*p = x
	return p
}

func (x GetActiveJobHooksByTimingRequest_Timing) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetActiveJobHooksByTimingRequest_Timing) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_v1alpha1_job_proto_enumTypes[6].Descriptor()
}

func (GetActiveJobHooksByTimingRequest_Timing) Type() protoreflect.EnumType {
	return &file_mgmt_v1alpha1_job_proto_enumTypes[6]
}

func (x GetActiveJobHooksByTimingRequest_Timing) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetActiveJobHooksByTimingRequest_Timing.Descriptor instead.
func (GetActiveJobHooksByTimingRequest_Timing) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{146, 0}
}

type GetJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetJobsRequest) Reset() {
	*x = GetJobsRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsRequest) ProtoMessage() {}

func (x *GetJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsRequest.ProtoReflect.Descriptor instead.
func (*GetJobsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{0}
}

func (x *GetJobsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *GetJobsResponse) Reset() {
	*x = GetJobsResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsResponse) ProtoMessage() {}

func (x *GetJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsResponse.ProtoReflect.Descriptor instead.
func (*GetJobsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{1}
}

func (x *GetJobsResponse) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type JobSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *JobSourceOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *JobSource) Reset() {
	*x = JobSource{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSource) ProtoMessage() {}

func (x *JobSource) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSource.ProtoReflect.Descriptor instead.
func (*JobSource) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{2}
}

func (x *JobSource) GetOptions() *JobSourceOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type JobSourceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*JobSourceOptions_Postgres
	//	*JobSourceOptions_AwsS3
	//	*JobSourceOptions_Mysql
	//	*JobSourceOptions_Generate
	//	*JobSourceOptions_AiGenerate
	//	*JobSourceOptions_Mongodb
	//	*JobSourceOptions_Dynamodb
	//	*JobSourceOptions_Mssql
	Config isJobSourceOptions_Config `protobuf_oneof:"config"`
}

func (x *JobSourceOptions) Reset() {
	*x = JobSourceOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSourceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSourceOptions) ProtoMessage() {}

func (x *JobSourceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSourceOptions.ProtoReflect.Descriptor instead.
func (*JobSourceOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{3}
}

func (m *JobSourceOptions) GetConfig() isJobSourceOptions_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *JobSourceOptions) GetPostgres() *PostgresSourceConnectionOptions {
	if x, ok := x.GetConfig().(*JobSourceOptions_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (x *JobSourceOptions) GetAwsS3() *AwsS3SourceConnectionOptions {
	if x, ok := x.GetConfig().(*JobSourceOptions_AwsS3); ok {
		return x.AwsS3
	}
	return nil
}

func (x *JobSourceOptions) GetMysql() *MysqlSourceConnectionOptions {
	if x, ok := x.GetConfig().(*JobSourceOptions_Mysql); ok {
		return x.Mysql
	}
	return nil
}

func (x *JobSourceOptions) GetGenerate() *GenerateSourceOptions {
	if x, ok := x.GetConfig().(*JobSourceOptions_Generate); ok {
		return x.Generate
	}
	return nil
}

func (x *JobSourceOptions) GetAiGenerate() *AiGenerateSourceOptions {
	if x, ok := x.GetConfig().(*JobSourceOptions_AiGenerate); ok {
		return x.AiGenerate
	}
	return nil
}

func (x *JobSourceOptions) GetMongodb() *MongoDBSourceConnectionOptions {
	if x, ok := x.GetConfig().(*JobSourceOptions_Mongodb); ok {
		return x.Mongodb
	}
	return nil
}

func (x *JobSourceOptions) GetDynamodb() *DynamoDBSourceConnectionOptions {
	if x, ok := x.GetConfig().(*JobSourceOptions_Dynamodb); ok {
		return x.Dynamodb
	}
	return nil
}

func (x *JobSourceOptions) GetMssql() *MssqlSourceConnectionOptions {
	if x, ok := x.GetConfig().(*JobSourceOptions_Mssql); ok {
		return x.Mssql
	}
	return nil
}

type isJobSourceOptions_Config interface {
	isJobSourceOptions_Config()
}

type JobSourceOptions_Postgres struct {
	Postgres *PostgresSourceConnectionOptions `protobuf:"bytes,1,opt,name=postgres,proto3,oneof"`
}

type JobSourceOptions_AwsS3 struct {
	AwsS3 *AwsS3SourceConnectionOptions `protobuf:"bytes,2,opt,name=aws_s3,json=awsS3,proto3,oneof"`
}

type JobSourceOptions_Mysql struct {
	Mysql *MysqlSourceConnectionOptions `protobuf:"bytes,3,opt,name=mysql,proto3,oneof"`
}

type JobSourceOptions_Generate struct {
	Generate *GenerateSourceOptions `protobuf:"bytes,4,opt,name=generate,proto3,oneof"`
}

type JobSourceOptions_AiGenerate struct {
	AiGenerate *AiGenerateSourceOptions `protobuf:"bytes,5,opt,name=ai_generate,json=aiGenerate,proto3,oneof"`
}

type JobSourceOptions_Mongodb struct {
	Mongodb *MongoDBSourceConnectionOptions `protobuf:"bytes,6,opt,name=mongodb,proto3,oneof"`
}

type JobSourceOptions_Dynamodb struct {
	Dynamodb *DynamoDBSourceConnectionOptions `protobuf:"bytes,7,opt,name=dynamodb,proto3,oneof"`
}

type JobSourceOptions_Mssql struct {
	Mssql *MssqlSourceConnectionOptions `protobuf:"bytes,8,opt,name=mssql,proto3,oneof"`
}

func (*JobSourceOptions_Postgres) isJobSourceOptions_Config() {}

func (*JobSourceOptions_AwsS3) isJobSourceOptions_Config() {}

func (*JobSourceOptions_Mysql) isJobSourceOptions_Config() {}

func (*JobSourceOptions_Generate) isJobSourceOptions_Config() {}

func (*JobSourceOptions_AiGenerate) isJobSourceOptions_Config() {}

func (*JobSourceOptions_Mongodb) isJobSourceOptions_Config() {}

func (*JobSourceOptions_Dynamodb) isJobSourceOptions_Config() {}

func (*JobSourceOptions_Mssql) isJobSourceOptions_Config() {}

type CreateJobDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Options      *JobDestinationOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateJobDestination) Reset() {
	*x = CreateJobDestination{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateJobDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobDestination) ProtoMessage() {}

func (x *CreateJobDestination) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobDestination.ProtoReflect.Descriptor instead.
func (*CreateJobDestination) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{4}
}

func (x *CreateJobDestination) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *CreateJobDestination) GetOptions() *JobDestinationOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type JobDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Options      *JobDestinationOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	Id           string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *JobDestination) Reset() {
	*x = JobDestination{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDestination) ProtoMessage() {}

func (x *JobDestination) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDestination.ProtoReflect.Descriptor instead.
func (*JobDestination) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{5}
}

func (x *JobDestination) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *JobDestination) GetOptions() *JobDestinationOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *JobDestination) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AiGenerateSourceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connection id that corresponds with an AI-based Neosync connection
	AiConnectionId string `protobuf:"bytes,1,opt,name=ai_connection_id,json=aiConnectionId,proto3" json:"ai_connection_id,omitempty"`
	// The list of schemas (and their tables) along with any configuration options that will be used to generate data for.
	Schemas []*AiGenerateSourceSchemaOption `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// An optional connection id that will be used as the basis for the shape of data to be generated.
	FkSourceConnectionId *string `protobuf:"bytes,3,opt,name=fk_source_connection_id,json=fkSourceConnectionId,proto3,oneof" json:"fk_source_connection_id,omitempty"`
	// The name of the model to use
	ModelName string `protobuf:"bytes,4,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// Optionally provide a user prompt to give more context to the schema
	UserPrompt *string `protobuf:"bytes,5,opt,name=user_prompt,json=userPrompt,proto3,oneof" json:"user_prompt,omitempty"`
	// The batch size that will be used to generate X number of records. This is global and will be applied to all tables configured.
	GenerateBatchSize *int64 `protobuf:"varint,6,opt,name=generate_batch_size,json=generateBatchSize,proto3,oneof" json:"generate_batch_size,omitempty"`
}

func (x *AiGenerateSourceOptions) Reset() {
	*x = AiGenerateSourceOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AiGenerateSourceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiGenerateSourceOptions) ProtoMessage() {}

func (x *AiGenerateSourceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiGenerateSourceOptions.ProtoReflect.Descriptor instead.
func (*AiGenerateSourceOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{6}
}

func (x *AiGenerateSourceOptions) GetAiConnectionId() string {
	if x != nil {
		return x.AiConnectionId
	}
	return ""
}

func (x *AiGenerateSourceOptions) GetSchemas() []*AiGenerateSourceSchemaOption {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *AiGenerateSourceOptions) GetFkSourceConnectionId() string {
	if x != nil && x.FkSourceConnectionId != nil {
		return *x.FkSourceConnectionId
	}
	return ""
}

func (x *AiGenerateSourceOptions) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *AiGenerateSourceOptions) GetUserPrompt() string {
	if x != nil && x.UserPrompt != nil {
		return *x.UserPrompt
	}
	return ""
}

func (x *AiGenerateSourceOptions) GetGenerateBatchSize() int64 {
	if x != nil && x.GenerateBatchSize != nil {
		return *x.GenerateBatchSize
	}
	return 0
}

type AiGenerateSourceSchemaOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dataabase schema
	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	// The list of tables (and their configuration) that reside within the schema to receive generated data
	Tables []*AiGenerateSourceTableOption `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *AiGenerateSourceSchemaOption) Reset() {
	*x = AiGenerateSourceSchemaOption{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AiGenerateSourceSchemaOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiGenerateSourceSchemaOption) ProtoMessage() {}

func (x *AiGenerateSourceSchemaOption) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiGenerateSourceSchemaOption.ProtoReflect.Descriptor instead.
func (*AiGenerateSourceSchemaOption) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{7}
}

func (x *AiGenerateSourceSchemaOption) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *AiGenerateSourceSchemaOption) GetTables() []*AiGenerateSourceTableOption {
	if x != nil {
		return x.Tables
	}
	return nil
}

type AiGenerateSourceTableOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The table that will be used to. 1. The schema of the table will be injected into the prompt, of which the resulting data will then be inserted.
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// The total number of records to be generated.
	RowCount int64 `protobuf:"varint,2,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
}

func (x *AiGenerateSourceTableOption) Reset() {
	*x = AiGenerateSourceTableOption{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AiGenerateSourceTableOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiGenerateSourceTableOption) ProtoMessage() {}

func (x *AiGenerateSourceTableOption) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiGenerateSourceTableOption.ProtoReflect.Descriptor instead.
func (*AiGenerateSourceTableOption) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{8}
}

func (x *AiGenerateSourceTableOption) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *AiGenerateSourceTableOption) GetRowCount() int64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

type GenerateSourceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schemas              []*GenerateSourceSchemaOption `protobuf:"bytes,1,rep,name=schemas,proto3" json:"schemas,omitempty"`
	FkSourceConnectionId *string                       `protobuf:"bytes,3,opt,name=fk_source_connection_id,json=fkSourceConnectionId,proto3,oneof" json:"fk_source_connection_id,omitempty"`
}

func (x *GenerateSourceOptions) Reset() {
	*x = GenerateSourceOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateSourceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSourceOptions) ProtoMessage() {}

func (x *GenerateSourceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSourceOptions.ProtoReflect.Descriptor instead.
func (*GenerateSourceOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{9}
}

func (x *GenerateSourceOptions) GetSchemas() []*GenerateSourceSchemaOption {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *GenerateSourceOptions) GetFkSourceConnectionId() string {
	if x != nil && x.FkSourceConnectionId != nil {
		return *x.FkSourceConnectionId
	}
	return ""
}

type GenerateSourceSchemaOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema string                       `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Tables []*GenerateSourceTableOption `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *GenerateSourceSchemaOption) Reset() {
	*x = GenerateSourceSchemaOption{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateSourceSchemaOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSourceSchemaOption) ProtoMessage() {}

func (x *GenerateSourceSchemaOption) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSourceSchemaOption.ProtoReflect.Descriptor instead.
func (*GenerateSourceSchemaOption) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{10}
}

func (x *GenerateSourceSchemaOption) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *GenerateSourceSchemaOption) GetTables() []*GenerateSourceTableOption {
	if x != nil {
		return x.Tables
	}
	return nil
}

type GenerateSourceTableOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table    string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	RowCount int64  `protobuf:"varint,2,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
}

func (x *GenerateSourceTableOption) Reset() {
	*x = GenerateSourceTableOption{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateSourceTableOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSourceTableOption) ProtoMessage() {}

func (x *GenerateSourceTableOption) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSourceTableOption.ProtoReflect.Descriptor instead.
func (*GenerateSourceTableOption) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{11}
}

func (x *GenerateSourceTableOption) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *GenerateSourceTableOption) GetRowCount() int64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

// MongoDB connection options for a job source
type MongoDBSourceConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique connection id to a mongo connection configuration
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *MongoDBSourceConnectionOptions) Reset() {
	*x = MongoDBSourceConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongoDBSourceConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoDBSourceConnectionOptions) ProtoMessage() {}

func (x *MongoDBSourceConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoDBSourceConnectionOptions.ProtoReflect.Descriptor instead.
func (*MongoDBSourceConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{12}
}

func (x *MongoDBSourceConnectionOptions) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

// DynamoDB connection options for a job source
type DynamoDBSourceConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique connection id to a dynamodb connection configuration
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// List of table option configurations for any mapped source table.
	// Any table listed in this must also be present as a job mapping table to be applied.
	Tables []*DynamoDBSourceTableOption `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	// Default transformations for any unmapped keys
	UnmappedTransforms *DynamoDBSourceUnmappedTransformConfig `protobuf:"bytes,3,opt,name=unmapped_transforms,json=unmappedTransforms,proto3" json:"unmapped_transforms,omitempty"`
	// Enforces strong read consistency
	// False: Eventually Consistent Reads, True: Strongly Consistent Reads
	// https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html
	EnableConsistentRead bool `protobuf:"varint,4,opt,name=enable_consistent_read,json=enableConsistentRead,proto3" json:"enable_consistent_read,omitempty"`
}

func (x *DynamoDBSourceConnectionOptions) Reset() {
	*x = DynamoDBSourceConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamoDBSourceConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDBSourceConnectionOptions) ProtoMessage() {}

func (x *DynamoDBSourceConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDBSourceConnectionOptions.ProtoReflect.Descriptor instead.
func (*DynamoDBSourceConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{13}
}

func (x *DynamoDBSourceConnectionOptions) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *DynamoDBSourceConnectionOptions) GetTables() []*DynamoDBSourceTableOption {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *DynamoDBSourceConnectionOptions) GetUnmappedTransforms() *DynamoDBSourceUnmappedTransformConfig {
	if x != nil {
		return x.UnmappedTransforms
	}
	return nil
}

func (x *DynamoDBSourceConnectionOptions) GetEnableConsistentRead() bool {
	if x != nil {
		return x.EnableConsistentRead
	}
	return false
}

type DynamoDBSourceUnmappedTransformConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Byte
	B *JobMappingTransformer `protobuf:"bytes,1,opt,name=b,proto3" json:"b,omitempty"`
	// Boolean
	Boolean *JobMappingTransformer `protobuf:"bytes,2,opt,name=boolean,proto3" json:"boolean,omitempty"`
	// Number
	N *JobMappingTransformer `protobuf:"bytes,4,opt,name=n,proto3" json:"n,omitempty"`
	// String
	S *JobMappingTransformer `protobuf:"bytes,6,opt,name=s,proto3" json:"s,omitempty"`
}

func (x *DynamoDBSourceUnmappedTransformConfig) Reset() {
	*x = DynamoDBSourceUnmappedTransformConfig{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamoDBSourceUnmappedTransformConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDBSourceUnmappedTransformConfig) ProtoMessage() {}

func (x *DynamoDBSourceUnmappedTransformConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDBSourceUnmappedTransformConfig.ProtoReflect.Descriptor instead.
func (*DynamoDBSourceUnmappedTransformConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{14}
}

func (x *DynamoDBSourceUnmappedTransformConfig) GetB() *JobMappingTransformer {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *DynamoDBSourceUnmappedTransformConfig) GetBoolean() *JobMappingTransformer {
	if x != nil {
		return x.Boolean
	}
	return nil
}

func (x *DynamoDBSourceUnmappedTransformConfig) GetN() *JobMappingTransformer {
	if x != nil {
		return x.N
	}
	return nil
}

func (x *DynamoDBSourceUnmappedTransformConfig) GetS() *JobMappingTransformer {
	if x != nil {
		return x.S
	}
	return nil
}

type DynamoDBSourceTableOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The table that this configuration will be applied to
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// An optional PartiQL query that may be used for subsetting the DynamoDB table.
	// This is not a parameterized query and must be valid. Intended to be everything after the WHERE keyword.
	WhereClause *string `protobuf:"bytes,2,opt,name=where_clause,json=whereClause,proto3,oneof" json:"where_clause,omitempty"`
}

func (x *DynamoDBSourceTableOption) Reset() {
	*x = DynamoDBSourceTableOption{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamoDBSourceTableOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDBSourceTableOption) ProtoMessage() {}

func (x *DynamoDBSourceTableOption) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDBSourceTableOption.ProtoReflect.Descriptor instead.
func (*DynamoDBSourceTableOption) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{15}
}

func (x *DynamoDBSourceTableOption) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *DynamoDBSourceTableOption) GetWhereClause() string {
	if x != nil && x.WhereClause != nil {
		return *x.WhereClause
	}
	return ""
}

type PostgresSourceConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @deprecated - Use new_column_addition_strategy instead
	HaltOnNewColumnAddition       *bool                         `protobuf:"varint,1,opt,name=halt_on_new_column_addition,json=haltOnNewColumnAddition,proto3,oneof" json:"halt_on_new_column_addition,omitempty"`
	Schemas                       []*PostgresSourceSchemaOption `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
	ConnectionId                  string                        `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	SubsetByForeignKeyConstraints bool                          `protobuf:"varint,4,opt,name=subset_by_foreign_key_constraints,json=subsetByForeignKeyConstraints,proto3" json:"subset_by_foreign_key_constraints,omitempty"`
	// Provide a strategy of what to do in the event Neosync encounters an unmapped column for the job's mapped tables.
	NewColumnAdditionStrategy *PostgresSourceConnectionOptions_NewColumnAdditionStrategy `protobuf:"bytes,5,opt,name=new_column_addition_strategy,json=newColumnAdditionStrategy,proto3" json:"new_column_addition_strategy,omitempty"`
}

func (x *PostgresSourceConnectionOptions) Reset() {
	*x = PostgresSourceConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresSourceConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresSourceConnectionOptions) ProtoMessage() {}

func (x *PostgresSourceConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresSourceConnectionOptions.ProtoReflect.Descriptor instead.
func (*PostgresSourceConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{16}
}

func (x *PostgresSourceConnectionOptions) GetHaltOnNewColumnAddition() bool {
	if x != nil && x.HaltOnNewColumnAddition != nil {
		return *x.HaltOnNewColumnAddition
	}
	return false
}

func (x *PostgresSourceConnectionOptions) GetSchemas() []*PostgresSourceSchemaOption {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *PostgresSourceConnectionOptions) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *PostgresSourceConnectionOptions) GetSubsetByForeignKeyConstraints() bool {
	if x != nil {
		return x.SubsetByForeignKeyConstraints
	}
	return false
}

func (x *PostgresSourceConnectionOptions) GetNewColumnAdditionStrategy() *PostgresSourceConnectionOptions_NewColumnAdditionStrategy {
	if x != nil {
		return x.NewColumnAdditionStrategy
	}
	return nil
}

type PostgresSourceSchemaOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema string                       `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Tables []*PostgresSourceTableOption `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *PostgresSourceSchemaOption) Reset() {
	*x = PostgresSourceSchemaOption{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresSourceSchemaOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresSourceSchemaOption) ProtoMessage() {}

func (x *PostgresSourceSchemaOption) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresSourceSchemaOption.ProtoReflect.Descriptor instead.
func (*PostgresSourceSchemaOption) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{17}
}

func (x *PostgresSourceSchemaOption) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *PostgresSourceSchemaOption) GetTables() []*PostgresSourceTableOption {
	if x != nil {
		return x.Tables
	}
	return nil
}

type PostgresSourceTableOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table       string  `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	WhereClause *string `protobuf:"bytes,2,opt,name=where_clause,json=whereClause,proto3,oneof" json:"where_clause,omitempty"`
}

func (x *PostgresSourceTableOption) Reset() {
	*x = PostgresSourceTableOption{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresSourceTableOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresSourceTableOption) ProtoMessage() {}

func (x *PostgresSourceTableOption) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresSourceTableOption.ProtoReflect.Descriptor instead.
func (*PostgresSourceTableOption) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{18}
}

func (x *PostgresSourceTableOption) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *PostgresSourceTableOption) GetWhereClause() string {
	if x != nil && x.WhereClause != nil {
		return *x.WhereClause
	}
	return ""
}

type MysqlSourceConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HaltOnNewColumnAddition       bool                       `protobuf:"varint,1,opt,name=halt_on_new_column_addition,json=haltOnNewColumnAddition,proto3" json:"halt_on_new_column_addition,omitempty"`
	Schemas                       []*MysqlSourceSchemaOption `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
	ConnectionId                  string                     `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	SubsetByForeignKeyConstraints bool                       `protobuf:"varint,4,opt,name=subset_by_foreign_key_constraints,json=subsetByForeignKeyConstraints,proto3" json:"subset_by_foreign_key_constraints,omitempty"`
}

func (x *MysqlSourceConnectionOptions) Reset() {
	*x = MysqlSourceConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlSourceConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlSourceConnectionOptions) ProtoMessage() {}

func (x *MysqlSourceConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlSourceConnectionOptions.ProtoReflect.Descriptor instead.
func (*MysqlSourceConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{19}
}

func (x *MysqlSourceConnectionOptions) GetHaltOnNewColumnAddition() bool {
	if x != nil {
		return x.HaltOnNewColumnAddition
	}
	return false
}

func (x *MysqlSourceConnectionOptions) GetSchemas() []*MysqlSourceSchemaOption {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *MysqlSourceConnectionOptions) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *MysqlSourceConnectionOptions) GetSubsetByForeignKeyConstraints() bool {
	if x != nil {
		return x.SubsetByForeignKeyConstraints
	}
	return false
}

type MysqlSourceSchemaOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema string                    `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Tables []*MysqlSourceTableOption `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *MysqlSourceSchemaOption) Reset() {
	*x = MysqlSourceSchemaOption{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlSourceSchemaOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlSourceSchemaOption) ProtoMessage() {}

func (x *MysqlSourceSchemaOption) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlSourceSchemaOption.ProtoReflect.Descriptor instead.
func (*MysqlSourceSchemaOption) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{20}
}

func (x *MysqlSourceSchemaOption) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *MysqlSourceSchemaOption) GetTables() []*MysqlSourceTableOption {
	if x != nil {
		return x.Tables
	}
	return nil
}

type MysqlSourceTableOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table       string  `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	WhereClause *string `protobuf:"bytes,2,opt,name=where_clause,json=whereClause,proto3,oneof" json:"where_clause,omitempty"`
}

func (x *MysqlSourceTableOption) Reset() {
	*x = MysqlSourceTableOption{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlSourceTableOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlSourceTableOption) ProtoMessage() {}

func (x *MysqlSourceTableOption) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlSourceTableOption.ProtoReflect.Descriptor instead.
func (*MysqlSourceTableOption) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{21}
}

func (x *MysqlSourceTableOption) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *MysqlSourceTableOption) GetWhereClause() string {
	if x != nil && x.WhereClause != nil {
		return *x.WhereClause
	}
	return ""
}

type MssqlSourceConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HaltOnNewColumnAddition       bool                       `protobuf:"varint,1,opt,name=halt_on_new_column_addition,json=haltOnNewColumnAddition,proto3" json:"halt_on_new_column_addition,omitempty"`
	Schemas                       []*MssqlSourceSchemaOption `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
	ConnectionId                  string                     `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	SubsetByForeignKeyConstraints bool                       `protobuf:"varint,4,opt,name=subset_by_foreign_key_constraints,json=subsetByForeignKeyConstraints,proto3" json:"subset_by_foreign_key_constraints,omitempty"`
}

func (x *MssqlSourceConnectionOptions) Reset() {
	*x = MssqlSourceConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MssqlSourceConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MssqlSourceConnectionOptions) ProtoMessage() {}

func (x *MssqlSourceConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MssqlSourceConnectionOptions.ProtoReflect.Descriptor instead.
func (*MssqlSourceConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{22}
}

func (x *MssqlSourceConnectionOptions) GetHaltOnNewColumnAddition() bool {
	if x != nil {
		return x.HaltOnNewColumnAddition
	}
	return false
}

func (x *MssqlSourceConnectionOptions) GetSchemas() []*MssqlSourceSchemaOption {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *MssqlSourceConnectionOptions) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *MssqlSourceConnectionOptions) GetSubsetByForeignKeyConstraints() bool {
	if x != nil {
		return x.SubsetByForeignKeyConstraints
	}
	return false
}

type MssqlSourceSchemaOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema string                    `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Tables []*MssqlSourceTableOption `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *MssqlSourceSchemaOption) Reset() {
	*x = MssqlSourceSchemaOption{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MssqlSourceSchemaOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MssqlSourceSchemaOption) ProtoMessage() {}

func (x *MssqlSourceSchemaOption) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MssqlSourceSchemaOption.ProtoReflect.Descriptor instead.
func (*MssqlSourceSchemaOption) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{23}
}

func (x *MssqlSourceSchemaOption) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *MssqlSourceSchemaOption) GetTables() []*MssqlSourceTableOption {
	if x != nil {
		return x.Tables
	}
	return nil
}

type MssqlSourceTableOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table       string  `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	WhereClause *string `protobuf:"bytes,2,opt,name=where_clause,json=whereClause,proto3,oneof" json:"where_clause,omitempty"`
}

func (x *MssqlSourceTableOption) Reset() {
	*x = MssqlSourceTableOption{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MssqlSourceTableOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MssqlSourceTableOption) ProtoMessage() {}

func (x *MssqlSourceTableOption) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MssqlSourceTableOption.ProtoReflect.Descriptor instead.
func (*MssqlSourceTableOption) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{24}
}

func (x *MssqlSourceTableOption) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *MssqlSourceTableOption) GetWhereClause() string {
	if x != nil && x.WhereClause != nil {
		return *x.WhereClause
	}
	return ""
}

type AwsS3SourceConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *AwsS3SourceConnectionOptions) Reset() {
	*x = AwsS3SourceConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsS3SourceConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsS3SourceConnectionOptions) ProtoMessage() {}

func (x *AwsS3SourceConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsS3SourceConnectionOptions.ProtoReflect.Descriptor instead.
func (*AwsS3SourceConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{25}
}

func (x *AwsS3SourceConnectionOptions) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type JobDestinationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*JobDestinationOptions_PostgresOptions
	//	*JobDestinationOptions_AwsS3Options
	//	*JobDestinationOptions_MysqlOptions
	//	*JobDestinationOptions_MongodbOptions
	//	*JobDestinationOptions_GcpCloudstorageOptions
	//	*JobDestinationOptions_DynamodbOptions
	//	*JobDestinationOptions_MssqlOptions
	Config isJobDestinationOptions_Config `protobuf_oneof:"config"`
}

func (x *JobDestinationOptions) Reset() {
	*x = JobDestinationOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobDestinationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDestinationOptions) ProtoMessage() {}

func (x *JobDestinationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDestinationOptions.ProtoReflect.Descriptor instead.
func (*JobDestinationOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{26}
}

func (m *JobDestinationOptions) GetConfig() isJobDestinationOptions_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *JobDestinationOptions) GetPostgresOptions() *PostgresDestinationConnectionOptions {
	if x, ok := x.GetConfig().(*JobDestinationOptions_PostgresOptions); ok {
		return x.PostgresOptions
	}
	return nil
}

func (x *JobDestinationOptions) GetAwsS3Options() *AwsS3DestinationConnectionOptions {
	if x, ok := x.GetConfig().(*JobDestinationOptions_AwsS3Options); ok {
		return x.AwsS3Options
	}
	return nil
}

func (x *JobDestinationOptions) GetMysqlOptions() *MysqlDestinationConnectionOptions {
	if x, ok := x.GetConfig().(*JobDestinationOptions_MysqlOptions); ok {
		return x.MysqlOptions
	}
	return nil
}

func (x *JobDestinationOptions) GetMongodbOptions() *MongoDBDestinationConnectionOptions {
	if x, ok := x.GetConfig().(*JobDestinationOptions_MongodbOptions); ok {
		return x.MongodbOptions
	}
	return nil
}

func (x *JobDestinationOptions) GetGcpCloudstorageOptions() *GcpCloudStorageDestinationConnectionOptions {
	if x, ok := x.GetConfig().(*JobDestinationOptions_GcpCloudstorageOptions); ok {
		return x.GcpCloudstorageOptions
	}
	return nil
}

func (x *JobDestinationOptions) GetDynamodbOptions() *DynamoDBDestinationConnectionOptions {
	if x, ok := x.GetConfig().(*JobDestinationOptions_DynamodbOptions); ok {
		return x.DynamodbOptions
	}
	return nil
}

func (x *JobDestinationOptions) GetMssqlOptions() *MssqlDestinationConnectionOptions {
	if x, ok := x.GetConfig().(*JobDestinationOptions_MssqlOptions); ok {
		return x.MssqlOptions
	}
	return nil
}

type isJobDestinationOptions_Config interface {
	isJobDestinationOptions_Config()
}

type JobDestinationOptions_PostgresOptions struct {
	PostgresOptions *PostgresDestinationConnectionOptions `protobuf:"bytes,1,opt,name=postgres_options,json=postgresOptions,proto3,oneof"`
}

type JobDestinationOptions_AwsS3Options struct {
	AwsS3Options *AwsS3DestinationConnectionOptions `protobuf:"bytes,2,opt,name=aws_s3_options,json=awsS3Options,proto3,oneof"`
}

type JobDestinationOptions_MysqlOptions struct {
	MysqlOptions *MysqlDestinationConnectionOptions `protobuf:"bytes,3,opt,name=mysql_options,json=mysqlOptions,proto3,oneof"`
}

type JobDestinationOptions_MongodbOptions struct {
	MongodbOptions *MongoDBDestinationConnectionOptions `protobuf:"bytes,4,opt,name=mongodb_options,json=mongodbOptions,proto3,oneof"`
}

type JobDestinationOptions_GcpCloudstorageOptions struct {
	// Destination Connecton options for Google Cloud Storage
	GcpCloudstorageOptions *GcpCloudStorageDestinationConnectionOptions `protobuf:"bytes,5,opt,name=gcp_cloudstorage_options,json=gcpCloudstorageOptions,proto3,oneof"`
}

type JobDestinationOptions_DynamodbOptions struct {
	// Destination Connection options for DynamoDB
	DynamodbOptions *DynamoDBDestinationConnectionOptions `protobuf:"bytes,6,opt,name=dynamodb_options,json=dynamodbOptions,proto3,oneof"`
}

type JobDestinationOptions_MssqlOptions struct {
	// Destination Connection options for Microsoft SQL Server
	MssqlOptions *MssqlDestinationConnectionOptions `protobuf:"bytes,7,opt,name=mssql_options,json=mssqlOptions,proto3,oneof"`
}

func (*JobDestinationOptions_PostgresOptions) isJobDestinationOptions_Config() {}

func (*JobDestinationOptions_AwsS3Options) isJobDestinationOptions_Config() {}

func (*JobDestinationOptions_MysqlOptions) isJobDestinationOptions_Config() {}

func (*JobDestinationOptions_MongodbOptions) isJobDestinationOptions_Config() {}

func (*JobDestinationOptions_GcpCloudstorageOptions) isJobDestinationOptions_Config() {}

func (*JobDestinationOptions_DynamodbOptions) isJobDestinationOptions_Config() {}

func (*JobDestinationOptions_MssqlOptions) isJobDestinationOptions_Config() {}

type MongoDBDestinationConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MongoDBDestinationConnectionOptions) Reset() {
	*x = MongoDBDestinationConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongoDBDestinationConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoDBDestinationConnectionOptions) ProtoMessage() {}

func (x *MongoDBDestinationConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoDBDestinationConnectionOptions.ProtoReflect.Descriptor instead.
func (*MongoDBDestinationConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{27}
}

// Configuration for Google Cloud Storage Destination Connection Job Options
type GcpCloudStorageDestinationConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GcpCloudStorageDestinationConnectionOptions) Reset() {
	*x = GcpCloudStorageDestinationConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpCloudStorageDestinationConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpCloudStorageDestinationConnectionOptions) ProtoMessage() {}

func (x *GcpCloudStorageDestinationConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpCloudStorageDestinationConnectionOptions.ProtoReflect.Descriptor instead.
func (*GcpCloudStorageDestinationConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{28}
}

// Configuration for DynamoDB Destination Connection Job Options
type DynamoDBDestinationConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of table mappings when piping data from a dynamoDB table to another dynamoDB table
	TableMappings []*DynamoDBDestinationTableMapping `protobuf:"bytes,1,rep,name=table_mappings,json=tableMappings,proto3" json:"table_mappings,omitempty"`
}

func (x *DynamoDBDestinationConnectionOptions) Reset() {
	*x = DynamoDBDestinationConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamoDBDestinationConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDBDestinationConnectionOptions) ProtoMessage() {}

func (x *DynamoDBDestinationConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDBDestinationConnectionOptions.ProtoReflect.Descriptor instead.
func (*DynamoDBDestinationConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{29}
}

func (x *DynamoDBDestinationConnectionOptions) GetTableMappings() []*DynamoDBDestinationTableMapping {
	if x != nil {
		return x.TableMappings
	}
	return nil
}

// Configuration for mapping a source table to a destination table for DynamoDB
type DynamoDBDestinationTableMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the incoming source table
	SourceTable string `protobuf:"bytes,1,opt,name=source_table,json=sourceTable,proto3" json:"source_table,omitempty"`
	// The name of the outgoing destination table
	DestinationTable string `protobuf:"bytes,2,opt,name=destination_table,json=destinationTable,proto3" json:"destination_table,omitempty"`
}

func (x *DynamoDBDestinationTableMapping) Reset() {
	*x = DynamoDBDestinationTableMapping{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamoDBDestinationTableMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDBDestinationTableMapping) ProtoMessage() {}

func (x *DynamoDBDestinationTableMapping) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDBDestinationTableMapping.ProtoReflect.Descriptor instead.
func (*DynamoDBDestinationTableMapping) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{30}
}

func (x *DynamoDBDestinationTableMapping) GetSourceTable() string {
	if x != nil {
		return x.SourceTable
	}
	return ""
}

func (x *DynamoDBDestinationTableMapping) GetDestinationTable() string {
	if x != nil {
		return x.DestinationTable
	}
	return ""
}

type PostgresDestinationConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TruncateTable   *PostgresTruncateTableConfig `protobuf:"bytes,1,opt,name=truncate_table,json=truncateTable,proto3" json:"truncate_table,omitempty"`
	InitTableSchema bool                         `protobuf:"varint,2,opt,name=init_table_schema,json=initTableSchema,proto3" json:"init_table_schema,omitempty"`
	OnConflict      *PostgresOnConflictConfig    `protobuf:"bytes,3,opt,name=on_conflict,json=onConflict,proto3" json:"on_conflict,omitempty"`
	// Insert all valid records, skipping any that violate foreign key constraints.
	SkipForeignKeyViolations bool `protobuf:"varint,4,opt,name=skip_foreign_key_violations,json=skipForeignKeyViolations,proto3" json:"skip_foreign_key_violations,omitempty"`
	// Configure batching options to handle how much data is sent to your database at once.
	Batch *BatchConfig `protobuf:"bytes,5,opt,name=batch,proto3" json:"batch,omitempty"`
	// Determines the maximum number of parallel batched inserts.
	MaxInFlight *uint32 `protobuf:"varint,6,opt,name=max_in_flight,json=maxInFlight,proto3,oneof" json:"max_in_flight,omitempty"`
}

func (x *PostgresDestinationConnectionOptions) Reset() {
	*x = PostgresDestinationConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresDestinationConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresDestinationConnectionOptions) ProtoMessage() {}

func (x *PostgresDestinationConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresDestinationConnectionOptions.ProtoReflect.Descriptor instead.
func (*PostgresDestinationConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{31}
}

func (x *PostgresDestinationConnectionOptions) GetTruncateTable() *PostgresTruncateTableConfig {
	if x != nil {
		return x.TruncateTable
	}
	return nil
}

func (x *PostgresDestinationConnectionOptions) GetInitTableSchema() bool {
	if x != nil {
		return x.InitTableSchema
	}
	return false
}

func (x *PostgresDestinationConnectionOptions) GetOnConflict() *PostgresOnConflictConfig {
	if x != nil {
		return x.OnConflict
	}
	return nil
}

func (x *PostgresDestinationConnectionOptions) GetSkipForeignKeyViolations() bool {
	if x != nil {
		return x.SkipForeignKeyViolations
	}
	return false
}

func (x *PostgresDestinationConnectionOptions) GetBatch() *BatchConfig {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *PostgresDestinationConnectionOptions) GetMaxInFlight() uint32 {
	if x != nil && x.MaxInFlight != nil {
		return *x.MaxInFlight
	}
	return 0
}

type PostgresOnConflictConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoNothing bool `protobuf:"varint,1,opt,name=do_nothing,json=doNothing,proto3" json:"do_nothing,omitempty"`
}

func (x *PostgresOnConflictConfig) Reset() {
	*x = PostgresOnConflictConfig{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresOnConflictConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresOnConflictConfig) ProtoMessage() {}

func (x *PostgresOnConflictConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresOnConflictConfig.ProtoReflect.Descriptor instead.
func (*PostgresOnConflictConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{32}
}

func (x *PostgresOnConflictConfig) GetDoNothing() bool {
	if x != nil {
		return x.DoNothing
	}
	return false
}

type PostgresTruncateTableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TruncateBeforeInsert bool `protobuf:"varint,1,opt,name=truncate_before_insert,json=truncateBeforeInsert,proto3" json:"truncate_before_insert,omitempty"`
	Cascade              bool `protobuf:"varint,2,opt,name=cascade,proto3" json:"cascade,omitempty"`
}

func (x *PostgresTruncateTableConfig) Reset() {
	*x = PostgresTruncateTableConfig{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresTruncateTableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresTruncateTableConfig) ProtoMessage() {}

func (x *PostgresTruncateTableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresTruncateTableConfig.ProtoReflect.Descriptor instead.
func (*PostgresTruncateTableConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{33}
}

func (x *PostgresTruncateTableConfig) GetTruncateBeforeInsert() bool {
	if x != nil {
		return x.TruncateBeforeInsert
	}
	return false
}

func (x *PostgresTruncateTableConfig) GetCascade() bool {
	if x != nil {
		return x.Cascade
	}
	return false
}

type MysqlDestinationConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TruncateTable   *MysqlTruncateTableConfig `protobuf:"bytes,1,opt,name=truncate_table,json=truncateTable,proto3" json:"truncate_table,omitempty"`
	InitTableSchema bool                      `protobuf:"varint,2,opt,name=init_table_schema,json=initTableSchema,proto3" json:"init_table_schema,omitempty"`
	OnConflict      *MysqlOnConflictConfig    `protobuf:"bytes,3,opt,name=on_conflict,json=onConflict,proto3" json:"on_conflict,omitempty"`
	// Insert all valid records, skipping any that violate foreign key constraints.
	SkipForeignKeyViolations bool `protobuf:"varint,4,opt,name=skip_foreign_key_violations,json=skipForeignKeyViolations,proto3" json:"skip_foreign_key_violations,omitempty"`
	// Configure batching options to handle how much data is sent to your database at once.
	Batch *BatchConfig `protobuf:"bytes,5,opt,name=batch,proto3" json:"batch,omitempty"`
	// Determines the maximum number of parallel batched inserts.
	MaxInFlight *uint32 `protobuf:"varint,6,opt,name=max_in_flight,json=maxInFlight,proto3,oneof" json:"max_in_flight,omitempty"`
}

func (x *MysqlDestinationConnectionOptions) Reset() {
	*x = MysqlDestinationConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlDestinationConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlDestinationConnectionOptions) ProtoMessage() {}

func (x *MysqlDestinationConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlDestinationConnectionOptions.ProtoReflect.Descriptor instead.
func (*MysqlDestinationConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{34}
}

func (x *MysqlDestinationConnectionOptions) GetTruncateTable() *MysqlTruncateTableConfig {
	if x != nil {
		return x.TruncateTable
	}
	return nil
}

func (x *MysqlDestinationConnectionOptions) GetInitTableSchema() bool {
	if x != nil {
		return x.InitTableSchema
	}
	return false
}

func (x *MysqlDestinationConnectionOptions) GetOnConflict() *MysqlOnConflictConfig {
	if x != nil {
		return x.OnConflict
	}
	return nil
}

func (x *MysqlDestinationConnectionOptions) GetSkipForeignKeyViolations() bool {
	if x != nil {
		return x.SkipForeignKeyViolations
	}
	return false
}

func (x *MysqlDestinationConnectionOptions) GetBatch() *BatchConfig {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *MysqlDestinationConnectionOptions) GetMaxInFlight() uint32 {
	if x != nil && x.MaxInFlight != nil {
		return *x.MaxInFlight
	}
	return 0
}

type MysqlTruncateTableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TruncateBeforeInsert bool `protobuf:"varint,1,opt,name=truncate_before_insert,json=truncateBeforeInsert,proto3" json:"truncate_before_insert,omitempty"`
}

func (x *MysqlTruncateTableConfig) Reset() {
	*x = MysqlTruncateTableConfig{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlTruncateTableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlTruncateTableConfig) ProtoMessage() {}

func (x *MysqlTruncateTableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlTruncateTableConfig.ProtoReflect.Descriptor instead.
func (*MysqlTruncateTableConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{35}
}

func (x *MysqlTruncateTableConfig) GetTruncateBeforeInsert() bool {
	if x != nil {
		return x.TruncateBeforeInsert
	}
	return false
}

type MysqlOnConflictConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoNothing bool `protobuf:"varint,1,opt,name=do_nothing,json=doNothing,proto3" json:"do_nothing,omitempty"`
}

func (x *MysqlOnConflictConfig) Reset() {
	*x = MysqlOnConflictConfig{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlOnConflictConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlOnConflictConfig) ProtoMessage() {}

func (x *MysqlOnConflictConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlOnConflictConfig.ProtoReflect.Descriptor instead.
func (*MysqlOnConflictConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{36}
}

func (x *MysqlOnConflictConfig) GetDoNothing() bool {
	if x != nil {
		return x.DoNothing
	}
	return false
}

type MssqlDestinationConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TruncateTable *MssqlTruncateTableConfig `protobuf:"bytes,1,opt,name=truncate_table,json=truncateTable,proto3" json:"truncate_table,omitempty"`
	// Currently not supported and a placeholder for future implementation
	InitTableSchema bool `protobuf:"varint,2,opt,name=init_table_schema,json=initTableSchema,proto3" json:"init_table_schema,omitempty"`
	// Currently not supported and a placeholder for future implementation
	OnConflict *MssqlOnConflictConfig `protobuf:"bytes,3,opt,name=on_conflict,json=onConflict,proto3" json:"on_conflict,omitempty"`
	// Insert all valid records, skipping any that violate foreign key constraints.
	SkipForeignKeyViolations bool `protobuf:"varint,4,opt,name=skip_foreign_key_violations,json=skipForeignKeyViolations,proto3" json:"skip_foreign_key_violations,omitempty"`
	// Configure batching options to handle how much data is sent to your database at once.
	Batch *BatchConfig `protobuf:"bytes,5,opt,name=batch,proto3" json:"batch,omitempty"`
	// Determines the maximum number of parallel batched inserts.
	MaxInFlight *uint32 `protobuf:"varint,6,opt,name=max_in_flight,json=maxInFlight,proto3,oneof" json:"max_in_flight,omitempty"`
}

func (x *MssqlDestinationConnectionOptions) Reset() {
	*x = MssqlDestinationConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MssqlDestinationConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MssqlDestinationConnectionOptions) ProtoMessage() {}

func (x *MssqlDestinationConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MssqlDestinationConnectionOptions.ProtoReflect.Descriptor instead.
func (*MssqlDestinationConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{37}
}

func (x *MssqlDestinationConnectionOptions) GetTruncateTable() *MssqlTruncateTableConfig {
	if x != nil {
		return x.TruncateTable
	}
	return nil
}

func (x *MssqlDestinationConnectionOptions) GetInitTableSchema() bool {
	if x != nil {
		return x.InitTableSchema
	}
	return false
}

func (x *MssqlDestinationConnectionOptions) GetOnConflict() *MssqlOnConflictConfig {
	if x != nil {
		return x.OnConflict
	}
	return nil
}

func (x *MssqlDestinationConnectionOptions) GetSkipForeignKeyViolations() bool {
	if x != nil {
		return x.SkipForeignKeyViolations
	}
	return false
}

func (x *MssqlDestinationConnectionOptions) GetBatch() *BatchConfig {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *MssqlDestinationConnectionOptions) GetMaxInFlight() uint32 {
	if x != nil && x.MaxInFlight != nil {
		return *x.MaxInFlight
	}
	return 0
}

type MssqlTruncateTableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TruncateBeforeInsert bool `protobuf:"varint,1,opt,name=truncate_before_insert,json=truncateBeforeInsert,proto3" json:"truncate_before_insert,omitempty"`
}

func (x *MssqlTruncateTableConfig) Reset() {
	*x = MssqlTruncateTableConfig{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MssqlTruncateTableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MssqlTruncateTableConfig) ProtoMessage() {}

func (x *MssqlTruncateTableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MssqlTruncateTableConfig.ProtoReflect.Descriptor instead.
func (*MssqlTruncateTableConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{38}
}

func (x *MssqlTruncateTableConfig) GetTruncateBeforeInsert() bool {
	if x != nil {
		return x.TruncateBeforeInsert
	}
	return false
}

type MssqlOnConflictConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoNothing bool `protobuf:"varint,1,opt,name=do_nothing,json=doNothing,proto3" json:"do_nothing,omitempty"`
}

func (x *MssqlOnConflictConfig) Reset() {
	*x = MssqlOnConflictConfig{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MssqlOnConflictConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MssqlOnConflictConfig) ProtoMessage() {}

func (x *MssqlOnConflictConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MssqlOnConflictConfig.ProtoReflect.Descriptor instead.
func (*MssqlOnConflictConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{39}
}

func (x *MssqlOnConflictConfig) GetDoNothing() bool {
	if x != nil {
		return x.DoNothing
	}
	return false
}

type AwsS3DestinationConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The storage class that will be used when objects are written to S3
	StorageClass AwsS3DestinationConnectionOptions_StorageClass `protobuf:"varint,1,opt,name=storage_class,json=storageClass,proto3,enum=mgmt.v1alpha1.AwsS3DestinationConnectionOptions_StorageClass" json:"storage_class,omitempty"`
	// The maximum number of batched messages to have in flight at a given time. Increase this to improve throughput.
	MaxInFlight *uint32 `protobuf:"varint,2,opt,name=max_in_flight,json=maxInFlight,proto3,oneof" json:"max_in_flight,omitempty"`
	// The maximum period (duration string) to wait on an upload before abandoning it and reattempting.
	Timeout *string `protobuf:"bytes,3,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	// Configure batching options to more efficiently store records in S3
	Batch *BatchConfig `protobuf:"bytes,4,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (x *AwsS3DestinationConnectionOptions) Reset() {
	*x = AwsS3DestinationConnectionOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsS3DestinationConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsS3DestinationConnectionOptions) ProtoMessage() {}

func (x *AwsS3DestinationConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsS3DestinationConnectionOptions.ProtoReflect.Descriptor instead.
func (*AwsS3DestinationConnectionOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{40}
}

func (x *AwsS3DestinationConnectionOptions) GetStorageClass() AwsS3DestinationConnectionOptions_StorageClass {
	if x != nil {
		return x.StorageClass
	}
	return AwsS3DestinationConnectionOptions_STORAGE_CLASS_UNSPECIFIED
}

func (x *AwsS3DestinationConnectionOptions) GetMaxInFlight() uint32 {
	if x != nil && x.MaxInFlight != nil {
		return *x.MaxInFlight
	}
	return 0
}

func (x *AwsS3DestinationConnectionOptions) GetTimeout() string {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return ""
}

func (x *AwsS3DestinationConnectionOptions) GetBatch() *BatchConfig {
	if x != nil {
		return x.Batch
	}
	return nil
}

type BatchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The max allowed in a batch before it is flushed. 0 to disable.
	Count *uint32 `protobuf:"varint,1,opt,name=count,proto3,oneof" json:"count,omitempty"`
	// A duration string in which an incomplete batch should be flushed regardless of the count.
	// Examples are 1s, 1m, 500ms
	Period *string `protobuf:"bytes,2,opt,name=period,proto3,oneof" json:"period,omitempty"`
}

func (x *BatchConfig) Reset() {
	*x = BatchConfig{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchConfig) ProtoMessage() {}

func (x *BatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchConfig.ProtoReflect.Descriptor instead.
func (*BatchConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{41}
}

func (x *BatchConfig) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *BatchConfig) GetPeriod() string {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return ""
}

type CreateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique account identifier that this job will be associated with
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The unique, friendly name of the job. This is unique per account
	JobName string `protobuf:"bytes,2,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	// Optionally provide a cron schedule. Goes into effect if the job status is set to enabled
	CronSchedule *string                 `protobuf:"bytes,3,opt,name=cron_schedule,json=cronSchedule,proto3,oneof" json:"cron_schedule,omitempty"`
	Mappings     []*JobMapping           `protobuf:"bytes,4,rep,name=mappings,proto3" json:"mappings,omitempty"`
	Source       *JobSource              `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Destinations []*CreateJobDestination `protobuf:"bytes,6,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// Initially trigger a run of this job regardless of its status or cron schedule
	InitiateJobRun bool `protobuf:"varint,7,opt,name=initiate_job_run,json=initiateJobRun,proto3" json:"initiate_job_run,omitempty"`
	// Specify timeouts and other workflow options for the underlying temporal workflow
	WorkflowOptions *WorkflowOptions `protobuf:"bytes,8,opt,name=workflow_options,json=workflowOptions,proto3" json:"workflow_options,omitempty"`
	// Specify timeout and retry options for data synchronization activities
	// Data sync activities are any piece of work that involves actually synchronizing data from a source to a destination
	// For the data sync and generate jobs, this will be applied per table
	SyncOptions        *ActivityOptions            `protobuf:"bytes,9,opt,name=sync_options,json=syncOptions,proto3" json:"sync_options,omitempty"`
	VirtualForeignKeys []*VirtualForeignConstraint `protobuf:"bytes,10,rep,name=virtual_foreign_keys,json=virtualForeignKeys,proto3" json:"virtual_foreign_keys,omitempty"`
}

func (x *CreateJobRequest) Reset() {
	*x = CreateJobRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobRequest) ProtoMessage() {}

func (x *CreateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobRequest.ProtoReflect.Descriptor instead.
func (*CreateJobRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{42}
}

func (x *CreateJobRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateJobRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *CreateJobRequest) GetCronSchedule() string {
	if x != nil && x.CronSchedule != nil {
		return *x.CronSchedule
	}
	return ""
}

func (x *CreateJobRequest) GetMappings() []*JobMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

func (x *CreateJobRequest) GetSource() *JobSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CreateJobRequest) GetDestinations() []*CreateJobDestination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *CreateJobRequest) GetInitiateJobRun() bool {
	if x != nil {
		return x.InitiateJobRun
	}
	return false
}

func (x *CreateJobRequest) GetWorkflowOptions() *WorkflowOptions {
	if x != nil {
		return x.WorkflowOptions
	}
	return nil
}

func (x *CreateJobRequest) GetSyncOptions() *ActivityOptions {
	if x != nil {
		return x.SyncOptions
	}
	return nil
}

func (x *CreateJobRequest) GetVirtualForeignKeys() []*VirtualForeignConstraint {
	if x != nil {
		return x.VirtualForeignKeys
	}
	return nil
}

// Config that contains various timeouts that are configured in the underlying temporal workflow
// More options will come in the future as needed
type WorkflowOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timeout for a single workflow run.
	// Measured in seconds
	RunTimeout *int64 `protobuf:"varint,8,opt,name=run_timeout,json=runTimeout,proto3,oneof" json:"run_timeout,omitempty"`
}

func (x *WorkflowOptions) Reset() {
	*x = WorkflowOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowOptions) ProtoMessage() {}

func (x *WorkflowOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowOptions.ProtoReflect.Descriptor instead.
func (*WorkflowOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{43}
}

func (x *WorkflowOptions) GetRunTimeout() int64 {
	if x != nil && x.RunTimeout != nil {
		return *x.RunTimeout
	}
	return 0
}

// Config that contains various timeouts that are configured in the underlying temporal workflow(s) and activities
type ActivityOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total time that a workflow is willing to wait for an activity to complete, including retries.
	// Measured in seconds
	ScheduleToCloseTimeout *int64 `protobuf:"varint,1,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3,oneof" json:"schedule_to_close_timeout,omitempty"`
	// Max time of a single Temporal Activity execution attempt.
	// This timeout should be as short as the longest psosible execution of any activity (e.g. table sync).
	// Important to know that this is per retry attempt. Defaults to the schedule to close timeout if not provided.
	// Measured in seconds
	StartToCloseTimeout *int64 `protobuf:"varint,2,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3,oneof" json:"start_to_close_timeout,omitempty"`
	// Optionally define a retry policy for the activity
	// If max attempts is not set, the activity will retry indefinitely until the start to close timeout lapses
	RetryPolicy *RetryPolicy `protobuf:"bytes,3,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
}

func (x *ActivityOptions) Reset() {
	*x = ActivityOptions{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityOptions) ProtoMessage() {}

func (x *ActivityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityOptions.ProtoReflect.Descriptor instead.
func (*ActivityOptions) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{44}
}

func (x *ActivityOptions) GetScheduleToCloseTimeout() int64 {
	if x != nil && x.ScheduleToCloseTimeout != nil {
		return *x.ScheduleToCloseTimeout
	}
	return 0
}

func (x *ActivityOptions) GetStartToCloseTimeout() int64 {
	if x != nil && x.StartToCloseTimeout != nil {
		return *x.StartToCloseTimeout
	}
	return 0
}

func (x *ActivityOptions) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

// Defines the retry policy for an activity
type RetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of attempts. When exceeded the retries stop even if not expired yet.
	// If not set or set to 0, it means unlimited, and rely on activity ScheduleToCloseTimeout to stop.
	MaximumAttempts *int32 `protobuf:"varint,1,opt,name=maximum_attempts,json=maximumAttempts,proto3,oneof" json:"maximum_attempts,omitempty"`
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{45}
}

func (x *RetryPolicy) GetMaximumAttempts() int32 {
	if x != nil && x.MaximumAttempts != nil {
		return *x.MaximumAttempts
	}
	return 0
}

type CreateJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *CreateJobResponse) Reset() {
	*x = CreateJobResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobResponse) ProtoMessage() {}

func (x *CreateJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobResponse.ProtoReflect.Descriptor instead.
func (*CreateJobResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{46}
}

func (x *CreateJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type JobMappingTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @deprecated - This is no longer used in favor just providing the TransformerConfig
	Source TransformerSource  `protobuf:"varint,1,opt,name=source,proto3,enum=mgmt.v1alpha1.TransformerSource" json:"source,omitempty"`
	Config *TransformerConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *JobMappingTransformer) Reset() {
	*x = JobMappingTransformer{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobMappingTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobMappingTransformer) ProtoMessage() {}

func (x *JobMappingTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobMappingTransformer.ProtoReflect.Descriptor instead.
func (*JobMappingTransformer) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{47}
}

func (x *JobMappingTransformer) GetSource() TransformerSource {
	if x != nil {
		return x.Source
	}
	return TransformerSource_TRANSFORMER_SOURCE_UNSPECIFIED
}

func (x *JobMappingTransformer) GetConfig() *TransformerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type JobMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema      string                 `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table       string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Column      string                 `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
	Transformer *JobMappingTransformer `protobuf:"bytes,5,opt,name=transformer,proto3" json:"transformer,omitempty"`
}

func (x *JobMapping) Reset() {
	*x = JobMapping{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobMapping) ProtoMessage() {}

func (x *JobMapping) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobMapping.ProtoReflect.Descriptor instead.
func (*JobMapping) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{48}
}

func (x *JobMapping) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *JobMapping) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *JobMapping) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *JobMapping) GetTransformer() *JobMappingTransformer {
	if x != nil {
		return x.Transformer
	}
	return nil
}

type GetJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetJobRequest) Reset() {
	*x = GetJobRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRequest) ProtoMessage() {}

func (x *GetJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRequest.ProtoReflect.Descriptor instead.
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{49}
}

func (x *GetJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *GetJobResponse) Reset() {
	*x = GetJobResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobResponse) ProtoMessage() {}

func (x *GetJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobResponse.ProtoReflect.Descriptor instead.
func (*GetJobResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{50}
}

func (x *GetJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type UpdateJobScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CronSchedule *string `protobuf:"bytes,2,opt,name=cron_schedule,json=cronSchedule,proto3,oneof" json:"cron_schedule,omitempty"`
}

func (x *UpdateJobScheduleRequest) Reset() {
	*x = UpdateJobScheduleRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobScheduleRequest) ProtoMessage() {}

func (x *UpdateJobScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobScheduleRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobScheduleRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateJobScheduleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateJobScheduleRequest) GetCronSchedule() string {
	if x != nil && x.CronSchedule != nil {
		return *x.CronSchedule
	}
	return ""
}

type UpdateJobScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *UpdateJobScheduleResponse) Reset() {
	*x = UpdateJobScheduleResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobScheduleResponse) ProtoMessage() {}

func (x *UpdateJobScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobScheduleResponse.ProtoReflect.Descriptor instead.
func (*UpdateJobScheduleResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateJobScheduleResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type PauseJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pause bool    `protobuf:"varint,2,opt,name=pause,proto3" json:"pause,omitempty"`
	Note  *string `protobuf:"bytes,3,opt,name=note,proto3,oneof" json:"note,omitempty"`
}

func (x *PauseJobRequest) Reset() {
	*x = PauseJobRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseJobRequest) ProtoMessage() {}

func (x *PauseJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseJobRequest.ProtoReflect.Descriptor instead.
func (*PauseJobRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{53}
}

func (x *PauseJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PauseJobRequest) GetPause() bool {
	if x != nil {
		return x.Pause
	}
	return false
}

func (x *PauseJobRequest) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

type PauseJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *PauseJobResponse) Reset() {
	*x = PauseJobResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseJobResponse) ProtoMessage() {}

func (x *PauseJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseJobResponse.ProtoReflect.Descriptor instead.
func (*PauseJobResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{54}
}

func (x *PauseJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type UpdateJobSourceConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source             *JobSource                  `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Mappings           []*JobMapping               `protobuf:"bytes,3,rep,name=mappings,proto3" json:"mappings,omitempty"`
	VirtualForeignKeys []*VirtualForeignConstraint `protobuf:"bytes,4,rep,name=virtual_foreign_keys,json=virtualForeignKeys,proto3" json:"virtual_foreign_keys,omitempty"`
}

func (x *UpdateJobSourceConnectionRequest) Reset() {
	*x = UpdateJobSourceConnectionRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobSourceConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobSourceConnectionRequest) ProtoMessage() {}

func (x *UpdateJobSourceConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobSourceConnectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobSourceConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{55}
}

func (x *UpdateJobSourceConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateJobSourceConnectionRequest) GetSource() *JobSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *UpdateJobSourceConnectionRequest) GetMappings() []*JobMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

func (x *UpdateJobSourceConnectionRequest) GetVirtualForeignKeys() []*VirtualForeignConstraint {
	if x != nil {
		return x.VirtualForeignKeys
	}
	return nil
}

type UpdateJobSourceConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *UpdateJobSourceConnectionResponse) Reset() {
	*x = UpdateJobSourceConnectionResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobSourceConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobSourceConnectionResponse) ProtoMessage() {}

func (x *UpdateJobSourceConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobSourceConnectionResponse.ProtoReflect.Descriptor instead.
func (*UpdateJobSourceConnectionResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateJobSourceConnectionResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type PostgresSourceSchemaSubset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostgresSchemas []*PostgresSourceSchemaOption `protobuf:"bytes,1,rep,name=postgres_schemas,json=postgresSchemas,proto3" json:"postgres_schemas,omitempty"`
}

func (x *PostgresSourceSchemaSubset) Reset() {
	*x = PostgresSourceSchemaSubset{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresSourceSchemaSubset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresSourceSchemaSubset) ProtoMessage() {}

func (x *PostgresSourceSchemaSubset) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresSourceSchemaSubset.ProtoReflect.Descriptor instead.
func (*PostgresSourceSchemaSubset) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{57}
}

func (x *PostgresSourceSchemaSubset) GetPostgresSchemas() []*PostgresSourceSchemaOption {
	if x != nil {
		return x.PostgresSchemas
	}
	return nil
}

type MysqlSourceSchemaSubset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MysqlSchemas []*MysqlSourceSchemaOption `protobuf:"bytes,1,rep,name=mysql_schemas,json=mysqlSchemas,proto3" json:"mysql_schemas,omitempty"`
}

func (x *MysqlSourceSchemaSubset) Reset() {
	*x = MysqlSourceSchemaSubset{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlSourceSchemaSubset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlSourceSchemaSubset) ProtoMessage() {}

func (x *MysqlSourceSchemaSubset) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlSourceSchemaSubset.ProtoReflect.Descriptor instead.
func (*MysqlSourceSchemaSubset) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{58}
}

func (x *MysqlSourceSchemaSubset) GetMysqlSchemas() []*MysqlSourceSchemaOption {
	if x != nil {
		return x.MysqlSchemas
	}
	return nil
}

type DynamoDBSourceSchemaSubset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*DynamoDBSourceTableOption `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *DynamoDBSourceSchemaSubset) Reset() {
	*x = DynamoDBSourceSchemaSubset{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamoDBSourceSchemaSubset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamoDBSourceSchemaSubset) ProtoMessage() {}

func (x *DynamoDBSourceSchemaSubset) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamoDBSourceSchemaSubset.ProtoReflect.Descriptor instead.
func (*DynamoDBSourceSchemaSubset) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{59}
}

func (x *DynamoDBSourceSchemaSubset) GetTables() []*DynamoDBSourceTableOption {
	if x != nil {
		return x.Tables
	}
	return nil
}

type MssqlSourceSchemaSubset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MssqlSchemas []*MssqlSourceSchemaOption `protobuf:"bytes,1,rep,name=mssql_schemas,json=mssqlSchemas,proto3" json:"mssql_schemas,omitempty"`
}

func (x *MssqlSourceSchemaSubset) Reset() {
	*x = MssqlSourceSchemaSubset{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MssqlSourceSchemaSubset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MssqlSourceSchemaSubset) ProtoMessage() {}

func (x *MssqlSourceSchemaSubset) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MssqlSourceSchemaSubset.ProtoReflect.Descriptor instead.
func (*MssqlSourceSchemaSubset) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{60}
}

func (x *MssqlSourceSchemaSubset) GetMssqlSchemas() []*MssqlSourceSchemaOption {
	if x != nil {
		return x.MssqlSchemas
	}
	return nil
}

type JobSourceSqlSubetSchemas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Schemas:
	//
	//	*JobSourceSqlSubetSchemas_PostgresSubset
	//	*JobSourceSqlSubetSchemas_MysqlSubset
	//	*JobSourceSqlSubetSchemas_DynamodbSubset
	//	*JobSourceSqlSubetSchemas_MssqlSubset
	Schemas isJobSourceSqlSubetSchemas_Schemas `protobuf_oneof:"schemas"`
}

func (x *JobSourceSqlSubetSchemas) Reset() {
	*x = JobSourceSqlSubetSchemas{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSourceSqlSubetSchemas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSourceSqlSubetSchemas) ProtoMessage() {}

func (x *JobSourceSqlSubetSchemas) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSourceSqlSubetSchemas.ProtoReflect.Descriptor instead.
func (*JobSourceSqlSubetSchemas) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{61}
}

func (m *JobSourceSqlSubetSchemas) GetSchemas() isJobSourceSqlSubetSchemas_Schemas {
	if m != nil {
		return m.Schemas
	}
	return nil
}

func (x *JobSourceSqlSubetSchemas) GetPostgresSubset() *PostgresSourceSchemaSubset {
	if x, ok := x.GetSchemas().(*JobSourceSqlSubetSchemas_PostgresSubset); ok {
		return x.PostgresSubset
	}
	return nil
}

func (x *JobSourceSqlSubetSchemas) GetMysqlSubset() *MysqlSourceSchemaSubset {
	if x, ok := x.GetSchemas().(*JobSourceSqlSubetSchemas_MysqlSubset); ok {
		return x.MysqlSubset
	}
	return nil
}

func (x *JobSourceSqlSubetSchemas) GetDynamodbSubset() *DynamoDBSourceSchemaSubset {
	if x, ok := x.GetSchemas().(*JobSourceSqlSubetSchemas_DynamodbSubset); ok {
		return x.DynamodbSubset
	}
	return nil
}

func (x *JobSourceSqlSubetSchemas) GetMssqlSubset() *MssqlSourceSchemaSubset {
	if x, ok := x.GetSchemas().(*JobSourceSqlSubetSchemas_MssqlSubset); ok {
		return x.MssqlSubset
	}
	return nil
}

type isJobSourceSqlSubetSchemas_Schemas interface {
	isJobSourceSqlSubetSchemas_Schemas()
}

type JobSourceSqlSubetSchemas_PostgresSubset struct {
	PostgresSubset *PostgresSourceSchemaSubset `protobuf:"bytes,2,opt,name=postgres_subset,json=postgresSubset,proto3,oneof"`
}

type JobSourceSqlSubetSchemas_MysqlSubset struct {
	MysqlSubset *MysqlSourceSchemaSubset `protobuf:"bytes,3,opt,name=mysql_subset,json=mysqlSubset,proto3,oneof"`
}

type JobSourceSqlSubetSchemas_DynamodbSubset struct {
	DynamodbSubset *DynamoDBSourceSchemaSubset `protobuf:"bytes,4,opt,name=dynamodb_subset,json=dynamodbSubset,proto3,oneof"`
}

type JobSourceSqlSubetSchemas_MssqlSubset struct {
	MssqlSubset *MssqlSourceSchemaSubset `protobuf:"bytes,5,opt,name=mssql_subset,json=mssqlSubset,proto3,oneof"`
}

func (*JobSourceSqlSubetSchemas_PostgresSubset) isJobSourceSqlSubetSchemas_Schemas() {}

func (*JobSourceSqlSubetSchemas_MysqlSubset) isJobSourceSqlSubetSchemas_Schemas() {}

func (*JobSourceSqlSubetSchemas_DynamodbSubset) isJobSourceSqlSubetSchemas_Schemas() {}

func (*JobSourceSqlSubetSchemas_MssqlSubset) isJobSourceSqlSubetSchemas_Schemas() {}

type SetJobSourceSqlConnectionSubsetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the job to update subsets for
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The subset configuration
	Schemas *JobSourceSqlSubetSchemas `protobuf:"bytes,2,opt,name=schemas,proto3" json:"schemas,omitempty"`
	// Whether or not to have subsets follow foreign key constraints (for connections that support it)
	SubsetByForeignKeyConstraints bool `protobuf:"varint,3,opt,name=subset_by_foreign_key_constraints,json=subsetByForeignKeyConstraints,proto3" json:"subset_by_foreign_key_constraints,omitempty"`
}

func (x *SetJobSourceSqlConnectionSubsetsRequest) Reset() {
	*x = SetJobSourceSqlConnectionSubsetsRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetJobSourceSqlConnectionSubsetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetJobSourceSqlConnectionSubsetsRequest) ProtoMessage() {}

func (x *SetJobSourceSqlConnectionSubsetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetJobSourceSqlConnectionSubsetsRequest.ProtoReflect.Descriptor instead.
func (*SetJobSourceSqlConnectionSubsetsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{62}
}

func (x *SetJobSourceSqlConnectionSubsetsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetJobSourceSqlConnectionSubsetsRequest) GetSchemas() *JobSourceSqlSubetSchemas {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *SetJobSourceSqlConnectionSubsetsRequest) GetSubsetByForeignKeyConstraints() bool {
	if x != nil {
		return x.SubsetByForeignKeyConstraints
	}
	return false
}

type SetJobSourceSqlConnectionSubsetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *SetJobSourceSqlConnectionSubsetsResponse) Reset() {
	*x = SetJobSourceSqlConnectionSubsetsResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetJobSourceSqlConnectionSubsetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetJobSourceSqlConnectionSubsetsResponse) ProtoMessage() {}

func (x *SetJobSourceSqlConnectionSubsetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetJobSourceSqlConnectionSubsetsResponse.ProtoReflect.Descriptor instead.
func (*SetJobSourceSqlConnectionSubsetsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{63}
}

func (x *SetJobSourceSqlConnectionSubsetsResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type UpdateJobDestinationConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	ConnectionId  string                 `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Options       *JobDestinationOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	DestinationId string                 `protobuf:"bytes,4,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
}

func (x *UpdateJobDestinationConnectionRequest) Reset() {
	*x = UpdateJobDestinationConnectionRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobDestinationConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobDestinationConnectionRequest) ProtoMessage() {}

func (x *UpdateJobDestinationConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobDestinationConnectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobDestinationConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{64}
}

func (x *UpdateJobDestinationConnectionRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *UpdateJobDestinationConnectionRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *UpdateJobDestinationConnectionRequest) GetOptions() *JobDestinationOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *UpdateJobDestinationConnectionRequest) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

type UpdateJobDestinationConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *UpdateJobDestinationConnectionResponse) Reset() {
	*x = UpdateJobDestinationConnectionResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobDestinationConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobDestinationConnectionResponse) ProtoMessage() {}

func (x *UpdateJobDestinationConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobDestinationConnectionResponse.ProtoReflect.Descriptor instead.
func (*UpdateJobDestinationConnectionResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{65}
}

func (x *UpdateJobDestinationConnectionResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type DeleteJobDestinationConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationId string `protobuf:"bytes,1,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
}

func (x *DeleteJobDestinationConnectionRequest) Reset() {
	*x = DeleteJobDestinationConnectionRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteJobDestinationConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobDestinationConnectionRequest) ProtoMessage() {}

func (x *DeleteJobDestinationConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobDestinationConnectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteJobDestinationConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{66}
}

func (x *DeleteJobDestinationConnectionRequest) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

type DeleteJobDestinationConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteJobDestinationConnectionResponse) Reset() {
	*x = DeleteJobDestinationConnectionResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteJobDestinationConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobDestinationConnectionResponse) ProtoMessage() {}

func (x *DeleteJobDestinationConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobDestinationConnectionResponse.ProtoReflect.Descriptor instead.
func (*DeleteJobDestinationConnectionResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{67}
}

type CreateJobDestinationConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId        string                  `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Destinations []*CreateJobDestination `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
}

func (x *CreateJobDestinationConnectionsRequest) Reset() {
	*x = CreateJobDestinationConnectionsRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateJobDestinationConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobDestinationConnectionsRequest) ProtoMessage() {}

func (x *CreateJobDestinationConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobDestinationConnectionsRequest.ProtoReflect.Descriptor instead.
func (*CreateJobDestinationConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{68}
}

func (x *CreateJobDestinationConnectionsRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *CreateJobDestinationConnectionsRequest) GetDestinations() []*CreateJobDestination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

type CreateJobDestinationConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *CreateJobDestinationConnectionsResponse) Reset() {
	*x = CreateJobDestinationConnectionsResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateJobDestinationConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobDestinationConnectionsResponse) ProtoMessage() {}

func (x *CreateJobDestinationConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobDestinationConnectionsResponse.ProtoReflect.Descriptor instead.
func (*CreateJobDestinationConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{69}
}

func (x *CreateJobDestinationConnectionsResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type DeleteJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteJobRequest) Reset() {
	*x = DeleteJobRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobRequest) ProtoMessage() {}

func (x *DeleteJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobRequest.ProtoReflect.Descriptor instead.
func (*DeleteJobRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteJobResponse) Reset() {
	*x = DeleteJobResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobResponse) ProtoMessage() {}

func (x *DeleteJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobResponse.ProtoReflect.Descriptor instead.
func (*DeleteJobResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{71}
}

type IsJobNameAvailableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *IsJobNameAvailableRequest) Reset() {
	*x = IsJobNameAvailableRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsJobNameAvailableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsJobNameAvailableRequest) ProtoMessage() {}

func (x *IsJobNameAvailableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsJobNameAvailableRequest.ProtoReflect.Descriptor instead.
func (*IsJobNameAvailableRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{72}
}

func (x *IsJobNameAvailableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IsJobNameAvailableRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type IsJobNameAvailableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAvailable bool `protobuf:"varint,1,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
}

func (x *IsJobNameAvailableResponse) Reset() {
	*x = IsJobNameAvailableResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsJobNameAvailableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsJobNameAvailableResponse) ProtoMessage() {}

func (x *IsJobNameAvailableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsJobNameAvailableResponse.ProtoReflect.Descriptor instead.
func (*IsJobNameAvailableResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{73}
}

func (x *IsJobNameAvailableResponse) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

type GetJobRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*GetJobRunsRequest_JobId
	//	*GetJobRunsRequest_AccountId
	Id isGetJobRunsRequest_Id `protobuf_oneof:"id"`
}

func (x *GetJobRunsRequest) Reset() {
	*x = GetJobRunsRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRunsRequest) ProtoMessage() {}

func (x *GetJobRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRunsRequest.ProtoReflect.Descriptor instead.
func (*GetJobRunsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{74}
}

func (m *GetJobRunsRequest) GetId() isGetJobRunsRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *GetJobRunsRequest) GetJobId() string {
	if x, ok := x.GetId().(*GetJobRunsRequest_JobId); ok {
		return x.JobId
	}
	return ""
}

func (x *GetJobRunsRequest) GetAccountId() string {
	if x, ok := x.GetId().(*GetJobRunsRequest_AccountId); ok {
		return x.AccountId
	}
	return ""
}

type isGetJobRunsRequest_Id interface {
	isGetJobRunsRequest_Id()
}

type GetJobRunsRequest_JobId struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3,oneof"`
}

type GetJobRunsRequest_AccountId struct {
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3,oneof"`
}

func (*GetJobRunsRequest_JobId) isGetJobRunsRequest_Id() {}

func (*GetJobRunsRequest_AccountId) isGetJobRunsRequest_Id() {}

type GetJobRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobRuns []*JobRun `protobuf:"bytes,1,rep,name=job_runs,json=jobRuns,proto3" json:"job_runs,omitempty"`
}

func (x *GetJobRunsResponse) Reset() {
	*x = GetJobRunsResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRunsResponse) ProtoMessage() {}

func (x *GetJobRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRunsResponse.ProtoReflect.Descriptor instead.
func (*GetJobRunsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{75}
}

func (x *GetJobRunsResponse) GetJobRuns() []*JobRun {
	if x != nil {
		return x.JobRuns
	}
	return nil
}

type GetJobRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobRunId  string `protobuf:"bytes,1,opt,name=job_run_id,json=jobRunId,proto3" json:"job_run_id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetJobRunRequest) Reset() {
	*x = GetJobRunRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRunRequest) ProtoMessage() {}

func (x *GetJobRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRunRequest.ProtoReflect.Descriptor instead.
func (*GetJobRunRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{76}
}

func (x *GetJobRunRequest) GetJobRunId() string {
	if x != nil {
		return x.JobRunId
	}
	return ""
}

func (x *GetJobRunRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetJobRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobRun *JobRun `protobuf:"bytes,1,opt,name=job_run,json=jobRun,proto3" json:"job_run,omitempty"`
}

func (x *GetJobRunResponse) Reset() {
	*x = GetJobRunResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRunResponse) ProtoMessage() {}

func (x *GetJobRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRunResponse.ProtoReflect.Descriptor instead.
func (*GetJobRunResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{77}
}

func (x *GetJobRunResponse) GetJobRun() *JobRun {
	if x != nil {
		return x.JobRun
	}
	return nil
}

type CreateJobRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *CreateJobRunRequest) Reset() {
	*x = CreateJobRunRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateJobRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobRunRequest) ProtoMessage() {}

func (x *CreateJobRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobRunRequest.ProtoReflect.Descriptor instead.
func (*CreateJobRunRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{78}
}

func (x *CreateJobRunRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type CreateJobRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateJobRunResponse) Reset() {
	*x = CreateJobRunResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateJobRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobRunResponse) ProtoMessage() {}

func (x *CreateJobRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobRunResponse.ProtoReflect.Descriptor instead.
func (*CreateJobRunResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{79}
}

type CancelJobRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobRunId  string `protobuf:"bytes,1,opt,name=job_run_id,json=jobRunId,proto3" json:"job_run_id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *CancelJobRunRequest) Reset() {
	*x = CancelJobRunRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelJobRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRunRequest) ProtoMessage() {}

func (x *CancelJobRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRunRequest.ProtoReflect.Descriptor instead.
func (*CancelJobRunRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{80}
}

func (x *CancelJobRunRequest) GetJobRunId() string {
	if x != nil {
		return x.JobRunId
	}
	return ""
}

func (x *CancelJobRunRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type CancelJobRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelJobRunResponse) Reset() {
	*x = CancelJobRunResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelJobRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRunResponse) ProtoMessage() {}

func (x *CancelJobRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRunResponse.ProtoReflect.Descriptor instead.
func (*CancelJobRunResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{81}
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the job
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedByUserId string                 `protobuf:"bytes,2,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedByUserId string                 `protobuf:"bytes,4,opt,name=updated_by_user_id,json=updatedByUserId,proto3" json:"updated_by_user_id,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The unique, friendly name of the job
	Name         string            `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Source       *JobSource        `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	Destinations []*JobDestination `protobuf:"bytes,8,rep,name=destinations,proto3" json:"destinations,omitempty"`
	Mappings     []*JobMapping     `protobuf:"bytes,9,rep,name=mappings,proto3" json:"mappings,omitempty"`
	CronSchedule *string           `protobuf:"bytes,10,opt,name=cron_schedule,json=cronSchedule,proto3,oneof" json:"cron_schedule,omitempty"`
	// The account identifier that a job is associated with
	AccountId string `protobuf:"bytes,11,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Specify timeout and retry options for data synchronization activities
	// Data sync activities are any piece of work that involves actually synchronizing data from a source to a destination
	// For the data sync and generate jobs, this will be applied per table
	SyncOptions *ActivityOptions `protobuf:"bytes,12,opt,name=sync_options,json=syncOptions,proto3" json:"sync_options,omitempty"`
	// Specify timeouts and other workflow options for the underlying temporal workflow
	WorkflowOptions *WorkflowOptions `protobuf:"bytes,13,opt,name=workflow_options,json=workflowOptions,proto3" json:"workflow_options,omitempty"`
	// Any virtual foreign keys that are configured as a part of this job
	VirtualForeignKeys []*VirtualForeignConstraint `protobuf:"bytes,14,rep,name=virtual_foreign_keys,json=virtualForeignKeys,proto3" json:"virtual_foreign_keys,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{82}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *Job) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Job) GetUpdatedByUserId() string {
	if x != nil {
		return x.UpdatedByUserId
	}
	return ""
}

func (x *Job) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetSource() *JobSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Job) GetDestinations() []*JobDestination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *Job) GetMappings() []*JobMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

func (x *Job) GetCronSchedule() string {
	if x != nil && x.CronSchedule != nil {
		return *x.CronSchedule
	}
	return ""
}

func (x *Job) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Job) GetSyncOptions() *ActivityOptions {
	if x != nil {
		return x.SyncOptions
	}
	return nil
}

func (x *Job) GetWorkflowOptions() *WorkflowOptions {
	if x != nil {
		return x.WorkflowOptions
	}
	return nil
}

func (x *Job) GetVirtualForeignKeys() []*VirtualForeignConstraint {
	if x != nil {
		return x.VirtualForeignKeys
	}
	return nil
}

type JobRecentRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	JobRunId  string                 `protobuf:"bytes,2,opt,name=job_run_id,json=jobRunId,proto3" json:"job_run_id,omitempty"`
}

func (x *JobRecentRun) Reset() {
	*x = JobRecentRun{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRecentRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRecentRun) ProtoMessage() {}

func (x *JobRecentRun) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRecentRun.ProtoReflect.Descriptor instead.
func (*JobRecentRun) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{83}
}

func (x *JobRecentRun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *JobRecentRun) GetJobRunId() string {
	if x != nil {
		return x.JobRunId
	}
	return ""
}

type GetJobRecentRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetJobRecentRunsRequest) Reset() {
	*x = GetJobRecentRunsRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRecentRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRecentRunsRequest) ProtoMessage() {}

func (x *GetJobRecentRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRecentRunsRequest.ProtoReflect.Descriptor instead.
func (*GetJobRecentRunsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{84}
}

func (x *GetJobRecentRunsRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetJobRecentRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentRuns []*JobRecentRun `protobuf:"bytes,1,rep,name=recent_runs,json=recentRuns,proto3" json:"recent_runs,omitempty"`
}

func (x *GetJobRecentRunsResponse) Reset() {
	*x = GetJobRecentRunsResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRecentRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRecentRunsResponse) ProtoMessage() {}

func (x *GetJobRecentRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRecentRunsResponse.ProtoReflect.Descriptor instead.
func (*GetJobRecentRunsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{85}
}

func (x *GetJobRecentRunsResponse) GetRecentRuns() []*JobRecentRun {
	if x != nil {
		return x.RecentRuns
	}
	return nil
}

type JobNextRuns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextRunTimes []*timestamppb.Timestamp `protobuf:"bytes,1,rep,name=next_run_times,json=nextRunTimes,proto3" json:"next_run_times,omitempty"`
}

func (x *JobNextRuns) Reset() {
	*x = JobNextRuns{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobNextRuns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobNextRuns) ProtoMessage() {}

func (x *JobNextRuns) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobNextRuns.ProtoReflect.Descriptor instead.
func (*JobNextRuns) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{86}
}

func (x *JobNextRuns) GetNextRunTimes() []*timestamppb.Timestamp {
	if x != nil {
		return x.NextRunTimes
	}
	return nil
}

type GetJobNextRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetJobNextRunsRequest) Reset() {
	*x = GetJobNextRunsRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobNextRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobNextRunsRequest) ProtoMessage() {}

func (x *GetJobNextRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobNextRunsRequest.ProtoReflect.Descriptor instead.
func (*GetJobNextRunsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{87}
}

func (x *GetJobNextRunsRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetJobNextRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextRuns *JobNextRuns `protobuf:"bytes,1,opt,name=next_runs,json=nextRuns,proto3" json:"next_runs,omitempty"`
}

func (x *GetJobNextRunsResponse) Reset() {
	*x = GetJobNextRunsResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobNextRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobNextRunsResponse) ProtoMessage() {}

func (x *GetJobNextRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobNextRunsResponse.ProtoReflect.Descriptor instead.
func (*GetJobNextRunsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{88}
}

func (x *GetJobNextRunsResponse) GetNextRuns() *JobNextRuns {
	if x != nil {
		return x.NextRuns
	}
	return nil
}

type GetJobStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetJobStatusRequest) Reset() {
	*x = GetJobStatusRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStatusRequest) ProtoMessage() {}

func (x *GetJobStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStatusRequest.ProtoReflect.Descriptor instead.
func (*GetJobStatusRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{89}
}

func (x *GetJobStatusRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetJobStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status JobStatus `protobuf:"varint,1,opt,name=status,proto3,enum=mgmt.v1alpha1.JobStatus" json:"status,omitempty"`
}

func (x *GetJobStatusResponse) Reset() {
	*x = GetJobStatusResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStatusResponse) ProtoMessage() {}

func (x *GetJobStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStatusResponse.ProtoReflect.Descriptor instead.
func (*GetJobStatusResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{90}
}

func (x *GetJobStatusResponse) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_JOB_STATUS_UNSPECIFIED
}

type JobStatusRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId  string    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Status JobStatus `protobuf:"varint,2,opt,name=status,proto3,enum=mgmt.v1alpha1.JobStatus" json:"status,omitempty"`
}

func (x *JobStatusRecord) Reset() {
	*x = JobStatusRecord{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobStatusRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatusRecord) ProtoMessage() {}

func (x *JobStatusRecord) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatusRecord.ProtoReflect.Descriptor instead.
func (*JobStatusRecord) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{91}
}

func (x *JobStatusRecord) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobStatusRecord) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_JOB_STATUS_UNSPECIFIED
}

type GetJobStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetJobStatusesRequest) Reset() {
	*x = GetJobStatusesRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStatusesRequest) ProtoMessage() {}

func (x *GetJobStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStatusesRequest.ProtoReflect.Descriptor instead.
func (*GetJobStatusesRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{92}
}

func (x *GetJobStatusesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetJobStatusesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses []*JobStatusRecord `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *GetJobStatusesResponse) Reset() {
	*x = GetJobStatusesResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobStatusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobStatusesResponse) ProtoMessage() {}

func (x *GetJobStatusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobStatusesResponse.ProtoReflect.Descriptor instead.
func (*GetJobStatusesResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{93}
}

func (x *GetJobStatusesResponse) GetStatuses() []*JobStatusRecord {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type ActivityFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ActivityFailure) Reset() {
	*x = ActivityFailure{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityFailure) ProtoMessage() {}

func (x *ActivityFailure) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityFailure.ProtoReflect.Descriptor instead.
func (*ActivityFailure) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{94}
}

func (x *ActivityFailure) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PendingActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       ActivityStatus   `protobuf:"varint,1,opt,name=status,proto3,enum=mgmt.v1alpha1.ActivityStatus" json:"status,omitempty"`
	ActivityName string           `protobuf:"bytes,2,opt,name=activity_name,json=activityName,proto3" json:"activity_name,omitempty"`
	LastFailure  *ActivityFailure `protobuf:"bytes,3,opt,name=last_failure,json=lastFailure,proto3,oneof" json:"last_failure,omitempty"`
}

func (x *PendingActivity) Reset() {
	*x = PendingActivity{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingActivity) ProtoMessage() {}

func (x *PendingActivity) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingActivity.ProtoReflect.Descriptor instead.
func (*PendingActivity) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{95}
}

func (x *PendingActivity) GetStatus() ActivityStatus {
	if x != nil {
		return x.Status
	}
	return ActivityStatus_ACTIVITY_STATUS_UNSPECIFIED
}

func (x *PendingActivity) GetActivityName() string {
	if x != nil {
		return x.ActivityName
	}
	return ""
}

func (x *PendingActivity) GetLastFailure() *ActivityFailure {
	if x != nil {
		return x.LastFailure
	}
	return nil
}

type JobRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the job run. This will currently be equivalent to the temporal workflow id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The unique identifier of the job id this run is associated with
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The name of the job run.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// the status of the job run
	Status JobRunStatus `protobuf:"varint,4,opt,name=status,proto3,enum=mgmt.v1alpha1.JobRunStatus" json:"status,omitempty"`
	// A timestamp of when the run started
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Available if the run completed or has not yet been archived by the system
	CompletedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=completed_at,json=completedAt,proto3,oneof" json:"completed_at,omitempty"`
	// Pending activities are only returned when retrieving a specific job run and will not be returned when requesting job runs in list format
	PendingActivities []*PendingActivity `protobuf:"bytes,8,rep,name=pending_activities,json=pendingActivities,proto3" json:"pending_activities,omitempty"`
}

func (x *JobRun) Reset() {
	*x = JobRun{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRun) ProtoMessage() {}

func (x *JobRun) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRun.ProtoReflect.Descriptor instead.
func (*JobRun) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{96}
}

func (x *JobRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobRun) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobRun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobRun) GetStatus() JobRunStatus {
	if x != nil {
		return x.Status
	}
	return JobRunStatus_JOB_RUN_STATUS_UNSPECIFIED
}

func (x *JobRun) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *JobRun) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *JobRun) GetPendingActivities() []*PendingActivity {
	if x != nil {
		return x.PendingActivities
	}
	return nil
}

type JobRunEventTaskError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	RetryState string `protobuf:"bytes,2,opt,name=retry_state,json=retryState,proto3" json:"retry_state,omitempty"`
}

func (x *JobRunEventTaskError) Reset() {
	*x = JobRunEventTaskError{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRunEventTaskError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunEventTaskError) ProtoMessage() {}

func (x *JobRunEventTaskError) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunEventTaskError.ProtoReflect.Descriptor instead.
func (*JobRunEventTaskError) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{97}
}

func (x *JobRunEventTaskError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *JobRunEventTaskError) GetRetryState() string {
	if x != nil {
		return x.RetryState
	}
	return ""
}

type JobRunEventTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type      string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	EventTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	Error     *JobRunEventTaskError  `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *JobRunEventTask) Reset() {
	*x = JobRunEventTask{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRunEventTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunEventTask) ProtoMessage() {}

func (x *JobRunEventTask) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunEventTask.ProtoReflect.Descriptor instead.
func (*JobRunEventTask) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{98}
}

func (x *JobRunEventTask) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JobRunEventTask) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *JobRunEventTask) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *JobRunEventTask) GetError() *JobRunEventTaskError {
	if x != nil {
		return x.Error
	}
	return nil
}

type JobRunSyncMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table  string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *JobRunSyncMetadata) Reset() {
	*x = JobRunSyncMetadata{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRunSyncMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunSyncMetadata) ProtoMessage() {}

func (x *JobRunSyncMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunSyncMetadata.ProtoReflect.Descriptor instead.
func (*JobRunSyncMetadata) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{99}
}

func (x *JobRunSyncMetadata) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *JobRunSyncMetadata) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type JobRunEventMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Metadata:
	//
	//	*JobRunEventMetadata_SyncMetadata
	Metadata isJobRunEventMetadata_Metadata `protobuf_oneof:"metadata"`
}

func (x *JobRunEventMetadata) Reset() {
	*x = JobRunEventMetadata{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRunEventMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunEventMetadata) ProtoMessage() {}

func (x *JobRunEventMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunEventMetadata.ProtoReflect.Descriptor instead.
func (*JobRunEventMetadata) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{100}
}

func (m *JobRunEventMetadata) GetMetadata() isJobRunEventMetadata_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *JobRunEventMetadata) GetSyncMetadata() *JobRunSyncMetadata {
	if x, ok := x.GetMetadata().(*JobRunEventMetadata_SyncMetadata); ok {
		return x.SyncMetadata
	}
	return nil
}

type isJobRunEventMetadata_Metadata interface {
	isJobRunEventMetadata_Metadata()
}

type JobRunEventMetadata_SyncMetadata struct {
	SyncMetadata *JobRunSyncMetadata `protobuf:"bytes,1,opt,name=sync_metadata,json=syncMetadata,proto3,oneof"`
}

func (*JobRunEventMetadata_SyncMetadata) isJobRunEventMetadata_Metadata() {}

type JobRunEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type      string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	CloseTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	Metadata  *JobRunEventMetadata   `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Tasks     []*JobRunEventTask     `protobuf:"bytes,6,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *JobRunEvent) Reset() {
	*x = JobRunEvent{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobRunEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunEvent) ProtoMessage() {}

func (x *JobRunEvent) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunEvent.ProtoReflect.Descriptor instead.
func (*JobRunEvent) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{101}
}

func (x *JobRunEvent) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JobRunEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *JobRunEvent) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *JobRunEvent) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

func (x *JobRunEvent) GetMetadata() *JobRunEventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JobRunEvent) GetTasks() []*JobRunEventTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type GetJobRunEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobRunId  string `protobuf:"bytes,1,opt,name=job_run_id,json=jobRunId,proto3" json:"job_run_id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetJobRunEventsRequest) Reset() {
	*x = GetJobRunEventsRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRunEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRunEventsRequest) ProtoMessage() {}

func (x *GetJobRunEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRunEventsRequest.ProtoReflect.Descriptor instead.
func (*GetJobRunEventsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{102}
}

func (x *GetJobRunEventsRequest) GetJobRunId() string {
	if x != nil {
		return x.JobRunId
	}
	return ""
}

func (x *GetJobRunEventsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetJobRunEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events        []*JobRunEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	IsRunComplete bool           `protobuf:"varint,2,opt,name=is_run_complete,json=isRunComplete,proto3" json:"is_run_complete,omitempty"`
}

func (x *GetJobRunEventsResponse) Reset() {
	*x = GetJobRunEventsResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRunEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRunEventsResponse) ProtoMessage() {}

func (x *GetJobRunEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRunEventsResponse.ProtoReflect.Descriptor instead.
func (*GetJobRunEventsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{103}
}

func (x *GetJobRunEventsResponse) GetEvents() []*JobRunEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetJobRunEventsResponse) GetIsRunComplete() bool {
	if x != nil {
		return x.IsRunComplete
	}
	return false
}

type DeleteJobRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobRunId  string `protobuf:"bytes,1,opt,name=job_run_id,json=jobRunId,proto3" json:"job_run_id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *DeleteJobRunRequest) Reset() {
	*x = DeleteJobRunRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteJobRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobRunRequest) ProtoMessage() {}

func (x *DeleteJobRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobRunRequest.ProtoReflect.Descriptor instead.
func (*DeleteJobRunRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{104}
}

func (x *DeleteJobRunRequest) GetJobRunId() string {
	if x != nil {
		return x.JobRunId
	}
	return ""
}

func (x *DeleteJobRunRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type DeleteJobRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteJobRunResponse) Reset() {
	*x = DeleteJobRunResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteJobRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobRunResponse) ProtoMessage() {}

func (x *DeleteJobRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobRunResponse.ProtoReflect.Descriptor instead.
func (*DeleteJobRunResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{105}
}

type TerminateJobRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobRunId  string `protobuf:"bytes,1,opt,name=job_run_id,json=jobRunId,proto3" json:"job_run_id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *TerminateJobRunRequest) Reset() {
	*x = TerminateJobRunRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateJobRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateJobRunRequest) ProtoMessage() {}

func (x *TerminateJobRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateJobRunRequest.ProtoReflect.Descriptor instead.
func (*TerminateJobRunRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{106}
}

func (x *TerminateJobRunRequest) GetJobRunId() string {
	if x != nil {
		return x.JobRunId
	}
	return ""
}

func (x *TerminateJobRunRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type TerminateJobRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminateJobRunResponse) Reset() {
	*x = TerminateJobRunResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminateJobRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateJobRunResponse) ProtoMessage() {}

func (x *TerminateJobRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateJobRunResponse.ProtoReflect.Descriptor instead.
func (*TerminateJobRunResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{107}
}

type GetJobRunLogsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobRunId  string `protobuf:"bytes,1,opt,name=job_run_id,json=jobRunId,proto3" json:"job_run_id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The time window in which to retrieve the logs
	Window LogWindow `protobuf:"varint,3,opt,name=window,proto3,enum=mgmt.v1alpha1.LogWindow" json:"window,omitempty"`
	// Whether or not to tail the stream. Note: only works with k8s-pods and is not currently supported with Loki logs
	ShouldTail bool `protobuf:"varint,4,opt,name=should_tail,json=shouldTail,proto3" json:"should_tail,omitempty"`
	// Optionally provide a max log limit
	MaxLogLines *int64 `protobuf:"varint,5,opt,name=max_log_lines,json=maxLogLines,proto3,oneof" json:"max_log_lines,omitempty"`
	// Provide a list of log levels to filter by. If any of these are UNSPECIFIED, all log levels are returned.
	LogLevels []LogLevel `protobuf:"varint,6,rep,packed,name=log_levels,json=logLevels,proto3,enum=mgmt.v1alpha1.LogLevel" json:"log_levels,omitempty"`
}

func (x *GetJobRunLogsStreamRequest) Reset() {
	*x = GetJobRunLogsStreamRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRunLogsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRunLogsStreamRequest) ProtoMessage() {}

func (x *GetJobRunLogsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRunLogsStreamRequest.ProtoReflect.Descriptor instead.
func (*GetJobRunLogsStreamRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{108}
}

func (x *GetJobRunLogsStreamRequest) GetJobRunId() string {
	if x != nil {
		return x.JobRunId
	}
	return ""
}

func (x *GetJobRunLogsStreamRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetJobRunLogsStreamRequest) GetWindow() LogWindow {
	if x != nil {
		return x.Window
	}
	return LogWindow_LOG_WINDOW_NO_TIME_UNSPECIFIED
}

func (x *GetJobRunLogsStreamRequest) GetShouldTail() bool {
	if x != nil {
		return x.ShouldTail
	}
	return false
}

func (x *GetJobRunLogsStreamRequest) GetMaxLogLines() int64 {
	if x != nil && x.MaxLogLines != nil {
		return *x.MaxLogLines
	}
	return 0
}

func (x *GetJobRunLogsStreamRequest) GetLogLevels() []LogLevel {
	if x != nil {
		return x.LogLevels
	}
	return nil
}

type GetJobRunLogsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogLine   string                 `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
}

func (x *GetJobRunLogsStreamResponse) Reset() {
	*x = GetJobRunLogsStreamResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRunLogsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRunLogsStreamResponse) ProtoMessage() {}

func (x *GetJobRunLogsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRunLogsStreamResponse.ProtoReflect.Descriptor instead.
func (*GetJobRunLogsStreamResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{109}
}

func (x *GetJobRunLogsStreamResponse) GetLogLine() string {
	if x != nil {
		return x.LogLine
	}
	return ""
}

func (x *GetJobRunLogsStreamResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type SetJobWorkflowOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the job
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The workflow options object. The entire object must be provided and will fully overwrite the previous result
	WorfklowOptions *WorkflowOptions `protobuf:"bytes,2,opt,name=worfklow_options,json=worfklowOptions,proto3" json:"worfklow_options,omitempty"`
}

func (x *SetJobWorkflowOptionsRequest) Reset() {
	*x = SetJobWorkflowOptionsRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetJobWorkflowOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetJobWorkflowOptionsRequest) ProtoMessage() {}

func (x *SetJobWorkflowOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetJobWorkflowOptionsRequest.ProtoReflect.Descriptor instead.
func (*SetJobWorkflowOptionsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{110}
}

func (x *SetJobWorkflowOptionsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetJobWorkflowOptionsRequest) GetWorfklowOptions() *WorkflowOptions {
	if x != nil {
		return x.WorfklowOptions
	}
	return nil
}

type SetJobWorkflowOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *SetJobWorkflowOptionsResponse) Reset() {
	*x = SetJobWorkflowOptionsResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetJobWorkflowOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetJobWorkflowOptionsResponse) ProtoMessage() {}

func (x *SetJobWorkflowOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetJobWorkflowOptionsResponse.ProtoReflect.Descriptor instead.
func (*SetJobWorkflowOptionsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{111}
}

func (x *SetJobWorkflowOptionsResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type SetJobSyncOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the job
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The sync options object. The entire object must be provided and will fully overwrite the previous result
	SyncOptions *ActivityOptions `protobuf:"bytes,2,opt,name=sync_options,json=syncOptions,proto3" json:"sync_options,omitempty"`
}

func (x *SetJobSyncOptionsRequest) Reset() {
	*x = SetJobSyncOptionsRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetJobSyncOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetJobSyncOptionsRequest) ProtoMessage() {}

func (x *SetJobSyncOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetJobSyncOptionsRequest.ProtoReflect.Descriptor instead.
func (*SetJobSyncOptionsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{112}
}

func (x *SetJobSyncOptionsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetJobSyncOptionsRequest) GetSyncOptions() *ActivityOptions {
	if x != nil {
		return x.SyncOptions
	}
	return nil
}

type SetJobSyncOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *SetJobSyncOptionsResponse) Reset() {
	*x = SetJobSyncOptionsResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetJobSyncOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetJobSyncOptionsResponse) ProtoMessage() {}

func (x *SetJobSyncOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetJobSyncOptionsResponse.ProtoReflect.Descriptor instead.
func (*SetJobSyncOptionsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{113}
}

func (x *SetJobSyncOptionsResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type ValidateJobMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique account identifier that this job will be associated with
	AccountId          string                      `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Mappings           []*JobMapping               `protobuf:"bytes,2,rep,name=mappings,proto3" json:"mappings,omitempty"`
	ConnectionId       string                      `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	VirtualForeignKeys []*VirtualForeignConstraint `protobuf:"bytes,4,rep,name=virtual_foreign_keys,json=virtualForeignKeys,proto3" json:"virtual_foreign_keys,omitempty"`
}

func (x *ValidateJobMappingsRequest) Reset() {
	*x = ValidateJobMappingsRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateJobMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateJobMappingsRequest) ProtoMessage() {}

func (x *ValidateJobMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateJobMappingsRequest.ProtoReflect.Descriptor instead.
func (*ValidateJobMappingsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{114}
}

func (x *ValidateJobMappingsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ValidateJobMappingsRequest) GetMappings() []*JobMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

func (x *ValidateJobMappingsRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *ValidateJobMappingsRequest) GetVirtualForeignKeys() []*VirtualForeignConstraint {
	if x != nil {
		return x.VirtualForeignKeys
	}
	return nil
}

type ColumnError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema string   `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table  string   `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Column string   `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
	Errors []string `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ColumnError) Reset() {
	*x = ColumnError{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnError) ProtoMessage() {}

func (x *ColumnError) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnError.ProtoReflect.Descriptor instead.
func (*ColumnError) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{115}
}

func (x *ColumnError) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *ColumnError) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ColumnError) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *ColumnError) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type DatabaseError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *DatabaseError) Reset() {
	*x = DatabaseError{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseError) ProtoMessage() {}

func (x *DatabaseError) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseError.ProtoReflect.Descriptor instead.
func (*DatabaseError) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{116}
}

func (x *DatabaseError) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ValidateJobMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnErrors   []*ColumnError `protobuf:"bytes,1,rep,name=column_errors,json=columnErrors,proto3" json:"column_errors,omitempty"`
	DatabaseErrors *DatabaseError `protobuf:"bytes,2,opt,name=database_errors,json=databaseErrors,proto3" json:"database_errors,omitempty"`
}

func (x *ValidateJobMappingsResponse) Reset() {
	*x = ValidateJobMappingsResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateJobMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateJobMappingsResponse) ProtoMessage() {}

func (x *ValidateJobMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateJobMappingsResponse.ProtoReflect.Descriptor instead.
func (*ValidateJobMappingsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{117}
}

func (x *ValidateJobMappingsResponse) GetColumnErrors() []*ColumnError {
	if x != nil {
		return x.ColumnErrors
	}
	return nil
}

func (x *ValidateJobMappingsResponse) GetDatabaseErrors() *DatabaseError {
	if x != nil {
		return x.DatabaseErrors
	}
	return nil
}

type VirtualForeignKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema  string   `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table   string   `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Columns []string `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *VirtualForeignKey) Reset() {
	*x = VirtualForeignKey{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualForeignKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualForeignKey) ProtoMessage() {}

func (x *VirtualForeignKey) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualForeignKey.ProtoReflect.Descriptor instead.
func (*VirtualForeignKey) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{118}
}

func (x *VirtualForeignKey) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *VirtualForeignKey) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *VirtualForeignKey) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

type VirtualForeignConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema     string             `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table      string             `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Columns    []string           `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
	ForeignKey *VirtualForeignKey `protobuf:"bytes,4,opt,name=foreign_key,json=foreignKey,proto3" json:"foreign_key,omitempty"`
}

func (x *VirtualForeignConstraint) Reset() {
	*x = VirtualForeignConstraint{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualForeignConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualForeignConstraint) ProtoMessage() {}

func (x *VirtualForeignConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualForeignConstraint.ProtoReflect.Descriptor instead.
func (*VirtualForeignConstraint) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{119}
}

func (x *VirtualForeignConstraint) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *VirtualForeignConstraint) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *VirtualForeignConstraint) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *VirtualForeignConstraint) GetForeignKey() *VirtualForeignKey {
	if x != nil {
		return x.ForeignKey
	}
	return nil
}

type RunContextKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Neosync Run ID
	JobRunId string `protobuf:"bytes,1,opt,name=job_run_id,json=jobRunId,proto3" json:"job_run_id,omitempty"`
	// An opaque identifier that will be used to store specific items
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// The Neosync Account ID
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *RunContextKey) Reset() {
	*x = RunContextKey{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunContextKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunContextKey) ProtoMessage() {}

func (x *RunContextKey) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunContextKey.ProtoReflect.Descriptor instead.
func (*RunContextKey) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{120}
}

func (x *RunContextKey) GetJobRunId() string {
	if x != nil {
		return x.JobRunId
	}
	return ""
}

func (x *RunContextKey) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *RunContextKey) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetRunContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *RunContextKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRunContextRequest) Reset() {
	*x = GetRunContextRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunContextRequest) ProtoMessage() {}

func (x *GetRunContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunContextRequest.ProtoReflect.Descriptor instead.
func (*GetRunContextRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{121}
}

func (x *GetRunContextRequest) GetId() *RunContextKey {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetRunContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetRunContextResponse) Reset() {
	*x = GetRunContextResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunContextResponse) ProtoMessage() {}

func (x *GetRunContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunContextResponse.ProtoReflect.Descriptor instead.
func (*GetRunContextResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{122}
}

func (x *GetRunContextResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SetRunContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *RunContextKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// An opaque value that is to be determined by the key
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetRunContextRequest) Reset() {
	*x = SetRunContextRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRunContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRunContextRequest) ProtoMessage() {}

func (x *SetRunContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRunContextRequest.ProtoReflect.Descriptor instead.
func (*SetRunContextRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{123}
}

func (x *SetRunContextRequest) GetId() *RunContextKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SetRunContextRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SetRunContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetRunContextResponse) Reset() {
	*x = SetRunContextResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRunContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRunContextResponse) ProtoMessage() {}

func (x *SetRunContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRunContextResponse.ProtoReflect.Descriptor instead.
func (*SetRunContextResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{124}
}

type SetRunContextsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *RunContextKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// An opaque value that is to be determined by the key
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetRunContextsRequest) Reset() {
	*x = SetRunContextsRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRunContextsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRunContextsRequest) ProtoMessage() {}

func (x *SetRunContextsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRunContextsRequest.ProtoReflect.Descriptor instead.
func (*SetRunContextsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{125}
}

func (x *SetRunContextsRequest) GetId() *RunContextKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SetRunContextsRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SetRunContextsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetRunContextsResponse) Reset() {
	*x = SetRunContextsResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRunContextsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRunContextsResponse) ProtoMessage() {}

func (x *SetRunContextsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRunContextsResponse.ProtoReflect.Descriptor instead.
func (*SetRunContextsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{126}
}

type JobHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of this hook.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the hook for display/reference.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of what this hook does.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The unique identifier of the job this hook belongs to.
	JobId string `protobuf:"bytes,4,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Hook-type specific configuration.
	Config *JobHookConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// The user that created this hook.
	CreatedByUserId string `protobuf:"bytes,6,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	// The time this hook was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The user that last updated this hook.
	UpdatedByUserId string `protobuf:"bytes,8,opt,name=updated_by_user_id,json=updatedByUserId,proto3" json:"updated_by_user_id,omitempty"`
	// The last time this hook was updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Whether or not the hook is enabled.
	Enabled bool `protobuf:"varint,10,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The priority of the hook (0-100). This determines the execution order. Lower values are higher priority (priority=0 is the highest).
	// Tie Breaking is determined by the following: (priority, created_at, id) in ascending order.
	Priority uint32 `protobuf:"varint,11,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *JobHook) Reset() {
	*x = JobHook{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobHook) ProtoMessage() {}

func (x *JobHook) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobHook.ProtoReflect.Descriptor instead.
func (*JobHook) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{127}
}

func (x *JobHook) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobHook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobHook) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JobHook) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobHook) GetConfig() *JobHookConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *JobHook) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *JobHook) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *JobHook) GetUpdatedByUserId() string {
	if x != nil {
		return x.UpdatedByUserId
	}
	return ""
}

func (x *JobHook) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *JobHook) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *JobHook) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type NewJobHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the hook for display/reference.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of what this hook does.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Hook-type specific configuration.
	Config *JobHookConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	// Whether or not the hook is enabled.
	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The priority of the hook (0-100). This determines the execution order. Lower values are higher priority (priority=0 is the highest).
	// Tie Breaking is determined by the following: (priority, created_at, id) in ascending order.
	Priority uint32 `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *NewJobHook) Reset() {
	*x = NewJobHook{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewJobHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewJobHook) ProtoMessage() {}

func (x *NewJobHook) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewJobHook.ProtoReflect.Descriptor instead.
func (*NewJobHook) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{128}
}

func (x *NewJobHook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewJobHook) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewJobHook) GetConfig() *JobHookConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *NewJobHook) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *NewJobHook) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// Contains the specific hook type configurations.
type JobHookConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*JobHookConfig_Sql
	Config isJobHookConfig_Config `protobuf_oneof:"config"`
}

func (x *JobHookConfig) Reset() {
	*x = JobHookConfig{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobHookConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobHookConfig) ProtoMessage() {}

func (x *JobHookConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobHookConfig.ProtoReflect.Descriptor instead.
func (*JobHookConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{129}
}

func (m *JobHookConfig) GetConfig() isJobHookConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *JobHookConfig) GetSql() *JobHookConfig_JobSqlHook {
	if x, ok := x.GetConfig().(*JobHookConfig_Sql); ok {
		return x.Sql
	}
	return nil
}

type isJobHookConfig_Config interface {
	isJobHookConfig_Config()
}

type JobHookConfig_Sql struct {
	// Configuration for SQL-specific hooks.
	Sql *JobHookConfig_JobSqlHook `protobuf:"bytes,5,opt,name=sql,proto3,oneof"`
}

func (*JobHookConfig_Sql) isJobHookConfig_Config() {}

// Configures the job hook to run before the first table sync.
// Will run before Truncation, if enabled.
// Will run before Schema Init, if enabled.
type JobHookTimingPreSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobHookTimingPreSync) Reset() {
	*x = JobHookTimingPreSync{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobHookTimingPreSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobHookTimingPreSync) ProtoMessage() {}

func (x *JobHookTimingPreSync) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobHookTimingPreSync.ProtoReflect.Descriptor instead.
func (*JobHookTimingPreSync) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{130}
}

// Configures the job hook to run after the last table sync.
type JobHookTimingPostSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobHookTimingPostSync) Reset() {
	*x = JobHookTimingPostSync{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobHookTimingPostSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobHookTimingPostSync) ProtoMessage() {}

func (x *JobHookTimingPostSync) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobHookTimingPostSync.ProtoReflect.Descriptor instead.
func (*JobHookTimingPostSync) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{131}
}

type GetJobHooksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the job
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetJobHooksRequest) Reset() {
	*x = GetJobHooksRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobHooksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobHooksRequest) ProtoMessage() {}

func (x *GetJobHooksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobHooksRequest.ProtoReflect.Descriptor instead.
func (*GetJobHooksRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{132}
}

func (x *GetJobHooksRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type GetJobHooksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of hooks found attached to the job
	Hooks []*JobHook `protobuf:"bytes,1,rep,name=hooks,proto3" json:"hooks,omitempty"`
}

func (x *GetJobHooksResponse) Reset() {
	*x = GetJobHooksResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobHooksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobHooksResponse) ProtoMessage() {}

func (x *GetJobHooksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobHooksResponse.ProtoReflect.Descriptor instead.
func (*GetJobHooksResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{133}
}

func (x *GetJobHooksResponse) GetHooks() []*JobHook {
	if x != nil {
		return x.Hooks
	}
	return nil
}

type GetJobHookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the hook
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetJobHookRequest) Reset() {
	*x = GetJobHookRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobHookRequest) ProtoMessage() {}

func (x *GetJobHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobHookRequest.ProtoReflect.Descriptor instead.
func (*GetJobHookRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{134}
}

func (x *GetJobHookRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetJobHookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The found hook
	Hook *JobHook `protobuf:"bytes,1,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (x *GetJobHookResponse) Reset() {
	*x = GetJobHookResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobHookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobHookResponse) ProtoMessage() {}

func (x *GetJobHookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobHookResponse.ProtoReflect.Descriptor instead.
func (*GetJobHookResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{135}
}

func (x *GetJobHookResponse) GetHook() *JobHook {
	if x != nil {
		return x.Hook
	}
	return nil
}

type CreateJobHookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the job
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The new hook configuration
	Hook *NewJobHook `protobuf:"bytes,2,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (x *CreateJobHookRequest) Reset() {
	*x = CreateJobHookRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateJobHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobHookRequest) ProtoMessage() {}

func (x *CreateJobHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobHookRequest.ProtoReflect.Descriptor instead.
func (*CreateJobHookRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{136}
}

func (x *CreateJobHookRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *CreateJobHookRequest) GetHook() *NewJobHook {
	if x != nil {
		return x.Hook
	}
	return nil
}

type CreateJobHookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly created hook
	Hook *JobHook `protobuf:"bytes,1,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (x *CreateJobHookResponse) Reset() {
	*x = CreateJobHookResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateJobHookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobHookResponse) ProtoMessage() {}

func (x *CreateJobHookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobHookResponse.ProtoReflect.Descriptor instead.
func (*CreateJobHookResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{137}
}

func (x *CreateJobHookResponse) GetHook() *JobHook {
	if x != nil {
		return x.Hook
	}
	return nil
}

type DeleteJobHookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the hook
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteJobHookRequest) Reset() {
	*x = DeleteJobHookRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteJobHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobHookRequest) ProtoMessage() {}

func (x *DeleteJobHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobHookRequest.ProtoReflect.Descriptor instead.
func (*DeleteJobHookRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{138}
}

func (x *DeleteJobHookRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteJobHookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteJobHookResponse) Reset() {
	*x = DeleteJobHookResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteJobHookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobHookResponse) ProtoMessage() {}

func (x *DeleteJobHookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobHookResponse.ProtoReflect.Descriptor instead.
func (*DeleteJobHookResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{139}
}

type IsJobHookNameAvailableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the job
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The hook name to check.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *IsJobHookNameAvailableRequest) Reset() {
	*x = IsJobHookNameAvailableRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsJobHookNameAvailableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsJobHookNameAvailableRequest) ProtoMessage() {}

func (x *IsJobHookNameAvailableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsJobHookNameAvailableRequest.ProtoReflect.Descriptor instead.
func (*IsJobHookNameAvailableRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{140}
}

func (x *IsJobHookNameAvailableRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *IsJobHookNameAvailableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type IsJobHookNameAvailableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the hook name is available
	IsAvailable bool `protobuf:"varint,1,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
}

func (x *IsJobHookNameAvailableResponse) Reset() {
	*x = IsJobHookNameAvailableResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsJobHookNameAvailableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsJobHookNameAvailableResponse) ProtoMessage() {}

func (x *IsJobHookNameAvailableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsJobHookNameAvailableResponse.ProtoReflect.Descriptor instead.
func (*IsJobHookNameAvailableResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{141}
}

func (x *IsJobHookNameAvailableResponse) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

type UpdateJobHookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the hook
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the hook for display/reference.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of what this hook does.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Hook-type specific configuration.
	Config *JobHookConfig `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// Whether or not the hook is enabled.
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The priority of the hook (0-100). This determines the execution order. Lower values are higher priority (priority=0 is the highest).
	// Tie Breaking is determined by the following: (priority, created_at, id) in ascending order.
	Priority uint32 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *UpdateJobHookRequest) Reset() {
	*x = UpdateJobHookRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobHookRequest) ProtoMessage() {}

func (x *UpdateJobHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobHookRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobHookRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{142}
}

func (x *UpdateJobHookRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateJobHookRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateJobHookRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateJobHookRequest) GetConfig() *JobHookConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateJobHookRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UpdateJobHookRequest) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type UpdateJobHookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated job hook
	Hook *JobHook `protobuf:"bytes,1,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (x *UpdateJobHookResponse) Reset() {
	*x = UpdateJobHookResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobHookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobHookResponse) ProtoMessage() {}

func (x *UpdateJobHookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobHookResponse.ProtoReflect.Descriptor instead.
func (*UpdateJobHookResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{143}
}

func (x *UpdateJobHookResponse) GetHook() *JobHook {
	if x != nil {
		return x.Hook
	}
	return nil
}

type SetJobHookEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the hook
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether or not the hook is enabled.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetJobHookEnabledRequest) Reset() {
	*x = SetJobHookEnabledRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetJobHookEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetJobHookEnabledRequest) ProtoMessage() {}

func (x *SetJobHookEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetJobHookEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetJobHookEnabledRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{144}
}

func (x *SetJobHookEnabledRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetJobHookEnabledRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetJobHookEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated job hook
	Hook *JobHook `protobuf:"bytes,1,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (x *SetJobHookEnabledResponse) Reset() {
	*x = SetJobHookEnabledResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetJobHookEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetJobHookEnabledResponse) ProtoMessage() {}

func (x *SetJobHookEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetJobHookEnabledResponse.ProtoReflect.Descriptor instead.
func (*SetJobHookEnabledResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{145}
}

func (x *SetJobHookEnabledResponse) GetHook() *JobHook {
	if x != nil {
		return x.Hook
	}
	return nil
}

type GetActiveJobHooksByTimingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the job
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The timing desired.
	Timing GetActiveJobHooksByTimingRequest_Timing `protobuf:"varint,2,opt,name=timing,proto3,enum=mgmt.v1alpha1.GetActiveJobHooksByTimingRequest_Timing" json:"timing,omitempty"`
}

func (x *GetActiveJobHooksByTimingRequest) Reset() {
	*x = GetActiveJobHooksByTimingRequest{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveJobHooksByTimingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveJobHooksByTimingRequest) ProtoMessage() {}

func (x *GetActiveJobHooksByTimingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveJobHooksByTimingRequest.ProtoReflect.Descriptor instead.
func (*GetActiveJobHooksByTimingRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{146}
}

func (x *GetActiveJobHooksByTimingRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *GetActiveJobHooksByTimingRequest) GetTiming() GetActiveJobHooksByTimingRequest_Timing {
	if x != nil {
		return x.Timing
	}
	return GetActiveJobHooksByTimingRequest_TIMING_UNSPECIFIED
}

type GetActiveJobHooksByTimingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The active job hooks
	Hooks []*JobHook `protobuf:"bytes,1,rep,name=hooks,proto3" json:"hooks,omitempty"`
}

func (x *GetActiveJobHooksByTimingResponse) Reset() {
	*x = GetActiveJobHooksByTimingResponse{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveJobHooksByTimingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveJobHooksByTimingResponse) ProtoMessage() {}

func (x *GetActiveJobHooksByTimingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveJobHooksByTimingResponse.ProtoReflect.Descriptor instead.
func (*GetActiveJobHooksByTimingResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{147}
}

func (x *GetActiveJobHooksByTimingResponse) GetHooks() []*JobHook {
	if x != nil {
		return x.Hooks
	}
	return nil
}

type PostgresSourceConnectionOptions_NewColumnAdditionStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Strategy:
	//
	//	*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob_
	//	*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap_
	Strategy isPostgresSourceConnectionOptions_NewColumnAdditionStrategy_Strategy `protobuf_oneof:"strategy"`
}

func (x *PostgresSourceConnectionOptions_NewColumnAdditionStrategy) Reset() {
	*x = PostgresSourceConnectionOptions_NewColumnAdditionStrategy{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresSourceConnectionOptions_NewColumnAdditionStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresSourceConnectionOptions_NewColumnAdditionStrategy) ProtoMessage() {}

func (x *PostgresSourceConnectionOptions_NewColumnAdditionStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresSourceConnectionOptions_NewColumnAdditionStrategy.ProtoReflect.Descriptor instead.
func (*PostgresSourceConnectionOptions_NewColumnAdditionStrategy) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{16, 0}
}

func (m *PostgresSourceConnectionOptions_NewColumnAdditionStrategy) GetStrategy() isPostgresSourceConnectionOptions_NewColumnAdditionStrategy_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (x *PostgresSourceConnectionOptions_NewColumnAdditionStrategy) GetHaltJob() *PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob {
	if x, ok := x.GetStrategy().(*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob_); ok {
		return x.HaltJob
	}
	return nil
}

func (x *PostgresSourceConnectionOptions_NewColumnAdditionStrategy) GetAutoMap() *PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap {
	if x, ok := x.GetStrategy().(*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap_); ok {
		return x.AutoMap
	}
	return nil
}

type isPostgresSourceConnectionOptions_NewColumnAdditionStrategy_Strategy interface {
	isPostgresSourceConnectionOptions_NewColumnAdditionStrategy_Strategy()
}

type PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob_ struct {
	// halt job if a new column is detected. This is equiavlent to the deprecated halt_on_new_column_addition
	HaltJob *PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob `protobuf:"bytes,1,opt,name=halt_job,json=haltJob,proto3,oneof"`
}

type PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap_ struct {
	// automatically handle unmapped columns. It handles this by using the DBs default/nullable values.
	// If this doesn't exist, will fall back to configuring generators for supported datatypes.
	// If none of the criteria above can be met, the job run will fail to prevent leaking of PII.
	AutoMap *PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap `protobuf:"bytes,2,opt,name=auto_map,json=autoMap,proto3,oneof"`
}

func (*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob_) isPostgresSourceConnectionOptions_NewColumnAdditionStrategy_Strategy() {
}

func (*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap_) isPostgresSourceConnectionOptions_NewColumnAdditionStrategy_Strategy() {
}

// Configuration for the HaltJob strategy
type PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob) Reset() {
	*x = PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob) ProtoMessage() {}

func (x *PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob.ProtoReflect.Descriptor instead.
func (*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{16, 0, 0}
}

// Configuration for the AutoMap strategy
type PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap) Reset() {
	*x = PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap) ProtoMessage() {}

func (x *PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap.ProtoReflect.Descriptor instead.
func (*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{16, 0, 1}
}

// Configuration for SQL-based hooks
type JobHookConfig_JobSqlHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The SQL query to execute
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Unique identifier of the Neosync connection to run this hook for. Must be a connection id that is present in the job.
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// The timing of when the hook will run
	Timing *JobHookConfig_JobSqlHook_Timing `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
}

func (x *JobHookConfig_JobSqlHook) Reset() {
	*x = JobHookConfig_JobSqlHook{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobHookConfig_JobSqlHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobHookConfig_JobSqlHook) ProtoMessage() {}

func (x *JobHookConfig_JobSqlHook) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobHookConfig_JobSqlHook.ProtoReflect.Descriptor instead.
func (*JobHookConfig_JobSqlHook) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{129, 0}
}

func (x *JobHookConfig_JobSqlHook) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *JobHookConfig_JobSqlHook) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *JobHookConfig_JobSqlHook) GetTiming() *JobHookConfig_JobSqlHook_Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

type JobHookConfig_JobSqlHook_Timing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Timing:
	//
	//	*JobHookConfig_JobSqlHook_Timing_PreSync
	//	*JobHookConfig_JobSqlHook_Timing_PostSync
	Timing isJobHookConfig_JobSqlHook_Timing_Timing `protobuf_oneof:"timing"`
}

func (x *JobHookConfig_JobSqlHook_Timing) Reset() {
	*x = JobHookConfig_JobSqlHook_Timing{}
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobHookConfig_JobSqlHook_Timing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobHookConfig_JobSqlHook_Timing) ProtoMessage() {}

func (x *JobHookConfig_JobSqlHook_Timing) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_job_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobHookConfig_JobSqlHook_Timing.ProtoReflect.Descriptor instead.
func (*JobHookConfig_JobSqlHook_Timing) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_job_proto_rawDescGZIP(), []int{129, 0, 0}
}

func (m *JobHookConfig_JobSqlHook_Timing) GetTiming() isJobHookConfig_JobSqlHook_Timing_Timing {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (x *JobHookConfig_JobSqlHook_Timing) GetPreSync() *JobHookTimingPreSync {
	if x, ok := x.GetTiming().(*JobHookConfig_JobSqlHook_Timing_PreSync); ok {
		return x.PreSync
	}
	return nil
}

func (x *JobHookConfig_JobSqlHook_Timing) GetPostSync() *JobHookTimingPostSync {
	if x, ok := x.GetTiming().(*JobHookConfig_JobSqlHook_Timing_PostSync); ok {
		return x.PostSync
	}
	return nil
}

type isJobHookConfig_JobSqlHook_Timing_Timing interface {
	isJobHookConfig_JobSqlHook_Timing_Timing()
}

type JobHookConfig_JobSqlHook_Timing_PreSync struct {
	// A Pre-Sync timing.
	// Will run before the first table sync.
	// Will run before Truncation, if enabled.
	// Will run before Schema Init, if enabled.
	PreSync *JobHookTimingPreSync `protobuf:"bytes,3,opt,name=pre_sync,json=preSync,proto3,oneof"`
}

type JobHookConfig_JobSqlHook_Timing_PostSync struct {
	// A Post-Sync timing. Will run after the last table sync.
	PostSync *JobHookTimingPostSync `protobuf:"bytes,4,opt,name=post_sync,json=postSync,proto3,oneof"`
}

func (*JobHookConfig_JobSqlHook_Timing_PreSync) isJobHookConfig_JobSqlHook_Timing_Timing() {}

func (*JobHookConfig_JobSqlHook_Timing_PostSync) isJobHookConfig_JobSqlHook_Timing_Timing() {}

var File_mgmt_v1alpha1_job_proto protoreflect.FileDescriptor

var file_mgmt_v1alpha1_job_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x39, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0x4e, 0x0a,
	0x09, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe9, 0x04,
	0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x06, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x33, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x77, 0x73, 0x53, 0x33, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x05, 0x61, 0x77, 0x73, 0x53, 0x33, 0x12, 0x43, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x42, 0x0a, 0x08, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x49, 0x0a, 0x0b, 0x61, 0x69, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x12, 0x4c, 0x0a, 0x08, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64,
	0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x64, 0x62, 0x12, 0x43, 0x0a, 0x05, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x73, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x05, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x42, 0x0f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb6, 0x03, 0x0a, 0x17, 0x41, 0x69,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x10, 0x61, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0e, 0x61, 0x69, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x07, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x69, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x44, 0x0a, 0x17, 0x66, 0x6b,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x14, 0x66, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xba, 0x48, 0x06,
	0x22, 0x04, 0x18, 0x64, 0x28, 0x01, 0x48, 0x02, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x66, 0x6b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1c, 0x41, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x4c, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x22, 0x65, 0x0a, 0x1b, 0x41, 0x69, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x27, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x22, 0x05, 0x18, 0xe8, 0x07, 0x28, 0x01, 0x52,
	0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x12, 0x44, 0x0a, 0x17, 0x66, 0x6b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52,
	0x14, 0x66, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x66, 0x6b, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x4a, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x22, 0x60, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x09,
	0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x28, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x1e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x42, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x1f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x13, 0x75, 0x6e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x75, 0x6e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x25, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f,
	0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x32, 0x0a, 0x01, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x52, 0x01, 0x62, 0x12, 0x3e, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x01, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a,
	0x6f, 0x62, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x52, 0x01, 0x6e, 0x12, 0x32, 0x0a, 0x01, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x01, 0x73, 0x22, 0x73, 0x0a, 0x19, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x22, 0xec, 0x05, 0x0a, 0x1f, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x1b, 0x68, 0x61, 0x6c, 0x74, 0x5f, 0x6f, 0x6e, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x17, 0x68, 0x61, 0x6c,
	0x74, 0x4f, 0x6e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x2d, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x73,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x42, 0x79,
	0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x1c, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x77,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x19, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x1a, 0x9b, 0x02, 0x0a, 0x19, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x6d, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x50, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x48, 0x61, 0x6c, 0x74,
	0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x07, 0x68, 0x61, 0x6c, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x6d,
	0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x4d,
	0x61, 0x70, 0x48, 0x00, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x61, 0x70, 0x1a, 0x09, 0x0a,
	0x07, 0x48, 0x61, 0x6c, 0x74, 0x4a, 0x6f, 0x62, 0x1a, 0x09, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x6f,
	0x4d, 0x61, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42,
	0x1e, 0x0a, 0x1c, 0x5f, 0x68, 0x61, 0x6c, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x76, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x1c, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x68, 0x61, 0x6c, 0x74, 0x5f, 0x6f, 0x6e, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68, 0x61, 0x6c, 0x74, 0x4f,
	0x6e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x42, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b,
	0x65, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x70, 0x0a,
	0x17, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22,
	0x67, 0x0a, 0x16, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x1c, 0x4d, 0x73, 0x73,
	0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x68, 0x61, 0x6c,
	0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x68, 0x61, 0x6c, 0x74, 0x4f, 0x6e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x73, 0x73, 0x71, 0x6c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x75, 0x62, 0x73,
	0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1d, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x42, 0x79, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0x70, 0x0a, 0x17, 0x4d, 0x73, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x73, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x16, 0x4d, 0x73, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0x4d, 0x0a,
	0x1c, 0x41, 0x77, 0x73, 0x53, 0x33, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xcf, 0x05, 0x0a,
	0x15, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f,
	0x73, 0x33, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x77, 0x73, 0x53, 0x33, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x53, 0x33, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x0f, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x42, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x18, 0x67, 0x63,
	0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x63, 0x70,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x16, 0x67, 0x63, 0x70, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x6f, 0x44, 0x42, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x73, 0x73, 0x71,
	0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0f, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x25,
	0x0a, 0x23, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x42, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2d, 0x0a, 0x2b, 0x47, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7d, 0x0a, 0x24, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x0e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x71, 0x0a, 0x1f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x24, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x51, 0x0a, 0x0e, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x6e, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x48,
	0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73,
	0x6b, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x22, 0x39, 0x0a,
	0x18, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x5f,
	0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64,
	0x6f, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x6d, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x21, 0x4d, 0x79, 0x73, 0x71,
	0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a,
	0x0e, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x45, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d,
	0x79, 0x73, 0x71, 0x6c, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x4b, 0x65, 0x79, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x30, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x22, 0x50, 0x0a, 0x18, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x22, 0x36, 0x0a, 0x15, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22,
	0x9b, 0x03, 0x0a, 0x21, 0x4d, 0x73, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x73,
	0x73, 0x71, 0x6c, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x45, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x73, 0x73, 0x71, 0x6c, 0x4f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73,
	0x6b, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x22, 0x50, 0x0a,
	0x18, 0x4d, 0x73, 0x73, 0x71, 0x6c, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x22,
	0x36, 0x0a, 0x15, 0x4d, 0x73, 0x73, 0x71, 0x6c, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x5f, 0x6e,
	0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x6f,
	0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0xb9, 0x04, 0x0a, 0x21, 0x41, 0x77, 0x73, 0x53,
	0x33, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x62, 0x0a,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x53, 0x33, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x30, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x22, 0x8e, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x4e, 0x44,
	0x41, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x47, 0x4c, 0x41, 0x43, 0x49, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x41, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x4f, 0x4e, 0x45, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x41, 0x10, 0x05, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x5f, 0x41, 0x52, 0x43, 0x48,
	0x49, 0x56, 0x45, 0x10, 0x07, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e,
	0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x5a, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22,
	0xf2, 0x04, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0xba, 0x48, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x72,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x12,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65,
	0x79, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x22, 0x47, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a,
	0x72, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x95, 0x02,
	0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x47, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x16, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22,
	0x02, 0x28, 0x01, 0x48, 0x01, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x5b, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x22, 0x39, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x8b, 0x01,
	0x0a, 0x15, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x9a, 0x01, 0x0a, 0x0a,
	0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x46, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x70, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x41, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x6f,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x22, 0x63, 0x0a, 0x0f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x6f, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22,
	0x80, 0x02, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a,
	0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x12,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65,
	0x79, 0x73, 0x22, 0x49, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x72, 0x0a,
	0x1a, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x22, 0x66, 0x0a, 0x17, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0d,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x79, 0x73,
	0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x22, 0x5e, 0x0a, 0x1a, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x6f, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x44, 0x42,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x17, 0x4d, 0x73, 0x73,
	0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x75,
	0x62, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x73, 0x73, 0x71,
	0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x22, 0xf2, 0x02, 0x0a, 0x18, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x71, 0x6c, 0x53, 0x75, 0x62, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x54,
	0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x62, 0x73,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x62, 0x73,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x65,
	0x74, 0x12, 0x54, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x44, 0x42, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64,
	0x62, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0c, 0x6d, 0x73, 0x73, 0x71, 0x6c,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x73,
	0x73, 0x71, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x73, 0x73, 0x71, 0x6c, 0x53, 0x75,
	0x62, 0x73, 0x65, 0x74, 0x42, 0x10, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12,
	0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x27, 0x53, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x07,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f,
	0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x71, 0x6c, 0x53, 0x75, 0x62, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12,
	0x48, 0x0a, 0x21, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x73, 0x75, 0x62, 0x73,
	0x65, 0x74, 0x42, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x50, 0x0a, 0x28, 0x53, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0xde, 0x01, 0x0a, 0x25,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x26,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x58, 0x0a, 0x25,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0c,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f,
	0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x2c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x19, 0x49, 0x73, 0x4a,
	0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x48, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3f,
	0x0a, 0x1a, 0x49, 0x73, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x67, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x73,
	0x22, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e,
	0x22, 0x36, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5c, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x16,
	0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9, 0x05, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28,
	0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x73,
	0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x12, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x22, 0x67, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e,
	0x73, 0x22, 0x4f, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x73,
	0x12, 0x40, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0x2e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x4e, 0x65, 0x78, 0x74,
	0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x22, 0x51, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x4e, 0x65, 0x78, 0x74,
	0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4a, 0x6f, 0x62, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x52, 0x75, 0x6e, 0x73, 0x22, 0x2c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5a, 0x0a,
	0x0f, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x22, 0x2b, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc6,
	0x01, 0x0a, 0x0f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x06, 0x4a, 0x6f, 0x62, 0x52,
	0x75, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f,
	0x62, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x4d, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x11, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x22, 0x51, 0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x42, 0x0a, 0x12, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x53, 0x79, 0x6e, 0x63,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x72, 0x0a, 0x13, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a,
	0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x11, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x0b, 0x4a,
	0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x5f, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x22, 0x5c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a,
	0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x16, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52,
	0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x10,
	0x77, 0x6f, 0x72, 0x66, 0x6b, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x66, 0x6b, 0x6c, 0x6f, 0x77,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x77,
	0x0a, 0x18, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x41, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0xfc, 0x01, 0x0a, 0x1a, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x59,
	0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x6b, 0x0a, 0x0b, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x27, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0xa5, 0x01, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x45, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x5b, 0x0a, 0x11, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x18, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79,
	0x52, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x88, 0x01, 0x0a,
	0x0d, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x25,
	0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6a, 0x6f, 0x62,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x14,
	0x53, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52,
	0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5b, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x18,
	0x0a, 0x16, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x03, 0x0a, 0x07, 0x4a, 0x6f, 0x62,
	0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2b, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0x48, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xdd, 0x01, 0x0a, 0x0a, 0x4e, 0x65, 0x77,
	0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x48, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0x48, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa5, 0x03, 0x0a, 0x0d, 0x4a, 0x6f, 0x62,
	0x48, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x03, 0x73, 0x71,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x71, 0x6c, 0x48, 0x6f, 0x6f, 0x6b,
	0x48, 0x00, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x1a, 0xc5, 0x02, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x53,
	0x71, 0x6c, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x1d, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x71, 0x6c, 0x48, 0x6f, 0x6f, 0x6b, 0x2e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x1a, 0xa0, 0x01, 0x0a,
	0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f,
	0x6b, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x00,
	0x52, 0x07, 0x70, 0x72, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x43, 0x0a, 0x09, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62,
	0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x0f,
	0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x42,
	0x0f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01,
	0x22, 0x16, 0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x17, 0x0a, 0x15, 0x4a, 0x6f, 0x62, 0x48,
	0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x22, 0x35, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a,
	0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x2d, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x5c,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x4a,
	0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x43, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x68, 0x6f, 0x6f,
	0x6b, 0x22, 0x30, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x1d,
	0x49, 0x73, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x1e, 0x49, 0x73, 0x4a, 0x6f,
	0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x81, 0x02,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0xba, 0x48, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d,
	0x5d, 0x7b, 0x33, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f,
	0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xba, 0x48,
	0x06, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x43, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x68, 0x6f,
	0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b,
	0x52, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x4e, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x22,
	0xde, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x62,
	0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4a,
	0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x49, 0x0a, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x49, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02,
	0x22, 0x51, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x62,
	0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x05, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x2a, 0x6f, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x16, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4a,
	0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x2a, 0xa7, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x92,
	0x02, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x1a, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4a,
	0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4a, 0x4f, 0x42, 0x5f, 0x52,
	0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1b,
	0x0a, 0x17, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x4a,
	0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45,
	0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4a, 0x4f,
	0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55,
	0x54, 0x10, 0x08, 0x2a, 0x7c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x4f, 0x47, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x4e,
	0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x47, 0x5f, 0x57, 0x49, 0x4e, 0x44,
	0x4f, 0x57, 0x5f, 0x46, 0x49, 0x46, 0x54, 0x45, 0x45, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x4c, 0x4f, 0x47, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x4f,
	0x4e, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47,
	0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10,
	0x03, 0x2a, 0x77, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a,
	0x15, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57,
	0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x32, 0xd1, 0x1e, 0x0a, 0x0a, 0x4a,
	0x6f, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1d, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12,
	0x1c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1f, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1f, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x12, 0x49, 0x73, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x4a, 0x6f, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x73, 0x4a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a,
	0x20, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x71, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x36, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x71,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x08, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1e, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73,
	0x12, 0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x4e, 0x65, 0x78,
	0x74, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x4e, 0x65, 0x78, 0x74,
	0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x20,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52,
	0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52,
	0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x12, 0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x12, 0x22, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x12, 0x22, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x75,
	0x6e, 0x12, 0x22, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0f,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x12,
	0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x70, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x29, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75,
	0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x74, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x79, 0x6e,
	0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5c, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x12, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x12, 0x56, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x73,
	0x12, 0x21, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x12,
	0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x23, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x16, 0x49, 0x73,
	0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x73, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x73, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x23, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f,
	0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b,
	0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x42, 0x79, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x42, 0x79, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xc4,
	0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x42, 0x08, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x75, 0x63,
	0x6c, 0x65, 0x75, 0x73, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6e, 0x65, 0x6f, 0x73, 0x79, 0x6e,
	0x63, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6d, 0x67, 0x6d, 0x74, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x4d, 0x67, 0x6d, 0x74, 0x2e,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x0d, 0x4d, 0x67, 0x6d, 0x74, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x19, 0x4d, 0x67, 0x6d, 0x74, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x4d, 0x67, 0x6d, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mgmt_v1alpha1_job_proto_rawDescOnce sync.Once
	file_mgmt_v1alpha1_job_proto_rawDescData = file_mgmt_v1alpha1_job_proto_rawDesc
)

func file_mgmt_v1alpha1_job_proto_rawDescGZIP() []byte {
	file_mgmt_v1alpha1_job_proto_rawDescOnce.Do(func() {
		file_mgmt_v1alpha1_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_mgmt_v1alpha1_job_proto_rawDescData)
	})
	return file_mgmt_v1alpha1_job_proto_rawDescData
}

var file_mgmt_v1alpha1_job_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_mgmt_v1alpha1_job_proto_msgTypes = make([]protoimpl.MessageInfo, 153)
var file_mgmt_v1alpha1_job_proto_goTypes = []any{
	(JobStatus)(0),      // 0: mgmt.v1alpha1.JobStatus
	(ActivityStatus)(0), // 1: mgmt.v1alpha1.ActivityStatus
	(JobRunStatus)(0),   // 2: mgmt.v1alpha1.JobRunStatus
	(LogWindow)(0),      // 3: mgmt.v1alpha1.LogWindow
	(LogLevel)(0),       // 4: mgmt.v1alpha1.LogLevel
	(AwsS3DestinationConnectionOptions_StorageClass)(0),                       // 5: mgmt.v1alpha1.AwsS3DestinationConnectionOptions.StorageClass
	(GetActiveJobHooksByTimingRequest_Timing)(0),                              // 6: mgmt.v1alpha1.GetActiveJobHooksByTimingRequest.Timing
	(*GetJobsRequest)(nil),                                                    // 7: mgmt.v1alpha1.GetJobsRequest
	(*GetJobsResponse)(nil),                                                   // 8: mgmt.v1alpha1.GetJobsResponse
	(*JobSource)(nil),                                                         // 9: mgmt.v1alpha1.JobSource
	(*JobSourceOptions)(nil),                                                  // 10: mgmt.v1alpha1.JobSourceOptions
	(*CreateJobDestination)(nil),                                              // 11: mgmt.v1alpha1.CreateJobDestination
	(*JobDestination)(nil),                                                    // 12: mgmt.v1alpha1.JobDestination
	(*AiGenerateSourceOptions)(nil),                                           // 13: mgmt.v1alpha1.AiGenerateSourceOptions
	(*AiGenerateSourceSchemaOption)(nil),                                      // 14: mgmt.v1alpha1.AiGenerateSourceSchemaOption
	(*AiGenerateSourceTableOption)(nil),                                       // 15: mgmt.v1alpha1.AiGenerateSourceTableOption
	(*GenerateSourceOptions)(nil),                                             // 16: mgmt.v1alpha1.GenerateSourceOptions
	(*GenerateSourceSchemaOption)(nil),                                        // 17: mgmt.v1alpha1.GenerateSourceSchemaOption
	(*GenerateSourceTableOption)(nil),                                         // 18: mgmt.v1alpha1.GenerateSourceTableOption
	(*MongoDBSourceConnectionOptions)(nil),                                    // 19: mgmt.v1alpha1.MongoDBSourceConnectionOptions
	(*DynamoDBSourceConnectionOptions)(nil),                                   // 20: mgmt.v1alpha1.DynamoDBSourceConnectionOptions
	(*DynamoDBSourceUnmappedTransformConfig)(nil),                             // 21: mgmt.v1alpha1.DynamoDBSourceUnmappedTransformConfig
	(*DynamoDBSourceTableOption)(nil),                                         // 22: mgmt.v1alpha1.DynamoDBSourceTableOption
	(*PostgresSourceConnectionOptions)(nil),                                   // 23: mgmt.v1alpha1.PostgresSourceConnectionOptions
	(*PostgresSourceSchemaOption)(nil),                                        // 24: mgmt.v1alpha1.PostgresSourceSchemaOption
	(*PostgresSourceTableOption)(nil),                                         // 25: mgmt.v1alpha1.PostgresSourceTableOption
	(*MysqlSourceConnectionOptions)(nil),                                      // 26: mgmt.v1alpha1.MysqlSourceConnectionOptions
	(*MysqlSourceSchemaOption)(nil),                                           // 27: mgmt.v1alpha1.MysqlSourceSchemaOption
	(*MysqlSourceTableOption)(nil),                                            // 28: mgmt.v1alpha1.MysqlSourceTableOption
	(*MssqlSourceConnectionOptions)(nil),                                      // 29: mgmt.v1alpha1.MssqlSourceConnectionOptions
	(*MssqlSourceSchemaOption)(nil),                                           // 30: mgmt.v1alpha1.MssqlSourceSchemaOption
	(*MssqlSourceTableOption)(nil),                                            // 31: mgmt.v1alpha1.MssqlSourceTableOption
	(*AwsS3SourceConnectionOptions)(nil),                                      // 32: mgmt.v1alpha1.AwsS3SourceConnectionOptions
	(*JobDestinationOptions)(nil),                                             // 33: mgmt.v1alpha1.JobDestinationOptions
	(*MongoDBDestinationConnectionOptions)(nil),                               // 34: mgmt.v1alpha1.MongoDBDestinationConnectionOptions
	(*GcpCloudStorageDestinationConnectionOptions)(nil),                       // 35: mgmt.v1alpha1.GcpCloudStorageDestinationConnectionOptions
	(*DynamoDBDestinationConnectionOptions)(nil),                              // 36: mgmt.v1alpha1.DynamoDBDestinationConnectionOptions
	(*DynamoDBDestinationTableMapping)(nil),                                   // 37: mgmt.v1alpha1.DynamoDBDestinationTableMapping
	(*PostgresDestinationConnectionOptions)(nil),                              // 38: mgmt.v1alpha1.PostgresDestinationConnectionOptions
	(*PostgresOnConflictConfig)(nil),                                          // 39: mgmt.v1alpha1.PostgresOnConflictConfig
	(*PostgresTruncateTableConfig)(nil),                                       // 40: mgmt.v1alpha1.PostgresTruncateTableConfig
	(*MysqlDestinationConnectionOptions)(nil),                                 // 41: mgmt.v1alpha1.MysqlDestinationConnectionOptions
	(*MysqlTruncateTableConfig)(nil),                                          // 42: mgmt.v1alpha1.MysqlTruncateTableConfig
	(*MysqlOnConflictConfig)(nil),                                             // 43: mgmt.v1alpha1.MysqlOnConflictConfig
	(*MssqlDestinationConnectionOptions)(nil),                                 // 44: mgmt.v1alpha1.MssqlDestinationConnectionOptions
	(*MssqlTruncateTableConfig)(nil),                                          // 45: mgmt.v1alpha1.MssqlTruncateTableConfig
	(*MssqlOnConflictConfig)(nil),                                             // 46: mgmt.v1alpha1.MssqlOnConflictConfig
	(*AwsS3DestinationConnectionOptions)(nil),                                 // 47: mgmt.v1alpha1.AwsS3DestinationConnectionOptions
	(*BatchConfig)(nil),                                                       // 48: mgmt.v1alpha1.BatchConfig
	(*CreateJobRequest)(nil),                                                  // 49: mgmt.v1alpha1.CreateJobRequest
	(*WorkflowOptions)(nil),                                                   // 50: mgmt.v1alpha1.WorkflowOptions
	(*ActivityOptions)(nil),                                                   // 51: mgmt.v1alpha1.ActivityOptions
	(*RetryPolicy)(nil),                                                       // 52: mgmt.v1alpha1.RetryPolicy
	(*CreateJobResponse)(nil),                                                 // 53: mgmt.v1alpha1.CreateJobResponse
	(*JobMappingTransformer)(nil),                                             // 54: mgmt.v1alpha1.JobMappingTransformer
	(*JobMapping)(nil),                                                        // 55: mgmt.v1alpha1.JobMapping
	(*GetJobRequest)(nil),                                                     // 56: mgmt.v1alpha1.GetJobRequest
	(*GetJobResponse)(nil),                                                    // 57: mgmt.v1alpha1.GetJobResponse
	(*UpdateJobScheduleRequest)(nil),                                          // 58: mgmt.v1alpha1.UpdateJobScheduleRequest
	(*UpdateJobScheduleResponse)(nil),                                         // 59: mgmt.v1alpha1.UpdateJobScheduleResponse
	(*PauseJobRequest)(nil),                                                   // 60: mgmt.v1alpha1.PauseJobRequest
	(*PauseJobResponse)(nil),                                                  // 61: mgmt.v1alpha1.PauseJobResponse
	(*UpdateJobSourceConnectionRequest)(nil),                                  // 62: mgmt.v1alpha1.UpdateJobSourceConnectionRequest
	(*UpdateJobSourceConnectionResponse)(nil),                                 // 63: mgmt.v1alpha1.UpdateJobSourceConnectionResponse
	(*PostgresSourceSchemaSubset)(nil),                                        // 64: mgmt.v1alpha1.PostgresSourceSchemaSubset
	(*MysqlSourceSchemaSubset)(nil),                                           // 65: mgmt.v1alpha1.MysqlSourceSchemaSubset
	(*DynamoDBSourceSchemaSubset)(nil),                                        // 66: mgmt.v1alpha1.DynamoDBSourceSchemaSubset
	(*MssqlSourceSchemaSubset)(nil),                                           // 67: mgmt.v1alpha1.MssqlSourceSchemaSubset
	(*JobSourceSqlSubetSchemas)(nil),                                          // 68: mgmt.v1alpha1.JobSourceSqlSubetSchemas
	(*SetJobSourceSqlConnectionSubsetsRequest)(nil),                           // 69: mgmt.v1alpha1.SetJobSourceSqlConnectionSubsetsRequest
	(*SetJobSourceSqlConnectionSubsetsResponse)(nil),                          // 70: mgmt.v1alpha1.SetJobSourceSqlConnectionSubsetsResponse
	(*UpdateJobDestinationConnectionRequest)(nil),                             // 71: mgmt.v1alpha1.UpdateJobDestinationConnectionRequest
	(*UpdateJobDestinationConnectionResponse)(nil),                            // 72: mgmt.v1alpha1.UpdateJobDestinationConnectionResponse
	(*DeleteJobDestinationConnectionRequest)(nil),                             // 73: mgmt.v1alpha1.DeleteJobDestinationConnectionRequest
	(*DeleteJobDestinationConnectionResponse)(nil),                            // 74: mgmt.v1alpha1.DeleteJobDestinationConnectionResponse
	(*CreateJobDestinationConnectionsRequest)(nil),                            // 75: mgmt.v1alpha1.CreateJobDestinationConnectionsRequest
	(*CreateJobDestinationConnectionsResponse)(nil),                           // 76: mgmt.v1alpha1.CreateJobDestinationConnectionsResponse
	(*DeleteJobRequest)(nil),                                                  // 77: mgmt.v1alpha1.DeleteJobRequest
	(*DeleteJobResponse)(nil),                                                 // 78: mgmt.v1alpha1.DeleteJobResponse
	(*IsJobNameAvailableRequest)(nil),                                         // 79: mgmt.v1alpha1.IsJobNameAvailableRequest
	(*IsJobNameAvailableResponse)(nil),                                        // 80: mgmt.v1alpha1.IsJobNameAvailableResponse
	(*GetJobRunsRequest)(nil),                                                 // 81: mgmt.v1alpha1.GetJobRunsRequest
	(*GetJobRunsResponse)(nil),                                                // 82: mgmt.v1alpha1.GetJobRunsResponse
	(*GetJobRunRequest)(nil),                                                  // 83: mgmt.v1alpha1.GetJobRunRequest
	(*GetJobRunResponse)(nil),                                                 // 84: mgmt.v1alpha1.GetJobRunResponse
	(*CreateJobRunRequest)(nil),                                               // 85: mgmt.v1alpha1.CreateJobRunRequest
	(*CreateJobRunResponse)(nil),                                              // 86: mgmt.v1alpha1.CreateJobRunResponse
	(*CancelJobRunRequest)(nil),                                               // 87: mgmt.v1alpha1.CancelJobRunRequest
	(*CancelJobRunResponse)(nil),                                              // 88: mgmt.v1alpha1.CancelJobRunResponse
	(*Job)(nil),                                                               // 89: mgmt.v1alpha1.Job
	(*JobRecentRun)(nil),                                                      // 90: mgmt.v1alpha1.JobRecentRun
	(*GetJobRecentRunsRequest)(nil),                                           // 91: mgmt.v1alpha1.GetJobRecentRunsRequest
	(*GetJobRecentRunsResponse)(nil),                                          // 92: mgmt.v1alpha1.GetJobRecentRunsResponse
	(*JobNextRuns)(nil),                                                       // 93: mgmt.v1alpha1.JobNextRuns
	(*GetJobNextRunsRequest)(nil),                                             // 94: mgmt.v1alpha1.GetJobNextRunsRequest
	(*GetJobNextRunsResponse)(nil),                                            // 95: mgmt.v1alpha1.GetJobNextRunsResponse
	(*GetJobStatusRequest)(nil),                                               // 96: mgmt.v1alpha1.GetJobStatusRequest
	(*GetJobStatusResponse)(nil),                                              // 97: mgmt.v1alpha1.GetJobStatusResponse
	(*JobStatusRecord)(nil),                                                   // 98: mgmt.v1alpha1.JobStatusRecord
	(*GetJobStatusesRequest)(nil),                                             // 99: mgmt.v1alpha1.GetJobStatusesRequest
	(*GetJobStatusesResponse)(nil),                                            // 100: mgmt.v1alpha1.GetJobStatusesResponse
	(*ActivityFailure)(nil),                                                   // 101: mgmt.v1alpha1.ActivityFailure
	(*PendingActivity)(nil),                                                   // 102: mgmt.v1alpha1.PendingActivity
	(*JobRun)(nil),                                                            // 103: mgmt.v1alpha1.JobRun
	(*JobRunEventTaskError)(nil),                                              // 104: mgmt.v1alpha1.JobRunEventTaskError
	(*JobRunEventTask)(nil),                                                   // 105: mgmt.v1alpha1.JobRunEventTask
	(*JobRunSyncMetadata)(nil),                                                // 106: mgmt.v1alpha1.JobRunSyncMetadata
	(*JobRunEventMetadata)(nil),                                               // 107: mgmt.v1alpha1.JobRunEventMetadata
	(*JobRunEvent)(nil),                                                       // 108: mgmt.v1alpha1.JobRunEvent
	(*GetJobRunEventsRequest)(nil),                                            // 109: mgmt.v1alpha1.GetJobRunEventsRequest
	(*GetJobRunEventsResponse)(nil),                                           // 110: mgmt.v1alpha1.GetJobRunEventsResponse
	(*DeleteJobRunRequest)(nil),                                               // 111: mgmt.v1alpha1.DeleteJobRunRequest
	(*DeleteJobRunResponse)(nil),                                              // 112: mgmt.v1alpha1.DeleteJobRunResponse
	(*TerminateJobRunRequest)(nil),                                            // 113: mgmt.v1alpha1.TerminateJobRunRequest
	(*TerminateJobRunResponse)(nil),                                           // 114: mgmt.v1alpha1.TerminateJobRunResponse
	(*GetJobRunLogsStreamRequest)(nil),                                        // 115: mgmt.v1alpha1.GetJobRunLogsStreamRequest
	(*GetJobRunLogsStreamResponse)(nil),                                       // 116: mgmt.v1alpha1.GetJobRunLogsStreamResponse
	(*SetJobWorkflowOptionsRequest)(nil),                                      // 117: mgmt.v1alpha1.SetJobWorkflowOptionsRequest
	(*SetJobWorkflowOptionsResponse)(nil),                                     // 118: mgmt.v1alpha1.SetJobWorkflowOptionsResponse
	(*SetJobSyncOptionsRequest)(nil),                                          // 119: mgmt.v1alpha1.SetJobSyncOptionsRequest
	(*SetJobSyncOptionsResponse)(nil),                                         // 120: mgmt.v1alpha1.SetJobSyncOptionsResponse
	(*ValidateJobMappingsRequest)(nil),                                        // 121: mgmt.v1alpha1.ValidateJobMappingsRequest
	(*ColumnError)(nil),                                                       // 122: mgmt.v1alpha1.ColumnError
	(*DatabaseError)(nil),                                                     // 123: mgmt.v1alpha1.DatabaseError
	(*ValidateJobMappingsResponse)(nil),                                       // 124: mgmt.v1alpha1.ValidateJobMappingsResponse
	(*VirtualForeignKey)(nil),                                                 // 125: mgmt.v1alpha1.VirtualForeignKey
	(*VirtualForeignConstraint)(nil),                                          // 126: mgmt.v1alpha1.VirtualForeignConstraint
	(*RunContextKey)(nil),                                                     // 127: mgmt.v1alpha1.RunContextKey
	(*GetRunContextRequest)(nil),                                              // 128: mgmt.v1alpha1.GetRunContextRequest
	(*GetRunContextResponse)(nil),                                             // 129: mgmt.v1alpha1.GetRunContextResponse
	(*SetRunContextRequest)(nil),                                              // 130: mgmt.v1alpha1.SetRunContextRequest
	(*SetRunContextResponse)(nil),                                             // 131: mgmt.v1alpha1.SetRunContextResponse
	(*SetRunContextsRequest)(nil),                                             // 132: mgmt.v1alpha1.SetRunContextsRequest
	(*SetRunContextsResponse)(nil),                                            // 133: mgmt.v1alpha1.SetRunContextsResponse
	(*JobHook)(nil),                                                           // 134: mgmt.v1alpha1.JobHook
	(*NewJobHook)(nil),                                                        // 135: mgmt.v1alpha1.NewJobHook
	(*JobHookConfig)(nil),                                                     // 136: mgmt.v1alpha1.JobHookConfig
	(*JobHookTimingPreSync)(nil),                                              // 137: mgmt.v1alpha1.JobHookTimingPreSync
	(*JobHookTimingPostSync)(nil),                                             // 138: mgmt.v1alpha1.JobHookTimingPostSync
	(*GetJobHooksRequest)(nil),                                                // 139: mgmt.v1alpha1.GetJobHooksRequest
	(*GetJobHooksResponse)(nil),                                               // 140: mgmt.v1alpha1.GetJobHooksResponse
	(*GetJobHookRequest)(nil),                                                 // 141: mgmt.v1alpha1.GetJobHookRequest
	(*GetJobHookResponse)(nil),                                                // 142: mgmt.v1alpha1.GetJobHookResponse
	(*CreateJobHookRequest)(nil),                                              // 143: mgmt.v1alpha1.CreateJobHookRequest
	(*CreateJobHookResponse)(nil),                                             // 144: mgmt.v1alpha1.CreateJobHookResponse
	(*DeleteJobHookRequest)(nil),                                              // 145: mgmt.v1alpha1.DeleteJobHookRequest
	(*DeleteJobHookResponse)(nil),                                             // 146: mgmt.v1alpha1.DeleteJobHookResponse
	(*IsJobHookNameAvailableRequest)(nil),                                     // 147: mgmt.v1alpha1.IsJobHookNameAvailableRequest
	(*IsJobHookNameAvailableResponse)(nil),                                    // 148: mgmt.v1alpha1.IsJobHookNameAvailableResponse
	(*UpdateJobHookRequest)(nil),                                              // 149: mgmt.v1alpha1.UpdateJobHookRequest
	(*UpdateJobHookResponse)(nil),                                             // 150: mgmt.v1alpha1.UpdateJobHookResponse
	(*SetJobHookEnabledRequest)(nil),                                          // 151: mgmt.v1alpha1.SetJobHookEnabledRequest
	(*SetJobHookEnabledResponse)(nil),                                         // 152: mgmt.v1alpha1.SetJobHookEnabledResponse
	(*GetActiveJobHooksByTimingRequest)(nil),                                  // 153: mgmt.v1alpha1.GetActiveJobHooksByTimingRequest
	(*GetActiveJobHooksByTimingResponse)(nil),                                 // 154: mgmt.v1alpha1.GetActiveJobHooksByTimingResponse
	(*PostgresSourceConnectionOptions_NewColumnAdditionStrategy)(nil),         // 155: mgmt.v1alpha1.PostgresSourceConnectionOptions.NewColumnAdditionStrategy
	(*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob)(nil), // 156: mgmt.v1alpha1.PostgresSourceConnectionOptions.NewColumnAdditionStrategy.HaltJob
	(*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap)(nil), // 157: mgmt.v1alpha1.PostgresSourceConnectionOptions.NewColumnAdditionStrategy.AutoMap
	(*JobHookConfig_JobSqlHook)(nil),                                          // 158: mgmt.v1alpha1.JobHookConfig.JobSqlHook
	(*JobHookConfig_JobSqlHook_Timing)(nil),                                   // 159: mgmt.v1alpha1.JobHookConfig.JobSqlHook.Timing
	(TransformerSource)(0),                                                    // 160: mgmt.v1alpha1.TransformerSource
	(*TransformerConfig)(nil),                                                 // 161: mgmt.v1alpha1.TransformerConfig
	(*timestamppb.Timestamp)(nil),                                             // 162: google.protobuf.Timestamp
}
var file_mgmt_v1alpha1_job_proto_depIdxs = []int32{
	89,  // 0: mgmt.v1alpha1.GetJobsResponse.jobs:type_name -> mgmt.v1alpha1.Job
	10,  // 1: mgmt.v1alpha1.JobSource.options:type_name -> mgmt.v1alpha1.JobSourceOptions
	23,  // 2: mgmt.v1alpha1.JobSourceOptions.postgres:type_name -> mgmt.v1alpha1.PostgresSourceConnectionOptions
	32,  // 3: mgmt.v1alpha1.JobSourceOptions.aws_s3:type_name -> mgmt.v1alpha1.AwsS3SourceConnectionOptions
	26,  // 4: mgmt.v1alpha1.JobSourceOptions.mysql:type_name -> mgmt.v1alpha1.MysqlSourceConnectionOptions
	16,  // 5: mgmt.v1alpha1.JobSourceOptions.generate:type_name -> mgmt.v1alpha1.GenerateSourceOptions
	13,  // 6: mgmt.v1alpha1.JobSourceOptions.ai_generate:type_name -> mgmt.v1alpha1.AiGenerateSourceOptions
	19,  // 7: mgmt.v1alpha1.JobSourceOptions.mongodb:type_name -> mgmt.v1alpha1.MongoDBSourceConnectionOptions
	20,  // 8: mgmt.v1alpha1.JobSourceOptions.dynamodb:type_name -> mgmt.v1alpha1.DynamoDBSourceConnectionOptions
	29,  // 9: mgmt.v1alpha1.JobSourceOptions.mssql:type_name -> mgmt.v1alpha1.MssqlSourceConnectionOptions
	33,  // 10: mgmt.v1alpha1.CreateJobDestination.options:type_name -> mgmt.v1alpha1.JobDestinationOptions
	33,  // 11: mgmt.v1alpha1.JobDestination.options:type_name -> mgmt.v1alpha1.JobDestinationOptions
	14,  // 12: mgmt.v1alpha1.AiGenerateSourceOptions.schemas:type_name -> mgmt.v1alpha1.AiGenerateSourceSchemaOption
	15,  // 13: mgmt.v1alpha1.AiGenerateSourceSchemaOption.tables:type_name -> mgmt.v1alpha1.AiGenerateSourceTableOption
	17,  // 14: mgmt.v1alpha1.GenerateSourceOptions.schemas:type_name -> mgmt.v1alpha1.GenerateSourceSchemaOption
	18,  // 15: mgmt.v1alpha1.GenerateSourceSchemaOption.tables:type_name -> mgmt.v1alpha1.GenerateSourceTableOption
	22,  // 16: mgmt.v1alpha1.DynamoDBSourceConnectionOptions.tables:type_name -> mgmt.v1alpha1.DynamoDBSourceTableOption
	21,  // 17: mgmt.v1alpha1.DynamoDBSourceConnectionOptions.unmapped_transforms:type_name -> mgmt.v1alpha1.DynamoDBSourceUnmappedTransformConfig
	54,  // 18: mgmt.v1alpha1.DynamoDBSourceUnmappedTransformConfig.b:type_name -> mgmt.v1alpha1.JobMappingTransformer
	54,  // 19: mgmt.v1alpha1.DynamoDBSourceUnmappedTransformConfig.boolean:type_name -> mgmt.v1alpha1.JobMappingTransformer
	54,  // 20: mgmt.v1alpha1.DynamoDBSourceUnmappedTransformConfig.n:type_name -> mgmt.v1alpha1.JobMappingTransformer
	54,  // 21: mgmt.v1alpha1.DynamoDBSourceUnmappedTransformConfig.s:type_name -> mgmt.v1alpha1.JobMappingTransformer
	24,  // 22: mgmt.v1alpha1.PostgresSourceConnectionOptions.schemas:type_name -> mgmt.v1alpha1.PostgresSourceSchemaOption
	155, // 23: mgmt.v1alpha1.PostgresSourceConnectionOptions.new_column_addition_strategy:type_name -> mgmt.v1alpha1.PostgresSourceConnectionOptions.NewColumnAdditionStrategy
	25,  // 24: mgmt.v1alpha1.PostgresSourceSchemaOption.tables:type_name -> mgmt.v1alpha1.PostgresSourceTableOption
	27,  // 25: mgmt.v1alpha1.MysqlSourceConnectionOptions.schemas:type_name -> mgmt.v1alpha1.MysqlSourceSchemaOption
	28,  // 26: mgmt.v1alpha1.MysqlSourceSchemaOption.tables:type_name -> mgmt.v1alpha1.MysqlSourceTableOption
	30,  // 27: mgmt.v1alpha1.MssqlSourceConnectionOptions.schemas:type_name -> mgmt.v1alpha1.MssqlSourceSchemaOption
	31,  // 28: mgmt.v1alpha1.MssqlSourceSchemaOption.tables:type_name -> mgmt.v1alpha1.MssqlSourceTableOption
	38,  // 29: mgmt.v1alpha1.JobDestinationOptions.postgres_options:type_name -> mgmt.v1alpha1.PostgresDestinationConnectionOptions
	47,  // 30: mgmt.v1alpha1.JobDestinationOptions.aws_s3_options:type_name -> mgmt.v1alpha1.AwsS3DestinationConnectionOptions
	41,  // 31: mgmt.v1alpha1.JobDestinationOptions.mysql_options:type_name -> mgmt.v1alpha1.MysqlDestinationConnectionOptions
	34,  // 32: mgmt.v1alpha1.JobDestinationOptions.mongodb_options:type_name -> mgmt.v1alpha1.MongoDBDestinationConnectionOptions
	35,  // 33: mgmt.v1alpha1.JobDestinationOptions.gcp_cloudstorage_options:type_name -> mgmt.v1alpha1.GcpCloudStorageDestinationConnectionOptions
	36,  // 34: mgmt.v1alpha1.JobDestinationOptions.dynamodb_options:type_name -> mgmt.v1alpha1.DynamoDBDestinationConnectionOptions
	44,  // 35: mgmt.v1alpha1.JobDestinationOptions.mssql_options:type_name -> mgmt.v1alpha1.MssqlDestinationConnectionOptions
	37,  // 36: mgmt.v1alpha1.DynamoDBDestinationConnectionOptions.table_mappings:type_name -> mgmt.v1alpha1.DynamoDBDestinationTableMapping
	40,  // 37: mgmt.v1alpha1.PostgresDestinationConnectionOptions.truncate_table:type_name -> mgmt.v1alpha1.PostgresTruncateTableConfig
	39,  // 38: mgmt.v1alpha1.PostgresDestinationConnectionOptions.on_conflict:type_name -> mgmt.v1alpha1.PostgresOnConflictConfig
	48,  // 39: mgmt.v1alpha1.PostgresDestinationConnectionOptions.batch:type_name -> mgmt.v1alpha1.BatchConfig
	42,  // 40: mgmt.v1alpha1.MysqlDestinationConnectionOptions.truncate_table:type_name -> mgmt.v1alpha1.MysqlTruncateTableConfig
	43,  // 41: mgmt.v1alpha1.MysqlDestinationConnectionOptions.on_conflict:type_name -> mgmt.v1alpha1.MysqlOnConflictConfig
	48,  // 42: mgmt.v1alpha1.MysqlDestinationConnectionOptions.batch:type_name -> mgmt.v1alpha1.BatchConfig
	45,  // 43: mgmt.v1alpha1.MssqlDestinationConnectionOptions.truncate_table:type_name -> mgmt.v1alpha1.MssqlTruncateTableConfig
	46,  // 44: mgmt.v1alpha1.MssqlDestinationConnectionOptions.on_conflict:type_name -> mgmt.v1alpha1.MssqlOnConflictConfig
	48,  // 45: mgmt.v1alpha1.MssqlDestinationConnectionOptions.batch:type_name -> mgmt.v1alpha1.BatchConfig
	5,   // 46: mgmt.v1alpha1.AwsS3DestinationConnectionOptions.storage_class:type_name -> mgmt.v1alpha1.AwsS3DestinationConnectionOptions.StorageClass
	48,  // 47: mgmt.v1alpha1.AwsS3DestinationConnectionOptions.batch:type_name -> mgmt.v1alpha1.BatchConfig
	55,  // 48: mgmt.v1alpha1.CreateJobRequest.mappings:type_name -> mgmt.v1alpha1.JobMapping
	9,   // 49: mgmt.v1alpha1.CreateJobRequest.source:type_name -> mgmt.v1alpha1.JobSource
	11,  // 50: mgmt.v1alpha1.CreateJobRequest.destinations:type_name -> mgmt.v1alpha1.CreateJobDestination
	50,  // 51: mgmt.v1alpha1.CreateJobRequest.workflow_options:type_name -> mgmt.v1alpha1.WorkflowOptions
	51,  // 52: mgmt.v1alpha1.CreateJobRequest.sync_options:type_name -> mgmt.v1alpha1.ActivityOptions
	126, // 53: mgmt.v1alpha1.CreateJobRequest.virtual_foreign_keys:type_name -> mgmt.v1alpha1.VirtualForeignConstraint
	52,  // 54: mgmt.v1alpha1.ActivityOptions.retry_policy:type_name -> mgmt.v1alpha1.RetryPolicy
	89,  // 55: mgmt.v1alpha1.CreateJobResponse.job:type_name -> mgmt.v1alpha1.Job
	160, // 56: mgmt.v1alpha1.JobMappingTransformer.source:type_name -> mgmt.v1alpha1.TransformerSource
	161, // 57: mgmt.v1alpha1.JobMappingTransformer.config:type_name -> mgmt.v1alpha1.TransformerConfig
	54,  // 58: mgmt.v1alpha1.JobMapping.transformer:type_name -> mgmt.v1alpha1.JobMappingTransformer
	89,  // 59: mgmt.v1alpha1.GetJobResponse.job:type_name -> mgmt.v1alpha1.Job
	89,  // 60: mgmt.v1alpha1.UpdateJobScheduleResponse.job:type_name -> mgmt.v1alpha1.Job
	89,  // 61: mgmt.v1alpha1.PauseJobResponse.job:type_name -> mgmt.v1alpha1.Job
	9,   // 62: mgmt.v1alpha1.UpdateJobSourceConnectionRequest.source:type_name -> mgmt.v1alpha1.JobSource
	55,  // 63: mgmt.v1alpha1.UpdateJobSourceConnectionRequest.mappings:type_name -> mgmt.v1alpha1.JobMapping
	126, // 64: mgmt.v1alpha1.UpdateJobSourceConnectionRequest.virtual_foreign_keys:type_name -> mgmt.v1alpha1.VirtualForeignConstraint
	89,  // 65: mgmt.v1alpha1.UpdateJobSourceConnectionResponse.job:type_name -> mgmt.v1alpha1.Job
	24,  // 66: mgmt.v1alpha1.PostgresSourceSchemaSubset.postgres_schemas:type_name -> mgmt.v1alpha1.PostgresSourceSchemaOption
	27,  // 67: mgmt.v1alpha1.MysqlSourceSchemaSubset.mysql_schemas:type_name -> mgmt.v1alpha1.MysqlSourceSchemaOption
	22,  // 68: mgmt.v1alpha1.DynamoDBSourceSchemaSubset.tables:type_name -> mgmt.v1alpha1.DynamoDBSourceTableOption
	30,  // 69: mgmt.v1alpha1.MssqlSourceSchemaSubset.mssql_schemas:type_name -> mgmt.v1alpha1.MssqlSourceSchemaOption
	64,  // 70: mgmt.v1alpha1.JobSourceSqlSubetSchemas.postgres_subset:type_name -> mgmt.v1alpha1.PostgresSourceSchemaSubset
	65,  // 71: mgmt.v1alpha1.JobSourceSqlSubetSchemas.mysql_subset:type_name -> mgmt.v1alpha1.MysqlSourceSchemaSubset
	66,  // 72: mgmt.v1alpha1.JobSourceSqlSubetSchemas.dynamodb_subset:type_name -> mgmt.v1alpha1.DynamoDBSourceSchemaSubset
	67,  // 73: mgmt.v1alpha1.JobSourceSqlSubetSchemas.mssql_subset:type_name -> mgmt.v1alpha1.MssqlSourceSchemaSubset
	68,  // 74: mgmt.v1alpha1.SetJobSourceSqlConnectionSubsetsRequest.schemas:type_name -> mgmt.v1alpha1.JobSourceSqlSubetSchemas
	89,  // 75: mgmt.v1alpha1.SetJobSourceSqlConnectionSubsetsResponse.job:type_name -> mgmt.v1alpha1.Job
	33,  // 76: mgmt.v1alpha1.UpdateJobDestinationConnectionRequest.options:type_name -> mgmt.v1alpha1.JobDestinationOptions
	89,  // 77: mgmt.v1alpha1.UpdateJobDestinationConnectionResponse.job:type_name -> mgmt.v1alpha1.Job
	11,  // 78: mgmt.v1alpha1.CreateJobDestinationConnectionsRequest.destinations:type_name -> mgmt.v1alpha1.CreateJobDestination
	89,  // 79: mgmt.v1alpha1.CreateJobDestinationConnectionsResponse.job:type_name -> mgmt.v1alpha1.Job
	103, // 80: mgmt.v1alpha1.GetJobRunsResponse.job_runs:type_name -> mgmt.v1alpha1.JobRun
	103, // 81: mgmt.v1alpha1.GetJobRunResponse.job_run:type_name -> mgmt.v1alpha1.JobRun
	162, // 82: mgmt.v1alpha1.Job.created_at:type_name -> google.protobuf.Timestamp
	162, // 83: mgmt.v1alpha1.Job.updated_at:type_name -> google.protobuf.Timestamp
	9,   // 84: mgmt.v1alpha1.Job.source:type_name -> mgmt.v1alpha1.JobSource
	12,  // 85: mgmt.v1alpha1.Job.destinations:type_name -> mgmt.v1alpha1.JobDestination
	55,  // 86: mgmt.v1alpha1.Job.mappings:type_name -> mgmt.v1alpha1.JobMapping
	51,  // 87: mgmt.v1alpha1.Job.sync_options:type_name -> mgmt.v1alpha1.ActivityOptions
	50,  // 88: mgmt.v1alpha1.Job.workflow_options:type_name -> mgmt.v1alpha1.WorkflowOptions
	126, // 89: mgmt.v1alpha1.Job.virtual_foreign_keys:type_name -> mgmt.v1alpha1.VirtualForeignConstraint
	162, // 90: mgmt.v1alpha1.JobRecentRun.start_time:type_name -> google.protobuf.Timestamp
	90,  // 91: mgmt.v1alpha1.GetJobRecentRunsResponse.recent_runs:type_name -> mgmt.v1alpha1.JobRecentRun
	162, // 92: mgmt.v1alpha1.JobNextRuns.next_run_times:type_name -> google.protobuf.Timestamp
	93,  // 93: mgmt.v1alpha1.GetJobNextRunsResponse.next_runs:type_name -> mgmt.v1alpha1.JobNextRuns
	0,   // 94: mgmt.v1alpha1.GetJobStatusResponse.status:type_name -> mgmt.v1alpha1.JobStatus
	0,   // 95: mgmt.v1alpha1.JobStatusRecord.status:type_name -> mgmt.v1alpha1.JobStatus
	98,  // 96: mgmt.v1alpha1.GetJobStatusesResponse.statuses:type_name -> mgmt.v1alpha1.JobStatusRecord
	1,   // 97: mgmt.v1alpha1.PendingActivity.status:type_name -> mgmt.v1alpha1.ActivityStatus
	101, // 98: mgmt.v1alpha1.PendingActivity.last_failure:type_name -> mgmt.v1alpha1.ActivityFailure
	2,   // 99: mgmt.v1alpha1.JobRun.status:type_name -> mgmt.v1alpha1.JobRunStatus
	162, // 100: mgmt.v1alpha1.JobRun.started_at:type_name -> google.protobuf.Timestamp
	162, // 101: mgmt.v1alpha1.JobRun.completed_at:type_name -> google.protobuf.Timestamp
	102, // 102: mgmt.v1alpha1.JobRun.pending_activities:type_name -> mgmt.v1alpha1.PendingActivity
	162, // 103: mgmt.v1alpha1.JobRunEventTask.event_time:type_name -> google.protobuf.Timestamp
	104, // 104: mgmt.v1alpha1.JobRunEventTask.error:type_name -> mgmt.v1alpha1.JobRunEventTaskError
	106, // 105: mgmt.v1alpha1.JobRunEventMetadata.sync_metadata:type_name -> mgmt.v1alpha1.JobRunSyncMetadata
	162, // 106: mgmt.v1alpha1.JobRunEvent.start_time:type_name -> google.protobuf.Timestamp
	162, // 107: mgmt.v1alpha1.JobRunEvent.close_time:type_name -> google.protobuf.Timestamp
	107, // 108: mgmt.v1alpha1.JobRunEvent.metadata:type_name -> mgmt.v1alpha1.JobRunEventMetadata
	105, // 109: mgmt.v1alpha1.JobRunEvent.tasks:type_name -> mgmt.v1alpha1.JobRunEventTask
	108, // 110: mgmt.v1alpha1.GetJobRunEventsResponse.events:type_name -> mgmt.v1alpha1.JobRunEvent
	3,   // 111: mgmt.v1alpha1.GetJobRunLogsStreamRequest.window:type_name -> mgmt.v1alpha1.LogWindow
	4,   // 112: mgmt.v1alpha1.GetJobRunLogsStreamRequest.log_levels:type_name -> mgmt.v1alpha1.LogLevel
	162, // 113: mgmt.v1alpha1.GetJobRunLogsStreamResponse.timestamp:type_name -> google.protobuf.Timestamp
	50,  // 114: mgmt.v1alpha1.SetJobWorkflowOptionsRequest.worfklow_options:type_name -> mgmt.v1alpha1.WorkflowOptions
	89,  // 115: mgmt.v1alpha1.SetJobWorkflowOptionsResponse.job:type_name -> mgmt.v1alpha1.Job
	51,  // 116: mgmt.v1alpha1.SetJobSyncOptionsRequest.sync_options:type_name -> mgmt.v1alpha1.ActivityOptions
	89,  // 117: mgmt.v1alpha1.SetJobSyncOptionsResponse.job:type_name -> mgmt.v1alpha1.Job
	55,  // 118: mgmt.v1alpha1.ValidateJobMappingsRequest.mappings:type_name -> mgmt.v1alpha1.JobMapping
	126, // 119: mgmt.v1alpha1.ValidateJobMappingsRequest.virtual_foreign_keys:type_name -> mgmt.v1alpha1.VirtualForeignConstraint
	122, // 120: mgmt.v1alpha1.ValidateJobMappingsResponse.column_errors:type_name -> mgmt.v1alpha1.ColumnError
	123, // 121: mgmt.v1alpha1.ValidateJobMappingsResponse.database_errors:type_name -> mgmt.v1alpha1.DatabaseError
	125, // 122: mgmt.v1alpha1.VirtualForeignConstraint.foreign_key:type_name -> mgmt.v1alpha1.VirtualForeignKey
	127, // 123: mgmt.v1alpha1.GetRunContextRequest.id:type_name -> mgmt.v1alpha1.RunContextKey
	127, // 124: mgmt.v1alpha1.SetRunContextRequest.id:type_name -> mgmt.v1alpha1.RunContextKey
	127, // 125: mgmt.v1alpha1.SetRunContextsRequest.id:type_name -> mgmt.v1alpha1.RunContextKey
	136, // 126: mgmt.v1alpha1.JobHook.config:type_name -> mgmt.v1alpha1.JobHookConfig
	162, // 127: mgmt.v1alpha1.JobHook.created_at:type_name -> google.protobuf.Timestamp
	162, // 128: mgmt.v1alpha1.JobHook.updated_at:type_name -> google.protobuf.Timestamp
	136, // 129: mgmt.v1alpha1.NewJobHook.config:type_name -> mgmt.v1alpha1.JobHookConfig
	158, // 130: mgmt.v1alpha1.JobHookConfig.sql:type_name -> mgmt.v1alpha1.JobHookConfig.JobSqlHook
	134, // 131: mgmt.v1alpha1.GetJobHooksResponse.hooks:type_name -> mgmt.v1alpha1.JobHook
	134, // 132: mgmt.v1alpha1.GetJobHookResponse.hook:type_name -> mgmt.v1alpha1.JobHook
	135, // 133: mgmt.v1alpha1.CreateJobHookRequest.hook:type_name -> mgmt.v1alpha1.NewJobHook
	134, // 134: mgmt.v1alpha1.CreateJobHookResponse.hook:type_name -> mgmt.v1alpha1.JobHook
	136, // 135: mgmt.v1alpha1.UpdateJobHookRequest.config:type_name -> mgmt.v1alpha1.JobHookConfig
	134, // 136: mgmt.v1alpha1.UpdateJobHookResponse.hook:type_name -> mgmt.v1alpha1.JobHook
	134, // 137: mgmt.v1alpha1.SetJobHookEnabledResponse.hook:type_name -> mgmt.v1alpha1.JobHook
	6,   // 138: mgmt.v1alpha1.GetActiveJobHooksByTimingRequest.timing:type_name -> mgmt.v1alpha1.GetActiveJobHooksByTimingRequest.Timing
	134, // 139: mgmt.v1alpha1.GetActiveJobHooksByTimingResponse.hooks:type_name -> mgmt.v1alpha1.JobHook
	156, // 140: mgmt.v1alpha1.PostgresSourceConnectionOptions.NewColumnAdditionStrategy.halt_job:type_name -> mgmt.v1alpha1.PostgresSourceConnectionOptions.NewColumnAdditionStrategy.HaltJob
	157, // 141: mgmt.v1alpha1.PostgresSourceConnectionOptions.NewColumnAdditionStrategy.auto_map:type_name -> mgmt.v1alpha1.PostgresSourceConnectionOptions.NewColumnAdditionStrategy.AutoMap
	159, // 142: mgmt.v1alpha1.JobHookConfig.JobSqlHook.timing:type_name -> mgmt.v1alpha1.JobHookConfig.JobSqlHook.Timing
	137, // 143: mgmt.v1alpha1.JobHookConfig.JobSqlHook.Timing.pre_sync:type_name -> mgmt.v1alpha1.JobHookTimingPreSync
	138, // 144: mgmt.v1alpha1.JobHookConfig.JobSqlHook.Timing.post_sync:type_name -> mgmt.v1alpha1.JobHookTimingPostSync
	7,   // 145: mgmt.v1alpha1.JobService.GetJobs:input_type -> mgmt.v1alpha1.GetJobsRequest
	56,  // 146: mgmt.v1alpha1.JobService.GetJob:input_type -> mgmt.v1alpha1.GetJobRequest
	49,  // 147: mgmt.v1alpha1.JobService.CreateJob:input_type -> mgmt.v1alpha1.CreateJobRequest
	77,  // 148: mgmt.v1alpha1.JobService.DeleteJob:input_type -> mgmt.v1alpha1.DeleteJobRequest
	79,  // 149: mgmt.v1alpha1.JobService.IsJobNameAvailable:input_type -> mgmt.v1alpha1.IsJobNameAvailableRequest
	58,  // 150: mgmt.v1alpha1.JobService.UpdateJobSchedule:input_type -> mgmt.v1alpha1.UpdateJobScheduleRequest
	62,  // 151: mgmt.v1alpha1.JobService.UpdateJobSourceConnection:input_type -> mgmt.v1alpha1.UpdateJobSourceConnectionRequest
	69,  // 152: mgmt.v1alpha1.JobService.SetJobSourceSqlConnectionSubsets:input_type -> mgmt.v1alpha1.SetJobSourceSqlConnectionSubsetsRequest
	71,  // 153: mgmt.v1alpha1.JobService.UpdateJobDestinationConnection:input_type -> mgmt.v1alpha1.UpdateJobDestinationConnectionRequest
	73,  // 154: mgmt.v1alpha1.JobService.DeleteJobDestinationConnection:input_type -> mgmt.v1alpha1.DeleteJobDestinationConnectionRequest
	75,  // 155: mgmt.v1alpha1.JobService.CreateJobDestinationConnections:input_type -> mgmt.v1alpha1.CreateJobDestinationConnectionsRequest
	60,  // 156: mgmt.v1alpha1.JobService.PauseJob:input_type -> mgmt.v1alpha1.PauseJobRequest
	91,  // 157: mgmt.v1alpha1.JobService.GetJobRecentRuns:input_type -> mgmt.v1alpha1.GetJobRecentRunsRequest
	94,  // 158: mgmt.v1alpha1.JobService.GetJobNextRuns:input_type -> mgmt.v1alpha1.GetJobNextRunsRequest
	96,  // 159: mgmt.v1alpha1.JobService.GetJobStatus:input_type -> mgmt.v1alpha1.GetJobStatusRequest
	99,  // 160: mgmt.v1alpha1.JobService.GetJobStatuses:input_type -> mgmt.v1alpha1.GetJobStatusesRequest
	81,  // 161: mgmt.v1alpha1.JobService.GetJobRuns:input_type -> mgmt.v1alpha1.GetJobRunsRequest
	109, // 162: mgmt.v1alpha1.JobService.GetJobRunEvents:input_type -> mgmt.v1alpha1.GetJobRunEventsRequest
	83,  // 163: mgmt.v1alpha1.JobService.GetJobRun:input_type -> mgmt.v1alpha1.GetJobRunRequest
	111, // 164: mgmt.v1alpha1.JobService.DeleteJobRun:input_type -> mgmt.v1alpha1.DeleteJobRunRequest
	85,  // 165: mgmt.v1alpha1.JobService.CreateJobRun:input_type -> mgmt.v1alpha1.CreateJobRunRequest
	87,  // 166: mgmt.v1alpha1.JobService.CancelJobRun:input_type -> mgmt.v1alpha1.CancelJobRunRequest
	113, // 167: mgmt.v1alpha1.JobService.TerminateJobRun:input_type -> mgmt.v1alpha1.TerminateJobRunRequest
	115, // 168: mgmt.v1alpha1.JobService.GetJobRunLogsStream:input_type -> mgmt.v1alpha1.GetJobRunLogsStreamRequest
	117, // 169: mgmt.v1alpha1.JobService.SetJobWorkflowOptions:input_type -> mgmt.v1alpha1.SetJobWorkflowOptionsRequest
	119, // 170: mgmt.v1alpha1.JobService.SetJobSyncOptions:input_type -> mgmt.v1alpha1.SetJobSyncOptionsRequest
	121, // 171: mgmt.v1alpha1.JobService.ValidateJobMappings:input_type -> mgmt.v1alpha1.ValidateJobMappingsRequest
	128, // 172: mgmt.v1alpha1.JobService.GetRunContext:input_type -> mgmt.v1alpha1.GetRunContextRequest
	130, // 173: mgmt.v1alpha1.JobService.SetRunContext:input_type -> mgmt.v1alpha1.SetRunContextRequest
	132, // 174: mgmt.v1alpha1.JobService.SetRunContexts:input_type -> mgmt.v1alpha1.SetRunContextsRequest
	139, // 175: mgmt.v1alpha1.JobService.GetJobHooks:input_type -> mgmt.v1alpha1.GetJobHooksRequest
	141, // 176: mgmt.v1alpha1.JobService.GetJobHook:input_type -> mgmt.v1alpha1.GetJobHookRequest
	143, // 177: mgmt.v1alpha1.JobService.CreateJobHook:input_type -> mgmt.v1alpha1.CreateJobHookRequest
	145, // 178: mgmt.v1alpha1.JobService.DeleteJobHook:input_type -> mgmt.v1alpha1.DeleteJobHookRequest
	147, // 179: mgmt.v1alpha1.JobService.IsJobHookNameAvailable:input_type -> mgmt.v1alpha1.IsJobHookNameAvailableRequest
	149, // 180: mgmt.v1alpha1.JobService.UpdateJobHook:input_type -> mgmt.v1alpha1.UpdateJobHookRequest
	151, // 181: mgmt.v1alpha1.JobService.SetJobHookEnabled:input_type -> mgmt.v1alpha1.SetJobHookEnabledRequest
	153, // 182: mgmt.v1alpha1.JobService.GetActiveJobHooksByTiming:input_type -> mgmt.v1alpha1.GetActiveJobHooksByTimingRequest
	8,   // 183: mgmt.v1alpha1.JobService.GetJobs:output_type -> mgmt.v1alpha1.GetJobsResponse
	57,  // 184: mgmt.v1alpha1.JobService.GetJob:output_type -> mgmt.v1alpha1.GetJobResponse
	53,  // 185: mgmt.v1alpha1.JobService.CreateJob:output_type -> mgmt.v1alpha1.CreateJobResponse
	78,  // 186: mgmt.v1alpha1.JobService.DeleteJob:output_type -> mgmt.v1alpha1.DeleteJobResponse
	80,  // 187: mgmt.v1alpha1.JobService.IsJobNameAvailable:output_type -> mgmt.v1alpha1.IsJobNameAvailableResponse
	59,  // 188: mgmt.v1alpha1.JobService.UpdateJobSchedule:output_type -> mgmt.v1alpha1.UpdateJobScheduleResponse
	63,  // 189: mgmt.v1alpha1.JobService.UpdateJobSourceConnection:output_type -> mgmt.v1alpha1.UpdateJobSourceConnectionResponse
	70,  // 190: mgmt.v1alpha1.JobService.SetJobSourceSqlConnectionSubsets:output_type -> mgmt.v1alpha1.SetJobSourceSqlConnectionSubsetsResponse
	72,  // 191: mgmt.v1alpha1.JobService.UpdateJobDestinationConnection:output_type -> mgmt.v1alpha1.UpdateJobDestinationConnectionResponse
	74,  // 192: mgmt.v1alpha1.JobService.DeleteJobDestinationConnection:output_type -> mgmt.v1alpha1.DeleteJobDestinationConnectionResponse
	76,  // 193: mgmt.v1alpha1.JobService.CreateJobDestinationConnections:output_type -> mgmt.v1alpha1.CreateJobDestinationConnectionsResponse
	61,  // 194: mgmt.v1alpha1.JobService.PauseJob:output_type -> mgmt.v1alpha1.PauseJobResponse
	92,  // 195: mgmt.v1alpha1.JobService.GetJobRecentRuns:output_type -> mgmt.v1alpha1.GetJobRecentRunsResponse
	95,  // 196: mgmt.v1alpha1.JobService.GetJobNextRuns:output_type -> mgmt.v1alpha1.GetJobNextRunsResponse
	97,  // 197: mgmt.v1alpha1.JobService.GetJobStatus:output_type -> mgmt.v1alpha1.GetJobStatusResponse
	100, // 198: mgmt.v1alpha1.JobService.GetJobStatuses:output_type -> mgmt.v1alpha1.GetJobStatusesResponse
	82,  // 199: mgmt.v1alpha1.JobService.GetJobRuns:output_type -> mgmt.v1alpha1.GetJobRunsResponse
	110, // 200: mgmt.v1alpha1.JobService.GetJobRunEvents:output_type -> mgmt.v1alpha1.GetJobRunEventsResponse
	84,  // 201: mgmt.v1alpha1.JobService.GetJobRun:output_type -> mgmt.v1alpha1.GetJobRunResponse
	112, // 202: mgmt.v1alpha1.JobService.DeleteJobRun:output_type -> mgmt.v1alpha1.DeleteJobRunResponse
	86,  // 203: mgmt.v1alpha1.JobService.CreateJobRun:output_type -> mgmt.v1alpha1.CreateJobRunResponse
	88,  // 204: mgmt.v1alpha1.JobService.CancelJobRun:output_type -> mgmt.v1alpha1.CancelJobRunResponse
	114, // 205: mgmt.v1alpha1.JobService.TerminateJobRun:output_type -> mgmt.v1alpha1.TerminateJobRunResponse
	116, // 206: mgmt.v1alpha1.JobService.GetJobRunLogsStream:output_type -> mgmt.v1alpha1.GetJobRunLogsStreamResponse
	118, // 207: mgmt.v1alpha1.JobService.SetJobWorkflowOptions:output_type -> mgmt.v1alpha1.SetJobWorkflowOptionsResponse
	120, // 208: mgmt.v1alpha1.JobService.SetJobSyncOptions:output_type -> mgmt.v1alpha1.SetJobSyncOptionsResponse
	124, // 209: mgmt.v1alpha1.JobService.ValidateJobMappings:output_type -> mgmt.v1alpha1.ValidateJobMappingsResponse
	129, // 210: mgmt.v1alpha1.JobService.GetRunContext:output_type -> mgmt.v1alpha1.GetRunContextResponse
	131, // 211: mgmt.v1alpha1.JobService.SetRunContext:output_type -> mgmt.v1alpha1.SetRunContextResponse
	133, // 212: mgmt.v1alpha1.JobService.SetRunContexts:output_type -> mgmt.v1alpha1.SetRunContextsResponse
	140, // 213: mgmt.v1alpha1.JobService.GetJobHooks:output_type -> mgmt.v1alpha1.GetJobHooksResponse
	142, // 214: mgmt.v1alpha1.JobService.GetJobHook:output_type -> mgmt.v1alpha1.GetJobHookResponse
	144, // 215: mgmt.v1alpha1.JobService.CreateJobHook:output_type -> mgmt.v1alpha1.CreateJobHookResponse
	146, // 216: mgmt.v1alpha1.JobService.DeleteJobHook:output_type -> mgmt.v1alpha1.DeleteJobHookResponse
	148, // 217: mgmt.v1alpha1.JobService.IsJobHookNameAvailable:output_type -> mgmt.v1alpha1.IsJobHookNameAvailableResponse
	150, // 218: mgmt.v1alpha1.JobService.UpdateJobHook:output_type -> mgmt.v1alpha1.UpdateJobHookResponse
	152, // 219: mgmt.v1alpha1.JobService.SetJobHookEnabled:output_type -> mgmt.v1alpha1.SetJobHookEnabledResponse
	154, // 220: mgmt.v1alpha1.JobService.GetActiveJobHooksByTiming:output_type -> mgmt.v1alpha1.GetActiveJobHooksByTimingResponse
	183, // [183:221] is the sub-list for method output_type
	145, // [145:183] is the sub-list for method input_type
	145, // [145:145] is the sub-list for extension type_name
	145, // [145:145] is the sub-list for extension extendee
	0,   // [0:145] is the sub-list for field type_name
}

func init() { file_mgmt_v1alpha1_job_proto_init() }
func file_mgmt_v1alpha1_job_proto_init() {
	if File_mgmt_v1alpha1_job_proto != nil {
		return
	}
	file_mgmt_v1alpha1_transformer_proto_init()
	file_mgmt_v1alpha1_job_proto_msgTypes[3].OneofWrappers = []any{
		(*JobSourceOptions_Postgres)(nil),
		(*JobSourceOptions_AwsS3)(nil),
		(*JobSourceOptions_Mysql)(nil),
		(*JobSourceOptions_Generate)(nil),
		(*JobSourceOptions_AiGenerate)(nil),
		(*JobSourceOptions_Mongodb)(nil),
		(*JobSourceOptions_Dynamodb)(nil),
		(*JobSourceOptions_Mssql)(nil),
	}
	file_mgmt_v1alpha1_job_proto_msgTypes[6].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[9].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[15].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[16].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[18].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[21].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[24].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[26].OneofWrappers = []any{
		(*JobDestinationOptions_PostgresOptions)(nil),
		(*JobDestinationOptions_AwsS3Options)(nil),
		(*JobDestinationOptions_MysqlOptions)(nil),
		(*JobDestinationOptions_MongodbOptions)(nil),
		(*JobDestinationOptions_GcpCloudstorageOptions)(nil),
		(*JobDestinationOptions_DynamodbOptions)(nil),
		(*JobDestinationOptions_MssqlOptions)(nil),
	}
	file_mgmt_v1alpha1_job_proto_msgTypes[31].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[34].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[37].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[40].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[41].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[42].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[43].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[44].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[45].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[51].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[53].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[61].OneofWrappers = []any{
		(*JobSourceSqlSubetSchemas_PostgresSubset)(nil),
		(*JobSourceSqlSubetSchemas_MysqlSubset)(nil),
		(*JobSourceSqlSubetSchemas_DynamodbSubset)(nil),
		(*JobSourceSqlSubetSchemas_MssqlSubset)(nil),
	}
	file_mgmt_v1alpha1_job_proto_msgTypes[74].OneofWrappers = []any{
		(*GetJobRunsRequest_JobId)(nil),
		(*GetJobRunsRequest_AccountId)(nil),
	}
	file_mgmt_v1alpha1_job_proto_msgTypes[82].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[95].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[96].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[100].OneofWrappers = []any{
		(*JobRunEventMetadata_SyncMetadata)(nil),
	}
	file_mgmt_v1alpha1_job_proto_msgTypes[108].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[109].OneofWrappers = []any{}
	file_mgmt_v1alpha1_job_proto_msgTypes[129].OneofWrappers = []any{
		(*JobHookConfig_Sql)(nil),
	}
	file_mgmt_v1alpha1_job_proto_msgTypes[148].OneofWrappers = []any{
		(*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_HaltJob_)(nil),
		(*PostgresSourceConnectionOptions_NewColumnAdditionStrategy_AutoMap_)(nil),
	}
	file_mgmt_v1alpha1_job_proto_msgTypes[152].OneofWrappers = []any{
		(*JobHookConfig_JobSqlHook_Timing_PreSync)(nil),
		(*JobHookConfig_JobSqlHook_Timing_PostSync)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mgmt_v1alpha1_job_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   153,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mgmt_v1alpha1_job_proto_goTypes,
		DependencyIndexes: file_mgmt_v1alpha1_job_proto_depIdxs,
		EnumInfos:         file_mgmt_v1alpha1_job_proto_enumTypes,
		MessageInfos:      file_mgmt_v1alpha1_job_proto_msgTypes,
	}.Build()
	File_mgmt_v1alpha1_job_proto = out.File
	file_mgmt_v1alpha1_job_proto_rawDesc = nil
	file_mgmt_v1alpha1_job_proto_goTypes = nil
	file_mgmt_v1alpha1_job_proto_depIdxs = nil
}
