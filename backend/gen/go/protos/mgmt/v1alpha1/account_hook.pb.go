// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: mgmt/v1alpha1/account_hook.proto

package mgmtv1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum of all possible events that can trigger an account hook.
type AccountHookEvent int32

const (
	// If unspecified, hook will be triggered for all events.
	AccountHookEvent_ACCOUNT_HOOK_EVENT_UNSPECIFIED AccountHookEvent = 0
	// Triggered when a job run is created.
	AccountHookEvent_ACCOUNT_HOOK_EVENT_JOB_RUN_CREATED AccountHookEvent = 1
	// Triggered when a job run fails.
	AccountHookEvent_ACCOUNT_HOOK_EVENT_JOB_RUN_FAILED AccountHookEvent = 2
	// Triggered when a job run succeeds.
	AccountHookEvent_ACCOUNT_HOOK_EVENT_JOB_RUN_SUCCEEDED AccountHookEvent = 3
)

// Enum value maps for AccountHookEvent.
var (
	AccountHookEvent_name = map[int32]string{
		0: "ACCOUNT_HOOK_EVENT_UNSPECIFIED",
		1: "ACCOUNT_HOOK_EVENT_JOB_RUN_CREATED",
		2: "ACCOUNT_HOOK_EVENT_JOB_RUN_FAILED",
		3: "ACCOUNT_HOOK_EVENT_JOB_RUN_SUCCEEDED",
	}
	AccountHookEvent_value = map[string]int32{
		"ACCOUNT_HOOK_EVENT_UNSPECIFIED":       0,
		"ACCOUNT_HOOK_EVENT_JOB_RUN_CREATED":   1,
		"ACCOUNT_HOOK_EVENT_JOB_RUN_FAILED":    2,
		"ACCOUNT_HOOK_EVENT_JOB_RUN_SUCCEEDED": 3,
	}
)

func (x AccountHookEvent) Enum() *AccountHookEvent {
	p := new(AccountHookEvent)
	*p = x
	return p
}

func (x AccountHookEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountHookEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_v1alpha1_account_hook_proto_enumTypes[0].Descriptor()
}

func (AccountHookEvent) Type() protoreflect.EnumType {
	return &file_mgmt_v1alpha1_account_hook_proto_enumTypes[0]
}

func (x AccountHookEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountHookEvent.Descriptor instead.
func (AccountHookEvent) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{0}
}

type AccountHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of this hook.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the hook for display/reference.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of what this hook does.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The unique identifier of the account this hook belongs to.
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The events that will trigger this hook.
	Events []AccountHookEvent `protobuf:"varint,5,rep,packed,name=events,proto3,enum=mgmt.v1alpha1.AccountHookEvent" json:"events,omitempty"`
	// Hook-type specific configuration.
	Config *AccountHookConfig `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	// The user that created this hook.
	CreatedByUserId string `protobuf:"bytes,7,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	// The time this hook was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The user that last updated this hook.
	UpdatedByUserId string `protobuf:"bytes,9,opt,name=updated_by_user_id,json=updatedByUserId,proto3" json:"updated_by_user_id,omitempty"`
	// The last time this hook was updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Whether or not the hook is enabled.
	Enabled bool `protobuf:"varint,11,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AccountHook) Reset() {
	*x = AccountHook{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountHook) ProtoMessage() {}

func (x *AccountHook) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountHook.ProtoReflect.Descriptor instead.
func (*AccountHook) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{0}
}

func (x *AccountHook) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountHook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountHook) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AccountHook) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountHook) GetEvents() []AccountHookEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *AccountHook) GetConfig() *AccountHookConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AccountHook) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *AccountHook) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AccountHook) GetUpdatedByUserId() string {
	if x != nil {
		return x.UpdatedByUserId
	}
	return ""
}

func (x *AccountHook) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AccountHook) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type NewAccountHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the hook for display/reference.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of what this hook does.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The events that will trigger this hook.
	Events []AccountHookEvent `protobuf:"varint,3,rep,packed,name=events,proto3,enum=mgmt.v1alpha1.AccountHookEvent" json:"events,omitempty"`
	// Hook-type specific configuration.
	Config *AccountHookConfig `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// Whether or not the hook is enabled.
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *NewAccountHook) Reset() {
	*x = NewAccountHook{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewAccountHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAccountHook) ProtoMessage() {}

func (x *NewAccountHook) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAccountHook.ProtoReflect.Descriptor instead.
func (*NewAccountHook) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{1}
}

func (x *NewAccountHook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewAccountHook) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewAccountHook) GetEvents() []AccountHookEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *NewAccountHook) GetConfig() *AccountHookConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *NewAccountHook) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Hook-specific configuration
type AccountHookConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*AccountHookConfig_Webhook
	//	*AccountHookConfig_Slack
	Config isAccountHookConfig_Config `protobuf_oneof:"config"`
}

func (x *AccountHookConfig) Reset() {
	*x = AccountHookConfig{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountHookConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountHookConfig) ProtoMessage() {}

func (x *AccountHookConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountHookConfig.ProtoReflect.Descriptor instead.
func (*AccountHookConfig) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{2}
}

func (m *AccountHookConfig) GetConfig() isAccountHookConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *AccountHookConfig) GetWebhook() *AccountHookConfig_WebHook {
	if x, ok := x.GetConfig().(*AccountHookConfig_Webhook); ok {
		return x.Webhook
	}
	return nil
}

func (x *AccountHookConfig) GetSlack() *AccountHookConfig_SlackHook {
	if x, ok := x.GetConfig().(*AccountHookConfig_Slack); ok {
		return x.Slack
	}
	return nil
}

type isAccountHookConfig_Config interface {
	isAccountHookConfig_Config()
}

type AccountHookConfig_Webhook struct {
	// Webhook-based hooks
	Webhook *AccountHookConfig_WebHook `protobuf:"bytes,1,opt,name=webhook,proto3,oneof"`
}

type AccountHookConfig_Slack struct {
	// Slack-based hooks
	Slack *AccountHookConfig_SlackHook `protobuf:"bytes,2,opt,name=slack,proto3,oneof"` // Future: Discord, Teams, etc.
}

func (*AccountHookConfig_Webhook) isAccountHookConfig_Config() {}

func (*AccountHookConfig_Slack) isAccountHookConfig_Config() {}

type GetAccountHooksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account ID to retrieve hooks for.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetAccountHooksRequest) Reset() {
	*x = GetAccountHooksRequest{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountHooksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountHooksRequest) ProtoMessage() {}

func (x *GetAccountHooksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountHooksRequest.ProtoReflect.Descriptor instead.
func (*GetAccountHooksRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{3}
}

func (x *GetAccountHooksRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetAccountHooksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of account hooks.
	Hooks []*AccountHook `protobuf:"bytes,1,rep,name=hooks,proto3" json:"hooks,omitempty"`
}

func (x *GetAccountHooksResponse) Reset() {
	*x = GetAccountHooksResponse{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountHooksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountHooksResponse) ProtoMessage() {}

func (x *GetAccountHooksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountHooksResponse.ProtoReflect.Descriptor instead.
func (*GetAccountHooksResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{4}
}

func (x *GetAccountHooksResponse) GetHooks() []*AccountHook {
	if x != nil {
		return x.Hooks
	}
	return nil
}

type GetAccountHookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the hook to retrieve.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAccountHookRequest) Reset() {
	*x = GetAccountHookRequest{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountHookRequest) ProtoMessage() {}

func (x *GetAccountHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountHookRequest.ProtoReflect.Descriptor instead.
func (*GetAccountHookRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{5}
}

func (x *GetAccountHookRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAccountHookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account hook.
	Hook *AccountHook `protobuf:"bytes,1,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (x *GetAccountHookResponse) Reset() {
	*x = GetAccountHookResponse{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountHookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountHookResponse) ProtoMessage() {}

func (x *GetAccountHookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountHookResponse.ProtoReflect.Descriptor instead.
func (*GetAccountHookResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{6}
}

func (x *GetAccountHookResponse) GetHook() *AccountHook {
	if x != nil {
		return x.Hook
	}
	return nil
}

type CreateAccountHookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account ID to create the hook for.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The new account hook configuration.
	Hook *NewAccountHook `protobuf:"bytes,2,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (x *CreateAccountHookRequest) Reset() {
	*x = CreateAccountHookRequest{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccountHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountHookRequest) ProtoMessage() {}

func (x *CreateAccountHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountHookRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountHookRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{7}
}

func (x *CreateAccountHookRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateAccountHookRequest) GetHook() *NewAccountHook {
	if x != nil {
		return x.Hook
	}
	return nil
}

type CreateAccountHookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly created account hook.
	Hook *AccountHook `protobuf:"bytes,1,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (x *CreateAccountHookResponse) Reset() {
	*x = CreateAccountHookResponse{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccountHookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountHookResponse) ProtoMessage() {}

func (x *CreateAccountHookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountHookResponse.ProtoReflect.Descriptor instead.
func (*CreateAccountHookResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{8}
}

func (x *CreateAccountHookResponse) GetHook() *AccountHook {
	if x != nil {
		return x.Hook
	}
	return nil
}

type UpdateAccountHookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the hook to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the hook for display/reference.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of what this hook does.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The events that will trigger this hook.
	Events []AccountHookEvent `protobuf:"varint,4,rep,packed,name=events,proto3,enum=mgmt.v1alpha1.AccountHookEvent" json:"events,omitempty"`
	// Hook-type specific configuration.
	Config *AccountHookConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// Whether or not the hook is enabled.
	Enabled bool `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *UpdateAccountHookRequest) Reset() {
	*x = UpdateAccountHookRequest{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAccountHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountHookRequest) ProtoMessage() {}

func (x *UpdateAccountHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountHookRequest.ProtoReflect.Descriptor instead.
func (*UpdateAccountHookRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAccountHookRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateAccountHookRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAccountHookRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateAccountHookRequest) GetEvents() []AccountHookEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *UpdateAccountHookRequest) GetConfig() *AccountHookConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateAccountHookRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type UpdateAccountHookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated account hook.
	Hook *AccountHook `protobuf:"bytes,1,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (x *UpdateAccountHookResponse) Reset() {
	*x = UpdateAccountHookResponse{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAccountHookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountHookResponse) ProtoMessage() {}

func (x *UpdateAccountHookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountHookResponse.ProtoReflect.Descriptor instead.
func (*UpdateAccountHookResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateAccountHookResponse) GetHook() *AccountHook {
	if x != nil {
		return x.Hook
	}
	return nil
}

type DeleteAccountHookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the hook to delete.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAccountHookRequest) Reset() {
	*x = DeleteAccountHookRequest{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAccountHookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountHookRequest) ProtoMessage() {}

func (x *DeleteAccountHookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountHookRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountHookRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteAccountHookRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteAccountHookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deleted account hook.
	Hook *AccountHook `protobuf:"bytes,1,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (x *DeleteAccountHookResponse) Reset() {
	*x = DeleteAccountHookResponse{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAccountHookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountHookResponse) ProtoMessage() {}

func (x *DeleteAccountHookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountHookResponse.ProtoReflect.Descriptor instead.
func (*DeleteAccountHookResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteAccountHookResponse) GetHook() *AccountHook {
	if x != nil {
		return x.Hook
	}
	return nil
}

type IsAccountHookNameAvailableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account ID to check the name for.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The name to check.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *IsAccountHookNameAvailableRequest) Reset() {
	*x = IsAccountHookNameAvailableRequest{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAccountHookNameAvailableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAccountHookNameAvailableRequest) ProtoMessage() {}

func (x *IsAccountHookNameAvailableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAccountHookNameAvailableRequest.ProtoReflect.Descriptor instead.
func (*IsAccountHookNameAvailableRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{13}
}

func (x *IsAccountHookNameAvailableRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *IsAccountHookNameAvailableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type IsAccountHookNameAvailableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the name is available.
	IsAvailable bool `protobuf:"varint,1,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
}

func (x *IsAccountHookNameAvailableResponse) Reset() {
	*x = IsAccountHookNameAvailableResponse{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAccountHookNameAvailableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAccountHookNameAvailableResponse) ProtoMessage() {}

func (x *IsAccountHookNameAvailableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAccountHookNameAvailableResponse.ProtoReflect.Descriptor instead.
func (*IsAccountHookNameAvailableResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{14}
}

func (x *IsAccountHookNameAvailableResponse) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

type SetAccountHookEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the hook to enable/disable.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether to enable or disable the hook.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetAccountHookEnabledRequest) Reset() {
	*x = SetAccountHookEnabledRequest{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAccountHookEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAccountHookEnabledRequest) ProtoMessage() {}

func (x *SetAccountHookEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAccountHookEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetAccountHookEnabledRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{15}
}

func (x *SetAccountHookEnabledRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetAccountHookEnabledRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetAccountHookEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated account hook.
	Hook *AccountHook `protobuf:"bytes,1,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (x *SetAccountHookEnabledResponse) Reset() {
	*x = SetAccountHookEnabledResponse{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAccountHookEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAccountHookEnabledResponse) ProtoMessage() {}

func (x *SetAccountHookEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAccountHookEnabledResponse.ProtoReflect.Descriptor instead.
func (*SetAccountHookEnabledResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{16}
}

func (x *SetAccountHookEnabledResponse) GetHook() *AccountHook {
	if x != nil {
		return x.Hook
	}
	return nil
}

type GetActiveAccountHooksByEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account ID to retrieve hooks for.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The event to retrieve hooks for.
	// A specific event will return hooks that are listening to that specific event as well as wildcard hooks.
	// If you want to retrieve only wildcard hooks, use ACCOUNT_HOOK_EVENT_UNSPECIFIED.
	Event AccountHookEvent `protobuf:"varint,2,opt,name=event,proto3,enum=mgmt.v1alpha1.AccountHookEvent" json:"event,omitempty"`
}

func (x *GetActiveAccountHooksByEventRequest) Reset() {
	*x = GetActiveAccountHooksByEventRequest{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveAccountHooksByEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveAccountHooksByEventRequest) ProtoMessage() {}

func (x *GetActiveAccountHooksByEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveAccountHooksByEventRequest.ProtoReflect.Descriptor instead.
func (*GetActiveAccountHooksByEventRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{17}
}

func (x *GetActiveAccountHooksByEventRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetActiveAccountHooksByEventRequest) GetEvent() AccountHookEvent {
	if x != nil {
		return x.Event
	}
	return AccountHookEvent_ACCOUNT_HOOK_EVENT_UNSPECIFIED
}

type GetActiveAccountHooksByEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of active account hooks.
	Hooks []*AccountHook `protobuf:"bytes,1,rep,name=hooks,proto3" json:"hooks,omitempty"`
}

func (x *GetActiveAccountHooksByEventResponse) Reset() {
	*x = GetActiveAccountHooksByEventResponse{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveAccountHooksByEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveAccountHooksByEventResponse) ProtoMessage() {}

func (x *GetActiveAccountHooksByEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveAccountHooksByEventResponse.ProtoReflect.Descriptor instead.
func (*GetActiveAccountHooksByEventResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{18}
}

func (x *GetActiveAccountHooksByEventResponse) GetHooks() []*AccountHook {
	if x != nil {
		return x.Hooks
	}
	return nil
}

type GetSlackConnectionUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account ID to retrieve the Slack connection URL for.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *GetSlackConnectionUrlRequest) Reset() {
	*x = GetSlackConnectionUrlRequest{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSlackConnectionUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlackConnectionUrlRequest) ProtoMessage() {}

func (x *GetSlackConnectionUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlackConnectionUrlRequest.ProtoReflect.Descriptor instead.
func (*GetSlackConnectionUrlRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{19}
}

func (x *GetSlackConnectionUrlRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type GetSlackConnectionUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Slack connection URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *GetSlackConnectionUrlResponse) Reset() {
	*x = GetSlackConnectionUrlResponse{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSlackConnectionUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlackConnectionUrlResponse) ProtoMessage() {}

func (x *GetSlackConnectionUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlackConnectionUrlResponse.ProtoReflect.Descriptor instead.
func (*GetSlackConnectionUrlResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{20}
}

func (x *GetSlackConnectionUrlResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type HandleSlackOAuthCallbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Slack state.
	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// The Slack code.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *HandleSlackOAuthCallbackRequest) Reset() {
	*x = HandleSlackOAuthCallbackRequest{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandleSlackOAuthCallbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleSlackOAuthCallbackRequest) ProtoMessage() {}

func (x *HandleSlackOAuthCallbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleSlackOAuthCallbackRequest.ProtoReflect.Descriptor instead.
func (*HandleSlackOAuthCallbackRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{21}
}

func (x *HandleSlackOAuthCallbackRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *HandleSlackOAuthCallbackRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type HandleSlackOAuthCallbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HandleSlackOAuthCallbackResponse) Reset() {
	*x = HandleSlackOAuthCallbackResponse{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandleSlackOAuthCallbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleSlackOAuthCallbackResponse) ProtoMessage() {}

func (x *HandleSlackOAuthCallbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleSlackOAuthCallbackResponse.ProtoReflect.Descriptor instead.
func (*HandleSlackOAuthCallbackResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{22}
}

type TestSlackConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account ID to test the Slack connection for.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *TestSlackConnectionRequest) Reset() {
	*x = TestSlackConnectionRequest{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSlackConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSlackConnectionRequest) ProtoMessage() {}

func (x *TestSlackConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSlackConnectionRequest.ProtoReflect.Descriptor instead.
func (*TestSlackConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{23}
}

func (x *TestSlackConnectionRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type TestSlackConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether there is an existing Slack configuration.
	HasConfiguration bool `protobuf:"varint,1,opt,name=has_configuration,json=hasConfiguration,proto3" json:"has_configuration,omitempty"`
	// The response from the Slack API.
	TestResponse *TestSlackConnectionResponse_Response `protobuf:"bytes,2,opt,name=test_response,json=testResponse,proto3,oneof" json:"test_response,omitempty"`
	// The error message if the connection failed.
	Error *string `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *TestSlackConnectionResponse) Reset() {
	*x = TestSlackConnectionResponse{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSlackConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSlackConnectionResponse) ProtoMessage() {}

func (x *TestSlackConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSlackConnectionResponse.ProtoReflect.Descriptor instead.
func (*TestSlackConnectionResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{24}
}

func (x *TestSlackConnectionResponse) GetHasConfiguration() bool {
	if x != nil {
		return x.HasConfiguration
	}
	return false
}

func (x *TestSlackConnectionResponse) GetTestResponse() *TestSlackConnectionResponse_Response {
	if x != nil {
		return x.TestResponse
	}
	return nil
}

func (x *TestSlackConnectionResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type SendSlackMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account hook ID to send the Slack message to.
	AccountHookId string `protobuf:"bytes,1,opt,name=account_hook_id,json=accountHookId,proto3" json:"account_hook_id,omitempty"`
	// The marshaled event that was emitted by the worker.
	Event []byte `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *SendSlackMessageRequest) Reset() {
	*x = SendSlackMessageRequest{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSlackMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSlackMessageRequest) ProtoMessage() {}

func (x *SendSlackMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSlackMessageRequest.ProtoReflect.Descriptor instead.
func (*SendSlackMessageRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{25}
}

func (x *SendSlackMessageRequest) GetAccountHookId() string {
	if x != nil {
		return x.AccountHookId
	}
	return ""
}

func (x *SendSlackMessageRequest) GetEvent() []byte {
	if x != nil {
		return x.Event
	}
	return nil
}

type SendSlackMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendSlackMessageResponse) Reset() {
	*x = SendSlackMessageResponse{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendSlackMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSlackMessageResponse) ProtoMessage() {}

func (x *SendSlackMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSlackMessageResponse.ProtoReflect.Descriptor instead.
func (*SendSlackMessageResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{26}
}

// Webhook-specific configuration
type AccountHookConfig_WebHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The webhook URL to send the event to.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The secret to use for the webhook.
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// Whether to disable SSL verification for the webhook.
	DisableSslVerification bool `protobuf:"varint,3,opt,name=disable_ssl_verification,json=disableSslVerification,proto3" json:"disable_ssl_verification,omitempty"`
}

func (x *AccountHookConfig_WebHook) Reset() {
	*x = AccountHookConfig_WebHook{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountHookConfig_WebHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountHookConfig_WebHook) ProtoMessage() {}

func (x *AccountHookConfig_WebHook) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountHookConfig_WebHook.ProtoReflect.Descriptor instead.
func (*AccountHookConfig_WebHook) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{2, 0}
}

func (x *AccountHookConfig_WebHook) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AccountHookConfig_WebHook) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *AccountHookConfig_WebHook) GetDisableSslVerification() bool {
	if x != nil {
		return x.DisableSslVerification
	}
	return false
}

// Slack hook configuration
type AccountHookConfig_SlackHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Slack channel id to post messages to.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *AccountHookConfig_SlackHook) Reset() {
	*x = AccountHookConfig_SlackHook{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountHookConfig_SlackHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountHookConfig_SlackHook) ProtoMessage() {}

func (x *AccountHookConfig_SlackHook) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountHookConfig_SlackHook.ProtoReflect.Descriptor instead.
func (*AccountHookConfig_SlackHook) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{2, 1}
}

func (x *AccountHookConfig_SlackHook) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type TestSlackConnectionResponse_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL of the Slack that is connected.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The team name of the Slack that is connected.
	Team string `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
}

func (x *TestSlackConnectionResponse_Response) Reset() {
	*x = TestSlackConnectionResponse_Response{}
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSlackConnectionResponse_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSlackConnectionResponse_Response) ProtoMessage() {}

func (x *TestSlackConnectionResponse_Response) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_v1alpha1_account_hook_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSlackConnectionResponse_Response.ProtoReflect.Descriptor instead.
func (*TestSlackConnectionResponse_Response) Descriptor() ([]byte, []int) {
	return file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP(), []int{24, 0}
}

func (x *TestSlackConnectionResponse_Response) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TestSlackConnectionResponse_Response) GetTeam() string {
	if x != nil {
		return x.Team
	}
	return ""
}

var File_mgmt_v1alpha1_account_hook_proto protoreflect.FileDescriptor

var file_mgmt_v1alpha1_account_hook_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcf, 0x03, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2b, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x89, 0x02, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x19, 0xba, 0x48, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xe6, 0x02,
	0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x48, 0x00,
	0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x6c, 0x61,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x48, 0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x1a, 0x80, 0x01,
	0x0a, 0x07, 0x57, 0x65, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x1a, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x73, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x33, 0x0a, 0x09, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x26, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x41, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52,
	0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x31, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x68,
	0x6f, 0x6f, 0x6b, 0x22, 0x7e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x68,
	0x6f, 0x6f, 0x6b, 0x22, 0x4b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x68, 0x6f, 0x6f, 0x6b,
	0x22, 0xa5, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x48, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x4b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52,
	0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x34, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f,
	0x6f, 0x6b, 0x52, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x7b, 0x0a, 0x21, 0x49, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x48, 0x16, 0x72, 0x14, 0x32, 0x12, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x31, 0x30, 0x30, 0x7d, 0x24, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x22, 0x49, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x52,
	0x0a, 0x1c, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x4f, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x68,
	0x6f, 0x6f, 0x6b, 0x22, 0x85, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x42, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x6f, 0x6f, 0x6b, 0x73, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x05,
	0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x47, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x31,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x5d, 0x0a, 0x1f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x22, 0x0a, 0x20, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x92, 0x02, 0x0a, 0x1b,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x68,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x1a, 0x30, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x61, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x61, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a,
	0xaf, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x4f, 0x4f, 0x4b,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4a, 0x4f,
	0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
	0x03, 0x32, 0xfa, 0x0a, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12,
	0x62, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x12, 0x24, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x12, 0x68, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f,
	0x6f, 0x6b, 0x12, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x27, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x49, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x30, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x2b, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x6f, 0x6f, 0x6b, 0x73, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x77, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x7d, 0x0a, 0x18, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53,
	0x6c, 0x61, 0x63, 0x6b, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x2e, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x65, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x53,
	0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xcc,
	0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x42, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x75, 0x73, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x6e, 0x65, 0x6f, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6d, 0x67,
	0x6d, 0x74, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x58, 0x58,
	0xaa, 0x02, 0x0d, 0x4d, 0x67, 0x6d, 0x74, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xca, 0x02, 0x0d, 0x4d, 0x67, 0x6d, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xe2, 0x02, 0x19, 0x4d, 0x67, 0x6d, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x4d,
	0x67, 0x6d, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mgmt_v1alpha1_account_hook_proto_rawDescOnce sync.Once
	file_mgmt_v1alpha1_account_hook_proto_rawDescData = file_mgmt_v1alpha1_account_hook_proto_rawDesc
)

func file_mgmt_v1alpha1_account_hook_proto_rawDescGZIP() []byte {
	file_mgmt_v1alpha1_account_hook_proto_rawDescOnce.Do(func() {
		file_mgmt_v1alpha1_account_hook_proto_rawDescData = protoimpl.X.CompressGZIP(file_mgmt_v1alpha1_account_hook_proto_rawDescData)
	})
	return file_mgmt_v1alpha1_account_hook_proto_rawDescData
}

var file_mgmt_v1alpha1_account_hook_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mgmt_v1alpha1_account_hook_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_mgmt_v1alpha1_account_hook_proto_goTypes = []any{
	(AccountHookEvent)(0),                        // 0: mgmt.v1alpha1.AccountHookEvent
	(*AccountHook)(nil),                          // 1: mgmt.v1alpha1.AccountHook
	(*NewAccountHook)(nil),                       // 2: mgmt.v1alpha1.NewAccountHook
	(*AccountHookConfig)(nil),                    // 3: mgmt.v1alpha1.AccountHookConfig
	(*GetAccountHooksRequest)(nil),               // 4: mgmt.v1alpha1.GetAccountHooksRequest
	(*GetAccountHooksResponse)(nil),              // 5: mgmt.v1alpha1.GetAccountHooksResponse
	(*GetAccountHookRequest)(nil),                // 6: mgmt.v1alpha1.GetAccountHookRequest
	(*GetAccountHookResponse)(nil),               // 7: mgmt.v1alpha1.GetAccountHookResponse
	(*CreateAccountHookRequest)(nil),             // 8: mgmt.v1alpha1.CreateAccountHookRequest
	(*CreateAccountHookResponse)(nil),            // 9: mgmt.v1alpha1.CreateAccountHookResponse
	(*UpdateAccountHookRequest)(nil),             // 10: mgmt.v1alpha1.UpdateAccountHookRequest
	(*UpdateAccountHookResponse)(nil),            // 11: mgmt.v1alpha1.UpdateAccountHookResponse
	(*DeleteAccountHookRequest)(nil),             // 12: mgmt.v1alpha1.DeleteAccountHookRequest
	(*DeleteAccountHookResponse)(nil),            // 13: mgmt.v1alpha1.DeleteAccountHookResponse
	(*IsAccountHookNameAvailableRequest)(nil),    // 14: mgmt.v1alpha1.IsAccountHookNameAvailableRequest
	(*IsAccountHookNameAvailableResponse)(nil),   // 15: mgmt.v1alpha1.IsAccountHookNameAvailableResponse
	(*SetAccountHookEnabledRequest)(nil),         // 16: mgmt.v1alpha1.SetAccountHookEnabledRequest
	(*SetAccountHookEnabledResponse)(nil),        // 17: mgmt.v1alpha1.SetAccountHookEnabledResponse
	(*GetActiveAccountHooksByEventRequest)(nil),  // 18: mgmt.v1alpha1.GetActiveAccountHooksByEventRequest
	(*GetActiveAccountHooksByEventResponse)(nil), // 19: mgmt.v1alpha1.GetActiveAccountHooksByEventResponse
	(*GetSlackConnectionUrlRequest)(nil),         // 20: mgmt.v1alpha1.GetSlackConnectionUrlRequest
	(*GetSlackConnectionUrlResponse)(nil),        // 21: mgmt.v1alpha1.GetSlackConnectionUrlResponse
	(*HandleSlackOAuthCallbackRequest)(nil),      // 22: mgmt.v1alpha1.HandleSlackOAuthCallbackRequest
	(*HandleSlackOAuthCallbackResponse)(nil),     // 23: mgmt.v1alpha1.HandleSlackOAuthCallbackResponse
	(*TestSlackConnectionRequest)(nil),           // 24: mgmt.v1alpha1.TestSlackConnectionRequest
	(*TestSlackConnectionResponse)(nil),          // 25: mgmt.v1alpha1.TestSlackConnectionResponse
	(*SendSlackMessageRequest)(nil),              // 26: mgmt.v1alpha1.SendSlackMessageRequest
	(*SendSlackMessageResponse)(nil),             // 27: mgmt.v1alpha1.SendSlackMessageResponse
	(*AccountHookConfig_WebHook)(nil),            // 28: mgmt.v1alpha1.AccountHookConfig.WebHook
	(*AccountHookConfig_SlackHook)(nil),          // 29: mgmt.v1alpha1.AccountHookConfig.SlackHook
	(*TestSlackConnectionResponse_Response)(nil), // 30: mgmt.v1alpha1.TestSlackConnectionResponse.Response
	(*timestamppb.Timestamp)(nil),                // 31: google.protobuf.Timestamp
}
var file_mgmt_v1alpha1_account_hook_proto_depIdxs = []int32{
	0,  // 0: mgmt.v1alpha1.AccountHook.events:type_name -> mgmt.v1alpha1.AccountHookEvent
	3,  // 1: mgmt.v1alpha1.AccountHook.config:type_name -> mgmt.v1alpha1.AccountHookConfig
	31, // 2: mgmt.v1alpha1.AccountHook.created_at:type_name -> google.protobuf.Timestamp
	31, // 3: mgmt.v1alpha1.AccountHook.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 4: mgmt.v1alpha1.NewAccountHook.events:type_name -> mgmt.v1alpha1.AccountHookEvent
	3,  // 5: mgmt.v1alpha1.NewAccountHook.config:type_name -> mgmt.v1alpha1.AccountHookConfig
	28, // 6: mgmt.v1alpha1.AccountHookConfig.webhook:type_name -> mgmt.v1alpha1.AccountHookConfig.WebHook
	29, // 7: mgmt.v1alpha1.AccountHookConfig.slack:type_name -> mgmt.v1alpha1.AccountHookConfig.SlackHook
	1,  // 8: mgmt.v1alpha1.GetAccountHooksResponse.hooks:type_name -> mgmt.v1alpha1.AccountHook
	1,  // 9: mgmt.v1alpha1.GetAccountHookResponse.hook:type_name -> mgmt.v1alpha1.AccountHook
	2,  // 10: mgmt.v1alpha1.CreateAccountHookRequest.hook:type_name -> mgmt.v1alpha1.NewAccountHook
	1,  // 11: mgmt.v1alpha1.CreateAccountHookResponse.hook:type_name -> mgmt.v1alpha1.AccountHook
	0,  // 12: mgmt.v1alpha1.UpdateAccountHookRequest.events:type_name -> mgmt.v1alpha1.AccountHookEvent
	3,  // 13: mgmt.v1alpha1.UpdateAccountHookRequest.config:type_name -> mgmt.v1alpha1.AccountHookConfig
	1,  // 14: mgmt.v1alpha1.UpdateAccountHookResponse.hook:type_name -> mgmt.v1alpha1.AccountHook
	1,  // 15: mgmt.v1alpha1.DeleteAccountHookResponse.hook:type_name -> mgmt.v1alpha1.AccountHook
	1,  // 16: mgmt.v1alpha1.SetAccountHookEnabledResponse.hook:type_name -> mgmt.v1alpha1.AccountHook
	0,  // 17: mgmt.v1alpha1.GetActiveAccountHooksByEventRequest.event:type_name -> mgmt.v1alpha1.AccountHookEvent
	1,  // 18: mgmt.v1alpha1.GetActiveAccountHooksByEventResponse.hooks:type_name -> mgmt.v1alpha1.AccountHook
	30, // 19: mgmt.v1alpha1.TestSlackConnectionResponse.test_response:type_name -> mgmt.v1alpha1.TestSlackConnectionResponse.Response
	4,  // 20: mgmt.v1alpha1.AccountHookService.GetAccountHooks:input_type -> mgmt.v1alpha1.GetAccountHooksRequest
	6,  // 21: mgmt.v1alpha1.AccountHookService.GetAccountHook:input_type -> mgmt.v1alpha1.GetAccountHookRequest
	8,  // 22: mgmt.v1alpha1.AccountHookService.CreateAccountHook:input_type -> mgmt.v1alpha1.CreateAccountHookRequest
	10, // 23: mgmt.v1alpha1.AccountHookService.UpdateAccountHook:input_type -> mgmt.v1alpha1.UpdateAccountHookRequest
	12, // 24: mgmt.v1alpha1.AccountHookService.DeleteAccountHook:input_type -> mgmt.v1alpha1.DeleteAccountHookRequest
	14, // 25: mgmt.v1alpha1.AccountHookService.IsAccountHookNameAvailable:input_type -> mgmt.v1alpha1.IsAccountHookNameAvailableRequest
	16, // 26: mgmt.v1alpha1.AccountHookService.SetAccountHookEnabled:input_type -> mgmt.v1alpha1.SetAccountHookEnabledRequest
	18, // 27: mgmt.v1alpha1.AccountHookService.GetActiveAccountHooksByEvent:input_type -> mgmt.v1alpha1.GetActiveAccountHooksByEventRequest
	20, // 28: mgmt.v1alpha1.AccountHookService.GetSlackConnectionUrl:input_type -> mgmt.v1alpha1.GetSlackConnectionUrlRequest
	22, // 29: mgmt.v1alpha1.AccountHookService.HandleSlackOAuthCallback:input_type -> mgmt.v1alpha1.HandleSlackOAuthCallbackRequest
	24, // 30: mgmt.v1alpha1.AccountHookService.TestSlackConnection:input_type -> mgmt.v1alpha1.TestSlackConnectionRequest
	26, // 31: mgmt.v1alpha1.AccountHookService.SendSlackMessage:input_type -> mgmt.v1alpha1.SendSlackMessageRequest
	5,  // 32: mgmt.v1alpha1.AccountHookService.GetAccountHooks:output_type -> mgmt.v1alpha1.GetAccountHooksResponse
	7,  // 33: mgmt.v1alpha1.AccountHookService.GetAccountHook:output_type -> mgmt.v1alpha1.GetAccountHookResponse
	9,  // 34: mgmt.v1alpha1.AccountHookService.CreateAccountHook:output_type -> mgmt.v1alpha1.CreateAccountHookResponse
	11, // 35: mgmt.v1alpha1.AccountHookService.UpdateAccountHook:output_type -> mgmt.v1alpha1.UpdateAccountHookResponse
	13, // 36: mgmt.v1alpha1.AccountHookService.DeleteAccountHook:output_type -> mgmt.v1alpha1.DeleteAccountHookResponse
	15, // 37: mgmt.v1alpha1.AccountHookService.IsAccountHookNameAvailable:output_type -> mgmt.v1alpha1.IsAccountHookNameAvailableResponse
	17, // 38: mgmt.v1alpha1.AccountHookService.SetAccountHookEnabled:output_type -> mgmt.v1alpha1.SetAccountHookEnabledResponse
	19, // 39: mgmt.v1alpha1.AccountHookService.GetActiveAccountHooksByEvent:output_type -> mgmt.v1alpha1.GetActiveAccountHooksByEventResponse
	21, // 40: mgmt.v1alpha1.AccountHookService.GetSlackConnectionUrl:output_type -> mgmt.v1alpha1.GetSlackConnectionUrlResponse
	23, // 41: mgmt.v1alpha1.AccountHookService.HandleSlackOAuthCallback:output_type -> mgmt.v1alpha1.HandleSlackOAuthCallbackResponse
	25, // 42: mgmt.v1alpha1.AccountHookService.TestSlackConnection:output_type -> mgmt.v1alpha1.TestSlackConnectionResponse
	27, // 43: mgmt.v1alpha1.AccountHookService.SendSlackMessage:output_type -> mgmt.v1alpha1.SendSlackMessageResponse
	32, // [32:44] is the sub-list for method output_type
	20, // [20:32] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_mgmt_v1alpha1_account_hook_proto_init() }
func file_mgmt_v1alpha1_account_hook_proto_init() {
	if File_mgmt_v1alpha1_account_hook_proto != nil {
		return
	}
	file_mgmt_v1alpha1_account_hook_proto_msgTypes[2].OneofWrappers = []any{
		(*AccountHookConfig_Webhook)(nil),
		(*AccountHookConfig_Slack)(nil),
	}
	file_mgmt_v1alpha1_account_hook_proto_msgTypes[24].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mgmt_v1alpha1_account_hook_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mgmt_v1alpha1_account_hook_proto_goTypes,
		DependencyIndexes: file_mgmt_v1alpha1_account_hook_proto_depIdxs,
		EnumInfos:         file_mgmt_v1alpha1_account_hook_proto_enumTypes,
		MessageInfos:      file_mgmt_v1alpha1_account_hook_proto_msgTypes,
	}.Build()
	File_mgmt_v1alpha1_account_hook_proto = out.File
	file_mgmt_v1alpha1_account_hook_proto_rawDesc = nil
	file_mgmt_v1alpha1_account_hook_proto_goTypes = nil
	file_mgmt_v1alpha1_account_hook_proto_depIdxs = nil
}
