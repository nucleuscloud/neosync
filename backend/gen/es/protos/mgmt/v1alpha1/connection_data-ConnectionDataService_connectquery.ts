// @generated by protoc-gen-connect-query v1.4.1 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/connection_data.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { MethodKind } from "@bufbuild/protobuf";
import { GetAiGeneratedDataRequest, GetAiGeneratedDataResponse, GetConnectionForeignConstraintsRequest, GetConnectionForeignConstraintsResponse, GetConnectionInitStatementsRequest, GetConnectionInitStatementsResponse, GetConnectionPrimaryConstraintsRequest, GetConnectionPrimaryConstraintsResponse, GetConnectionSchemaRequest, GetConnectionSchemaResponse, GetConnectionTableConstraintsRequest, GetConnectionTableConstraintsResponse, GetConnectionUniqueConstraintsRequest, GetConnectionUniqueConstraintsResponse, GetTableRowCountRequest, GetTableRowCountResponse } from "./connection_data_pb.js";

/**
 * Returns the schema for a specific connection. Used mostly for SQL-based connections
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionSchema
 */
export const getConnectionSchema = {
  localName: "getConnectionSchema",
  name: "GetConnectionSchema",
  kind: MethodKind.Unary,
  I: GetConnectionSchemaRequest,
  O: GetConnectionSchemaResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionDataService"
  }
} as const;

/**
 * For a specific connection, returns the table constraints. Mostly useful for SQL-based Connections.
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionTableConstraints
 */
export const getConnectionTableConstraints = {
  localName: "getConnectionTableConstraints",
  name: "GetConnectionTableConstraints",
  kind: MethodKind.Unary,
  I: GetConnectionTableConstraintsRequest,
  O: GetConnectionTableConstraintsResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionDataService"
  }
} as const;

/**
 * For a specific connection, returns the foreign key constraints. Mostly useful for SQL-based Connections.
 * Used primarily by the CLI sync command to determine stream order.
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionForeignConstraints
 */
export const getConnectionForeignConstraints = {
  localName: "getConnectionForeignConstraints",
  name: "GetConnectionForeignConstraints",
  kind: MethodKind.Unary,
  I: GetConnectionForeignConstraintsRequest,
  O: GetConnectionForeignConstraintsResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionDataService"
  }
} as const;

/**
 * For a specific connection, returns the primary key constraints. Mostly useful for SQL-based Connections.
 * Used primarily by the CLI sync command to determine stream order.
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionPrimaryConstraints
 */
export const getConnectionPrimaryConstraints = {
  localName: "getConnectionPrimaryConstraints",
  name: "GetConnectionPrimaryConstraints",
  kind: MethodKind.Unary,
  I: GetConnectionPrimaryConstraintsRequest,
  O: GetConnectionPrimaryConstraintsResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionDataService"
  }
} as const;

/**
 * For a specific connection, returns the init table statements. Mostly useful for SQL-based Connections.
 * Used primarily by the CLI sync command to create table schema init statement.
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionInitStatements
 */
export const getConnectionInitStatements = {
  localName: "getConnectionInitStatements",
  name: "GetConnectionInitStatements",
  kind: MethodKind.Unary,
  I: GetConnectionInitStatementsRequest,
  O: GetConnectionInitStatementsResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionDataService"
  }
} as const;

/**
 * For a specific connection, returns the unique constraints. Mostly useful for SQL-based connections.
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionUniqueConstraints
 */
export const getConnectionUniqueConstraints = {
  localName: "getConnectionUniqueConstraints",
  name: "GetConnectionUniqueConstraints",
  kind: MethodKind.Unary,
  I: GetConnectionUniqueConstraintsRequest,
  O: GetConnectionUniqueConstraintsResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionDataService"
  }
} as const;

/**
 * Query an AI connection by providing the necessary values. Typically used for generating preview data
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetAiGeneratedData
 */
export const getAiGeneratedData = {
  localName: "getAiGeneratedData",
  name: "GetAiGeneratedData",
  kind: MethodKind.Unary,
  I: GetAiGeneratedDataRequest,
  O: GetAiGeneratedDataResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionDataService"
  }
} as const;

/**
 * Query table with subset to get row count
 *
 * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetTableRowCount
 */
export const getTableRowCount = {
  localName: "getTableRowCount",
  name: "GetTableRowCount",
  kind: MethodKind.Unary,
  I: GetTableRowCountRequest,
  O: GetTableRowCountResponse,
  service: {
    typeName: "mgmt.v1alpha1.ConnectionDataService"
  }
} as const;
