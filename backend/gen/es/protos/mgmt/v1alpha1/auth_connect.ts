// @generated by protoc-gen-connect-es v1.4.0 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/auth.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CheckTokenRequest, CheckTokenResponse, GetAuthorizeUrlRequest, GetAuthorizeUrlResponse, GetAuthStatusRequest, GetAuthStatusResponse, GetCliIssuerRequest, GetCliIssuerResponse, LoginCliRequest, LoginCliResponse, RefreshCliRequest, RefreshCliResponse } from "./auth_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Service that handles generic Authentication for Neosync
 * Today this is mostly used by the CLI to receive authentication information
 *
 * @generated from service mgmt.v1alpha1.AuthService
 */
export const AuthService = {
  typeName: "mgmt.v1alpha1.AuthService",
  methods: {
    /**
     * Used by the CLI to login to Neosync with OAuth.
     *
     * @generated from rpc mgmt.v1alpha1.AuthService.LoginCli
     */
    loginCli: {
      name: "LoginCli",
      I: LoginCliRequest,
      O: LoginCliResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Used by the CLI to refresh an expired Neosync accesss token.
     * This should only be used if an access token was previously retrieved from the `LoginCli` or `RefreshCli` methods.
     *
     * @generated from rpc mgmt.v1alpha1.AuthService.RefreshCli
     */
    refreshCli: {
      name: "RefreshCli",
      I: RefreshCliRequest,
      O: RefreshCliResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Empty endpoint to simply check if the provided access token is valid
     *
     * @generated from rpc mgmt.v1alpha1.AuthService.CheckToken
     */
    checkToken: {
      name: "CheckToken",
      I: CheckTokenRequest,
      O: CheckTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Used by the CLI to retrieve Auth Issuer information
     * @deprecated
     *
     * @generated from rpc mgmt.v1alpha1.AuthService.GetCliIssuer
     */
    getCliIssuer: {
      name: "GetCliIssuer",
      I: GetCliIssuerRequest,
      O: GetCliIssuerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Used by the CLI to retrieve an Authorize URL for use with OAuth login.
     *
     * @generated from rpc mgmt.v1alpha1.AuthService.GetAuthorizeUrl
     */
    getAuthorizeUrl: {
      name: "GetAuthorizeUrl",
      I: GetAuthorizeUrlRequest,
      O: GetAuthorizeUrlResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the auth status of the API server. Whether or not the backend has authentication enabled.
     * This is used by clients to make decisions on whether or not they should send access tokens to the API.
     *
     * @generated from rpc mgmt.v1alpha1.AuthService.GetAuthStatus
     */
    getAuthStatus: {
      name: "GetAuthStatus",
      I: GetAuthStatusRequest,
      O: GetAuthStatusResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

