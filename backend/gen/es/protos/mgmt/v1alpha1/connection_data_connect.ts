// @generated by protoc-gen-connect-es v1.4.0 with parameter "target=ts,import_extension=.js"
// @generated from file mgmt/v1alpha1/connection_data.proto (package mgmt.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetAiGeneratedDataRequest, GetAiGeneratedDataResponse, GetConnectionDataStreamRequest, GetConnectionDataStreamResponse, GetConnectionForeignConstraintsRequest, GetConnectionForeignConstraintsResponse, GetConnectionInitStatementsRequest, GetConnectionInitStatementsResponse, GetConnectionPrimaryConstraintsRequest, GetConnectionPrimaryConstraintsResponse, GetConnectionSchemaRequest, GetConnectionSchemaResponse, GetConnectionTableConstraintsRequest, GetConnectionTableConstraintsResponse, GetConnectionUniqueConstraintsRequest, GetConnectionUniqueConstraintsResponse, GetTableRowCountRequest, GetTableRowCountResponse } from "./connection_data_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Service for managing connection data.
 * This is used in handle data from a connection
 *
 * @generated from service mgmt.v1alpha1.ConnectionDataService
 */
export const ConnectionDataService = {
  typeName: "mgmt.v1alpha1.ConnectionDataService",
  methods: {
    /**
     * Streaming endpoint that will stream the data available from the Connection to the client.
     * Used primarily by the CLI sync command.
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionDataStream
     */
    getConnectionDataStream: {
      name: "GetConnectionDataStream",
      I: GetConnectionDataStreamRequest,
      O: GetConnectionDataStreamResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Returns the schema for a specific connection. Used mostly for SQL-based connections
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionSchema
     */
    getConnectionSchema: {
      name: "GetConnectionSchema",
      I: GetConnectionSchemaRequest,
      O: GetConnectionSchemaResponse,
      kind: MethodKind.Unary,
    },
    /**
     * For a specific connection, returns the table constraints. Mostly useful for SQL-based Connections.
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionTableConstraints
     */
    getConnectionTableConstraints: {
      name: "GetConnectionTableConstraints",
      I: GetConnectionTableConstraintsRequest,
      O: GetConnectionTableConstraintsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * For a specific connection, returns the foreign key constraints. Mostly useful for SQL-based Connections.
     * Used primarily by the CLI sync command to determine stream order.
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionForeignConstraints
     */
    getConnectionForeignConstraints: {
      name: "GetConnectionForeignConstraints",
      I: GetConnectionForeignConstraintsRequest,
      O: GetConnectionForeignConstraintsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * For a specific connection, returns the primary key constraints. Mostly useful for SQL-based Connections.
     * Used primarily by the CLI sync command to determine stream order.
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionPrimaryConstraints
     */
    getConnectionPrimaryConstraints: {
      name: "GetConnectionPrimaryConstraints",
      I: GetConnectionPrimaryConstraintsRequest,
      O: GetConnectionPrimaryConstraintsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * For a specific connection, returns the init table statements. Mostly useful for SQL-based Connections.
     * Used primarily by the CLI sync command to create table schema init statement.
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionInitStatements
     */
    getConnectionInitStatements: {
      name: "GetConnectionInitStatements",
      I: GetConnectionInitStatementsRequest,
      O: GetConnectionInitStatementsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * For a specific connection, returns the unique constraints. Mostly useful for SQL-based connections.
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetConnectionUniqueConstraints
     */
    getConnectionUniqueConstraints: {
      name: "GetConnectionUniqueConstraints",
      I: GetConnectionUniqueConstraintsRequest,
      O: GetConnectionUniqueConstraintsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Query an AI connection by providing the necessary values. Typically used for generating preview data
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetAiGeneratedData
     */
    getAiGeneratedData: {
      name: "GetAiGeneratedData",
      I: GetAiGeneratedDataRequest,
      O: GetAiGeneratedDataResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Query table with subset to get row count
     *
     * @generated from rpc mgmt.v1alpha1.ConnectionDataService.GetTableRowCount
     */
    getTableRowCount: {
      name: "GetTableRowCount",
      I: GetTableRowCountRequest,
      O: GetTableRowCountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

