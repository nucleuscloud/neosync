// Code generated by mockery. DO NOT EDIT.

package neosync_gcp

import (
	context "context"

	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// DoesPrefixContainTables provides a mock function with given fields: ctx, bucketName, prefix
func (_m *MockClientInterface) DoesPrefixContainTables(ctx context.Context, bucketName string, prefix string) (bool, error) {
	ret := _m.Called(ctx, bucketName, prefix)

	if len(ret) == 0 {
		panic("no return value specified for DoesPrefixContainTables")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, bucketName, prefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, bucketName, prefix)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketName, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DoesPrefixContainTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoesPrefixContainTables'
type MockClientInterface_DoesPrefixContainTables_Call struct {
	*mock.Call
}

// DoesPrefixContainTables is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - prefix string
func (_e *MockClientInterface_Expecter) DoesPrefixContainTables(ctx interface{}, bucketName interface{}, prefix interface{}) *MockClientInterface_DoesPrefixContainTables_Call {
	return &MockClientInterface_DoesPrefixContainTables_Call{Call: _e.mock.On("DoesPrefixContainTables", ctx, bucketName, prefix)}
}

func (_c *MockClientInterface_DoesPrefixContainTables_Call) Run(run func(ctx context.Context, bucketName string, prefix string)) *MockClientInterface_DoesPrefixContainTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_DoesPrefixContainTables_Call) Return(_a0 bool, _a1 error) *MockClientInterface_DoesPrefixContainTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DoesPrefixContainTables_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockClientInterface_DoesPrefixContainTables_Call {
	_c.Call.Return(run)
	return _c
}

// GetDbSchemaFromPrefix provides a mock function with given fields: ctx, bucketName, prefix
func (_m *MockClientInterface) GetDbSchemaFromPrefix(ctx context.Context, bucketName string, prefix string) ([]*mgmtv1alpha1.DatabaseColumn, error) {
	ret := _m.Called(ctx, bucketName, prefix)

	if len(ret) == 0 {
		panic("no return value specified for GetDbSchemaFromPrefix")
	}

	var r0 []*mgmtv1alpha1.DatabaseColumn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*mgmtv1alpha1.DatabaseColumn, error)); ok {
		return rf(ctx, bucketName, prefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*mgmtv1alpha1.DatabaseColumn); ok {
		r0 = rf(ctx, bucketName, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mgmtv1alpha1.DatabaseColumn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketName, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetDbSchemaFromPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDbSchemaFromPrefix'
type MockClientInterface_GetDbSchemaFromPrefix_Call struct {
	*mock.Call
}

// GetDbSchemaFromPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - prefix string
func (_e *MockClientInterface_Expecter) GetDbSchemaFromPrefix(ctx interface{}, bucketName interface{}, prefix interface{}) *MockClientInterface_GetDbSchemaFromPrefix_Call {
	return &MockClientInterface_GetDbSchemaFromPrefix_Call{Call: _e.mock.On("GetDbSchemaFromPrefix", ctx, bucketName, prefix)}
}

func (_c *MockClientInterface_GetDbSchemaFromPrefix_Call) Run(run func(ctx context.Context, bucketName string, prefix string)) *MockClientInterface_GetDbSchemaFromPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetDbSchemaFromPrefix_Call) Return(_a0 []*mgmtv1alpha1.DatabaseColumn, _a1 error) *MockClientInterface_GetDbSchemaFromPrefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetDbSchemaFromPrefix_Call) RunAndReturn(run func(context.Context, string, string) ([]*mgmtv1alpha1.DatabaseColumn, error)) *MockClientInterface_GetDbSchemaFromPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordStreamFromPrefix provides a mock function with given fields: ctx, bucketName, prefix, onRecord
func (_m *MockClientInterface) GetRecordStreamFromPrefix(ctx context.Context, bucketName string, prefix string, onRecord func(map[string][]byte) error) error {
	ret := _m.Called(ctx, bucketName, prefix, onRecord)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordStreamFromPrefix")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, func(map[string][]byte) error) error); ok {
		r0 = rf(ctx, bucketName, prefix, onRecord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_GetRecordStreamFromPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordStreamFromPrefix'
type MockClientInterface_GetRecordStreamFromPrefix_Call struct {
	*mock.Call
}

// GetRecordStreamFromPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - prefix string
//   - onRecord func(map[string][]byte) error
func (_e *MockClientInterface_Expecter) GetRecordStreamFromPrefix(ctx interface{}, bucketName interface{}, prefix interface{}, onRecord interface{}) *MockClientInterface_GetRecordStreamFromPrefix_Call {
	return &MockClientInterface_GetRecordStreamFromPrefix_Call{Call: _e.mock.On("GetRecordStreamFromPrefix", ctx, bucketName, prefix, onRecord)}
}

func (_c *MockClientInterface_GetRecordStreamFromPrefix_Call) Run(run func(ctx context.Context, bucketName string, prefix string, onRecord func(map[string][]byte) error)) *MockClientInterface_GetRecordStreamFromPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(func(map[string][]byte) error))
	})
	return _c
}

func (_c *MockClientInterface_GetRecordStreamFromPrefix_Call) Return(_a0 error) *MockClientInterface_GetRecordStreamFromPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_GetRecordStreamFromPrefix_Call) RunAndReturn(run func(context.Context, string, string, func(map[string][]byte) error) error) *MockClientInterface_GetRecordStreamFromPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
