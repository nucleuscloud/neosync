// Code generated by mockery. DO NOT EDIT.

package auth0

import (
	context "context"

	management "github.com/auth0/go-auth0/management"
	mock "github.com/stretchr/testify/mock"
)

// MockAuth0MgmtClientInterface is an autogenerated mock type for the Auth0MgmtClientInterface type
type MockAuth0MgmtClientInterface struct {
	mock.Mock
}

type MockAuth0MgmtClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuth0MgmtClientInterface) EXPECT() *MockAuth0MgmtClientInterface_Expecter {
	return &MockAuth0MgmtClientInterface_Expecter{mock: &_m.Mock}
}

// GetUserById provides a mock function with given fields: ctx, id
func (_m *MockAuth0MgmtClientInterface) GetUserById(ctx context.Context, id string) (*management.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *management.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*management.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *management.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*management.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuth0MgmtClientInterface_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockAuth0MgmtClientInterface_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAuth0MgmtClientInterface_Expecter) GetUserById(ctx interface{}, id interface{}) *MockAuth0MgmtClientInterface_GetUserById_Call {
	return &MockAuth0MgmtClientInterface_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, id)}
}

func (_c *MockAuth0MgmtClientInterface_GetUserById_Call) Run(run func(ctx context.Context, id string)) *MockAuth0MgmtClientInterface_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuth0MgmtClientInterface_GetUserById_Call) Return(_a0 *management.User, _a1 error) *MockAuth0MgmtClientInterface_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuth0MgmtClientInterface_GetUserById_Call) RunAndReturn(run func(context.Context, string) (*management.User, error)) *MockAuth0MgmtClientInterface_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuth0MgmtClientInterface creates a new instance of MockAuth0MgmtClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuth0MgmtClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuth0MgmtClientInterface {
	mock := &MockAuth0MgmtClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
