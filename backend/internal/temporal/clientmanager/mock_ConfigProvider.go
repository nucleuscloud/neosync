// Code generated by mockery. DO NOT EDIT.

package clientmanager

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockConfigProvider is an autogenerated mock type for the ConfigProvider type
type MockConfigProvider struct {
	mock.Mock
}

type MockConfigProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigProvider) EXPECT() *MockConfigProvider_Expecter {
	return &MockConfigProvider_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function with given fields: ctx, accountID
func (_m *MockConfigProvider) GetConfig(ctx context.Context, accountID string) (*TemporalConfig, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *TemporalConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*TemporalConfig, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *TemporalConfig); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TemporalConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigProvider_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockConfigProvider_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID string
func (_e *MockConfigProvider_Expecter) GetConfig(ctx interface{}, accountID interface{}) *MockConfigProvider_GetConfig_Call {
	return &MockConfigProvider_GetConfig_Call{Call: _e.mock.On("GetConfig", ctx, accountID)}
}

func (_c *MockConfigProvider_GetConfig_Call) Run(run func(ctx context.Context, accountID string)) *MockConfigProvider_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockConfigProvider_GetConfig_Call) Return(_a0 *TemporalConfig, _a1 error) *MockConfigProvider_GetConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigProvider_GetConfig_Call) RunAndReturn(run func(context.Context, string) (*TemporalConfig, error)) *MockConfigProvider_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigProvider creates a new instance of MockConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigProvider {
	mock := &MockConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
