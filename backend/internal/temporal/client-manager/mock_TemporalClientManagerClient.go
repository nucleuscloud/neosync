// Code generated by mockery. DO NOT EDIT.

package clientmanager

import (
	context "context"

	client "go.temporal.io/sdk/client"

	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// MockTemporalClientManagerClient is an autogenerated mock type for the TemporalClientManagerClient type
type MockTemporalClientManagerClient struct {
	mock.Mock
}

type MockTemporalClientManagerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemporalClientManagerClient) EXPECT() *MockTemporalClientManagerClient_Expecter {
	return &MockTemporalClientManagerClient_Expecter{mock: &_m.Mock}
}

// ClearNamespaceClientByAccount provides a mock function with given fields: ctx, accountId
func (_m *MockTemporalClientManagerClient) ClearNamespaceClientByAccount(ctx context.Context, accountId string) {
	_m.Called(ctx, accountId)
}

// MockTemporalClientManagerClient_ClearNamespaceClientByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearNamespaceClientByAccount'
type MockTemporalClientManagerClient_ClearNamespaceClientByAccount_Call struct {
	*mock.Call
}

// ClearNamespaceClientByAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - accountId string
func (_e *MockTemporalClientManagerClient_Expecter) ClearNamespaceClientByAccount(ctx interface{}, accountId interface{}) *MockTemporalClientManagerClient_ClearNamespaceClientByAccount_Call {
	return &MockTemporalClientManagerClient_ClearNamespaceClientByAccount_Call{Call: _e.mock.On("ClearNamespaceClientByAccount", ctx, accountId)}
}

func (_c *MockTemporalClientManagerClient_ClearNamespaceClientByAccount_Call) Run(run func(ctx context.Context, accountId string)) *MockTemporalClientManagerClient_ClearNamespaceClientByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTemporalClientManagerClient_ClearNamespaceClientByAccount_Call) Return() *MockTemporalClientManagerClient_ClearNamespaceClientByAccount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTemporalClientManagerClient_ClearNamespaceClientByAccount_Call) RunAndReturn(run func(context.Context, string)) *MockTemporalClientManagerClient_ClearNamespaceClientByAccount_Call {
	_c.Call.Return(run)
	return _c
}

// ClearWorkflowClientByAccount provides a mock function with given fields: ctx, accountId
func (_m *MockTemporalClientManagerClient) ClearWorkflowClientByAccount(ctx context.Context, accountId string) {
	_m.Called(ctx, accountId)
}

// MockTemporalClientManagerClient_ClearWorkflowClientByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearWorkflowClientByAccount'
type MockTemporalClientManagerClient_ClearWorkflowClientByAccount_Call struct {
	*mock.Call
}

// ClearWorkflowClientByAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - accountId string
func (_e *MockTemporalClientManagerClient_Expecter) ClearWorkflowClientByAccount(ctx interface{}, accountId interface{}) *MockTemporalClientManagerClient_ClearWorkflowClientByAccount_Call {
	return &MockTemporalClientManagerClient_ClearWorkflowClientByAccount_Call{Call: _e.mock.On("ClearWorkflowClientByAccount", ctx, accountId)}
}

func (_c *MockTemporalClientManagerClient_ClearWorkflowClientByAccount_Call) Run(run func(ctx context.Context, accountId string)) *MockTemporalClientManagerClient_ClearWorkflowClientByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTemporalClientManagerClient_ClearWorkflowClientByAccount_Call) Return() *MockTemporalClientManagerClient_ClearWorkflowClientByAccount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTemporalClientManagerClient_ClearWorkflowClientByAccount_Call) RunAndReturn(run func(context.Context, string)) *MockTemporalClientManagerClient_ClearWorkflowClientByAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespaceClientByAccount provides a mock function with given fields: ctx, accountId, logger
func (_m *MockTemporalClientManagerClient) GetNamespaceClientByAccount(ctx context.Context, accountId string, logger *slog.Logger) (client.NamespaceClient, error) {
	ret := _m.Called(ctx, accountId, logger)

	var r0 client.NamespaceClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *slog.Logger) (client.NamespaceClient, error)); ok {
		return rf(ctx, accountId, logger)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *slog.Logger) client.NamespaceClient); ok {
		r0 = rf(ctx, accountId, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.NamespaceClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *slog.Logger) error); ok {
		r1 = rf(ctx, accountId, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClientManagerClient_GetNamespaceClientByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespaceClientByAccount'
type MockTemporalClientManagerClient_GetNamespaceClientByAccount_Call struct {
	*mock.Call
}

// GetNamespaceClientByAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - accountId string
//   - logger *slog.Logger
func (_e *MockTemporalClientManagerClient_Expecter) GetNamespaceClientByAccount(ctx interface{}, accountId interface{}, logger interface{}) *MockTemporalClientManagerClient_GetNamespaceClientByAccount_Call {
	return &MockTemporalClientManagerClient_GetNamespaceClientByAccount_Call{Call: _e.mock.On("GetNamespaceClientByAccount", ctx, accountId, logger)}
}

func (_c *MockTemporalClientManagerClient_GetNamespaceClientByAccount_Call) Run(run func(ctx context.Context, accountId string, logger *slog.Logger)) *MockTemporalClientManagerClient_GetNamespaceClientByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*slog.Logger))
	})
	return _c
}

func (_c *MockTemporalClientManagerClient_GetNamespaceClientByAccount_Call) Return(_a0 client.NamespaceClient, _a1 error) *MockTemporalClientManagerClient_GetNamespaceClientByAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClientManagerClient_GetNamespaceClientByAccount_Call) RunAndReturn(run func(context.Context, string, *slog.Logger) (client.NamespaceClient, error)) *MockTemporalClientManagerClient_GetNamespaceClientByAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheduleClientByAccount provides a mock function with given fields: ctx, accountId, logger
func (_m *MockTemporalClientManagerClient) GetScheduleClientByAccount(ctx context.Context, accountId string, logger *slog.Logger) (client.ScheduleClient, error) {
	ret := _m.Called(ctx, accountId, logger)

	var r0 client.ScheduleClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *slog.Logger) (client.ScheduleClient, error)); ok {
		return rf(ctx, accountId, logger)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *slog.Logger) client.ScheduleClient); ok {
		r0 = rf(ctx, accountId, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.ScheduleClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *slog.Logger) error); ok {
		r1 = rf(ctx, accountId, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClientManagerClient_GetScheduleClientByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduleClientByAccount'
type MockTemporalClientManagerClient_GetScheduleClientByAccount_Call struct {
	*mock.Call
}

// GetScheduleClientByAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - accountId string
//   - logger *slog.Logger
func (_e *MockTemporalClientManagerClient_Expecter) GetScheduleClientByAccount(ctx interface{}, accountId interface{}, logger interface{}) *MockTemporalClientManagerClient_GetScheduleClientByAccount_Call {
	return &MockTemporalClientManagerClient_GetScheduleClientByAccount_Call{Call: _e.mock.On("GetScheduleClientByAccount", ctx, accountId, logger)}
}

func (_c *MockTemporalClientManagerClient_GetScheduleClientByAccount_Call) Run(run func(ctx context.Context, accountId string, logger *slog.Logger)) *MockTemporalClientManagerClient_GetScheduleClientByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*slog.Logger))
	})
	return _c
}

func (_c *MockTemporalClientManagerClient_GetScheduleClientByAccount_Call) Return(_a0 client.ScheduleClient, _a1 error) *MockTemporalClientManagerClient_GetScheduleClientByAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClientManagerClient_GetScheduleClientByAccount_Call) RunAndReturn(run func(context.Context, string, *slog.Logger) (client.ScheduleClient, error)) *MockTemporalClientManagerClient_GetScheduleClientByAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheduleHandleClientByAccount provides a mock function with given fields: ctx, accountId, scheduleId, logger
func (_m *MockTemporalClientManagerClient) GetScheduleHandleClientByAccount(ctx context.Context, accountId string, scheduleId string, logger *slog.Logger) (client.ScheduleHandle, error) {
	ret := _m.Called(ctx, accountId, scheduleId, logger)

	var r0 client.ScheduleHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *slog.Logger) (client.ScheduleHandle, error)); ok {
		return rf(ctx, accountId, scheduleId, logger)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *slog.Logger) client.ScheduleHandle); ok {
		r0 = rf(ctx, accountId, scheduleId, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.ScheduleHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *slog.Logger) error); ok {
		r1 = rf(ctx, accountId, scheduleId, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClientManagerClient_GetScheduleHandleClientByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduleHandleClientByAccount'
type MockTemporalClientManagerClient_GetScheduleHandleClientByAccount_Call struct {
	*mock.Call
}

// GetScheduleHandleClientByAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - accountId string
//   - scheduleId string
//   - logger *slog.Logger
func (_e *MockTemporalClientManagerClient_Expecter) GetScheduleHandleClientByAccount(ctx interface{}, accountId interface{}, scheduleId interface{}, logger interface{}) *MockTemporalClientManagerClient_GetScheduleHandleClientByAccount_Call {
	return &MockTemporalClientManagerClient_GetScheduleHandleClientByAccount_Call{Call: _e.mock.On("GetScheduleHandleClientByAccount", ctx, accountId, scheduleId, logger)}
}

func (_c *MockTemporalClientManagerClient_GetScheduleHandleClientByAccount_Call) Run(run func(ctx context.Context, accountId string, scheduleId string, logger *slog.Logger)) *MockTemporalClientManagerClient_GetScheduleHandleClientByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*slog.Logger))
	})
	return _c
}

func (_c *MockTemporalClientManagerClient_GetScheduleHandleClientByAccount_Call) Return(_a0 client.ScheduleHandle, _a1 error) *MockTemporalClientManagerClient_GetScheduleHandleClientByAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClientManagerClient_GetScheduleHandleClientByAccount_Call) RunAndReturn(run func(context.Context, string, string, *slog.Logger) (client.ScheduleHandle, error)) *MockTemporalClientManagerClient_GetScheduleHandleClientByAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowClientByAccount provides a mock function with given fields: ctx, accountId, logger
func (_m *MockTemporalClientManagerClient) GetWorkflowClientByAccount(ctx context.Context, accountId string, logger *slog.Logger) (client.Client, error) {
	ret := _m.Called(ctx, accountId, logger)

	var r0 client.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *slog.Logger) (client.Client, error)); ok {
		return rf(ctx, accountId, logger)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *slog.Logger) client.Client); ok {
		r0 = rf(ctx, accountId, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *slog.Logger) error); ok {
		r1 = rf(ctx, accountId, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemporalClientManagerClient_GetWorkflowClientByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowClientByAccount'
type MockTemporalClientManagerClient_GetWorkflowClientByAccount_Call struct {
	*mock.Call
}

// GetWorkflowClientByAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - accountId string
//   - logger *slog.Logger
func (_e *MockTemporalClientManagerClient_Expecter) GetWorkflowClientByAccount(ctx interface{}, accountId interface{}, logger interface{}) *MockTemporalClientManagerClient_GetWorkflowClientByAccount_Call {
	return &MockTemporalClientManagerClient_GetWorkflowClientByAccount_Call{Call: _e.mock.On("GetWorkflowClientByAccount", ctx, accountId, logger)}
}

func (_c *MockTemporalClientManagerClient_GetWorkflowClientByAccount_Call) Run(run func(ctx context.Context, accountId string, logger *slog.Logger)) *MockTemporalClientManagerClient_GetWorkflowClientByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*slog.Logger))
	})
	return _c
}

func (_c *MockTemporalClientManagerClient_GetWorkflowClientByAccount_Call) Return(_a0 client.Client, _a1 error) *MockTemporalClientManagerClient_GetWorkflowClientByAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemporalClientManagerClient_GetWorkflowClientByAccount_Call) RunAndReturn(run func(context.Context, string, *slog.Logger) (client.Client, error)) *MockTemporalClientManagerClient_GetWorkflowClientByAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemporalClientManagerClient creates a new instance of MockTemporalClientManagerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemporalClientManagerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemporalClientManagerClient {
	mock := &MockTemporalClientManagerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
