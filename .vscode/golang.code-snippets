{
  // Place your neosync workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Insert RPC Method File": {
    "scope": "go",
    "prefix": "Insert RPC Method into empty file",
    "description": "For creating a new service rpc file from scratch",
    "body": [
      "package $1",
      "",
      "import (",
      "  \"context\"",
      "",
      "  \"connectrpc.com/connect\"",
      "  \"mgmtv1alpha1 \"github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1\"",
      "",
      "func (s *Service) $2(",
      "  ctx context.Context,",
      "  req *connect.Request[mgmtv1alpha1.$2Request],",
      ") (*connect.Response[mgmtv1alpha1.$2Response], error) {",
      "  return connect.NewResponse(&mgmtv1alpha1.$2Response{}), nil",
      "}",
      "$0"
    ],
    "isFileTemplate": true
  },
  "Append RPC Method File": {
    "scope": "go",
    "prefix": "Append RPC Method into existing file",
    "description": "For creating a new service rpc method in an existing file",
    "body": [
      "func (s *Service) $1(",
      "  ctx context.Context,",
      "  req *connect.Request[mgmtv1alpha1.$1Request],",
      ") (*connect.Response[mgmtv1alpha1.$1Response], error) {",
      "  return connect.NewResponse(&mgmtv1alpha1.$1Response{}), nil",
      "}",
      "$0"
    ],
    "isFileTemplate": false
  }
}
