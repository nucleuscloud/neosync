// Code generated by mockery. DO NOT EDIT.

package rng

import mock "github.com/stretchr/testify/mock"

// MockRand is an autogenerated mock type for the Rand type
type MockRand struct {
	mock.Mock
}

type MockRand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRand) EXPECT() *MockRand_Expecter {
	return &MockRand_Expecter{mock: &_m.Mock}
}

// Float64 provides a mock function with no fields
func (_m *MockRand) Float64() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Float64")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockRand_Float64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Float64'
type MockRand_Float64_Call struct {
	*mock.Call
}

// Float64 is a helper method to define mock.On call
func (_e *MockRand_Expecter) Float64() *MockRand_Float64_Call {
	return &MockRand_Float64_Call{Call: _e.mock.On("Float64")}
}

func (_c *MockRand_Float64_Call) Run(run func()) *MockRand_Float64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRand_Float64_Call) Return(_a0 float64) *MockRand_Float64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRand_Float64_Call) RunAndReturn(run func() float64) *MockRand_Float64_Call {
	_c.Call.Return(run)
	return _c
}

// Int provides a mock function with no fields
func (_m *MockRand) Int() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Int")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockRand_Int_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Int'
type MockRand_Int_Call struct {
	*mock.Call
}

// Int is a helper method to define mock.On call
func (_e *MockRand_Expecter) Int() *MockRand_Int_Call {
	return &MockRand_Int_Call{Call: _e.mock.On("Int")}
}

func (_c *MockRand_Int_Call) Run(run func()) *MockRand_Int_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRand_Int_Call) Return(_a0 int) *MockRand_Int_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRand_Int_Call) RunAndReturn(run func() int) *MockRand_Int_Call {
	_c.Call.Return(run)
	return _c
}

// Int63 provides a mock function with no fields
func (_m *MockRand) Int63() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Int63")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockRand_Int63_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Int63'
type MockRand_Int63_Call struct {
	*mock.Call
}

// Int63 is a helper method to define mock.On call
func (_e *MockRand_Expecter) Int63() *MockRand_Int63_Call {
	return &MockRand_Int63_Call{Call: _e.mock.On("Int63")}
}

func (_c *MockRand_Int63_Call) Run(run func()) *MockRand_Int63_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRand_Int63_Call) Return(_a0 int64) *MockRand_Int63_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRand_Int63_Call) RunAndReturn(run func() int64) *MockRand_Int63_Call {
	_c.Call.Return(run)
	return _c
}

// Int63n provides a mock function with given fields: n
func (_m *MockRand) Int63n(n int64) int64 {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for Int63n")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockRand_Int63n_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Int63n'
type MockRand_Int63n_Call struct {
	*mock.Call
}

// Int63n is a helper method to define mock.On call
//   - n int64
func (_e *MockRand_Expecter) Int63n(n interface{}) *MockRand_Int63n_Call {
	return &MockRand_Int63n_Call{Call: _e.mock.On("Int63n", n)}
}

func (_c *MockRand_Int63n_Call) Run(run func(n int64)) *MockRand_Int63n_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockRand_Int63n_Call) Return(_a0 int64) *MockRand_Int63n_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRand_Int63n_Call) RunAndReturn(run func(int64) int64) *MockRand_Int63n_Call {
	_c.Call.Return(run)
	return _c
}

// Intn provides a mock function with given fields: n
func (_m *MockRand) Intn(n int) int {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for Intn")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockRand_Intn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Intn'
type MockRand_Intn_Call struct {
	*mock.Call
}

// Intn is a helper method to define mock.On call
//   - n int
func (_e *MockRand_Expecter) Intn(n interface{}) *MockRand_Intn_Call {
	return &MockRand_Intn_Call{Call: _e.mock.On("Intn", n)}
}

func (_c *MockRand_Intn_Call) Run(run func(n int)) *MockRand_Intn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRand_Intn_Call) Return(_a0 int) *MockRand_Intn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRand_Intn_Call) RunAndReturn(run func(int) int) *MockRand_Intn_Call {
	_c.Call.Return(run)
	return _c
}

// Uint provides a mock function with no fields
func (_m *MockRand) Uint() uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Uint")
	}

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// MockRand_Uint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Uint'
type MockRand_Uint_Call struct {
	*mock.Call
}

// Uint is a helper method to define mock.On call
func (_e *MockRand_Expecter) Uint() *MockRand_Uint_Call {
	return &MockRand_Uint_Call{Call: _e.mock.On("Uint")}
}

func (_c *MockRand_Uint_Call) Run(run func()) *MockRand_Uint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRand_Uint_Call) Return(_a0 uint) *MockRand_Uint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRand_Uint_Call) RunAndReturn(run func() uint) *MockRand_Uint_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRand creates a new instance of MockRand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRand {
	mock := &MockRand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
