// Code generated by mockery. DO NOT EDIT.

package piidetect_table_activities

import (
	context "context"

	openai "github.com/openai/openai-go"
	mock "github.com/stretchr/testify/mock"

	option "github.com/openai/openai-go/option"
)

// MockOpenAiCompletionsClient is an autogenerated mock type for the OpenAiCompletionsClient type
type MockOpenAiCompletionsClient struct {
	mock.Mock
}

type MockOpenAiCompletionsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOpenAiCompletionsClient) EXPECT() *MockOpenAiCompletionsClient_Expecter {
	return &MockOpenAiCompletionsClient_Expecter{mock: &_m.Mock}
}

// New provides a mock function with given fields: ctx, body, opts
func (_m *MockOpenAiCompletionsClient) New(ctx context.Context, body openai.ChatCompletionNewParams, opts ...option.RequestOption) (*openai.ChatCompletion, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 *openai.ChatCompletion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, openai.ChatCompletionNewParams, ...option.RequestOption) (*openai.ChatCompletion, error)); ok {
		return rf(ctx, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, openai.ChatCompletionNewParams, ...option.RequestOption) *openai.ChatCompletion); ok {
		r0 = rf(ctx, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openai.ChatCompletion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, openai.ChatCompletionNewParams, ...option.RequestOption) error); ok {
		r1 = rf(ctx, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOpenAiCompletionsClient_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type MockOpenAiCompletionsClient_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - ctx context.Context
//   - body openai.ChatCompletionNewParams
//   - opts ...option.RequestOption
func (_e *MockOpenAiCompletionsClient_Expecter) New(ctx interface{}, body interface{}, opts ...interface{}) *MockOpenAiCompletionsClient_New_Call {
	return &MockOpenAiCompletionsClient_New_Call{Call: _e.mock.On("New",
		append([]interface{}{ctx, body}, opts...)...)}
}

func (_c *MockOpenAiCompletionsClient_New_Call) Run(run func(ctx context.Context, body openai.ChatCompletionNewParams, opts ...option.RequestOption)) *MockOpenAiCompletionsClient_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]option.RequestOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(option.RequestOption)
			}
		}
		run(args[0].(context.Context), args[1].(openai.ChatCompletionNewParams), variadicArgs...)
	})
	return _c
}

func (_c *MockOpenAiCompletionsClient_New_Call) Return(res *openai.ChatCompletion, err error) *MockOpenAiCompletionsClient_New_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockOpenAiCompletionsClient_New_Call) RunAndReturn(run func(context.Context, openai.ChatCompletionNewParams, ...option.RequestOption) (*openai.ChatCompletion, error)) *MockOpenAiCompletionsClient_New_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOpenAiCompletionsClient creates a new instance of MockOpenAiCompletionsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOpenAiCompletionsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOpenAiCompletionsClient {
	mock := &MockOpenAiCompletionsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
