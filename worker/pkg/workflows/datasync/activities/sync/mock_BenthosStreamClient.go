// Code generated by mockery. DO NOT EDIT.

package sync_activity

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockBenthosStreamClient is an autogenerated mock type for the BenthosStreamClient type
type MockBenthosStreamClient struct {
	mock.Mock
}

type MockBenthosStreamClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBenthosStreamClient) EXPECT() *MockBenthosStreamClient_Expecter {
	return &MockBenthosStreamClient_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx
func (_m *MockBenthosStreamClient) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBenthosStreamClient_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockBenthosStreamClient_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBenthosStreamClient_Expecter) Run(ctx interface{}) *MockBenthosStreamClient_Run_Call {
	return &MockBenthosStreamClient_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockBenthosStreamClient_Run_Call) Run(run func(ctx context.Context)) *MockBenthosStreamClient_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBenthosStreamClient_Run_Call) Return(_a0 error) *MockBenthosStreamClient_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBenthosStreamClient_Run_Call) RunAndReturn(run func(context.Context) error) *MockBenthosStreamClient_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *MockBenthosStreamClient) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBenthosStreamClient_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockBenthosStreamClient_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBenthosStreamClient_Expecter) Stop(ctx interface{}) *MockBenthosStreamClient_Stop_Call {
	return &MockBenthosStreamClient_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockBenthosStreamClient_Stop_Call) Run(run func(ctx context.Context)) *MockBenthosStreamClient_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBenthosStreamClient_Stop_Call) Return(_a0 error) *MockBenthosStreamClient_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBenthosStreamClient_Stop_Call) RunAndReturn(run func(context.Context) error) *MockBenthosStreamClient_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// StopWithin provides a mock function with given fields: d
func (_m *MockBenthosStreamClient) StopWithin(d time.Duration) error {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for StopWithin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBenthosStreamClient_StopWithin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopWithin'
type MockBenthosStreamClient_StopWithin_Call struct {
	*mock.Call
}

// StopWithin is a helper method to define mock.On call
//   - d time.Duration
func (_e *MockBenthosStreamClient_Expecter) StopWithin(d interface{}) *MockBenthosStreamClient_StopWithin_Call {
	return &MockBenthosStreamClient_StopWithin_Call{Call: _e.mock.On("StopWithin", d)}
}

func (_c *MockBenthosStreamClient_StopWithin_Call) Run(run func(d time.Duration)) *MockBenthosStreamClient_StopWithin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockBenthosStreamClient_StopWithin_Call) Return(_a0 error) *MockBenthosStreamClient_StopWithin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBenthosStreamClient_StopWithin_Call) RunAndReturn(run func(time.Duration) error) *MockBenthosStreamClient_StopWithin_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBenthosStreamClient creates a new instance of MockBenthosStreamClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBenthosStreamClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBenthosStreamClient {
	mock := &MockBenthosStreamClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
