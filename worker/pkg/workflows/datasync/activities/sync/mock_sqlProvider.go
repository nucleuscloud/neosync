// Code generated by mockery. DO NOT EDIT.

package sync_activity

import (
	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"

	slog "log/slog"

	sqlconnect "github.com/nucleuscloud/neosync/backend/pkg/sqlconnect"
)

// MocksqlProvider is an autogenerated mock type for the sqlProvider type
type MocksqlProvider struct {
	mock.Mock
}

type MocksqlProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MocksqlProvider) EXPECT() *MocksqlProvider_Expecter {
	return &MocksqlProvider_Expecter{mock: &_m.Mock}
}

// DbOpen provides a mock function with given fields: driver, dsn
func (_m *MocksqlProvider) DbOpen(driver string, dsn string) (sqlDbtx, error) {
	ret := _m.Called(driver, dsn)

	if len(ret) == 0 {
		panic("no return value specified for DbOpen")
	}

	var r0 sqlDbtx
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (sqlDbtx, error)); ok {
		return rf(driver, dsn)
	}
	if rf, ok := ret.Get(0).(func(string, string) sqlDbtx); ok {
		r0 = rf(driver, dsn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sqlDbtx)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(driver, dsn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MocksqlProvider_DbOpen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DbOpen'
type MocksqlProvider_DbOpen_Call struct {
	*mock.Call
}

// DbOpen is a helper method to define mock.On call
//   - driver string
//   - dsn string
func (_e *MocksqlProvider_Expecter) DbOpen(driver interface{}, dsn interface{}) *MocksqlProvider_DbOpen_Call {
	return &MocksqlProvider_DbOpen_Call{Call: _e.mock.On("DbOpen", driver, dsn)}
}

func (_c *MocksqlProvider_DbOpen_Call) Run(run func(driver string, dsn string)) *MocksqlProvider_DbOpen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MocksqlProvider_DbOpen_Call) Return(_a0 sqlDbtx, _a1 error) *MocksqlProvider_DbOpen_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MocksqlProvider_DbOpen_Call) RunAndReturn(run func(string, string) (sqlDbtx, error)) *MocksqlProvider_DbOpen_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionDetails provides a mock function with given fields: cc, connTimeout, logger
func (_m *MocksqlProvider) GetConnectionDetails(cc *mgmtv1alpha1.ConnectionConfig, connTimeout *uint32, logger *slog.Logger) (*sqlconnect.ConnectionDetails, error) {
	ret := _m.Called(cc, connTimeout, logger)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionDetails")
	}

	var r0 *sqlconnect.ConnectionDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(*mgmtv1alpha1.ConnectionConfig, *uint32, *slog.Logger) (*sqlconnect.ConnectionDetails, error)); ok {
		return rf(cc, connTimeout, logger)
	}
	if rf, ok := ret.Get(0).(func(*mgmtv1alpha1.ConnectionConfig, *uint32, *slog.Logger) *sqlconnect.ConnectionDetails); ok {
		r0 = rf(cc, connTimeout, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlconnect.ConnectionDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(*mgmtv1alpha1.ConnectionConfig, *uint32, *slog.Logger) error); ok {
		r1 = rf(cc, connTimeout, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MocksqlProvider_GetConnectionDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionDetails'
type MocksqlProvider_GetConnectionDetails_Call struct {
	*mock.Call
}

// GetConnectionDetails is a helper method to define mock.On call
//   - cc *mgmtv1alpha1.ConnectionConfig
//   - connTimeout *uint32
//   - logger *slog.Logger
func (_e *MocksqlProvider_Expecter) GetConnectionDetails(cc interface{}, connTimeout interface{}, logger interface{}) *MocksqlProvider_GetConnectionDetails_Call {
	return &MocksqlProvider_GetConnectionDetails_Call{Call: _e.mock.On("GetConnectionDetails", cc, connTimeout, logger)}
}

func (_c *MocksqlProvider_GetConnectionDetails_Call) Run(run func(cc *mgmtv1alpha1.ConnectionConfig, connTimeout *uint32, logger *slog.Logger)) *MocksqlProvider_GetConnectionDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mgmtv1alpha1.ConnectionConfig), args[1].(*uint32), args[2].(*slog.Logger))
	})
	return _c
}

func (_c *MocksqlProvider_GetConnectionDetails_Call) Return(_a0 *sqlconnect.ConnectionDetails, _a1 error) *MocksqlProvider_GetConnectionDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MocksqlProvider_GetConnectionDetails_Call) RunAndReturn(run func(*mgmtv1alpha1.ConnectionConfig, *uint32, *slog.Logger) (*sqlconnect.ConnectionDetails, error)) *MocksqlProvider_GetConnectionDetails_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocksqlProvider creates a new instance of MocksqlProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksqlProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocksqlProvider {
	mock := &MocksqlProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
