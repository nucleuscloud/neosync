// Code generated by mockery. DO NOT EDIT.

package tablesync_shared

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockBlockAllocator is an autogenerated mock type for the BlockAllocator type
type MockBlockAllocator struct {
	mock.Mock
}

type MockBlockAllocator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlockAllocator) EXPECT() *MockBlockAllocator_Expecter {
	return &MockBlockAllocator_Expecter{mock: &_m.Mock}
}

// GetNextBlock provides a mock function with given fields: ctx, token, blockSize
func (_m *MockBlockAllocator) GetNextBlock(ctx context.Context, token string, blockSize uint) (*IdentityRange, error) {
	ret := _m.Called(ctx, token, blockSize)

	if len(ret) == 0 {
		panic("no return value specified for GetNextBlock")
	}

	var r0 *IdentityRange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) (*IdentityRange, error)); ok {
		return rf(ctx, token, blockSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) *IdentityRange); ok {
		r0 = rf(ctx, token, blockSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IdentityRange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint) error); ok {
		r1 = rf(ctx, token, blockSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlockAllocator_GetNextBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextBlock'
type MockBlockAllocator_GetNextBlock_Call struct {
	*mock.Call
}

// GetNextBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - blockSize uint
func (_e *MockBlockAllocator_Expecter) GetNextBlock(ctx interface{}, token interface{}, blockSize interface{}) *MockBlockAllocator_GetNextBlock_Call {
	return &MockBlockAllocator_GetNextBlock_Call{Call: _e.mock.On("GetNextBlock", ctx, token, blockSize)}
}

func (_c *MockBlockAllocator_GetNextBlock_Call) Run(run func(ctx context.Context, token string, blockSize uint)) *MockBlockAllocator_GetNextBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint))
	})
	return _c
}

func (_c *MockBlockAllocator_GetNextBlock_Call) Return(_a0 *IdentityRange, _a1 error) *MockBlockAllocator_GetNextBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlockAllocator_GetNextBlock_Call) RunAndReturn(run func(context.Context, string, uint) (*IdentityRange, error)) *MockBlockAllocator_GetNextBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlockAllocator creates a new instance of MockBlockAllocator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlockAllocator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlockAllocator {
	mock := &MockBlockAllocator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
