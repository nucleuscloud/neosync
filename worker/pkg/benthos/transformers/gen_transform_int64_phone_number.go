
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: transform_int64_phone_number.go

package transformers

import (
	"fmt"
	
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
)

type TransformInt64PhoneNumber struct{}

type TransformInt64PhoneNumberOpts struct {
	randomizer     rng.Rand
	
	preserveLength bool
}

func NewTransformInt64PhoneNumber() *TransformInt64PhoneNumber {
	return &TransformInt64PhoneNumber{}
}

func NewTransformInt64PhoneNumberOpts(
	preserveLengthArg *bool,
  seedArg *int64,
) (*TransformInt64PhoneNumberOpts, error) {
	preserveLength := bool(false) 
	if preserveLengthArg != nil && !transformer_utils.IsZeroValue(*preserveLengthArg) {
		preserveLength = *preserveLengthArg
	}
	
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &TransformInt64PhoneNumberOpts{
		preserveLength: preserveLength,
		randomizer: rng.New(seed),	
	}, nil
}

func (t *TransformInt64PhoneNumber) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "transformInt64PhoneNumber",
		Description: "Anonymizes and transforms an existing int64 phone number.",
		Example: "",
	}, nil
}

func (t *TransformInt64PhoneNumber) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &TransformInt64PhoneNumberOpts{}

	preserveLength, ok := opts["preserveLength"].(bool)
	if !ok {
		preserveLength = false
	}
	transformerOpts.preserveLength = preserveLength

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
