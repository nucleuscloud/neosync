
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: transform_string_phone_number.go

package transformers

import (
	"strings"
	"fmt"
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type TransformStringPhoneNumber struct{}

type TransformStringPhoneNumberOpts struct {
	randomizer     rng.Rand
	
	preserveLength bool
	maxLength int64
}

func NewTransformStringPhoneNumber() *TransformStringPhoneNumber {
	return &TransformStringPhoneNumber{}
}

func NewTransformStringPhoneNumberOpts(
	preserveLengthArg *bool,
	maxLengthArg *int64,
  seedArg *int64,
) (*TransformStringPhoneNumberOpts, error) {
	preserveLength := bool(false)
	if preserveLengthArg != nil {
		preserveLength = *preserveLengthArg
	}
	
	maxLength := int64(100)
	if maxLengthArg != nil {
		maxLength = *maxLengthArg
	}
	
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &TransformStringPhoneNumberOpts{
		preserveLength: preserveLength,
		maxLength: maxLength,
		randomizer: rng.New(seed),	
	}, nil
}

func (o *TransformStringPhoneNumberOpts) BuildBloblangString(
	valuePath string,	
) string {
	fnStr := []string{
		"value:this.%s", 
		"preserve_length:%v", 
		"max_length:%v",
	}

	params := []any{
		valuePath,
	 	o.preserveLength,
	 	o.maxLength,
	}

	

	template := fmt.Sprintf("transform_phone_number(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *TransformStringPhoneNumber) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "transformStringPhoneNumber",
		Description: "Anonymizes and transforms an existing phone number that is typed as a string.",
		Example: "",
	}, nil
}

func (t *TransformStringPhoneNumber) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &TransformStringPhoneNumberOpts{}

	preserveLength, ok := opts["preserveLength"].(bool)
	if !ok {
		preserveLength = false
	}
	transformerOpts.preserveLength = preserveLength

	maxLength, ok := opts["maxLength"].(int64)
	if !ok {
		maxLength = 100
	}
	transformerOpts.maxLength = maxLength

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
