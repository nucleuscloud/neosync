
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: transform_string.go

package transformers

import (
)

type TransformString struct{}

type TransformStringOpts struct {
	preserveLength bool
	minLength int64
	maxLength int64
}

func NewTransformString() *TransformString {
	return &TransformString{}
}

func NewTransformStringOpts(
	preserveLengthArg *bool,
	minLengthArg *int64,
	maxLengthArg *int64,
) (*TransformStringOpts, error) {
	preserveLength := bool(false) 
	if preserveLengthArg != nil {
		preserveLength = *preserveLengthArg
	}
	
	minLength := int64(1) 
	if minLengthArg != nil {
		minLength = *minLengthArg
	}
	
	maxLength := int64(20) 
	if maxLengthArg != nil {
		maxLength = *maxLengthArg
	}
	
	return &TransformStringOpts{
		preserveLength: preserveLength,
		minLength: minLength,
		maxLength: maxLength,	
	}, nil
}

func (t *TransformString) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "transformString",
		Description: "Transforms an existing string value.",
		Example: "",
	}, nil
}

func (t *TransformString) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &TransformStringOpts{}

	preserveLength, ok := opts["preserveLength"].(bool)
	if !ok {
		preserveLength = false
	}
	transformerOpts.preserveLength = preserveLength

	minLength, ok := opts["minLength"].(int64)
	if !ok {
		minLength = 1
	}
	transformerOpts.minLength = minLength

	maxLength, ok := opts["maxLength"].(int64)
	if !ok {
		maxLength = 20
	}
	transformerOpts.maxLength = maxLength

	return transformerOpts, nil
}
