
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_float.go

package transformers

import (
	"strings"
	"fmt"
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type GenerateFloat64 struct{}

type GenerateFloat64Opts struct {
	randomizer     rng.Rand
	
	randomizeSign bool
	min float64
	max float64
	precision *int64
	scale *int64
}

func NewGenerateFloat64() *GenerateFloat64 {
	return &GenerateFloat64{}
}

func NewGenerateFloat64Opts(
	randomizeSignArg *bool,
	minArg *float64,
	maxArg *float64,
	precision *int64,
	scale *int64,
  seedArg *int64,
) (*GenerateFloat64Opts, error) {
	randomizeSign := bool(false)
	if randomizeSignArg != nil {
		randomizeSign = *randomizeSignArg
	}
	
	min := float64(1)
	if minArg != nil {
		min = *minArg
	}
	
	max := float64(10000)
	if maxArg != nil {
		max = *maxArg
	}
	
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &GenerateFloat64Opts{
		randomizeSign: randomizeSign,
		min: min,
		max: max,
		precision: precision,
		scale: scale,
		randomizer: rng.New(seed),	
	}, nil
}

func (o *GenerateFloat64Opts) BuildBloblangString(	
) string {
	fnStr := []string{ 
		"randomize_sign:%v", 
		"min:%v", 
		"max:%v",
	}

	params := []any{
	 	o.randomizeSign,
	 	o.min,
	 	o.max,
	}

	
	if o.precision != nil {
		fnStr = append(fnStr, "precision:%v")
		params = append(params, *o.precision)
	}
	if o.scale != nil {
		fnStr = append(fnStr, "scale:%v")
		params = append(params, *o.scale)
	}

	template := fmt.Sprintf("generate_float64(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *GenerateFloat64) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateFloat64",
		Description: "Generates a random floating point number with a max precision of 17. Go float64 adheres to the IEEE 754 standard for double-precision floating-point numbers.",
		Example: "",
	}, nil
}

func (t *GenerateFloat64) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateFloat64Opts{}

	randomizeSign, ok := opts["randomizeSign"].(bool)
	if !ok {
		randomizeSign = false
	}
	transformerOpts.randomizeSign = randomizeSign

	min, ok := opts["min"].(float64)
	if !ok {
		min = 1
	}
	transformerOpts.min = min

	max, ok := opts["max"].(float64)
	if !ok {
		max = 10000
	}
	transformerOpts.max = max

	var precision *int64
	if arg, ok := opts["precision"].(int64); ok {
		precision = &arg
	}
	transformerOpts.precision = precision

	var scale *int64
	if arg, ok := opts["scale"].(int64); ok {
		scale = &arg
	}
	transformerOpts.scale = scale

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
