
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_country_code.go

package transformers

import (
	"fmt"
	
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type GenerateCountryCode struct{}

type GenerateCountryCodeOpts struct {
	randomizer     rng.Rand
	
	generateFullName bool
}

func NewGenerateCountryCode() *GenerateCountryCode {
	return &GenerateCountryCode{}
}

func NewGenerateCountryCodeOpts(
	generateFullNameArg *bool,
  seedArg *int64,
) (*GenerateCountryCodeOpts, error) {
	generateFullName := bool(false) 
	if generateFullNameArg != nil {
		generateFullName = *generateFullNameArg
	}
	
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &GenerateCountryCodeOpts{
		generateFullName: generateFullName,
		randomizer: rng.New(seed),	
	}, nil
}

func (t *GenerateCountryCode) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateCountryCode",
		Description: "Randomly selects a Country and either returns the two character country code or the full country name.",
		Example: "",
	}, nil
}

func (t *GenerateCountryCode) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateCountryCodeOpts{}

	generateFullName, ok := opts["generateFullName"].(bool)
	if !ok {
		generateFullName = false
	}
	transformerOpts.generateFullName = generateFullName

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
