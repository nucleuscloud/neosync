
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_int64.go

package transformers

import (
	"strings"
	"fmt"
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type GenerateInt64 struct{}

type GenerateInt64Opts struct {
	randomizer     rng.Rand
	
	randomizeSign bool
	min int64
	max int64
}

func NewGenerateInt64() *GenerateInt64 {
	return &GenerateInt64{}
}

func NewGenerateInt64Opts(
	randomizeSignArg *bool,
	minArg *int64,
	maxArg *int64,
  seedArg *int64,
) (*GenerateInt64Opts, error) {
	randomizeSign := bool(false)
	if randomizeSignArg != nil {
		randomizeSign = *randomizeSignArg
	}
	
	min := int64(1)
	if minArg != nil {
		min = *minArg
	}
	
	max := int64(10000)
	if maxArg != nil {
		max = *maxArg
	}
	
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &GenerateInt64Opts{
		randomizeSign: randomizeSign,
		min: min,
		max: max,
		randomizer: rng.New(seed),	
	}, nil
}

func (o *GenerateInt64Opts) BuildBloblangString(	
) string {
	fnStr := []string{ 
		"randomize_sign:%v", 
		"min:%v", 
		"max:%v",
	}

	params := []any{
	 	o.randomizeSign,
	 	o.min,
	 	o.max,
	}

	

	template := fmt.Sprintf("generate_int64(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *GenerateInt64) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateInt64",
		Description: "Generates a random int64 value with a default length of 4.",
		Example: "",
	}, nil
}

func (t *GenerateInt64) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateInt64Opts{}

	randomizeSign, ok := opts["randomizeSign"].(bool)
	if !ok {
		randomizeSign = false
	}
	transformerOpts.randomizeSign = randomizeSign

	min, ok := opts["min"].(int64)
	if !ok {
		min = 1
	}
	transformerOpts.min = min

	max, ok := opts["max"].(int64)
	if !ok {
		max = 10000
	}
	transformerOpts.max = max

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
