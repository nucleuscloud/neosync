// Code generated by mockery. DO NOT EDIT.

package transformers

import (
	context "context"

	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockUserDefinedTransformerResolver is an autogenerated mock type for the UserDefinedTransformerResolver type
type MockUserDefinedTransformerResolver struct {
	mock.Mock
}

type MockUserDefinedTransformerResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserDefinedTransformerResolver) EXPECT() *MockUserDefinedTransformerResolver_Expecter {
	return &MockUserDefinedTransformerResolver_Expecter{mock: &_m.Mock}
}

// GetUserDefinedTransformer provides a mock function with given fields: ctx, id
func (_m *MockUserDefinedTransformerResolver) GetUserDefinedTransformer(ctx context.Context, id string) (*mgmtv1alpha1.TransformerConfig, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDefinedTransformer")
	}

	var r0 *mgmtv1alpha1.TransformerConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*mgmtv1alpha1.TransformerConfig, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *mgmtv1alpha1.TransformerConfig); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgmtv1alpha1.TransformerConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDefinedTransformerResolver_GetUserDefinedTransformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDefinedTransformer'
type MockUserDefinedTransformerResolver_GetUserDefinedTransformer_Call struct {
	*mock.Call
}

// GetUserDefinedTransformer is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserDefinedTransformerResolver_Expecter) GetUserDefinedTransformer(ctx interface{}, id interface{}) *MockUserDefinedTransformerResolver_GetUserDefinedTransformer_Call {
	return &MockUserDefinedTransformerResolver_GetUserDefinedTransformer_Call{Call: _e.mock.On("GetUserDefinedTransformer", ctx, id)}
}

func (_c *MockUserDefinedTransformerResolver_GetUserDefinedTransformer_Call) Run(run func(ctx context.Context, id string)) *MockUserDefinedTransformerResolver_GetUserDefinedTransformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserDefinedTransformerResolver_GetUserDefinedTransformer_Call) Return(_a0 *mgmtv1alpha1.TransformerConfig, _a1 error) *MockUserDefinedTransformerResolver_GetUserDefinedTransformer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDefinedTransformerResolver_GetUserDefinedTransformer_Call) RunAndReturn(run func(context.Context, string) (*mgmtv1alpha1.TransformerConfig, error)) *MockUserDefinedTransformerResolver_GetUserDefinedTransformer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserDefinedTransformerResolver creates a new instance of MockUserDefinedTransformerResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserDefinedTransformerResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserDefinedTransformerResolver {
	mock := &MockUserDefinedTransformerResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
