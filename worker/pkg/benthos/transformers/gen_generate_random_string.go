
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_random_string.go

package transformers

import (
	"fmt"
	
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type GenerateRandomString struct{}

type GenerateRandomStringOpts struct {
	randomizer     rng.Rand
	
	min int64
	max int64
}

func NewGenerateRandomString() *GenerateRandomString {
	return &GenerateRandomString{}
}

func NewGenerateRandomStringOpts(
	min int64,
	max int64,
  seedArg *int64,
) (*GenerateRandomStringOpts, error) {
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &GenerateRandomStringOpts{
		min: min,
		max: max,
		randomizer: rng.New(seed),	
	}, nil
}

func (t *GenerateRandomString) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateRandomString",
		Description: "Generates a random string of alphanumeric characters..",
		Example: "",
	}, nil
}

func (t *GenerateRandomString) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateRandomStringOpts{}

	if _, ok := opts["min"].(int64); !ok {
		return nil, fmt.Errorf("missing required argument. function: %s argument: %s", "generateRandomString", "min")
	}
	min := opts["min"].(int64)
	transformerOpts.min = min

	if _, ok := opts["max"].(int64); !ok {
		return nil, fmt.Errorf("missing required argument. function: %s argument: %s", "generateRandomString", "max")
	}
	max := opts["max"].(int64)
	transformerOpts.max = max

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
