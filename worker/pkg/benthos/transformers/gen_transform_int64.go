
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: transform_int64.go

package transformers

import (
	"strings"
	"fmt"
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type TransformInt64 struct{}

type TransformInt64Opts struct {
	randomizer     rng.Rand
	
	randomizationRangeMin int64
	randomizationRangeMax int64
}

func NewTransformInt64() *TransformInt64 {
	return &TransformInt64{}
}

func NewTransformInt64Opts(
	randomizationRangeMinArg *int64,
	randomizationRangeMaxArg *int64,
  seedArg *int64,
) (*TransformInt64Opts, error) {
	randomizationRangeMin := int64(1)
	if randomizationRangeMinArg != nil {
		randomizationRangeMin = *randomizationRangeMinArg
	}
	
	randomizationRangeMax := int64(10000)
	if randomizationRangeMaxArg != nil {
		randomizationRangeMax = *randomizationRangeMaxArg
	}
	
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &TransformInt64Opts{
		randomizationRangeMin: randomizationRangeMin,
		randomizationRangeMax: randomizationRangeMax,
		randomizer: rng.New(seed),	
	}, nil
}

func (o *TransformInt64Opts) BuildBloblangString(
	valuePath string,	
) string {
	fnStr := []string{
		"value:this.%s", 
		"randomization_range_min:%v", 
		"randomization_range_max:%v",
	}

	params := []any{
		valuePath,
	 	o.randomizationRangeMin,
	 	o.randomizationRangeMax,
	}

	

	template := fmt.Sprintf("transform_int64(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *TransformInt64) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "transformInt64",
		Description: "Anonymizes and transforms an existing int64 value.",
		Example: "",
	}, nil
}

func (t *TransformInt64) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &TransformInt64Opts{}

	randomizationRangeMin, ok := opts["randomizationRangeMin"].(int64)
	if !ok {
		randomizationRangeMin = 1
	}
	transformerOpts.randomizationRangeMin = randomizationRangeMin

	randomizationRangeMax, ok := opts["randomizationRangeMax"].(int64)
	if !ok {
		randomizationRangeMax = 10000
	}
	transformerOpts.randomizationRangeMax = randomizationRangeMax

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
