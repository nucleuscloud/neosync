
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_street_address.go

package transformers

import (
	"fmt"
	
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type GenerateStreetAddress struct{}

type GenerateStreetAddressOpts struct {
	randomizer     rng.Rand
	
	maxLength int64
}

func NewGenerateStreetAddress() *GenerateStreetAddress {
	return &GenerateStreetAddress{}
}

func NewGenerateStreetAddressOpts(
	maxLength int64,
  seedArg *int64,
) (*GenerateStreetAddressOpts, error) {
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &GenerateStreetAddressOpts{
		maxLength: maxLength,
		randomizer: rng.New(seed),	
	}, nil
}

func (t *GenerateStreetAddress) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateStreetAddress",
		Description: "Randomly generates a street address.",
		Example: "",
	}, nil
}

func (t *GenerateStreetAddress) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateStreetAddressOpts{}

	if _, ok := opts["maxLength"].(int64); !ok {
		return nil, fmt.Errorf("missing required argument. function: %s argument: %s", "generateStreetAddress", "maxLength")
	}
	maxLength := opts["maxLength"].(int64)
	transformerOpts.maxLength = maxLength

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
