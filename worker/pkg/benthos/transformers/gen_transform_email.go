
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: transform_email.go

package transformers

import (
	"strings"
	"fmt"
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type TransformEmail struct{}

type TransformEmailOpts struct {
	randomizer     rng.Rand
	
	preserveLength bool
	preserveDomain bool
	excludedDomains any
	maxLength int64
	emailType string
	invalidEmailAction string
}

func NewTransformEmail() *TransformEmail {
	return &TransformEmail{}
}

func NewTransformEmailOpts(
	preserveLengthArg *bool,
	preserveDomainArg *bool,
	excludedDomainsArg *any,
	maxLengthArg *int64,
  seedArg *int64,
	emailTypeArg *string,
	invalidEmailActionArg *string,
) (*TransformEmailOpts, error) {
	preserveLength := bool(false)
	if preserveLengthArg != nil {
		preserveLength = *preserveLengthArg
	}
	
	preserveDomain := bool(false)
	if preserveDomainArg != nil {
		preserveDomain = *preserveDomainArg
	}
	
	var excludedDomains any
	if excludedDomainsArg != nil {
		excludedDomains = *excludedDomainsArg
	}
	
	maxLength := int64(100)
	if maxLengthArg != nil {
		maxLength = *maxLengthArg
	}
	
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	emailType := string(GenerateEmailType_UuidV4.String())
	if emailTypeArg != nil {
		emailType = *emailTypeArg
	}
	
	invalidEmailAction := string(InvalidEmailAction_Reject.String())
	if invalidEmailActionArg != nil {
		invalidEmailAction = *invalidEmailActionArg
	}
	
	return &TransformEmailOpts{
		preserveLength: preserveLength,
		preserveDomain: preserveDomain,
		excludedDomains: excludedDomains,
		maxLength: maxLength,
		randomizer: rng.New(seed),
		emailType: emailType,
		invalidEmailAction: invalidEmailAction,	
	}, nil
}

func (o *TransformEmailOpts) BuildBloblangString(
	valuePath string,	
) string {
	fnStr := []string{
		"value:this.%s", 
		"preserve_length:%v", 
		"preserve_domain:%v", 
		"excluded_domains:%v", 
		"max_length:%v", 
		"email_type:%q", 
		"invalid_email_action:%q",
	}

	params := []any{
		valuePath,
	 	o.preserveLength,
	 	o.preserveDomain,
	 	o.excludedDomains,
	 	o.maxLength,
	 	o.emailType,
	 	o.invalidEmailAction,
	}

	

	template := fmt.Sprintf("transform_email(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *TransformEmail) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "transformEmail",
		Description: "Anonymizes and transforms an existing email address.",
		Example: "",
	}, nil
}

func (t *TransformEmail) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &TransformEmailOpts{}

	preserveLength, ok := opts["preserveLength"].(bool)
	if !ok {
		preserveLength = false
	}
	transformerOpts.preserveLength = preserveLength

	preserveDomain, ok := opts["preserveDomain"].(bool)
	if !ok {
		preserveDomain = false
	}
	transformerOpts.preserveDomain = preserveDomain

	excludedDomains, ok := opts["excludedDomains"].(any)
	if !ok {
		excludedDomains = []any{}
	}
	transformerOpts.excludedDomains = excludedDomains

	maxLength, ok := opts["maxLength"].(int64)
	if !ok {
		maxLength = 100
	}
	transformerOpts.maxLength = maxLength

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	emailType, ok := opts["emailType"].(string)
	if !ok {
		emailType = GenerateEmailType_UuidV4.String()
	}
	transformerOpts.emailType = emailType

	invalidEmailAction, ok := opts["invalidEmailAction"].(string)
	if !ok {
		invalidEmailAction = InvalidEmailAction_Reject.String()
	}
	transformerOpts.invalidEmailAction = invalidEmailAction

	return transformerOpts, nil
}
