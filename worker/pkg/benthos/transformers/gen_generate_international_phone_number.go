
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_international_phone_number.go

package transformers

import (
	"strings"
	"fmt"
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type GenerateInternationalPhoneNumber struct{}

type GenerateInternationalPhoneNumberOpts struct {
	randomizer     rng.Rand
	
	min int64
	max int64
}

func NewGenerateInternationalPhoneNumber() *GenerateInternationalPhoneNumber {
	return &GenerateInternationalPhoneNumber{}
}

func NewGenerateInternationalPhoneNumberOpts(
	minArg *int64,
	maxArg *int64,
  seedArg *int64,
) (*GenerateInternationalPhoneNumberOpts, error) {
	min := int64(9)
	if minArg != nil {
		min = *minArg
	}
	
	max := int64(15)
	if maxArg != nil {
		max = *maxArg
	}
	
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &GenerateInternationalPhoneNumberOpts{
		min: min,
		max: max,
		randomizer: rng.New(seed),	
	}, nil
}

func (o *GenerateInternationalPhoneNumberOpts) BuildBloblangString(	
) string {
	fnStr := []string{ 
		"min:%v", 
		"max:%v",
	}

	params := []any{
	 	o.min,
	 	o.max,
	}

	

	template := fmt.Sprintf("generate_e164_phone_number(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *GenerateInternationalPhoneNumber) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateInternationalPhoneNumber",
		Description: "Generates a new random international phone number including the + sign and no hyphens.",
		Example: "",
	}, nil
}

func (t *GenerateInternationalPhoneNumber) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateInternationalPhoneNumberOpts{}

	min, ok := opts["min"].(int64)
	if !ok {
		min = 9
	}
	transformerOpts.min = min

	max, ok := opts["max"].(int64)
	if !ok {
		max = 15
	}
	transformerOpts.max = max

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
