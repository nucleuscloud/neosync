
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_card_number.go

package transformers

import (
	"fmt"
	
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type GenerateCardNumber struct{}

type GenerateCardNumberOpts struct {
	randomizer     rng.Rand
	
	validLuhn bool
}

func NewGenerateCardNumber() *GenerateCardNumber {
	return &GenerateCardNumber{}
}

func NewGenerateCardNumberOpts(
	validLuhn bool,
  seedArg *int64,
) (*GenerateCardNumberOpts, error) {
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &GenerateCardNumberOpts{
		validLuhn: validLuhn,
		randomizer: rng.New(seed),	
	}, nil
}

func (t *GenerateCardNumber) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateCardNumber",
		Description: "Generates a 16 digit card number that is valid by Luhn valid by default.",
		Example: "",
	}, nil
}

func (t *GenerateCardNumber) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateCardNumberOpts{}

	if _, ok := opts["validLuhn"].(bool); !ok {
		return nil, fmt.Errorf("missing required argument. function: %s argument: %s", "generateCardNumber", "validLuhn")
	}
	validLuhn := opts["validLuhn"].(bool)
	transformerOpts.validLuhn = validLuhn

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
