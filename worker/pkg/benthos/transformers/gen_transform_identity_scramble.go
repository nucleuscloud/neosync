
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: transform_identity_scramble.go

package transformers

import (
	"strings"
	"fmt"
)

type TransformIdentityScramble struct{}

type TransformIdentityScrambleOpts struct {
	token string
}

func NewTransformIdentityScramble() *TransformIdentityScramble {
	return &TransformIdentityScramble{}
}

func NewTransformIdentityScrambleOpts(
	token string,
) (*TransformIdentityScrambleOpts, error) {
	return &TransformIdentityScrambleOpts{
		token: token,
	}, nil
}

func (o *TransformIdentityScrambleOpts) BuildBloblangString(
	valuePath string,
) string {
	fnStr := []string{
		"value:this.%s",
		"token:%q",
	}

	params := []any{
		valuePath,
	 	o.token,
	}

	

	template := fmt.Sprintf("transform_identity_scramble(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *TransformIdentityScramble) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "transformIdentityScramble",
		Description: "Scrambles the identity of the input",
		Example: "",
	}, nil
}

func (t *TransformIdentityScramble) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &TransformIdentityScrambleOpts{}

	if _, ok := opts["token"].(string); !ok {
		return nil, fmt.Errorf("missing required argument. function: %s argument: %s", "transformIdentityScramble", "token")
	}
	token := opts["token"].(string)
	transformerOpts.token = token

	return transformerOpts, nil
}
