
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_utc_timestamp.go

package transformers

import (
	"strings"
	"fmt"
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type GenerateUTCTimestamp struct{}

type GenerateUTCTimestampOpts struct {
	randomizer     rng.Rand
	
}

func NewGenerateUTCTimestamp() *GenerateUTCTimestamp {
	return &GenerateUTCTimestamp{}
}

func NewGenerateUTCTimestampOpts(
  seedArg *int64,
) (*GenerateUTCTimestampOpts, error) {
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &GenerateUTCTimestampOpts{
		randomizer: rng.New(seed),	
	}, nil
}

func (o *GenerateUTCTimestampOpts) BuildBloblangString(	
) string {
	fnStr := []string{
	}

	params := []any{
	}

	

	template := fmt.Sprintf("generate_utctimestamp(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *GenerateUTCTimestamp) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateUTCTimestamp",
		Description: "Randomly generates a UTC timestamp.",
		Example: "",
	}, nil
}

func (t *GenerateUTCTimestamp) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateUTCTimestampOpts{}

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
