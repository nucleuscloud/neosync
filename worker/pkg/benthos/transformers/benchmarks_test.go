
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.

package transformers

import (
	"testing"
)

func BenchmarkGenerateBool(b *testing.B) {
	generator := NewGenerateBool()
	opts, err := NewGenerateBoolOpts(nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateBusinessName(b *testing.B) {
	generator := NewGenerateBusinessName()
	opts, err := NewGenerateBusinessNameOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateCardNumber(b *testing.B) {
	generator := NewGenerateCardNumber()
	opts, err := NewGenerateCardNumberOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateCategorical(b *testing.B) {
	generator := NewGenerateCategorical()
	opts, err := NewGenerateCategoricalOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateCity(b *testing.B) {
	generator := NewGenerateCity()
	opts, err := NewGenerateCityOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateCountry(b *testing.B) {
	generator := NewGenerateCountry()
	opts, err := NewGenerateCountryOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateEmail(b *testing.B) {
	generator := NewGenerateEmail()
	opts, err := NewGenerateEmailOpts(nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateFirstName(b *testing.B) {
	generator := NewGenerateFirstName()
	opts, err := NewGenerateFirstNameOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateFloat64(b *testing.B) {
	generator := NewGenerateFloat64()
	opts, err := NewGenerateFloat64Opts(nil,nil,nil,nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateFullAddress(b *testing.B) {
	generator := NewGenerateFullAddress()
	opts, err := NewGenerateFullAddressOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateFullName(b *testing.B) {
	generator := NewGenerateFullName()
	opts, err := NewGenerateFullNameOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateGender(b *testing.B) {
	generator := NewGenerateGender()
	opts, err := NewGenerateGenderOpts(nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateInt64(b *testing.B) {
	generator := NewGenerateInt64()
	opts, err := NewGenerateInt64Opts(nil,nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateInt64PhoneNumber(b *testing.B) {
	generator := NewGenerateInt64PhoneNumber()
	opts, err := NewGenerateInt64PhoneNumberOpts(nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateInternationalPhoneNumber(b *testing.B) {
	generator := NewGenerateInternationalPhoneNumber()
	opts, err := NewGenerateInternationalPhoneNumberOpts(nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateIpAddress(b *testing.B) {
	generator := NewGenerateIpAddress()
	opts, err := NewGenerateIpAddressOpts(nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateLastName(b *testing.B) {
	generator := NewGenerateLastName()
	opts, err := NewGenerateLastNameOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateRandomString(b *testing.B) {
	generator := NewGenerateRandomString()
	opts, err := NewGenerateRandomStringOpts(nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateSHA256Hash(b *testing.B) {
	generator := NewGenerateSHA256Hash()
	opts, err := NewGenerateSHA256HashOpts()
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateSSN(b *testing.B) {
	generator := NewGenerateSSN()
	opts, err := NewGenerateSSNOpts(nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateState(b *testing.B) {
	generator := NewGenerateState()
	opts, err := NewGenerateStateOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateStreetAddress(b *testing.B) {
	generator := NewGenerateStreetAddress()
	opts, err := NewGenerateStreetAddressOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateStringPhoneNumber(b *testing.B) {
	generator := NewGenerateStringPhoneNumber()
	opts, err := NewGenerateStringPhoneNumberOpts(nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateUnixTimestamp(b *testing.B) {
	generator := NewGenerateUnixTimestamp()
	opts, err := NewGenerateUnixTimestampOpts(nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateUsername(b *testing.B) {
	generator := NewGenerateUsername()
	opts, err := NewGenerateUsernameOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateUTCTimestamp(b *testing.B) {
	generator := NewGenerateUTCTimestamp()
	opts, err := NewGenerateUTCTimestampOpts(nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateUUID(b *testing.B) {
	generator := NewGenerateUUID()
	opts, err := NewGenerateUUIDOpts(nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkGenerateZipcode(b *testing.B) {
	generator := NewGenerateZipcode()
	opts, err := NewGenerateZipcodeOpts(nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := generator.Generate(opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}




func BenchmarkTransformCharacterScramble(b *testing.B) {
	transformer := NewTransformCharacterScramble()
	opts, err := NewTransformCharacterScrambleOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := transformer.Transform("test", opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkTransformE164PhoneNumber(b *testing.B) {
	transformer := NewTransformE164PhoneNumber()
	opts, err := NewTransformE164PhoneNumberOpts(nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := transformer.Transform("test", opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkTransformEmail(b *testing.B) {
	transformer := NewTransformEmail()
	opts, err := NewTransformEmailOpts(nil,nil,nil,nil,nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := transformer.Transform("test@test.com", opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkTransformFirstName(b *testing.B) {
	transformer := NewTransformFirstName()
	opts, err := NewTransformFirstNameOpts(nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := transformer.Transform("test", opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkTransformFloat64(b *testing.B) {
	transformer := NewTransformFloat64()
	opts, err := NewTransformFloat64Opts(nil,nil,nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := transformer.Transform(123.45, opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkTransformFullName(b *testing.B) {
	transformer := NewTransformFullName()
	opts, err := NewTransformFullNameOpts(nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := transformer.Transform("test", opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkTransformInt64(b *testing.B) {
	transformer := NewTransformInt64()
	opts, err := NewTransformInt64Opts(nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := transformer.Transform(123456, opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkTransformInt64PhoneNumber(b *testing.B) {
	transformer := NewTransformInt64PhoneNumber()
	opts, err := NewTransformInt64PhoneNumberOpts(nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := transformer.Transform(123456, opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkTransformLastName(b *testing.B) {
	transformer := NewTransformLastName()
	opts, err := NewTransformLastNameOpts(nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := transformer.Transform("test", opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkTransformString(b *testing.B) {
	transformer := NewTransformString()
	opts, err := NewTransformStringOpts(nil,nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := transformer.Transform("test", opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkTransformStringPhoneNumber(b *testing.B) {
	transformer := NewTransformStringPhoneNumber()
	opts, err := NewTransformStringPhoneNumberOpts(nil,nil,nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := transformer.Transform("test", opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}


func BenchmarkTransformUuid(b *testing.B) {
	transformer := NewTransformUuid()
	opts, err := NewTransformUuidOpts(nil,)
	if err != nil {
		b.Fatal(err)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := transformer.Transform("test", opts)
		if err != nil {
			b.Fatal(err)
		}
	}
}
