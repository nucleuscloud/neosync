
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_categorical.go

package transformers

import (
	"strings"
	"fmt"
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type GenerateCategorical struct{}

type GenerateCategoricalOpts struct {
	randomizer     rng.Rand
	
	categories string
}

func NewGenerateCategorical() *GenerateCategorical {
	return &GenerateCategorical{}
}

func NewGenerateCategoricalOpts(
	categoriesArg *string,
  seedArg *int64,
) (*GenerateCategoricalOpts, error) {
	categories := string("ultimo,proximo,semper")
	if categoriesArg != nil {
		categories = *categoriesArg
	}
	
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &GenerateCategoricalOpts{
		categories: categories,
		randomizer: rng.New(seed),	
	}, nil
}

func (o *GenerateCategoricalOpts) BuildBloblangString(	
) string {
	fnStr := []string{ 
		"categories:%q",
	}

	params := []any{
	 	o.categories,
	}

	

	template := fmt.Sprintf("generate_categorical(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *GenerateCategorical) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateCategorical",
		Description: "Randomly selects a value from a defined set of categorical values.",
		Example: "",
	}, nil
}

func (t *GenerateCategorical) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateCategoricalOpts{}

	categories, ok := opts["categories"].(string)
	if !ok {
		categories = "ultimo,proximo,semper"
	}
	transformerOpts.categories = categories

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
