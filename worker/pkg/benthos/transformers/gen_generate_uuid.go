
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_uuid.go

package transformers

import (
	"strings"
	"fmt"
)

type GenerateUUID struct{}

type GenerateUUIDOpts struct {
	includeHyphens bool
}

func NewGenerateUUID() *GenerateUUID {
	return &GenerateUUID{}
}

func NewGenerateUUIDOpts(
	includeHyphensArg *bool,
) (*GenerateUUIDOpts, error) {
	includeHyphens := bool(true)
	if includeHyphensArg != nil {
		includeHyphens = *includeHyphensArg
	}
	
	return &GenerateUUIDOpts{
		includeHyphens: includeHyphens,	
	}, nil
}

func (o *GenerateUUIDOpts) BuildBloblangString(	
) string {
	fnStr := []string{ 
		"include_hyphens:%v",
	}

	params := []any{
	 	o.includeHyphens,
	}

	

	template := fmt.Sprintf("generate_uuid(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *GenerateUUID) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateUUID",
		Description: "Generates a new UUIDv4 id.",
		Example: "",
	}, nil
}

func (t *GenerateUUID) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateUUIDOpts{}

	includeHyphens, ok := opts["includeHyphens"].(bool)
	if !ok {
		includeHyphens = true
	}
	transformerOpts.includeHyphens = includeHyphens

	return transformerOpts, nil
}
