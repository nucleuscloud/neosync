
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_gender.go

package transformers

import (
	"fmt"
	
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type GenerateGender struct{}

type GenerateGenderOpts struct {
	randomizer     rng.Rand
	
	abbreviate bool
	maxLength int64
}

func NewGenerateGender() *GenerateGender {
	return &GenerateGender{}
}

func (t *GenerateGender) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateGender",
		Description: "",
	}, nil
}

func (t *GenerateGender) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateGenderOpts{}

	abbreviate, ok := opts["abbreviate"].(bool)
	if !ok {
		abbreviate = false
	}
	transformerOpts.abbreviate = abbreviate

	maxLength, ok := opts["maxLength"].(int64)
	if !ok {
		maxLength = 10000
	}
	transformerOpts.maxLength = maxLength

	var seed int64
	seedArg, ok := opts["seed"].(int64)
	if ok {
		seed = seedArg
	} else {
		var err error
		seed, err = transformer_utils.GenerateCryptoSeed()
		if err != nil {
			return nil, fmt.Errorf("unable to generate seed: %w", err)
		}
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
