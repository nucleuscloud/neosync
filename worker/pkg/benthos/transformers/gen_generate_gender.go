
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_gender.go

package transformers

import (
	"strings"
	"fmt"
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type GenerateGender struct{}

type GenerateGenderOpts struct {
	randomizer     rng.Rand
	
	abbreviate bool
	maxLength int64
}

func NewGenerateGender() *GenerateGender {
	return &GenerateGender{}
}

func NewGenerateGenderOpts(
	abbreviateArg *bool,
	maxLengthArg *int64,
  seedArg *int64,
) (*GenerateGenderOpts, error) {
	abbreviate := bool(false)
	if abbreviateArg != nil {
		abbreviate = *abbreviateArg
	}
	
	maxLength := int64(100)
	if maxLengthArg != nil {
		maxLength = *maxLengthArg
	}
	
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &GenerateGenderOpts{
		abbreviate: abbreviate,
		maxLength: maxLength,
		randomizer: rng.New(seed),	
	}, nil
}

func (o *GenerateGenderOpts) BuildBloblangString(	
) string {
	fnStr := []string{ 
		"abbreviate:%v", 
		"max_length:%v",
	}

	params := []any{
	 	o.abbreviate,
	 	o.maxLength,
	}

	

	template := fmt.Sprintf("generate_gender(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *GenerateGender) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateGender",
		Description: "Randomly generates one of the following genders: female (f), male (m), undefined (u), nonbinary (n).",
		Example: "",
	}, nil
}

func (t *GenerateGender) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateGenderOpts{}

	abbreviate, ok := opts["abbreviate"].(bool)
	if !ok {
		abbreviate = false
	}
	transformerOpts.abbreviate = abbreviate

	maxLength, ok := opts["maxLength"].(int64)
	if !ok {
		maxLength = 100
	}
	transformerOpts.maxLength = maxLength

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
