
// Code generated by Neosync neosync_transformer_generator.go. DO NOT EDIT.
// source: generate_ip_address.go

package transformers

import (
	"strings"
	"fmt"
	transformer_utils "github.com/nucleuscloud/neosync/worker/pkg/benthos/transformers/utils"
	"github.com/nucleuscloud/neosync/worker/pkg/rng"
	
)

type GenerateIpAddress struct{}

type GenerateIpAddressOpts struct {
	randomizer     rng.Rand
	
	maxLength int64
	version string
	class string
}

func NewGenerateIpAddress() *GenerateIpAddress {
	return &GenerateIpAddress{}
}

func NewGenerateIpAddressOpts(
	maxLengthArg *int64,
	versionArg *string,
	classArg *string,
  seedArg *int64,
) (*GenerateIpAddressOpts, error) {
	maxLength := int64(100000)
	if maxLengthArg != nil {
		maxLength = *maxLengthArg
	}
	
	version := string(string(IpVersion_V4))
	if versionArg != nil {
		version = *versionArg
	}
	
	class := string(string(IpV4Class_Public))
	if classArg != nil {
		class = *classArg
	}
	
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
  if err != nil {
    return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	
	return &GenerateIpAddressOpts{
		maxLength: maxLength,
		version: version,
		class: class,
		randomizer: rng.New(seed),	
	}, nil
}

func (o *GenerateIpAddressOpts) BuildBloblangString(	
) string {
	fnStr := []string{ 
		"max_length:%v", 
		"version:%q", 
		"class:%q",
	}

	params := []any{
	 	o.maxLength,
	 	o.version,
	 	o.class,
	}

	

	template := fmt.Sprintf("generate_ip(%s)", strings.Join(fnStr, ","))
	return fmt.Sprintf(template, params...)
}

func (t *GenerateIpAddress) GetJsTemplateData() (*TemplateData, error) {
	return &TemplateData{
		Name: "generateIpAddress",
		Description: "Generates IPv4 or IPv6 addresses with support for different network classes.",
		Example: "",
	}, nil
}

func (t *GenerateIpAddress) ParseOptions(opts map[string]any) (any, error) {
	transformerOpts := &GenerateIpAddressOpts{}

	maxLength, ok := opts["maxLength"].(int64)
	if !ok {
		maxLength = 100000
	}
	transformerOpts.maxLength = maxLength

	version, ok := opts["version"].(string)
	if !ok {
		version = string(IpVersion_V4)
	}
	transformerOpts.version = version

	class, ok := opts["class"].(string)
	if !ok {
		class = string(IpV4Class_Public)
	}
	transformerOpts.class = class

	var seedArg *int64
	if seedValue, ok := opts["seed"].(int64); ok {
			seedArg = &seedValue
	}
	seed, err := transformer_utils.GetSeedOrDefault(seedArg)
	if err != nil {
		return nil, fmt.Errorf("unable to generate seed: %w", err)
	}
	transformerOpts.randomizer = rng.New(seed)

	return transformerOpts, nil
}
