//go:build ignore

package main

import (
	"fmt"
	"os"
	"sort"
	"strings"
)

func main() {
	args := os.Args
	if len(args) < 4 {
		panic("must provide necessary args")
	}

	datasetFile := args[1]
	gotypename := args[2]
	gopackage := args[3]

	outputFile, err := os.Create(fmt.Sprintf("%s_gen.go", strings.ToLower(gotypename)))
	if err != nil {
		panic(err)
	}
	defer outputFile.Close()

	_, err = outputFile.WriteString(fmt.Sprintf("// Code generated by Neosync datagenerator. DO NOT EDIT.\n// source: %s\n\n", datasetFile))
	if err != nil {
		panic(err)
	}

	_, err = outputFile.WriteString(fmt.Sprintf("package %s\n\n", gopackage))
	if err != nil {
		panic(err)
	}

	_, err = outputFile.WriteString(fmt.Sprintf("var %ss = []string{\n", gotypename))
	if err != nil {
		panic(err)
	}

	content, err := os.ReadFile(datasetFile)
	if err != nil {
		panic(err)
	}

	text := string(content)
	lines := strings.Split(text, "\n")
	sort.Strings(lines)

	lineMap := map[int][]string{}
	for _, line := range lines {
		trimmedLine := strings.TrimSpace(line)
		if len(trimmedLine) == 0 || strings.ContainsAny(trimmedLine, " -_") {
			continue
		}
		_, err = outputFile.WriteString(fmt.Sprintf("\t%q,\n", trimmedLine)) // Each line as a quoted string in the slice
		if err != nil {
			panic(err)
		}
		length := len(line)
		lineMap[length] = append(lineMap[length], line)
	}

	// Close the slice declaration
	_, err = outputFile.WriteString("}\n\n")
	if err != nil {
		panic(err)
	}

	_, err = outputFile.WriteString(fmt.Sprintf("var %sMap = map[int64][]string{\n", gotypename))
	if err != nil {
		panic(err)
	}

	lineIdxs := make([]int, 0, len(lineMap))
	for idx := range lineMap {
		lineIdxs = append(lineIdxs, idx)
	}
	sort.Ints(lineIdxs)

	for _, idx := range lineIdxs {
		subLines, ok := lineMap[idx]
		// shouldn't hit this, but just being safe
		if !ok {
			continue
		}
		_, err = outputFile.WriteString(fmt.Sprintf("\t%d: {%s},\n", idx, getQuotedSlice(subLines)))
		if err != nil {
			panic(err)
		}
	}
	_, err = outputFile.WriteString("}\n\n")
	if err != nil {
		panic(err)
	}

	_, err = outputFile.WriteString(fmt.Sprintf("var %sIndices = []int64{\n", gotypename))
	if err != nil {
		panic(err)
	}
	for _, idx := range lineIdxs {
		_, err = outputFile.WriteString(fmt.Sprintf("\t%d,\n", idx))
	}
	_, err = outputFile.WriteString("}\n")
	if err != nil {
		panic(err)
	}
}

func getQuotedSlice(items []string) string {
	quotedSlice := make([]string, len(items))
	for i, item := range items {
		quotedSlice[i] = fmt.Sprintf(`%q`, item)
	}
	return strings.Join(quotedSlice, ", ")
}
