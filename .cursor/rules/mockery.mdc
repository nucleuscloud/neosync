---
description: Lays out Mockery best practices
globs: **/*_test.go
alwaysApply: false
---
## Use .EXPECT Instead of .ON Syntax when using Mocks and mockery

- Mockery has two types of mocking syntax. .On("MyFunction") and .EXPECT().MyFunction
- Always prefer to use .EXPECT() as it is more type safe
- .On is worse because you provide the function as a string and do not benefit from type safety and signature changes.
- If there are cases where .On makes more sense for reasons unknown that you are aware of, prefer that.

### Bad

```go
encryptor := sym_encrypt.NewMockInterface(t)
encryptor.On("Encrypt", mock.Anything).Return("token", nil).Once()
```

### Good

```go
encryptor := sym_encrypt.NewMockInterface(t)
encryptor.EXPECT().Encrypt(mock.Anything).Return("token", nil).Once()
```

## Use call counts after function mocks

- For all mocks, prefer to also include the amount of times expected that it should be called.
  - Ex: `.Once()`, `.Twice()`, etc.