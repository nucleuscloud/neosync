// Package presidioapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20241010152447-fd1f9b3e4488 DO NOT EDIT.
package presidioapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for HashHashType.
const (
	Md5    HashHashType = "md5"
	Sha256 HashHashType = "sha256"
	Sha512 HashHashType = "sha512"
)

// AnalysisExplanation defines model for AnalysisExplanation.
type AnalysisExplanation struct {
	// OriginalScore Recognizer's confidence in result
	OriginalScore *float64 `json:"original_score,omitempty"`

	// Pattern Regex pattern that was applied (if PatternRecognizer)
	Pattern *string `json:"pattern,omitempty"`

	// PatternName name of pattern (if decision was made by a PatternRecognizer)
	PatternName *string `json:"pattern_name,omitempty"`

	// Recognizer Name of recognizer that made the decision
	Recognizer *string `json:"recognizer,omitempty"`

	// Score The PII detection score
	Score *float64 `json:"score,omitempty"`

	// ScoreContextImprovement Difference from the original score
	ScoreContextImprovement *float64 `json:"score_context_improvement,omitempty"`

	// SupportiveContextWord The context word which helped increase the score
	SupportiveContextWord *string `json:"supportive_context_word,omitempty"`

	// TextualExplanation Free text for describing a decision of a logic or model
	TextualExplanation *string `json:"textual_explanation,omitempty"`

	// ValidationResult Result of a validation (e.g. checksum)
	ValidationResult *float64 `json:"validation_result,omitempty"`
}

// AnalyzeRequest defines model for AnalyzeRequest.
type AnalyzeRequest struct {
	// AdHocRecognizers list of recognizers to be used in the context of this request only (ad-hoc).
	AdHocRecognizers *[]PatternRecognizer `json:"ad_hoc_recognizers,omitempty"`

	// Context list of context words which may help to raise recognized entities confidence
	Context *[]string `json:"context,omitempty"`

	// CorrelationId A correlation id to append to headers and traces
	CorrelationId *string `json:"correlation_id,omitempty"`

	// Entities A list of entities to analyze
	Entities *[]EntityTypes `json:"entities,omitempty"`

	// Language Two characters for the desired language in ISO_639-1 format
	Language string `json:"language"`

	// ReturnDecisionProcess Whether to include analysis explanation in the response
	ReturnDecisionProcess *bool `json:"return_decision_process,omitempty"`

	// ScoreThreshold The minimal detection score threshold
	ScoreThreshold *float64 `json:"score_threshold,omitempty"`

	// Text The text to analyze
	Text string `json:"text"`
}

// AnonymizeRequest defines model for AnonymizeRequest.
type AnonymizeRequest struct {
	// AnalyzerResults Array of analyzer detections
	AnalyzerResults []RecognizerResult `json:"analyzer_results"`

	// Anonymizers Object where the key is DEFAULT or the ENTITY_TYPE and the value is the anonymizer definition
	Anonymizers *map[string]AnonymizeRequest_Anonymizers_AdditionalProperties `json:"anonymizers,omitempty"`

	// Text The text to anonymize
	Text string `json:"text"`
}

// AnonymizeRequest_Anonymizers_AdditionalProperties defines model for AnonymizeRequest.anonymizers.AdditionalProperties.
type AnonymizeRequest_Anonymizers_AdditionalProperties struct {
	union json.RawMessage
}

// AnonymizeResponse defines model for AnonymizeResponse.
type AnonymizeResponse struct {
	// Items Array of anonymized entities
	Items *[]OperatorResult `json:"items,omitempty"`
	Text  *string           `json:"text,omitempty"`
}

// DeanonymizeRequest defines model for DeanonymizeRequest.
type DeanonymizeRequest struct {
	// AnonymizerResults Array of anonymized PIIs
	AnonymizerResults []OperatorResult `json:"anonymizer_results"`

	// Deanonymizers Object where the key is DEFAULT or the ENTITY_TYPE and the value is decrypt since it is the only one supported
	Deanonymizers map[string]DeanonymizeRequest_Deanonymizers_AdditionalProperties `json:"deanonymizers"`

	// Text The anonymized text
	Text string `json:"text"`
}

// DeanonymizeRequest_Deanonymizers_AdditionalProperties defines model for DeanonymizeRequest.deanonymizers.AdditionalProperties.
type DeanonymizeRequest_Deanonymizers_AdditionalProperties struct {
	union json.RawMessage
}

// DeanonymizeResponse defines model for DeanonymizeResponse.
type DeanonymizeResponse struct {
	// Items Array of deanonymized entities
	Items *[]OperatorResult `json:"items,omitempty"`
	Text  *string           `json:"text,omitempty"`
}

// Decrypt Replace encrypted PII decrypted text
type Decrypt struct {
	// Key Cryptographic key of length 128, 192 or 256 bits, in a string format
	Key string `json:"key"`

	// Type decrypt
	Type string `json:"type"`
}

// Encrypt Replace with an encrypted value
type Encrypt struct {
	// Key Cryptographic key of length 128, 192 or 256 bits, in a string format
	Key string `json:"key"`

	// Type encrypt
	Type string `json:"type"`
}

// EntityTypes The supported PII entity types.
type EntityTypes = string

// Hash Replace with hashed value
type Hash struct {
	// HashType The hashing algorithm
	HashType *HashHashType `json:"hash_type,omitempty"`

	// Type hash
	Type string `json:"type"`
}

// HashHashType The hashing algorithm
type HashHashType string

// Mask Replace with a given character
type Mask struct {
	// CharsToMask The amount of characters that should be replaced
	CharsToMask int `json:"chars_to_mask"`

	// FromEnd Whether to mask the PII from it's end
	FromEnd *bool `json:"from_end,omitempty"`

	// MaskingChar The replacement character
	MaskingChar string `json:"masking_char"`

	// Type mask
	Type string `json:"type"`
}

// OperatorResult defines model for OperatorResult.
type OperatorResult struct {
	// End End index in the changed text
	End int `json:"end"`

	// EntityType Type of the PII entity
	EntityType string `json:"entity_type"`

	// Operator Name of the used operator
	Operator *string `json:"operator,omitempty"`

	// Start Start index of the changed text
	Start int `json:"start"`

	// Text The new text returned
	Text *string `json:"text,omitempty"`
}

// Pattern defines model for Pattern.
type Pattern struct {
	// Name Name of regular expression pattern
	Name *string `json:"name,omitempty"`

	// Regex Regex pattern string
	Regex *string `json:"regex,omitempty"`

	// Score Detection confidence of this pattern (0.01 if very noisy, 0.6-1.0 if very specific)
	Score *float64 `json:"score,omitempty"`
}

// PatternRecognizer A regular expressions or deny-list based recognizer
type PatternRecognizer struct {
	// Context List of words to be used to increase confidence if found in the vicinity of detected entities.
	Context *[]string `json:"context,omitempty"`

	// DenyList List of words to be returned as PII if found.
	DenyList *[]string `json:"deny_list,omitempty"`

	// Name Name of recognizer
	Name *string `json:"name,omitempty"`

	// Patterns List of type Pattern containing regex expressions with additional metadata.
	Patterns *[]Pattern `json:"patterns,omitempty"`

	// SupportedEntity The name of entity this ad hoc recognizer detects
	SupportedEntity *string `json:"supported_entity,omitempty"`

	// SupportedLanguage Language code supported by this recognizer
	SupportedLanguage *string `json:"supported_language,omitempty"`
}

// RecognizedMetadata defines model for RecognizedMetadata.
type RecognizedMetadata struct {
	// RecognizerName Name of recognizer that made the decision
	RecognizerName *string `json:"recognizer_name,omitempty"`
}

// RecognizerResult defines model for RecognizerResult.
type RecognizerResult struct {
	// End Where the PII ends
	End int `json:"end"`

	// EntityType The supported PII entity types.
	EntityType          EntityTypes         `json:"entity_type"`
	RecognitionMetadata *RecognizedMetadata `json:"recognition_metadata,omitempty"`

	// Score The PII detection score
	Score float64 `json:"score"`

	// Start Where the PII starts
	Start int `json:"start"`
}

// RecognizerResultWithAnaysisExplanation defines model for RecognizerResultWithAnaysisExplanation.
type RecognizerResultWithAnaysisExplanation struct {
	AnalysisExplanation *AnalysisExplanation `json:"analysis_explanation,omitempty"`

	// End Where the PII ends
	End int `json:"end"`

	// EntityType The supported PII entity types.
	EntityType          EntityTypes         `json:"entity_type"`
	RecognitionMetadata *RecognizedMetadata `json:"recognition_metadata,omitempty"`

	// Score The PII detection score
	Score float64 `json:"score"`

	// Start Where the PII starts
	Start int `json:"start"`
}

// Redact Replace with an empty string
type Redact struct {
	// Type redact
	Type string `json:"type"`
}

// Replace Replace with a given value
type Replace struct {
	// NewValue The string to replace with
	NewValue string `json:"new_value"`

	// Type replace
	Type string `json:"type"`
}

// N400BadRequest defines model for 400BadRequest.
type N400BadRequest struct {
	Error *string `json:"error,omitempty"`
}

// N422UnprocessableEntity defines model for 422UnprocessableEntity.
type N422UnprocessableEntity struct {
	Error *string `json:"error,omitempty"`
}

// GetRecognizersParams defines parameters for GetRecognizers.
type GetRecognizersParams struct {
	// Language Two characters for the desired language in ISO_639-1 format
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// GetSupportedentitiesParams defines parameters for GetSupportedentities.
type GetSupportedentitiesParams struct {
	// Language Two characters for the desired language in ISO_639-1 format
	Language *string `form:"language,omitempty" json:"language,omitempty"`
}

// PostAnalyzeJSONRequestBody defines body for PostAnalyze for application/json ContentType.
type PostAnalyzeJSONRequestBody = AnalyzeRequest

// PostAnonymizeJSONRequestBody defines body for PostAnonymize for application/json ContentType.
type PostAnonymizeJSONRequestBody = AnonymizeRequest

// PostDeanonymizeJSONRequestBody defines body for PostDeanonymize for application/json ContentType.
type PostDeanonymizeJSONRequestBody = DeanonymizeRequest

// AsReplace returns the union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties as a Replace
func (t AnonymizeRequest_Anonymizers_AdditionalProperties) AsReplace() (Replace, error) {
	var body Replace
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReplace overwrites any union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties as the provided Replace
func (t *AnonymizeRequest_Anonymizers_AdditionalProperties) FromReplace(v Replace) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReplace performs a merge with any union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties, using the provided Replace
func (t *AnonymizeRequest_Anonymizers_AdditionalProperties) MergeReplace(v Replace) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRedact returns the union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties as a Redact
func (t AnonymizeRequest_Anonymizers_AdditionalProperties) AsRedact() (Redact, error) {
	var body Redact
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRedact overwrites any union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties as the provided Redact
func (t *AnonymizeRequest_Anonymizers_AdditionalProperties) FromRedact(v Redact) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRedact performs a merge with any union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties, using the provided Redact
func (t *AnonymizeRequest_Anonymizers_AdditionalProperties) MergeRedact(v Redact) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMask returns the union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties as a Mask
func (t AnonymizeRequest_Anonymizers_AdditionalProperties) AsMask() (Mask, error) {
	var body Mask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMask overwrites any union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties as the provided Mask
func (t *AnonymizeRequest_Anonymizers_AdditionalProperties) FromMask(v Mask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMask performs a merge with any union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties, using the provided Mask
func (t *AnonymizeRequest_Anonymizers_AdditionalProperties) MergeMask(v Mask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHash returns the union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties as a Hash
func (t AnonymizeRequest_Anonymizers_AdditionalProperties) AsHash() (Hash, error) {
	var body Hash
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHash overwrites any union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties as the provided Hash
func (t *AnonymizeRequest_Anonymizers_AdditionalProperties) FromHash(v Hash) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHash performs a merge with any union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties, using the provided Hash
func (t *AnonymizeRequest_Anonymizers_AdditionalProperties) MergeHash(v Hash) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEncrypt returns the union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties as a Encrypt
func (t AnonymizeRequest_Anonymizers_AdditionalProperties) AsEncrypt() (Encrypt, error) {
	var body Encrypt
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEncrypt overwrites any union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties as the provided Encrypt
func (t *AnonymizeRequest_Anonymizers_AdditionalProperties) FromEncrypt(v Encrypt) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEncrypt performs a merge with any union data inside the AnonymizeRequest_Anonymizers_AdditionalProperties, using the provided Encrypt
func (t *AnonymizeRequest_Anonymizers_AdditionalProperties) MergeEncrypt(v Encrypt) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AnonymizeRequest_Anonymizers_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AnonymizeRequest_Anonymizers_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDecrypt returns the union data inside the DeanonymizeRequest_Deanonymizers_AdditionalProperties as a Decrypt
func (t DeanonymizeRequest_Deanonymizers_AdditionalProperties) AsDecrypt() (Decrypt, error) {
	var body Decrypt
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDecrypt overwrites any union data inside the DeanonymizeRequest_Deanonymizers_AdditionalProperties as the provided Decrypt
func (t *DeanonymizeRequest_Deanonymizers_AdditionalProperties) FromDecrypt(v Decrypt) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDecrypt performs a merge with any union data inside the DeanonymizeRequest_Deanonymizers_AdditionalProperties, using the provided Decrypt
func (t *DeanonymizeRequest_Deanonymizers_AdditionalProperties) MergeDecrypt(v Decrypt) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DeanonymizeRequest_Deanonymizers_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DeanonymizeRequest_Deanonymizers_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAnalyzeWithBody request with any body
	PostAnalyzeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnalyze(ctx context.Context, body PostAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAnonymizeWithBody request with any body
	PostAnonymizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAnonymize(ctx context.Context, body PostAnonymizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnonymizers request
	GetAnonymizers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDeanonymizeWithBody request with any body
	PostDeanonymizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDeanonymize(ctx context.Context, body PostDeanonymizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeanonymizers request
	GetDeanonymizers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecognizers request
	GetRecognizers(ctx context.Context, params *GetRecognizersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSupportedentities request
	GetSupportedentities(ctx context.Context, params *GetSupportedentitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAnalyzeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnalyzeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnalyze(ctx context.Context, body PostAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnalyzeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnonymizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnonymizeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAnonymize(ctx context.Context, body PostAnonymizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAnonymizeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnonymizers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnonymizersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeanonymizeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeanonymizeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDeanonymize(ctx context.Context, body PostDeanonymizeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDeanonymizeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeanonymizers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeanonymizersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecognizers(ctx context.Context, params *GetRecognizersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecognizersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSupportedentities(ctx context.Context, params *GetSupportedentitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupportedentitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAnalyzeRequest calls the generic PostAnalyze builder with application/json body
func NewPostAnalyzeRequest(server string, body PostAnalyzeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAnalyzeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAnalyzeRequestWithBody generates requests for PostAnalyze with any type of body
func NewPostAnalyzeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/analyze")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAnonymizeRequest calls the generic PostAnonymize builder with application/json body
func NewPostAnonymizeRequest(server string, body PostAnonymizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAnonymizeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAnonymizeRequestWithBody generates requests for PostAnonymize with any type of body
func NewPostAnonymizeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anonymize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAnonymizersRequest generates requests for GetAnonymizers
func NewGetAnonymizersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/anonymizers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDeanonymizeRequest calls the generic PostDeanonymize builder with application/json body
func NewPostDeanonymizeRequest(server string, body PostDeanonymizeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDeanonymizeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDeanonymizeRequestWithBody generates requests for PostDeanonymize with any type of body
func NewPostDeanonymizeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deanonymize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDeanonymizersRequest generates requests for GetDeanonymizers
func NewGetDeanonymizersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/deanonymizers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecognizersRequest generates requests for GetRecognizers
func NewGetRecognizersRequest(server string, params *GetRecognizersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recognizers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSupportedentitiesRequest generates requests for GetSupportedentities
func NewGetSupportedentitiesRequest(server string, params *GetSupportedentitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/supportedentities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAnalyzeWithBodyWithResponse request with any body
	PostAnalyzeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnalyzeResponse, error)

	PostAnalyzeWithResponse(ctx context.Context, body PostAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnalyzeResponse, error)

	// PostAnonymizeWithBodyWithResponse request with any body
	PostAnonymizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnonymizeResponse, error)

	PostAnonymizeWithResponse(ctx context.Context, body PostAnonymizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnonymizeResponse, error)

	// GetAnonymizersWithResponse request
	GetAnonymizersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAnonymizersResponse, error)

	// PostDeanonymizeWithBodyWithResponse request with any body
	PostDeanonymizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeanonymizeResponse, error)

	PostDeanonymizeWithResponse(ctx context.Context, body PostDeanonymizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeanonymizeResponse, error)

	// GetDeanonymizersWithResponse request
	GetDeanonymizersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDeanonymizersResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// GetRecognizersWithResponse request
	GetRecognizersWithResponse(ctx context.Context, params *GetRecognizersParams, reqEditors ...RequestEditorFn) (*GetRecognizersResponse, error)

	// GetSupportedentitiesWithResponse request
	GetSupportedentitiesWithResponse(ctx context.Context, params *GetSupportedentitiesParams, reqEditors ...RequestEditorFn) (*GetSupportedentitiesResponse, error)
}

type PostAnalyzeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RecognizerResultWithAnaysisExplanation
}

// Status returns HTTPResponse.Status
func (r PostAnalyzeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAnalyzeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAnonymizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnonymizeResponse
	JSON400      *N400BadRequest
	JSON422      *N422UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r PostAnonymizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAnonymizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnonymizersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetAnonymizersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnonymizersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDeanonymizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeanonymizeResponse
	JSON400      *N400BadRequest
	JSON422      *N422UnprocessableEntity
}

// Status returns HTTPResponse.Status
func (r PostDeanonymizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDeanonymizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeanonymizersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetDeanonymizersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeanonymizersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecognizersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetRecognizersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecognizersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSupportedentitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EntityTypes
}

// Status returns HTTPResponse.Status
func (r GetSupportedentitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupportedentitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAnalyzeWithBodyWithResponse request with arbitrary body returning *PostAnalyzeResponse
func (c *ClientWithResponses) PostAnalyzeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnalyzeResponse, error) {
	rsp, err := c.PostAnalyzeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnalyzeResponse(rsp)
}

func (c *ClientWithResponses) PostAnalyzeWithResponse(ctx context.Context, body PostAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnalyzeResponse, error) {
	rsp, err := c.PostAnalyze(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnalyzeResponse(rsp)
}

// PostAnonymizeWithBodyWithResponse request with arbitrary body returning *PostAnonymizeResponse
func (c *ClientWithResponses) PostAnonymizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAnonymizeResponse, error) {
	rsp, err := c.PostAnonymizeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnonymizeResponse(rsp)
}

func (c *ClientWithResponses) PostAnonymizeWithResponse(ctx context.Context, body PostAnonymizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnonymizeResponse, error) {
	rsp, err := c.PostAnonymize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAnonymizeResponse(rsp)
}

// GetAnonymizersWithResponse request returning *GetAnonymizersResponse
func (c *ClientWithResponses) GetAnonymizersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAnonymizersResponse, error) {
	rsp, err := c.GetAnonymizers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnonymizersResponse(rsp)
}

// PostDeanonymizeWithBodyWithResponse request with arbitrary body returning *PostDeanonymizeResponse
func (c *ClientWithResponses) PostDeanonymizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDeanonymizeResponse, error) {
	rsp, err := c.PostDeanonymizeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeanonymizeResponse(rsp)
}

func (c *ClientWithResponses) PostDeanonymizeWithResponse(ctx context.Context, body PostDeanonymizeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDeanonymizeResponse, error) {
	rsp, err := c.PostDeanonymize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDeanonymizeResponse(rsp)
}

// GetDeanonymizersWithResponse request returning *GetDeanonymizersResponse
func (c *ClientWithResponses) GetDeanonymizersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDeanonymizersResponse, error) {
	rsp, err := c.GetDeanonymizers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeanonymizersResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// GetRecognizersWithResponse request returning *GetRecognizersResponse
func (c *ClientWithResponses) GetRecognizersWithResponse(ctx context.Context, params *GetRecognizersParams, reqEditors ...RequestEditorFn) (*GetRecognizersResponse, error) {
	rsp, err := c.GetRecognizers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecognizersResponse(rsp)
}

// GetSupportedentitiesWithResponse request returning *GetSupportedentitiesResponse
func (c *ClientWithResponses) GetSupportedentitiesWithResponse(ctx context.Context, params *GetSupportedentitiesParams, reqEditors ...RequestEditorFn) (*GetSupportedentitiesResponse, error) {
	rsp, err := c.GetSupportedentities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupportedentitiesResponse(rsp)
}

// ParsePostAnalyzeResponse parses an HTTP response from a PostAnalyzeWithResponse call
func ParsePostAnalyzeResponse(rsp *http.Response) (*PostAnalyzeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAnalyzeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RecognizerResultWithAnaysisExplanation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAnonymizeResponse parses an HTTP response from a PostAnonymizeWithResponse call
func ParsePostAnonymizeResponse(rsp *http.Response) (*PostAnonymizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAnonymizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnonymizeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetAnonymizersResponse parses an HTTP response from a GetAnonymizersWithResponse call
func ParseGetAnonymizersResponse(rsp *http.Response) (*GetAnonymizersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnonymizersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDeanonymizeResponse parses an HTTP response from a PostDeanonymizeWithResponse call
func ParsePostDeanonymizeResponse(rsp *http.Response) (*PostDeanonymizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDeanonymizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeanonymizeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetDeanonymizersResponse parses an HTTP response from a GetDeanonymizersWithResponse call
func ParseGetDeanonymizersResponse(rsp *http.Response) (*GetDeanonymizersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeanonymizersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRecognizersResponse parses an HTTP response from a GetRecognizersWithResponse call
func ParseGetRecognizersResponse(rsp *http.Response) (*GetRecognizersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecognizersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSupportedentitiesResponse parses an HTTP response from a GetSupportedentitiesWithResponse call
func ParseGetSupportedentitiesResponse(rsp *http.Response) (*GetSupportedentitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupportedentitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EntityTypes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
