// Code generated by mockery. DO NOT EDIT.

package presidioapi

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAnalyzeInterface is an autogenerated mock type for the AnalyzeInterface type
type MockAnalyzeInterface struct {
	mock.Mock
}

type MockAnalyzeInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnalyzeInterface) EXPECT() *MockAnalyzeInterface_Expecter {
	return &MockAnalyzeInterface_Expecter{mock: &_m.Mock}
}

// PostAnalyzeWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockAnalyzeInterface) PostAnalyzeWithResponse(ctx context.Context, body PostAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAnalyzeResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostAnalyzeWithResponse")
	}

	var r0 *PostAnalyzeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, PostAnalyzeJSONRequestBody, ...RequestEditorFn) (*PostAnalyzeResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, PostAnalyzeJSONRequestBody, ...RequestEditorFn) *PostAnalyzeResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PostAnalyzeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, PostAnalyzeJSONRequestBody, ...RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAnalyzeInterface_PostAnalyzeWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostAnalyzeWithResponse'
type MockAnalyzeInterface_PostAnalyzeWithResponse_Call struct {
	*mock.Call
}

// PostAnalyzeWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body PostAnalyzeJSONRequestBody
//   - reqEditors ...RequestEditorFn
func (_e *MockAnalyzeInterface_Expecter) PostAnalyzeWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockAnalyzeInterface_PostAnalyzeWithResponse_Call {
	return &MockAnalyzeInterface_PostAnalyzeWithResponse_Call{Call: _e.mock.On("PostAnalyzeWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockAnalyzeInterface_PostAnalyzeWithResponse_Call) Run(run func(ctx context.Context, body PostAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn)) *MockAnalyzeInterface_PostAnalyzeWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(PostAnalyzeJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockAnalyzeInterface_PostAnalyzeWithResponse_Call) Return(_a0 *PostAnalyzeResponse, _a1 error) *MockAnalyzeInterface_PostAnalyzeWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAnalyzeInterface_PostAnalyzeWithResponse_Call) RunAndReturn(run func(context.Context, PostAnalyzeJSONRequestBody, ...RequestEditorFn) (*PostAnalyzeResponse, error)) *MockAnalyzeInterface_PostAnalyzeWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAnalyzeInterface creates a new instance of MockAnalyzeInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnalyzeInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnalyzeInterface {
	mock := &MockAnalyzeInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
