// Code generated by mockery. DO NOT EDIT.

package ee_transformer_fns

import (
	context "context"

	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockNeosyncOperatorApi is an autogenerated mock type for the NeosyncOperatorApi type
type MockNeosyncOperatorApi struct {
	mock.Mock
}

type MockNeosyncOperatorApi_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNeosyncOperatorApi) EXPECT() *MockNeosyncOperatorApi_Expecter {
	return &MockNeosyncOperatorApi_Expecter{mock: &_m.Mock}
}

// Transform provides a mock function with given fields: ctx, config, value
func (_m *MockNeosyncOperatorApi) Transform(ctx context.Context, config *mgmtv1alpha1.TransformerConfig, value string) (string, error) {
	ret := _m.Called(ctx, config, value)

	if len(ret) == 0 {
		panic("no return value specified for Transform")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgmtv1alpha1.TransformerConfig, string) (string, error)); ok {
		return rf(ctx, config, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgmtv1alpha1.TransformerConfig, string) string); ok {
		r0 = rf(ctx, config, value)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgmtv1alpha1.TransformerConfig, string) error); ok {
		r1 = rf(ctx, config, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNeosyncOperatorApi_Transform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transform'
type MockNeosyncOperatorApi_Transform_Call struct {
	*mock.Call
}

// Transform is a helper method to define mock.On call
//   - ctx context.Context
//   - config *mgmtv1alpha1.TransformerConfig
//   - value string
func (_e *MockNeosyncOperatorApi_Expecter) Transform(ctx interface{}, config interface{}, value interface{}) *MockNeosyncOperatorApi_Transform_Call {
	return &MockNeosyncOperatorApi_Transform_Call{Call: _e.mock.On("Transform", ctx, config, value)}
}

func (_c *MockNeosyncOperatorApi_Transform_Call) Run(run func(ctx context.Context, config *mgmtv1alpha1.TransformerConfig, value string)) *MockNeosyncOperatorApi_Transform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*mgmtv1alpha1.TransformerConfig), args[2].(string))
	})
	return _c
}

func (_c *MockNeosyncOperatorApi_Transform_Call) Return(_a0 string, _a1 error) *MockNeosyncOperatorApi_Transform_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNeosyncOperatorApi_Transform_Call) RunAndReturn(run func(context.Context, *mgmtv1alpha1.TransformerConfig, string) (string, error)) *MockNeosyncOperatorApi_Transform_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNeosyncOperatorApi creates a new instance of MockNeosyncOperatorApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNeosyncOperatorApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNeosyncOperatorApi {
	mock := &MockNeosyncOperatorApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
