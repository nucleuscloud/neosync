// Code generated by mockery. DO NOT EDIT.

package ee_slack

import (
	context "context"

	slack "github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// ExchangeCodeForAccessToken provides a mock function with given fields: ctx, code
func (_m *MockInterface) ExchangeCodeForAccessToken(ctx context.Context, code string) (*slack.OAuthV2Response, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeCodeForAccessToken")
	}

	var r0 *slack.OAuthV2Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*slack.OAuthV2Response, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *slack.OAuthV2Response); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.OAuthV2Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_ExchangeCodeForAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeCodeForAccessToken'
type MockInterface_ExchangeCodeForAccessToken_Call struct {
	*mock.Call
}

// ExchangeCodeForAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockInterface_Expecter) ExchangeCodeForAccessToken(ctx interface{}, code interface{}) *MockInterface_ExchangeCodeForAccessToken_Call {
	return &MockInterface_ExchangeCodeForAccessToken_Call{Call: _e.mock.On("ExchangeCodeForAccessToken", ctx, code)}
}

func (_c *MockInterface_ExchangeCodeForAccessToken_Call) Run(run func(ctx context.Context, code string)) *MockInterface_ExchangeCodeForAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInterface_ExchangeCodeForAccessToken_Call) Return(_a0 *slack.OAuthV2Response, _a1 error) *MockInterface_ExchangeCodeForAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_ExchangeCodeForAccessToken_Call) RunAndReturn(run func(context.Context, string) (*slack.OAuthV2Response, error)) *MockInterface_ExchangeCodeForAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorizeUrl provides a mock function with given fields: accountId, userId
func (_m *MockInterface) GetAuthorizeUrl(accountId string, userId string) (string, error) {
	ret := _m.Called(accountId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizeUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(accountId, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(accountId, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accountId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetAuthorizeUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizeUrl'
type MockInterface_GetAuthorizeUrl_Call struct {
	*mock.Call
}

// GetAuthorizeUrl is a helper method to define mock.On call
//   - accountId string
//   - userId string
func (_e *MockInterface_Expecter) GetAuthorizeUrl(accountId interface{}, userId interface{}) *MockInterface_GetAuthorizeUrl_Call {
	return &MockInterface_GetAuthorizeUrl_Call{Call: _e.mock.On("GetAuthorizeUrl", accountId, userId)}
}

func (_c *MockInterface_GetAuthorizeUrl_Call) Run(run func(accountId string, userId string)) *MockInterface_GetAuthorizeUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockInterface_GetAuthorizeUrl_Call) Return(_a0 string, _a1 error) *MockInterface_GetAuthorizeUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetAuthorizeUrl_Call) RunAndReturn(run func(string, string) (string, error)) *MockInterface_GetAuthorizeUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicChannels provides a mock function with given fields: ctx, accessToken
func (_m *MockInterface) GetPublicChannels(ctx context.Context, accessToken string) ([]slack.Channel, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicChannels")
	}

	var r0 []slack.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]slack.Channel, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []slack.Channel); ok {
		r0 = rf(ctx, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slack.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetPublicChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicChannels'
type MockInterface_GetPublicChannels_Call struct {
	*mock.Call
}

// GetPublicChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
func (_e *MockInterface_Expecter) GetPublicChannels(ctx interface{}, accessToken interface{}) *MockInterface_GetPublicChannels_Call {
	return &MockInterface_GetPublicChannels_Call{Call: _e.mock.On("GetPublicChannels", ctx, accessToken)}
}

func (_c *MockInterface_GetPublicChannels_Call) Run(run func(ctx context.Context, accessToken string)) *MockInterface_GetPublicChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInterface_GetPublicChannels_Call) Return(_a0 []slack.Channel, _a1 error) *MockInterface_GetPublicChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetPublicChannels_Call) RunAndReturn(run func(context.Context, string) ([]slack.Channel, error)) *MockInterface_GetPublicChannels_Call {
	_c.Call.Return(run)
	return _c
}

// JoinChannel provides a mock function with given fields: ctx, accessToken, channelId, logger
func (_m *MockInterface) JoinChannel(ctx context.Context, accessToken string, channelId string, logger *slog.Logger) error {
	ret := _m.Called(ctx, accessToken, channelId, logger)

	if len(ret) == 0 {
		panic("no return value specified for JoinChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *slog.Logger) error); ok {
		r0 = rf(ctx, accessToken, channelId, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_JoinChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JoinChannel'
type MockInterface_JoinChannel_Call struct {
	*mock.Call
}

// JoinChannel is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - channelId string
//   - logger *slog.Logger
func (_e *MockInterface_Expecter) JoinChannel(ctx interface{}, accessToken interface{}, channelId interface{}, logger interface{}) *MockInterface_JoinChannel_Call {
	return &MockInterface_JoinChannel_Call{Call: _e.mock.On("JoinChannel", ctx, accessToken, channelId, logger)}
}

func (_c *MockInterface_JoinChannel_Call) Run(run func(ctx context.Context, accessToken string, channelId string, logger *slog.Logger)) *MockInterface_JoinChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*slog.Logger))
	})
	return _c
}

func (_c *MockInterface_JoinChannel_Call) Return(_a0 error) *MockInterface_JoinChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_JoinChannel_Call) RunAndReturn(run func(context.Context, string, string, *slog.Logger) error) *MockInterface_JoinChannel_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: ctx, accessToken, channelId, options
func (_m *MockInterface) SendMessage(ctx context.Context, accessToken string, channelId string, options ...slack.MsgOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accessToken, channelId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...slack.MsgOption) error); ok {
		r0 = rf(ctx, accessToken, channelId, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockInterface_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - channelId string
//   - options ...slack.MsgOption
func (_e *MockInterface_Expecter) SendMessage(ctx interface{}, accessToken interface{}, channelId interface{}, options ...interface{}) *MockInterface_SendMessage_Call {
	return &MockInterface_SendMessage_Call{Call: _e.mock.On("SendMessage",
		append([]interface{}{ctx, accessToken, channelId}, options...)...)}
}

func (_c *MockInterface_SendMessage_Call) Run(run func(ctx context.Context, accessToken string, channelId string, options ...slack.MsgOption)) *MockInterface_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slack.MsgOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(slack.MsgOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockInterface_SendMessage_Call) Return(_a0 error) *MockInterface_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_SendMessage_Call) RunAndReturn(run func(context.Context, string, string, ...slack.MsgOption) error) *MockInterface_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Test provides a mock function with given fields: ctx, accessToken
func (_m *MockInterface) Test(ctx context.Context, accessToken string) (*slack.AuthTestResponse, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Test")
	}

	var r0 *slack.AuthTestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*slack.AuthTestResponse, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *slack.AuthTestResponse); ok {
		r0 = rf(ctx, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.AuthTestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_Test_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Test'
type MockInterface_Test_Call struct {
	*mock.Call
}

// Test is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
func (_e *MockInterface_Expecter) Test(ctx interface{}, accessToken interface{}) *MockInterface_Test_Call {
	return &MockInterface_Test_Call{Call: _e.mock.On("Test", ctx, accessToken)}
}

func (_c *MockInterface_Test_Call) Run(run func(ctx context.Context, accessToken string)) *MockInterface_Test_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInterface_Test_Call) Return(_a0 *slack.AuthTestResponse, _a1 error) *MockInterface_Test_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_Test_Call) RunAndReturn(run func(context.Context, string) (*slack.AuthTestResponse, error)) *MockInterface_Test_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateState provides a mock function with given fields: ctx, state, userId, isUserInAccount
func (_m *MockInterface) ValidateState(ctx context.Context, state string, userId string, isUserInAccount IsUserInAccountFunc) (*OauthState, error) {
	ret := _m.Called(ctx, state, userId, isUserInAccount)

	if len(ret) == 0 {
		panic("no return value specified for ValidateState")
	}

	var r0 *OauthState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, IsUserInAccountFunc) (*OauthState, error)); ok {
		return rf(ctx, state, userId, isUserInAccount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, IsUserInAccountFunc) *OauthState); ok {
		r0 = rf(ctx, state, userId, isUserInAccount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*OauthState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, IsUserInAccountFunc) error); ok {
		r1 = rf(ctx, state, userId, isUserInAccount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_ValidateState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateState'
type MockInterface_ValidateState_Call struct {
	*mock.Call
}

// ValidateState is a helper method to define mock.On call
//   - ctx context.Context
//   - state string
//   - userId string
//   - isUserInAccount IsUserInAccountFunc
func (_e *MockInterface_Expecter) ValidateState(ctx interface{}, state interface{}, userId interface{}, isUserInAccount interface{}) *MockInterface_ValidateState_Call {
	return &MockInterface_ValidateState_Call{Call: _e.mock.On("ValidateState", ctx, state, userId, isUserInAccount)}
}

func (_c *MockInterface_ValidateState_Call) Run(run func(ctx context.Context, state string, userId string, isUserInAccount IsUserInAccountFunc)) *MockInterface_ValidateState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(IsUserInAccountFunc))
	})
	return _c
}

func (_c *MockInterface_ValidateState_Call) Return(_a0 *OauthState, _a1 error) *MockInterface_ValidateState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_ValidateState_Call) RunAndReturn(run func(context.Context, string, string, IsUserInAccountFunc) (*OauthState, error)) *MockInterface_ValidateState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
