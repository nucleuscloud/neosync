// Code generated by mockery. DO NOT EDIT.

package connectiondata

import (
	context "context"

	connect "connectrpc.com/connect"

	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockConnectionDataService is an autogenerated mock type for the ConnectionDataService type
type MockConnectionDataService struct {
	mock.Mock
}

type MockConnectionDataService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionDataService) EXPECT() *MockConnectionDataService_Expecter {
	return &MockConnectionDataService_Expecter{mock: &_m.Mock}
}

// GetAllSchemas provides a mock function with given fields: ctx
func (_m *MockConnectionDataService) GetAllSchemas(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSchemas")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionDataService_GetAllSchemas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSchemas'
type MockConnectionDataService_GetAllSchemas_Call struct {
	*mock.Call
}

// GetAllSchemas is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConnectionDataService_Expecter) GetAllSchemas(ctx interface{}) *MockConnectionDataService_GetAllSchemas_Call {
	return &MockConnectionDataService_GetAllSchemas_Call{Call: _e.mock.On("GetAllSchemas", ctx)}
}

func (_c *MockConnectionDataService_GetAllSchemas_Call) Run(run func(ctx context.Context)) *MockConnectionDataService_GetAllSchemas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConnectionDataService_GetAllSchemas_Call) Return(_a0 []string, _a1 error) *MockConnectionDataService_GetAllSchemas_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionDataService_GetAllSchemas_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockConnectionDataService_GetAllSchemas_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTables provides a mock function with given fields: ctx
func (_m *MockConnectionDataService) GetAllTables(ctx context.Context) ([]TableIdentifier, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTables")
	}

	var r0 []TableIdentifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]TableIdentifier, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []TableIdentifier); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TableIdentifier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionDataService_GetAllTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTables'
type MockConnectionDataService_GetAllTables_Call struct {
	*mock.Call
}

// GetAllTables is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConnectionDataService_Expecter) GetAllTables(ctx interface{}) *MockConnectionDataService_GetAllTables_Call {
	return &MockConnectionDataService_GetAllTables_Call{Call: _e.mock.On("GetAllTables", ctx)}
}

func (_c *MockConnectionDataService_GetAllTables_Call) Run(run func(ctx context.Context)) *MockConnectionDataService_GetAllTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConnectionDataService_GetAllTables_Call) Return(_a0 []TableIdentifier, _a1 error) *MockConnectionDataService_GetAllTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionDataService_GetAllTables_Call) RunAndReturn(run func(context.Context) ([]TableIdentifier, error)) *MockConnectionDataService_GetAllTables_Call {
	_c.Call.Return(run)
	return _c
}

// GetInitStatements provides a mock function with given fields: ctx, options
func (_m *MockConnectionDataService) GetInitStatements(ctx context.Context, options *mgmtv1alpha1.InitStatementOptions) (*mgmtv1alpha1.GetConnectionInitStatementsResponse, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for GetInitStatements")
	}

	var r0 *mgmtv1alpha1.GetConnectionInitStatementsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgmtv1alpha1.InitStatementOptions) (*mgmtv1alpha1.GetConnectionInitStatementsResponse, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgmtv1alpha1.InitStatementOptions) *mgmtv1alpha1.GetConnectionInitStatementsResponse); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgmtv1alpha1.GetConnectionInitStatementsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgmtv1alpha1.InitStatementOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionDataService_GetInitStatements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInitStatements'
type MockConnectionDataService_GetInitStatements_Call struct {
	*mock.Call
}

// GetInitStatements is a helper method to define mock.On call
//   - ctx context.Context
//   - options *mgmtv1alpha1.InitStatementOptions
func (_e *MockConnectionDataService_Expecter) GetInitStatements(ctx interface{}, options interface{}) *MockConnectionDataService_GetInitStatements_Call {
	return &MockConnectionDataService_GetInitStatements_Call{Call: _e.mock.On("GetInitStatements", ctx, options)}
}

func (_c *MockConnectionDataService_GetInitStatements_Call) Run(run func(ctx context.Context, options *mgmtv1alpha1.InitStatementOptions)) *MockConnectionDataService_GetInitStatements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*mgmtv1alpha1.InitStatementOptions))
	})
	return _c
}

func (_c *MockConnectionDataService_GetInitStatements_Call) Return(_a0 *mgmtv1alpha1.GetConnectionInitStatementsResponse, _a1 error) *MockConnectionDataService_GetInitStatements_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionDataService_GetInitStatements_Call) RunAndReturn(run func(context.Context, *mgmtv1alpha1.InitStatementOptions) (*mgmtv1alpha1.GetConnectionInitStatementsResponse, error)) *MockConnectionDataService_GetInitStatements_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchema provides a mock function with given fields: ctx, config
func (_m *MockConnectionDataService) GetSchema(ctx context.Context, config *mgmtv1alpha1.ConnectionSchemaConfig) ([]*mgmtv1alpha1.DatabaseColumn, error) {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for GetSchema")
	}

	var r0 []*mgmtv1alpha1.DatabaseColumn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgmtv1alpha1.ConnectionSchemaConfig) ([]*mgmtv1alpha1.DatabaseColumn, error)); ok {
		return rf(ctx, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgmtv1alpha1.ConnectionSchemaConfig) []*mgmtv1alpha1.DatabaseColumn); ok {
		r0 = rf(ctx, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mgmtv1alpha1.DatabaseColumn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgmtv1alpha1.ConnectionSchemaConfig) error); ok {
		r1 = rf(ctx, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionDataService_GetSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchema'
type MockConnectionDataService_GetSchema_Call struct {
	*mock.Call
}

// GetSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - config *mgmtv1alpha1.ConnectionSchemaConfig
func (_e *MockConnectionDataService_Expecter) GetSchema(ctx interface{}, config interface{}) *MockConnectionDataService_GetSchema_Call {
	return &MockConnectionDataService_GetSchema_Call{Call: _e.mock.On("GetSchema", ctx, config)}
}

func (_c *MockConnectionDataService_GetSchema_Call) Run(run func(ctx context.Context, config *mgmtv1alpha1.ConnectionSchemaConfig)) *MockConnectionDataService_GetSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*mgmtv1alpha1.ConnectionSchemaConfig))
	})
	return _c
}

func (_c *MockConnectionDataService_GetSchema_Call) Return(_a0 []*mgmtv1alpha1.DatabaseColumn, _a1 error) *MockConnectionDataService_GetSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionDataService_GetSchema_Call) RunAndReturn(run func(context.Context, *mgmtv1alpha1.ConnectionSchemaConfig) ([]*mgmtv1alpha1.DatabaseColumn, error)) *MockConnectionDataService_GetSchema_Call {
	_c.Call.Return(run)
	return _c
}

// GetTableConstraints provides a mock function with given fields: ctx
func (_m *MockConnectionDataService) GetTableConstraints(ctx context.Context) (*mgmtv1alpha1.GetConnectionTableConstraintsResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTableConstraints")
	}

	var r0 *mgmtv1alpha1.GetConnectionTableConstraintsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*mgmtv1alpha1.GetConnectionTableConstraintsResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *mgmtv1alpha1.GetConnectionTableConstraintsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgmtv1alpha1.GetConnectionTableConstraintsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionDataService_GetTableConstraints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTableConstraints'
type MockConnectionDataService_GetTableConstraints_Call struct {
	*mock.Call
}

// GetTableConstraints is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConnectionDataService_Expecter) GetTableConstraints(ctx interface{}) *MockConnectionDataService_GetTableConstraints_Call {
	return &MockConnectionDataService_GetTableConstraints_Call{Call: _e.mock.On("GetTableConstraints", ctx)}
}

func (_c *MockConnectionDataService_GetTableConstraints_Call) Run(run func(ctx context.Context)) *MockConnectionDataService_GetTableConstraints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConnectionDataService_GetTableConstraints_Call) Return(_a0 *mgmtv1alpha1.GetConnectionTableConstraintsResponse, _a1 error) *MockConnectionDataService_GetTableConstraints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionDataService_GetTableConstraints_Call) RunAndReturn(run func(context.Context) (*mgmtv1alpha1.GetConnectionTableConstraintsResponse, error)) *MockConnectionDataService_GetTableConstraints_Call {
	_c.Call.Return(run)
	return _c
}

// GetTableRowCount provides a mock function with given fields: ctx, schema, table, whereClause
func (_m *MockConnectionDataService) GetTableRowCount(ctx context.Context, schema string, table string, whereClause *string) (int64, error) {
	ret := _m.Called(ctx, schema, table, whereClause)

	if len(ret) == 0 {
		panic("no return value specified for GetTableRowCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string) (int64, error)); ok {
		return rf(ctx, schema, table, whereClause)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string) int64); ok {
		r0 = rf(ctx, schema, table, whereClause)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *string) error); ok {
		r1 = rf(ctx, schema, table, whereClause)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionDataService_GetTableRowCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTableRowCount'
type MockConnectionDataService_GetTableRowCount_Call struct {
	*mock.Call
}

// GetTableRowCount is a helper method to define mock.On call
//   - ctx context.Context
//   - schema string
//   - table string
//   - whereClause *string
func (_e *MockConnectionDataService_Expecter) GetTableRowCount(ctx interface{}, schema interface{}, table interface{}, whereClause interface{}) *MockConnectionDataService_GetTableRowCount_Call {
	return &MockConnectionDataService_GetTableRowCount_Call{Call: _e.mock.On("GetTableRowCount", ctx, schema, table, whereClause)}
}

func (_c *MockConnectionDataService_GetTableRowCount_Call) Run(run func(ctx context.Context, schema string, table string, whereClause *string)) *MockConnectionDataService_GetTableRowCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*string))
	})
	return _c
}

func (_c *MockConnectionDataService_GetTableRowCount_Call) Return(_a0 int64, _a1 error) *MockConnectionDataService_GetTableRowCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionDataService_GetTableRowCount_Call) RunAndReturn(run func(context.Context, string, string, *string) (int64, error)) *MockConnectionDataService_GetTableRowCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetTableSchema provides a mock function with given fields: ctx, schema, table
func (_m *MockConnectionDataService) GetTableSchema(ctx context.Context, schema string, table string) ([]*mgmtv1alpha1.DatabaseColumn, error) {
	ret := _m.Called(ctx, schema, table)

	if len(ret) == 0 {
		panic("no return value specified for GetTableSchema")
	}

	var r0 []*mgmtv1alpha1.DatabaseColumn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*mgmtv1alpha1.DatabaseColumn, error)); ok {
		return rf(ctx, schema, table)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*mgmtv1alpha1.DatabaseColumn); ok {
		r0 = rf(ctx, schema, table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mgmtv1alpha1.DatabaseColumn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, schema, table)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionDataService_GetTableSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTableSchema'
type MockConnectionDataService_GetTableSchema_Call struct {
	*mock.Call
}

// GetTableSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - schema string
//   - table string
func (_e *MockConnectionDataService_Expecter) GetTableSchema(ctx interface{}, schema interface{}, table interface{}) *MockConnectionDataService_GetTableSchema_Call {
	return &MockConnectionDataService_GetTableSchema_Call{Call: _e.mock.On("GetTableSchema", ctx, schema, table)}
}

func (_c *MockConnectionDataService_GetTableSchema_Call) Run(run func(ctx context.Context, schema string, table string)) *MockConnectionDataService_GetTableSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockConnectionDataService_GetTableSchema_Call) Return(_a0 []*mgmtv1alpha1.DatabaseColumn, _a1 error) *MockConnectionDataService_GetTableSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionDataService_GetTableSchema_Call) RunAndReturn(run func(context.Context, string, string) ([]*mgmtv1alpha1.DatabaseColumn, error)) *MockConnectionDataService_GetTableSchema_Call {
	_c.Call.Return(run)
	return _c
}

// SampleData provides a mock function with given fields: ctx, stream, schema, table, numRows
func (_m *MockConnectionDataService) SampleData(ctx context.Context, stream SampleDataStream, schema string, table string, numRows uint) error {
	ret := _m.Called(ctx, stream, schema, table, numRows)

	if len(ret) == 0 {
		panic("no return value specified for SampleData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, SampleDataStream, string, string, uint) error); ok {
		r0 = rf(ctx, stream, schema, table, numRows)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnectionDataService_SampleData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SampleData'
type MockConnectionDataService_SampleData_Call struct {
	*mock.Call
}

// SampleData is a helper method to define mock.On call
//   - ctx context.Context
//   - stream SampleDataStream
//   - schema string
//   - table string
//   - numRows uint
func (_e *MockConnectionDataService_Expecter) SampleData(ctx interface{}, stream interface{}, schema interface{}, table interface{}, numRows interface{}) *MockConnectionDataService_SampleData_Call {
	return &MockConnectionDataService_SampleData_Call{Call: _e.mock.On("SampleData", ctx, stream, schema, table, numRows)}
}

func (_c *MockConnectionDataService_SampleData_Call) Run(run func(ctx context.Context, stream SampleDataStream, schema string, table string, numRows uint)) *MockConnectionDataService_SampleData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(SampleDataStream), args[2].(string), args[3].(string), args[4].(uint))
	})
	return _c
}

func (_c *MockConnectionDataService_SampleData_Call) Return(_a0 error) *MockConnectionDataService_SampleData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionDataService_SampleData_Call) RunAndReturn(run func(context.Context, SampleDataStream, string, string, uint) error) *MockConnectionDataService_SampleData_Call {
	_c.Call.Return(run)
	return _c
}

// StreamData provides a mock function with given fields: ctx, stream, StreamConfig, schema, table
func (_m *MockConnectionDataService) StreamData(ctx context.Context, stream *connect.ServerStream[mgmtv1alpha1.GetConnectionDataStreamResponse], StreamConfig *mgmtv1alpha1.ConnectionStreamConfig, schema string, table string) error {
	ret := _m.Called(ctx, stream, StreamConfig, schema, table)

	if len(ret) == 0 {
		panic("no return value specified for StreamData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ServerStream[mgmtv1alpha1.GetConnectionDataStreamResponse], *mgmtv1alpha1.ConnectionStreamConfig, string, string) error); ok {
		r0 = rf(ctx, stream, StreamConfig, schema, table)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnectionDataService_StreamData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamData'
type MockConnectionDataService_StreamData_Call struct {
	*mock.Call
}

// StreamData is a helper method to define mock.On call
//   - ctx context.Context
//   - stream *connect.ServerStream[mgmtv1alpha1.GetConnectionDataStreamResponse]
//   - StreamConfig *mgmtv1alpha1.ConnectionStreamConfig
//   - schema string
//   - table string
func (_e *MockConnectionDataService_Expecter) StreamData(ctx interface{}, stream interface{}, StreamConfig interface{}, schema interface{}, table interface{}) *MockConnectionDataService_StreamData_Call {
	return &MockConnectionDataService_StreamData_Call{Call: _e.mock.On("StreamData", ctx, stream, StreamConfig, schema, table)}
}

func (_c *MockConnectionDataService_StreamData_Call) Run(run func(ctx context.Context, stream *connect.ServerStream[mgmtv1alpha1.GetConnectionDataStreamResponse], StreamConfig *mgmtv1alpha1.ConnectionStreamConfig, schema string, table string)) *MockConnectionDataService_StreamData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.ServerStream[mgmtv1alpha1.GetConnectionDataStreamResponse]), args[2].(*mgmtv1alpha1.ConnectionStreamConfig), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockConnectionDataService_StreamData_Call) Return(_a0 error) *MockConnectionDataService_StreamData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionDataService_StreamData_Call) RunAndReturn(run func(context.Context, *connect.ServerStream[mgmtv1alpha1.GetConnectionDataStreamResponse], *mgmtv1alpha1.ConnectionStreamConfig, string, string) error) *MockConnectionDataService_StreamData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionDataService creates a new instance of MockConnectionDataService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionDataService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionDataService {
	mock := &MockConnectionDataService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
