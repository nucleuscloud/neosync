// Code generated by mockery. DO NOT EDIT.

package connectiondata

import (
	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"

	slog "log/slog"
)

// MockConnectionDataBuilder is an autogenerated mock type for the ConnectionDataBuilder type
type MockConnectionDataBuilder struct {
	mock.Mock
}

type MockConnectionDataBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionDataBuilder) EXPECT() *MockConnectionDataBuilder_Expecter {
	return &MockConnectionDataBuilder_Expecter{mock: &_m.Mock}
}

// NewDataConnection provides a mock function with given fields: logger, connection
func (_m *MockConnectionDataBuilder) NewDataConnection(logger *slog.Logger, connection *mgmtv1alpha1.Connection) (ConnectionDataService, error) {
	ret := _m.Called(logger, connection)

	if len(ret) == 0 {
		panic("no return value specified for NewDataConnection")
	}

	var r0 ConnectionDataService
	var r1 error
	if rf, ok := ret.Get(0).(func(*slog.Logger, *mgmtv1alpha1.Connection) (ConnectionDataService, error)); ok {
		return rf(logger, connection)
	}
	if rf, ok := ret.Get(0).(func(*slog.Logger, *mgmtv1alpha1.Connection) ConnectionDataService); ok {
		r0 = rf(logger, connection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ConnectionDataService)
		}
	}

	if rf, ok := ret.Get(1).(func(*slog.Logger, *mgmtv1alpha1.Connection) error); ok {
		r1 = rf(logger, connection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionDataBuilder_NewDataConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDataConnection'
type MockConnectionDataBuilder_NewDataConnection_Call struct {
	*mock.Call
}

// NewDataConnection is a helper method to define mock.On call
//   - logger *slog.Logger
//   - connection *mgmtv1alpha1.Connection
func (_e *MockConnectionDataBuilder_Expecter) NewDataConnection(logger interface{}, connection interface{}) *MockConnectionDataBuilder_NewDataConnection_Call {
	return &MockConnectionDataBuilder_NewDataConnection_Call{Call: _e.mock.On("NewDataConnection", logger, connection)}
}

func (_c *MockConnectionDataBuilder_NewDataConnection_Call) Run(run func(logger *slog.Logger, connection *mgmtv1alpha1.Connection)) *MockConnectionDataBuilder_NewDataConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*slog.Logger), args[1].(*mgmtv1alpha1.Connection))
	})
	return _c
}

func (_c *MockConnectionDataBuilder_NewDataConnection_Call) Return(_a0 ConnectionDataService, _a1 error) *MockConnectionDataBuilder_NewDataConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionDataBuilder_NewDataConnection_Call) RunAndReturn(run func(*slog.Logger, *mgmtv1alpha1.Connection) (ConnectionDataService, error)) *MockConnectionDataBuilder_NewDataConnection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionDataBuilder creates a new instance of MockConnectionDataBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionDataBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionDataBuilder {
	mock := &MockConnectionDataBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
