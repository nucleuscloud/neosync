// Code generated by mockery. DO NOT EDIT.

package awsmanager

import (
	context "context"

	mgmtv1alpha1 "github.com/nucleuscloud/neosync/backend/gen/go/protos/mgmt/v1alpha1"
	mock "github.com/stretchr/testify/mock"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
)

// MockNeosyncAwsManagerClient is an autogenerated mock type for the NeosyncAwsManagerClient type
type MockNeosyncAwsManagerClient struct {
	mock.Mock
}

type MockNeosyncAwsManagerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNeosyncAwsManagerClient) EXPECT() *MockNeosyncAwsManagerClient_Expecter {
	return &MockNeosyncAwsManagerClient_Expecter{mock: &_m.Mock}
}

// GetObject provides a mock function with given fields: ctx, s3Client, region, params
func (_m *MockNeosyncAwsManagerClient) GetObject(ctx context.Context, s3Client *s3.Client, region *string, params *s3.GetObjectInput) (*s3.GetObjectOutput, error) {
	ret := _m.Called(ctx, s3Client, region, params)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 *s3.GetObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3.Client, *string, *s3.GetObjectInput) (*s3.GetObjectOutput, error)); ok {
		return rf(ctx, s3Client, region, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3.Client, *string, *s3.GetObjectInput) *s3.GetObjectOutput); ok {
		r0 = rf(ctx, s3Client, region, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.GetObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3.Client, *string, *s3.GetObjectInput) error); ok {
		r1 = rf(ctx, s3Client, region, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNeosyncAwsManagerClient_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type MockNeosyncAwsManagerClient_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - s3Client *s3.Client
//   - region *string
//   - params *s3.GetObjectInput
func (_e *MockNeosyncAwsManagerClient_Expecter) GetObject(ctx interface{}, s3Client interface{}, region interface{}, params interface{}) *MockNeosyncAwsManagerClient_GetObject_Call {
	return &MockNeosyncAwsManagerClient_GetObject_Call{Call: _e.mock.On("GetObject", ctx, s3Client, region, params)}
}

func (_c *MockNeosyncAwsManagerClient_GetObject_Call) Run(run func(ctx context.Context, s3Client *s3.Client, region *string, params *s3.GetObjectInput)) *MockNeosyncAwsManagerClient_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*s3.Client), args[2].(*string), args[3].(*s3.GetObjectInput))
	})
	return _c
}

func (_c *MockNeosyncAwsManagerClient_GetObject_Call) Return(_a0 *s3.GetObjectOutput, _a1 error) *MockNeosyncAwsManagerClient_GetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNeosyncAwsManagerClient_GetObject_Call) RunAndReturn(run func(context.Context, *s3.Client, *string, *s3.GetObjectInput) (*s3.GetObjectOutput, error)) *MockNeosyncAwsManagerClient_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjectsV2 provides a mock function with given fields: ctx, s3Client, region, params
func (_m *MockNeosyncAwsManagerClient) ListObjectsV2(ctx context.Context, s3Client *s3.Client, region *string, params *s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error) {
	ret := _m.Called(ctx, s3Client, region, params)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectsV2")
	}

	var r0 *s3.ListObjectsV2Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3.Client, *string, *s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error)); ok {
		return rf(ctx, s3Client, region, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3.Client, *string, *s3.ListObjectsV2Input) *s3.ListObjectsV2Output); ok {
		r0 = rf(ctx, s3Client, region, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.ListObjectsV2Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3.Client, *string, *s3.ListObjectsV2Input) error); ok {
		r1 = rf(ctx, s3Client, region, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNeosyncAwsManagerClient_ListObjectsV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjectsV2'
type MockNeosyncAwsManagerClient_ListObjectsV2_Call struct {
	*mock.Call
}

// ListObjectsV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - s3Client *s3.Client
//   - region *string
//   - params *s3.ListObjectsV2Input
func (_e *MockNeosyncAwsManagerClient_Expecter) ListObjectsV2(ctx interface{}, s3Client interface{}, region interface{}, params interface{}) *MockNeosyncAwsManagerClient_ListObjectsV2_Call {
	return &MockNeosyncAwsManagerClient_ListObjectsV2_Call{Call: _e.mock.On("ListObjectsV2", ctx, s3Client, region, params)}
}

func (_c *MockNeosyncAwsManagerClient_ListObjectsV2_Call) Run(run func(ctx context.Context, s3Client *s3.Client, region *string, params *s3.ListObjectsV2Input)) *MockNeosyncAwsManagerClient_ListObjectsV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*s3.Client), args[2].(*string), args[3].(*s3.ListObjectsV2Input))
	})
	return _c
}

func (_c *MockNeosyncAwsManagerClient_ListObjectsV2_Call) Return(_a0 *s3.ListObjectsV2Output, _a1 error) *MockNeosyncAwsManagerClient_ListObjectsV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNeosyncAwsManagerClient_ListObjectsV2_Call) RunAndReturn(run func(context.Context, *s3.Client, *string, *s3.ListObjectsV2Input) (*s3.ListObjectsV2Output, error)) *MockNeosyncAwsManagerClient_ListObjectsV2_Call {
	_c.Call.Return(run)
	return _c
}

// NewDynamoDbClient provides a mock function with given fields: ctx, connCfg
func (_m *MockNeosyncAwsManagerClient) NewDynamoDbClient(ctx context.Context, connCfg *mgmtv1alpha1.DynamoDBConnectionConfig) (*DynamoDbClient, error) {
	ret := _m.Called(ctx, connCfg)

	if len(ret) == 0 {
		panic("no return value specified for NewDynamoDbClient")
	}

	var r0 *DynamoDbClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgmtv1alpha1.DynamoDBConnectionConfig) (*DynamoDbClient, error)); ok {
		return rf(ctx, connCfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgmtv1alpha1.DynamoDBConnectionConfig) *DynamoDbClient); ok {
		r0 = rf(ctx, connCfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DynamoDbClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgmtv1alpha1.DynamoDBConnectionConfig) error); ok {
		r1 = rf(ctx, connCfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNeosyncAwsManagerClient_NewDynamoDbClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewDynamoDbClient'
type MockNeosyncAwsManagerClient_NewDynamoDbClient_Call struct {
	*mock.Call
}

// NewDynamoDbClient is a helper method to define mock.On call
//   - ctx context.Context
//   - connCfg *mgmtv1alpha1.DynamoDBConnectionConfig
func (_e *MockNeosyncAwsManagerClient_Expecter) NewDynamoDbClient(ctx interface{}, connCfg interface{}) *MockNeosyncAwsManagerClient_NewDynamoDbClient_Call {
	return &MockNeosyncAwsManagerClient_NewDynamoDbClient_Call{Call: _e.mock.On("NewDynamoDbClient", ctx, connCfg)}
}

func (_c *MockNeosyncAwsManagerClient_NewDynamoDbClient_Call) Run(run func(ctx context.Context, connCfg *mgmtv1alpha1.DynamoDBConnectionConfig)) *MockNeosyncAwsManagerClient_NewDynamoDbClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*mgmtv1alpha1.DynamoDBConnectionConfig))
	})
	return _c
}

func (_c *MockNeosyncAwsManagerClient_NewDynamoDbClient_Call) Return(_a0 *DynamoDbClient, _a1 error) *MockNeosyncAwsManagerClient_NewDynamoDbClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNeosyncAwsManagerClient_NewDynamoDbClient_Call) RunAndReturn(run func(context.Context, *mgmtv1alpha1.DynamoDBConnectionConfig) (*DynamoDbClient, error)) *MockNeosyncAwsManagerClient_NewDynamoDbClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewS3Client provides a mock function with given fields: ctx, config
func (_m *MockNeosyncAwsManagerClient) NewS3Client(ctx context.Context, config *mgmtv1alpha1.AwsS3ConnectionConfig) (*s3.Client, error) {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for NewS3Client")
	}

	var r0 *s3.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgmtv1alpha1.AwsS3ConnectionConfig) (*s3.Client, error)); ok {
		return rf(ctx, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgmtv1alpha1.AwsS3ConnectionConfig) *s3.Client); ok {
		r0 = rf(ctx, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgmtv1alpha1.AwsS3ConnectionConfig) error); ok {
		r1 = rf(ctx, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNeosyncAwsManagerClient_NewS3Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewS3Client'
type MockNeosyncAwsManagerClient_NewS3Client_Call struct {
	*mock.Call
}

// NewS3Client is a helper method to define mock.On call
//   - ctx context.Context
//   - config *mgmtv1alpha1.AwsS3ConnectionConfig
func (_e *MockNeosyncAwsManagerClient_Expecter) NewS3Client(ctx interface{}, config interface{}) *MockNeosyncAwsManagerClient_NewS3Client_Call {
	return &MockNeosyncAwsManagerClient_NewS3Client_Call{Call: _e.mock.On("NewS3Client", ctx, config)}
}

func (_c *MockNeosyncAwsManagerClient_NewS3Client_Call) Run(run func(ctx context.Context, config *mgmtv1alpha1.AwsS3ConnectionConfig)) *MockNeosyncAwsManagerClient_NewS3Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*mgmtv1alpha1.AwsS3ConnectionConfig))
	})
	return _c
}

func (_c *MockNeosyncAwsManagerClient_NewS3Client_Call) Return(_a0 *s3.Client, _a1 error) *MockNeosyncAwsManagerClient_NewS3Client_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNeosyncAwsManagerClient_NewS3Client_Call) RunAndReturn(run func(context.Context, *mgmtv1alpha1.AwsS3ConnectionConfig) (*s3.Client, error)) *MockNeosyncAwsManagerClient_NewS3Client_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNeosyncAwsManagerClient creates a new instance of MockNeosyncAwsManagerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNeosyncAwsManagerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNeosyncAwsManagerClient {
	mock := &MockNeosyncAwsManagerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
