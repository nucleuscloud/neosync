// Code generated by mockery. DO NOT EDIT.

package stripemocks

import (
	bytes "bytes"

	mock "github.com/stretchr/testify/mock"
	form "github.com/stripe/stripe-go/v79/form"

	stripe "github.com/stripe/stripe-go/v79"
)

// MockBackend is an autogenerated mock type for the Backend type
type MockBackend struct {
	mock.Mock
}

type MockBackend_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBackend) EXPECT() *MockBackend_Expecter {
	return &MockBackend_Expecter{mock: &_m.Mock}
}

// Call provides a mock function with given fields: method, path, key, params, v
func (_m *MockBackend) Call(method string, path string, key string, params stripe.ParamsContainer, v stripe.LastResponseSetter) error {
	ret := _m.Called(method, path, key, params, v)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, stripe.ParamsContainer, stripe.LastResponseSetter) error); ok {
		r0 = rf(method, path, key, params, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBackend_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type MockBackend_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - method string
//   - path string
//   - key string
//   - params stripe.ParamsContainer
//   - v stripe.LastResponseSetter
func (_e *MockBackend_Expecter) Call(method interface{}, path interface{}, key interface{}, params interface{}, v interface{}) *MockBackend_Call_Call {
	return &MockBackend_Call_Call{Call: _e.mock.On("Call", method, path, key, params, v)}
}

func (_c *MockBackend_Call_Call) Run(run func(method string, path string, key string, params stripe.ParamsContainer, v stripe.LastResponseSetter)) *MockBackend_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(stripe.ParamsContainer), args[4].(stripe.LastResponseSetter))
	})
	return _c
}

func (_c *MockBackend_Call_Call) Return(_a0 error) *MockBackend_Call_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackend_Call_Call) RunAndReturn(run func(string, string, string, stripe.ParamsContainer, stripe.LastResponseSetter) error) *MockBackend_Call_Call {
	_c.Call.Return(run)
	return _c
}

// CallMultipart provides a mock function with given fields: method, path, key, boundary, body, params, v
func (_m *MockBackend) CallMultipart(method string, path string, key string, boundary string, body *bytes.Buffer, params *stripe.Params, v stripe.LastResponseSetter) error {
	ret := _m.Called(method, path, key, boundary, body, params, v)

	if len(ret) == 0 {
		panic("no return value specified for CallMultipart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, *bytes.Buffer, *stripe.Params, stripe.LastResponseSetter) error); ok {
		r0 = rf(method, path, key, boundary, body, params, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBackend_CallMultipart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallMultipart'
type MockBackend_CallMultipart_Call struct {
	*mock.Call
}

// CallMultipart is a helper method to define mock.On call
//   - method string
//   - path string
//   - key string
//   - boundary string
//   - body *bytes.Buffer
//   - params *stripe.Params
//   - v stripe.LastResponseSetter
func (_e *MockBackend_Expecter) CallMultipart(method interface{}, path interface{}, key interface{}, boundary interface{}, body interface{}, params interface{}, v interface{}) *MockBackend_CallMultipart_Call {
	return &MockBackend_CallMultipart_Call{Call: _e.mock.On("CallMultipart", method, path, key, boundary, body, params, v)}
}

func (_c *MockBackend_CallMultipart_Call) Run(run func(method string, path string, key string, boundary string, body *bytes.Buffer, params *stripe.Params, v stripe.LastResponseSetter)) *MockBackend_CallMultipart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(*bytes.Buffer), args[5].(*stripe.Params), args[6].(stripe.LastResponseSetter))
	})
	return _c
}

func (_c *MockBackend_CallMultipart_Call) Return(_a0 error) *MockBackend_CallMultipart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackend_CallMultipart_Call) RunAndReturn(run func(string, string, string, string, *bytes.Buffer, *stripe.Params, stripe.LastResponseSetter) error) *MockBackend_CallMultipart_Call {
	_c.Call.Return(run)
	return _c
}

// CallRaw provides a mock function with given fields: method, path, key, body, params, v
func (_m *MockBackend) CallRaw(method string, path string, key string, body *form.Values, params *stripe.Params, v stripe.LastResponseSetter) error {
	ret := _m.Called(method, path, key, body, params, v)

	if len(ret) == 0 {
		panic("no return value specified for CallRaw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, *form.Values, *stripe.Params, stripe.LastResponseSetter) error); ok {
		r0 = rf(method, path, key, body, params, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBackend_CallRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallRaw'
type MockBackend_CallRaw_Call struct {
	*mock.Call
}

// CallRaw is a helper method to define mock.On call
//   - method string
//   - path string
//   - key string
//   - body *form.Values
//   - params *stripe.Params
//   - v stripe.LastResponseSetter
func (_e *MockBackend_Expecter) CallRaw(method interface{}, path interface{}, key interface{}, body interface{}, params interface{}, v interface{}) *MockBackend_CallRaw_Call {
	return &MockBackend_CallRaw_Call{Call: _e.mock.On("CallRaw", method, path, key, body, params, v)}
}

func (_c *MockBackend_CallRaw_Call) Run(run func(method string, path string, key string, body *form.Values, params *stripe.Params, v stripe.LastResponseSetter)) *MockBackend_CallRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(*form.Values), args[4].(*stripe.Params), args[5].(stripe.LastResponseSetter))
	})
	return _c
}

func (_c *MockBackend_CallRaw_Call) Return(_a0 error) *MockBackend_CallRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackend_CallRaw_Call) RunAndReturn(run func(string, string, string, *form.Values, *stripe.Params, stripe.LastResponseSetter) error) *MockBackend_CallRaw_Call {
	_c.Call.Return(run)
	return _c
}

// CallStreaming provides a mock function with given fields: method, path, key, params, v
func (_m *MockBackend) CallStreaming(method string, path string, key string, params stripe.ParamsContainer, v stripe.StreamingLastResponseSetter) error {
	ret := _m.Called(method, path, key, params, v)

	if len(ret) == 0 {
		panic("no return value specified for CallStreaming")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, stripe.ParamsContainer, stripe.StreamingLastResponseSetter) error); ok {
		r0 = rf(method, path, key, params, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBackend_CallStreaming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallStreaming'
type MockBackend_CallStreaming_Call struct {
	*mock.Call
}

// CallStreaming is a helper method to define mock.On call
//   - method string
//   - path string
//   - key string
//   - params stripe.ParamsContainer
//   - v stripe.StreamingLastResponseSetter
func (_e *MockBackend_Expecter) CallStreaming(method interface{}, path interface{}, key interface{}, params interface{}, v interface{}) *MockBackend_CallStreaming_Call {
	return &MockBackend_CallStreaming_Call{Call: _e.mock.On("CallStreaming", method, path, key, params, v)}
}

func (_c *MockBackend_CallStreaming_Call) Run(run func(method string, path string, key string, params stripe.ParamsContainer, v stripe.StreamingLastResponseSetter)) *MockBackend_CallStreaming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(stripe.ParamsContainer), args[4].(stripe.StreamingLastResponseSetter))
	})
	return _c
}

func (_c *MockBackend_CallStreaming_Call) Return(_a0 error) *MockBackend_CallStreaming_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBackend_CallStreaming_Call) RunAndReturn(run func(string, string, string, stripe.ParamsContainer, stripe.StreamingLastResponseSetter) error) *MockBackend_CallStreaming_Call {
	_c.Call.Return(run)
	return _c
}

// SetMaxNetworkRetries provides a mock function with given fields: maxNetworkRetries
func (_m *MockBackend) SetMaxNetworkRetries(maxNetworkRetries int64) {
	_m.Called(maxNetworkRetries)
}

// MockBackend_SetMaxNetworkRetries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMaxNetworkRetries'
type MockBackend_SetMaxNetworkRetries_Call struct {
	*mock.Call
}

// SetMaxNetworkRetries is a helper method to define mock.On call
//   - maxNetworkRetries int64
func (_e *MockBackend_Expecter) SetMaxNetworkRetries(maxNetworkRetries interface{}) *MockBackend_SetMaxNetworkRetries_Call {
	return &MockBackend_SetMaxNetworkRetries_Call{Call: _e.mock.On("SetMaxNetworkRetries", maxNetworkRetries)}
}

func (_c *MockBackend_SetMaxNetworkRetries_Call) Run(run func(maxNetworkRetries int64)) *MockBackend_SetMaxNetworkRetries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockBackend_SetMaxNetworkRetries_Call) Return() *MockBackend_SetMaxNetworkRetries_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBackend_SetMaxNetworkRetries_Call) RunAndReturn(run func(int64)) *MockBackend_SetMaxNetworkRetries_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBackend creates a new instance of MockBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBackend {
	mock := &MockBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
