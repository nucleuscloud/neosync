// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	workflowservice "go.temporal.io/api/workflowservice/v1"
)

// MockNamespaceClient is an autogenerated mock type for the NamespaceClient type
type MockNamespaceClient struct {
	mock.Mock
}

type MockNamespaceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNamespaceClient) EXPECT() *MockNamespaceClient_Expecter {
	return &MockNamespaceClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockNamespaceClient) Close() {
	_m.Called()
}

// MockNamespaceClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockNamespaceClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockNamespaceClient_Expecter) Close() *MockNamespaceClient_Close_Call {
	return &MockNamespaceClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockNamespaceClient_Close_Call) Run(run func()) *MockNamespaceClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNamespaceClient_Close_Call) Return() *MockNamespaceClient_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNamespaceClient_Close_Call) RunAndReturn(run func()) *MockNamespaceClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Describe provides a mock function with given fields: ctx, name
func (_m *MockNamespaceClient) Describe(ctx context.Context, name string) (*workflowservice.DescribeNamespaceResponse, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Describe")
	}

	var r0 *workflowservice.DescribeNamespaceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*workflowservice.DescribeNamespaceResponse, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *workflowservice.DescribeNamespaceResponse); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowservice.DescribeNamespaceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNamespaceClient_Describe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Describe'
type MockNamespaceClient_Describe_Call struct {
	*mock.Call
}

// Describe is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockNamespaceClient_Expecter) Describe(ctx interface{}, name interface{}) *MockNamespaceClient_Describe_Call {
	return &MockNamespaceClient_Describe_Call{Call: _e.mock.On("Describe", ctx, name)}
}

func (_c *MockNamespaceClient_Describe_Call) Run(run func(ctx context.Context, name string)) *MockNamespaceClient_Describe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNamespaceClient_Describe_Call) Return(_a0 *workflowservice.DescribeNamespaceResponse, _a1 error) *MockNamespaceClient_Describe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNamespaceClient_Describe_Call) RunAndReturn(run func(context.Context, string) (*workflowservice.DescribeNamespaceResponse, error)) *MockNamespaceClient_Describe_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, request
func (_m *MockNamespaceClient) Register(ctx context.Context, request *workflowservice.RegisterNamespaceRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.RegisterNamespaceRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNamespaceClient_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockNamespaceClient_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - request *workflowservice.RegisterNamespaceRequest
func (_e *MockNamespaceClient_Expecter) Register(ctx interface{}, request interface{}) *MockNamespaceClient_Register_Call {
	return &MockNamespaceClient_Register_Call{Call: _e.mock.On("Register", ctx, request)}
}

func (_c *MockNamespaceClient_Register_Call) Run(run func(ctx context.Context, request *workflowservice.RegisterNamespaceRequest)) *MockNamespaceClient_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflowservice.RegisterNamespaceRequest))
	})
	return _c
}

func (_c *MockNamespaceClient_Register_Call) Return(_a0 error) *MockNamespaceClient_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNamespaceClient_Register_Call) RunAndReturn(run func(context.Context, *workflowservice.RegisterNamespaceRequest) error) *MockNamespaceClient_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, request
func (_m *MockNamespaceClient) Update(ctx context.Context, request *workflowservice.UpdateNamespaceRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflowservice.UpdateNamespaceRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNamespaceClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockNamespaceClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - request *workflowservice.UpdateNamespaceRequest
func (_e *MockNamespaceClient_Expecter) Update(ctx interface{}, request interface{}) *MockNamespaceClient_Update_Call {
	return &MockNamespaceClient_Update_Call{Call: _e.mock.On("Update", ctx, request)}
}

func (_c *MockNamespaceClient_Update_Call) Run(run func(ctx context.Context, request *workflowservice.UpdateNamespaceRequest)) *MockNamespaceClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflowservice.UpdateNamespaceRequest))
	})
	return _c
}

func (_c *MockNamespaceClient_Update_Call) Return(_a0 error) *MockNamespaceClient_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNamespaceClient_Update_Call) RunAndReturn(run func(context.Context, *workflowservice.UpdateNamespaceRequest) error) *MockNamespaceClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNamespaceClient creates a new instance of MockNamespaceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNamespaceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNamespaceClient {
	mock := &MockNamespaceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
