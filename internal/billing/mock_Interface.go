// Code generated by mockery. DO NOT EDIT.

package billing

import (
	slog "log/slog"

	mock "github.com/stretchr/testify/mock"

	stripe "github.com/stripe/stripe-go/v79"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// GetSubscriptions provides a mock function with given fields: customerId
func (_m *MockInterface) GetSubscriptions(customerId string) SubscriptionIter {
	ret := _m.Called(customerId)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptions")
	}

	var r0 SubscriptionIter
	if rf, ok := ret.Get(0).(func(string) SubscriptionIter); ok {
		r0 = rf(customerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SubscriptionIter)
		}
	}

	return r0
}

// MockInterface_GetSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscriptions'
type MockInterface_GetSubscriptions_Call struct {
	*mock.Call
}

// GetSubscriptions is a helper method to define mock.On call
//   - customerId string
func (_e *MockInterface_Expecter) GetSubscriptions(customerId interface{}) *MockInterface_GetSubscriptions_Call {
	return &MockInterface_GetSubscriptions_Call{Call: _e.mock.On("GetSubscriptions", customerId)}
}

func (_c *MockInterface_GetSubscriptions_Call) Run(run func(customerId string)) *MockInterface_GetSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_GetSubscriptions_Call) Return(_a0 SubscriptionIter) *MockInterface_GetSubscriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_GetSubscriptions_Call) RunAndReturn(run func(string) SubscriptionIter) *MockInterface_GetSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// NewBillingPortalSession provides a mock function with given fields: customerId, accountSlug
func (_m *MockInterface) NewBillingPortalSession(customerId string, accountSlug string) (*stripe.BillingPortalSession, error) {
	ret := _m.Called(customerId, accountSlug)

	if len(ret) == 0 {
		panic("no return value specified for NewBillingPortalSession")
	}

	var r0 *stripe.BillingPortalSession
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*stripe.BillingPortalSession, error)); ok {
		return rf(customerId, accountSlug)
	}
	if rf, ok := ret.Get(0).(func(string, string) *stripe.BillingPortalSession); ok {
		r0 = rf(customerId, accountSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.BillingPortalSession)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(customerId, accountSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_NewBillingPortalSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewBillingPortalSession'
type MockInterface_NewBillingPortalSession_Call struct {
	*mock.Call
}

// NewBillingPortalSession is a helper method to define mock.On call
//   - customerId string
//   - accountSlug string
func (_e *MockInterface_Expecter) NewBillingPortalSession(customerId interface{}, accountSlug interface{}) *MockInterface_NewBillingPortalSession_Call {
	return &MockInterface_NewBillingPortalSession_Call{Call: _e.mock.On("NewBillingPortalSession", customerId, accountSlug)}
}

func (_c *MockInterface_NewBillingPortalSession_Call) Run(run func(customerId string, accountSlug string)) *MockInterface_NewBillingPortalSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockInterface_NewBillingPortalSession_Call) Return(_a0 *stripe.BillingPortalSession, _a1 error) *MockInterface_NewBillingPortalSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_NewBillingPortalSession_Call) RunAndReturn(run func(string, string) (*stripe.BillingPortalSession, error)) *MockInterface_NewBillingPortalSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewCheckoutSession provides a mock function with given fields: customerId, accountSlug, userId, logger
func (_m *MockInterface) NewCheckoutSession(customerId string, accountSlug string, userId string, logger *slog.Logger) (*stripe.CheckoutSession, error) {
	ret := _m.Called(customerId, accountSlug, userId, logger)

	if len(ret) == 0 {
		panic("no return value specified for NewCheckoutSession")
	}

	var r0 *stripe.CheckoutSession
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, *slog.Logger) (*stripe.CheckoutSession, error)); ok {
		return rf(customerId, accountSlug, userId, logger)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, *slog.Logger) *stripe.CheckoutSession); ok {
		r0 = rf(customerId, accountSlug, userId, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.CheckoutSession)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, *slog.Logger) error); ok {
		r1 = rf(customerId, accountSlug, userId, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_NewCheckoutSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCheckoutSession'
type MockInterface_NewCheckoutSession_Call struct {
	*mock.Call
}

// NewCheckoutSession is a helper method to define mock.On call
//   - customerId string
//   - accountSlug string
//   - userId string
//   - logger *slog.Logger
func (_e *MockInterface_Expecter) NewCheckoutSession(customerId interface{}, accountSlug interface{}, userId interface{}, logger interface{}) *MockInterface_NewCheckoutSession_Call {
	return &MockInterface_NewCheckoutSession_Call{Call: _e.mock.On("NewCheckoutSession", customerId, accountSlug, userId, logger)}
}

func (_c *MockInterface_NewCheckoutSession_Call) Run(run func(customerId string, accountSlug string, userId string, logger *slog.Logger)) *MockInterface_NewCheckoutSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(*slog.Logger))
	})
	return _c
}

func (_c *MockInterface_NewCheckoutSession_Call) Return(_a0 *stripe.CheckoutSession, _a1 error) *MockInterface_NewCheckoutSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_NewCheckoutSession_Call) RunAndReturn(run func(string, string, string, *slog.Logger) (*stripe.CheckoutSession, error)) *MockInterface_NewCheckoutSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewCustomer provides a mock function with given fields: req
func (_m *MockInterface) NewCustomer(req *CustomerRequest) (*stripe.Customer, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for NewCustomer")
	}

	var r0 *stripe.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*CustomerRequest) (*stripe.Customer, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*CustomerRequest) *stripe.Customer); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*CustomerRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_NewCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCustomer'
type MockInterface_NewCustomer_Call struct {
	*mock.Call
}

// NewCustomer is a helper method to define mock.On call
//   - req *CustomerRequest
func (_e *MockInterface_Expecter) NewCustomer(req interface{}) *MockInterface_NewCustomer_Call {
	return &MockInterface_NewCustomer_Call{Call: _e.mock.On("NewCustomer", req)}
}

func (_c *MockInterface_NewCustomer_Call) Run(run func(req *CustomerRequest)) *MockInterface_NewCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*CustomerRequest))
	})
	return _c
}

func (_c *MockInterface_NewCustomer_Call) Return(_a0 *stripe.Customer, _a1 error) *MockInterface_NewCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_NewCustomer_Call) RunAndReturn(run func(*CustomerRequest) (*stripe.Customer, error)) *MockInterface_NewCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMeterEvent provides a mock function with given fields: req
func (_m *MockInterface) NewMeterEvent(req *MeterEventRequest) (*stripe.BillingMeterEvent, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for NewMeterEvent")
	}

	var r0 *stripe.BillingMeterEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(*MeterEventRequest) (*stripe.BillingMeterEvent, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*MeterEventRequest) *stripe.BillingMeterEvent); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.BillingMeterEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(*MeterEventRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_NewMeterEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMeterEvent'
type MockInterface_NewMeterEvent_Call struct {
	*mock.Call
}

// NewMeterEvent is a helper method to define mock.On call
//   - req *MeterEventRequest
func (_e *MockInterface_Expecter) NewMeterEvent(req interface{}) *MockInterface_NewMeterEvent_Call {
	return &MockInterface_NewMeterEvent_Call{Call: _e.mock.On("NewMeterEvent", req)}
}

func (_c *MockInterface_NewMeterEvent_Call) Run(run func(req *MeterEventRequest)) *MockInterface_NewMeterEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*MeterEventRequest))
	})
	return _c
}

func (_c *MockInterface_NewMeterEvent_Call) Return(_a0 *stripe.BillingMeterEvent, _a1 error) *MockInterface_NewMeterEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_NewMeterEvent_Call) RunAndReturn(run func(*MeterEventRequest) (*stripe.BillingMeterEvent, error)) *MockInterface_NewMeterEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
